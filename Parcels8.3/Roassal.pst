<?xml version="1.0"?><st-source><!-- Name: RoassalNotice: Copyright (c) 2011-2012 Object ProfilePermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.BundleName: RoassalBundleStructure: a Store.BundleForParcelComment: The public version of our tools is under the MIT License. A different license may apply for a customized version of them. Copyright (c) 2011 - 2013 Object ProfileCopyright (c) 2010 - 2011 Vanessa Pena, Alexandre BergelInformation, tutorials, screencasts and more, can be found athttp://objectprofile.comContact and/or feedback at info@objectprofile.comFollow us on twitter: @ObjectProfileDevelopmentPrerequisites: #(#(#any 'SUnit' '') #(#any 'PNGImageWriter' '') #(#any 'Assets-IDE' '') #(#any 'Compression-Zip' ''))Parcel: nilParcelName: RoassalPrerequisiteDescriptions: #(#(#name 'SUnit' #componentType #package) #(#name 'PNGImageWriter' #componentType #package) #(#name 'Assets-IDE' #componentType #package) #(#name 'Compression-Zip' #componentType #package))PrerequisiteParcels: #(#('SUnit' '') #('PNGImageWriter' '') #('Assets-IDE' '') #('Compression-Zip' ''))Version: 1.514Date: 9:32:21 AM January 6, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10.1 (oct13.1) of October 3, 2013 on January 6, 2014 at 9:32:21 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Roassal</name><environment>Smalltalk</environment><private>false</private><imports>			private Squeak.*			private Smalltalk.*			</imports><category>Roassal</category><attributes><package>Roassal-Core</package></attributes></name-space><class><name>ROEvent</name><environment>Roassal</environment><super>Core.Announcement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCameraEvent</name><environment>Roassal</environment><super>Roassal.ROEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCameraTranslated</name><environment>Roassal</environment><super>Roassal.ROCameraEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROOrthoVerticalLineShapeTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROObject</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROObject</class-id><body>A ROObject is the root of the roassal class hierarchy. The idea to have ROObject is to have an empty initialize and a new on the class side that calls the initialize. This class is particuarly useful in VisualWorks since Object does not has an initialize</body></comment><class><name>ROCommand</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROExportCommand</name><environment>Roassal</environment><super>Roassal.ROCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROExportPNGCommand</name><environment>Roassal</environment><super>Roassal.ROExportCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPunchcardExample</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Punchcard</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLayout</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>affectedNodes translator eventHandler currentIteraction maxInterations iterationsToSendEvent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROLayout</class-id><body>A ROLayout is the superclass of all.Instance Variables	affectedNodes:		&lt;Object&gt;	currentIteraction:		&lt;Object&gt;	eventHandler:		&lt;Object&gt;	maxInterations:		&lt;Object&gt;	translator:		&lt;Object&gt;affectedNodes	- xxxxxcurrentIteraction	- xxxxxeventHandler	- xxxxxmaxInterations	- xxxxxtranslator	- xxxxx</body></comment><class><name>ROAbstractGridLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gapSize lineItemsCountBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCellLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGridLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inCellPosition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROCellLayout</class-id><body>A ROCellLayout is like ROGridLayout. Elements of each column are centered along the same vertical line. And elements of each row are centered along the same horizontal line.Instance Variables	inCellPosition:		&lt;Object | Block&gt;inCellPosition	- Object which computes position of each element inside a cell. The cell is the space allocated for an element. Its height is maximum of heights of elements on the row. Its width is maximum of widths of elements on the column. By default elements are in the middle of their cell.</body></comment><class><name>ROFileOrganizer</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Hooks</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianViewBuilder</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interactionBuilder title shouldHavePopup menu parentBehavior viewStack rawView structureTree currentFrame shapeBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROMondrianViewBuilder</class-id><body>A ROMondrianViewBuilder models the Mondrian Domain Specific Language. It is mostly compatible with the original Mondrian language (cf., Mondrian paper and website).Instance Variables	color:		&lt;Object&gt;	container:		&lt;Object&gt;	height:		&lt;Object&gt;	isLayouted:		&lt;Object&gt;	selfDefinedInteraction:		&lt;Object&gt;	shape:		&lt;Object&gt;	title:		&lt;Object&gt;	width:		&lt;Object&gt;color	- xxxxxcontainer	- xxxxxheight	- xxxxxisLayouted	- xxxxxselfDefinedInteraction	- xxxxxshape	- xxxxxtitle	- xxxxxwidth	- xxxxx</body></comment><class><name>ROLayoutTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORadialTreeLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROForceBasedLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVisitor</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCountingVisitor</name><environment>Roassal</environment><super>Roassal.ROVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nbOfNodes nbOfEdges </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROShape</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color width height colorCache next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROShape</class-id><body>A ROShape represents the graphical representation of an element.Decorator has a color, and they are link together.All the accessors in Mondrian's builder operates on the model.However, outside the builder, shapes accepts roassal elements.For example:-=-=-=-=-=-=-=-=-=-=-=-=testIfFillColor        | nodes |        view shape rectangle                if: #odd fillColor: [ :model | model + 1];                if: #even fillColor: [ :model | model + 10].        nodes := view nodes: #(2 3 4 5 6).        self assert: (nodes collect: [ :n | (n getShape: ROBox) colorFor: n]) = #(12 4 14 6 16)-=-=-=-=-=-=-=-=-=-=-=-=This piece of code works only in the test since a number is not a color. But it illustrates the point.Then fillColor: is defined as:-=-=-=-=-=-=-=-=-=-=-=-=ROMondrianBuilder&gt;&gt;fillColor: aBlockOrSymbol        "aBlockOrSymbol expect to be evaluated against the model. It may either be a symbol or a one-arg block"        shape color: [ :element | aBlockOrSymbol roValue: element model ]-=-=-=-=-=-=-=-=-=-=-=-=Something is left ugly, that I cannot easily remove:-=-=-=-=-=-=-=-=-=-=-=-=ROMondrianBuilder&gt;&gt;if: conditionBlock fillColor: colorBlock        "If conditionBlock is evaluated at true, then colorBlock is used to set the color of the node. Both conditionBlock and colorBlock are evaluated with the model value of the node."        | oldBlockOrValue |        oldBlockOrValue := self fillColor ifNil: [ self defaultFillColor ].        ^self fillColor: [ :aModel | (conditionBlock roValue: aModel)                                                                        ifTrue: [ colorBlock roValue: aModel ]                                                                        ifFalse: [                                                                                "Having to create a new element is rather ugly.                                                                                Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"                                                                                oldBlockOrValue roValue: (ROElement on: aModel) ]].-=-=-=-=-=-=-=-=-=-=-=-=Instance Variables	color:		&lt;Object&gt;	colorCache:		&lt;Object&gt;	next:		&lt;Object&gt;color	- xxxxxcolorCache	- xxxxxnext	- xxxxx</body></comment><class><name>ROBorder</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>strokeWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROBorder</class-id><body>A ROBorder defines a border to be added to an element.Instance Variables	width:		Numberwidth	- Width of the border</body></comment><class><name>ROInnerBorder</name><environment>Roassal</environment><super>Roassal.ROBorder</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROInnerBorder</class-id><body>A ROInnerBorder is a specialization of ROBorder which is drawn inside the shapeRoberto Minelli @ REVEAL, Lugano (CH)roberto.minelli@usi.ch</body></comment><class><name>ROLayoutTranslatorTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements layout view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODirectLayoutTranslatorTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTranslatorTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAction</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORemoveNode</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHorizontalNarrowTreeLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZOrderingTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zordering </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROInteraction</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAnimation</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nbCycles afterBlock remainingCycles strategy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROIncrementalZoomMove</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZoomInMove</name><environment>Roassal</environment><super>Roassal.ROIncrementalZoomMove</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCameraTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>camera2 camera1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractDynamicEdge</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>toAllElements fromAllElements lineShape edges </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROViewStructureTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLineDecoration</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color offset size </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODiamondDecoration</name><environment>Roassal</environment><super>Roassal.ROLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROFocusView</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractPopup</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>receivingView afterCreationBlock </inst-vars><class-inst-vars>popups </class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPopupView</name><environment>Roassal</environment><super>Roassal.ROAbstractPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROScrollableTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view stack horizontalScrollbar verticalScrollbar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROContainer</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements attributes resizeStrategy callback </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractComponent</name><environment>Roassal</environment><super>Roassal.ROContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model eventHandler interactions view parent shape zIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROEdge</name><environment>Roassal</environment><super>Roassal.ROAbstractComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>from to </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVerticalNarrowTreeLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROColorAlphaFading</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element increment alpha </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMiniMap</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>miniMap lupa miniMapWindow targetView miniMapContainer containerSize miniMapDisplayer lupaBack miniMapStack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ManifestRoassal</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAttachPoint</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal-AttachPoint</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLayoutTranslator</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>defaultTranslator </class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROLayoutTranslator</class-id><body>ROLayoutTranslator is used by the layout to translate object. Each layout can be parametrized with a translator to produce a visual effect.I am an abstract class</body></comment><class><name>RODirectLayoutTranslator</name><environment>Roassal</environment><super>Roassal.ROLayoutTranslator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractLabel</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text textVerticalPadding textHorizontalPadding textCache fontSize interlineSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractArrow</name><environment>Roassal</environment><super>Roassal.ROLineDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROArrow</name><environment>Roassal</environment><super>Roassal.ROAbstractArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROArrow</class-id><body>A ROArrow represent an arrow. A ROLine may receive arrows.Instance Variables	color:		&lt;Object&gt;	offset:		&lt;Object&gt;	size:		&lt;Object&gt;color	- Color of the arrowoffset	- float that represent where to put the arrow on a linesize	- size of the arrow</body></comment><class><name>ROReversedArrow</name><environment>Roassal</environment><super>Roassal.ROArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVerticalLineLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZoomOutMove</name><environment>Roassal</environment><super>Roassal.ROIncrementalZoomMove</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractCircleLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialAngle initialIncrementalAngle initialRadius factor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCenteredCircleLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractCircleLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>center </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROComponentEvent</name><environment>Roassal</environment><super>Roassal.ROEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position element realPosition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractMouseDragging</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>step commandKeyPressed controlKeyPressed shiftKeyPressed buttons </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHTMLShapeVisitor</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes stream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROElementTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node draggableNode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROContainingElementTest</name><environment>Roassal</environment><super>Roassal.ROElementTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node2 node3 node1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSVGExample</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Example</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RoassalExporterHTMLTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROEdgeDrivenLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edges userDefinedEdges fromPositions toPositions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractGraphLayout</name><environment>Roassal</environment><super>Roassal.ROEdgeDrivenLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>verticalGap horizontalGap cachedChildren cachedParents cachedParentsWithHighestNestings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSugiyamaLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sortBlock labels layers layerNrs connections </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCanvasWrapperTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONoTextCanvasWrapperTest</name><environment>Roassal</environment><super>Roassal.ROCanvasWrapperTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONullLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RONullLayout</class-id><body>A RONullLayout does not relocate nodes</body></comment><class><name>ROMondrianShapeBuilder</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shape color viewBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROMondrianShapeBuilder</class-id><body>A ROMondrianShapeBuilder is a convenient way to build shapes.Instance Variables	color:		&lt;Object&gt;	shape:		&lt;Object&gt;	viewBuilder:		&lt;Object&gt;color	- xxxxxshape	- xxxxxviewBuilder	- xxxxx</body></comment><class><name>ROElement</name><environment>Roassal</environment><super>Roassal.ROAbstractComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROButtonElement</name><environment>Roassal</environment><super>Roassal.ROElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Widgets</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractRegularTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>alreadyLayoutedNodes topGap leftGap nodesByLayer isLayered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractVerticalTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractRegularTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROGridLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPlatform</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name canvasClass timeOrganizerClass fontOrganizerClass widgetFactory hostVisualElement svgExporterClass imageExporterClass htmlExporterClass serializerClass randomClass newLine </inst-vars><class-inst-vars>current platforms </class-inst-vars><imports></imports><category>Roassal-PlatformIndependent</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROPlatform</class-id><body>A ROPlatform enable to have different canvas rending. For example having athens, morphic or cairo.</body></comment><class><name>ROMouseClick</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>commandKeyPressed controlKeyPressed shiftKeyPressed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORectanglePackingLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>width height matrix rows columns padding ratioWidth ratioHeight logWidth widthStone logHeight heightStone widthScale heightScale resizeStrategy scale </inst-vars><class-inst-vars>scale anInt </class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONarrowTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVerticalNarrowTreeLayout</name><environment>Roassal</environment><super>Roassal.RONarrowTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROParentElementResizeStrategyTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROWiggle</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROEdgeTest</name><environment>Roassal</environment><super>Roassal.ROElementTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view edge node1 node2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROExpandChildrenOnClickTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCircleLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPunchcardBuilder</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models metrics view minColor maxColor popupText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Punchcard</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONAbstractNormalizer</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>command </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONLinearNormalizer</name><environment>Roassal</environment><super>Roassal.RONAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maximumValue context minimumValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROValueLinearNormalizer</name><environment>Roassal</environment><super>Roassal.RONLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minScale maxScale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONFontLinearNormalizer</name><environment>Roassal</environment><super>Roassal.RONLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODynamicEdgeTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view el1 el2 el3 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVisitorTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCountingVisitorTest</name><environment>Roassal</environment><super>Roassal.ROVisitorTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RoassalUI</name><environment>Roassal</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>drawing drawingWrapper position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROController</name><environment>Roassal</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventBeginingDragging elementBeingPointed selection canvas roview animationBlock figureDescription </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROFontOrganizer</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Hooks</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROFontOrganizer</class-id><body>Abstract class that tells about what a font looks like</body></comment><class><name>ROVWFontOrganizer</name><environment>Roassal</environment><super>Roassal.ROFontOrganizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROSugiyamaLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROViewExporter</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSVGExporter</name><environment>Roassal</environment><super>Roassal.ROViewExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORectanglePackLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>freeSpace padding bounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RORectanglePackLayout</class-id><body>A layout that packs rectangles in as amall space as possible (at least it tries to)Instance Variables	padding:	&lt;Number&gt;	freeSpace:	&lt;Set of Rectamgles&gt;	bounds:	&lt;Point&gt;padding	- padding around each elementfreeSpace	- collection of spaces that can be used for next element insertion	bounds	- bounding box of all currently processed elements</body></comment><class><name>ROFixedSizedParentTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROElementEvent</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROElementResized</name><environment>Roassal</environment><super>Roassal.ROElementEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMultipleColorLinearNormalizer</name><environment>Roassal</environment><super>Roassal.RONAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>normalizers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractLineLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gapSize horizontalGap verticalGap horizontalOutGap verticalOutGap alignment horizontallyStretchable verticallyStretchable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHorizontalLineLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractLineLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROHorizontalLineLayout</class-id><body>A ROHorizontalLineLayout locates all the elements horizontally</body></comment><class><name>ROExportHTMLCommand</name><environment>Roassal</environment><super>Roassal.ROExportCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCircleTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROForceBasedLayout</name><environment>Roassal</environment><super>Roassal.ROEdgeDrivenLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layoutInitial oldPositions nodes weights strengths lengths gravity friction theta charge alpha charges strength length fixedNodes center </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROForceBasedLayout</class-id><body>A ROForceBasedLayout is inspired from the Code of D3. The original d3 version may be found on: http://bl.ocks.org/mbostock/4062045Layout algorithm inspired by Tim Dwyer and Thomas Jakobsen.Instance Variables	alpha:		&lt;Object&gt;	center:		&lt;Object&gt;	charge:		&lt;Object&gt;	charges:		&lt;Object&gt;	fixedNodes:		&lt;Object&gt;	friction:		&lt;Object&gt;	gravity:		&lt;Object&gt;	layoutInitial:		&lt;Object&gt;	length:		&lt;Object&gt;	lengths:		&lt;Object&gt;	nodes:		&lt;Object&gt;	oldPositions:		&lt;Object&gt;	strength:		&lt;Object&gt;	strengths:		&lt;Object&gt;	theta:		&lt;Object&gt;	weights:		&lt;Object&gt;alpha	- xxxxxcenter	- xxxxxcharge	- xxxxxcharges	- xxxxxfixedNodes	- xxxxxfriction	- xxxxxgravity	- xxxxxlayoutInitial	- xxxxxlength	- xxxxxlengths	- xxxxxnodes	- xxxxxoldPositions	- xxxxxstrength	- xxxxxstrengths	- xxxxxtheta	- xxxxxweights	- xxxxx</body></comment><class><name>ROHorizontalTreeLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCamera</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position angle realExtent extent windowSize scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROCamera</class-id><body>ROCamera represents the notion of camera. A camera is the point of view from which a view object is actually viewed.  The direction of the camera is always perpendicular to the view. A camera has an altitude. Varying the altitude simulate the zooming facility of Roassal.A view is always associated to a camera. Instance Variables:	position	&lt;Point&gt;			Position of the camera	angle	&lt;Number&gt;	Angle of aperture 	realExtent	&lt;Point&gt;		The far extent. 	extent	&lt;Point&gt;			What we are seeing	windowSize 	&lt;Point&gt;	 The size of the window in which I am displayed</body></comment><class><name>ROCenterViewTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RoassalExporterSVGTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPunchcardBuilderTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder emptyBuilder view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Punchcard</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPlatformTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-PlatformIndependent</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAnimatedResizingTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAnimatedResizingTest</class-id><body>A ROAnimatedResizingTest is a test class for testing the behavior of ROAnimatedResizing</body></comment><class><name>ROViewChanged</name><environment>Roassal</environment><super>Roassal.ROEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAnimationTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view element1 animation1 element2 animation2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROResizeTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROResizeTest</class-id><body>A ROResizeTest is a test class for testing the behavior of ROResize</body></comment><class><name>RONarrowRadialTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMouseEnter</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROImageExporter</name><environment>Roassal</environment><super>Roassal.ROViewExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROArrowTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROKeyDownTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODummyNode</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edge </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RODummyNode</class-id><body>A RODummyNode is used by the sugiyama layout</body></comment><class><name>ROAbstractLabelTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLabelTest</name><environment>Roassal</environment><super>Roassal.ROAbstractLabelTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCameraResized</name><environment>Roassal</environment><super>Roassal.ROCameraEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldBounds newBounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROOrthoHorizontalLineShapeTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSerializerExporter</name><environment>Roassal</environment><super>Roassal.ROViewExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBlinkTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROBlinkTest</class-id><body>A ROBlinkTest is a test class for testing the behavior of ROBlink</body></comment><class><name>ROAbstractExpandChildrenOnClick</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>childrenBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORecursiveExpandOnClick</name><environment>Roassal</environment><super>Roassal.ROAbstractExpandChildrenOnClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMiniMapTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractResizeStrategy</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>padding </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAbstractResizeStrategy</class-id><body>This hierarchy defines how a parent should behave when a child is resized.</body></comment><class><name>ROPermissiveParent</name><environment>Roassal</environment><super>Roassal.ROAbstractResizeStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROPermissiveParent</class-id><body>A ROPermissiveParent is a fixed size of the parent, but does not constraint inner nodes to escape the outter node. This strategy is useful when we temporarily need to add many inner nodes without having to go through all the constraints (e.g., with the Mondrian builder or in the tree map layout)</body></comment><class><name>ROWiggleTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROWiggleTest</class-id><body>A ROWiggleTest is a test class for testing the behavior of ROWiggle</body></comment><class><name>ROPopup</name><environment>Roassal</environment><super>Roassal.ROAbstractPopup</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text textColor box </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROClusterLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>externalLayer maxLayer maxAbcissa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractCompactTree</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sonsDictionary root initialLayout margin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORadialTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractCompactTree</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTranslationTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbsorbLayoutTranslatorTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTranslatorTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROContainerCallbackTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROContainerCallbackTest</class-id><body>A ROContainerCallbackTest is a test class for testing the behavior of ROContainerCallback</body></comment><class><name>ROExtensibleParent</name><environment>Roassal</environment><super>Roassal.ROAbstractResizeStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROExtensibleParent</class-id><body>The parent get expended</body></comment><class><name>ROCanvasWrapper</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHTMLElementShapeVisitor</name><environment>Roassal</environment><super>Roassal.ROHTMLShapeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aNode nodeID nodeParentID </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractPopupTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view popup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPopupViewTest</name><environment>Roassal</environment><super>Roassal.ROAbstractPopupTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>popupView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAnnouncer</name><environment>Roassal</environment><super>Core.Announcer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>forwarding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAnnouncer</class-id><body>A ROAnnouncer is an object that receive and emit events. Each roassal element has an roannouncer. </body></comment><class><name>ROMouseMove</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCircleLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractCircleLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROContainerCallback</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROContainerCallbackNull</name><environment>Roassal</environment><super>Roassal.ROContainerCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHTMLExporter</name><environment>Roassal</environment><super>Roassal.ROViewExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view visitor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROEventTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractLine</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attachPoint arrows strokeWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROOrthoVerticalLineShape</name><environment>Roassal</environment><super>Roassal.ROAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCollectionTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMenuActivable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBox</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderColorCache borderColor borderWidthCache borderWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROBox</class-id><body>A ROBox draws a boxInstance Variables	borderColor:		&lt;Color | BlockContext | Normalizer&gt;	borderColorCache:		&lt;Color&gt;	borderWidth:		&lt;Number | Block&gt;	borderWidthCache:		&lt;Number&gt;borderColor	- could be a block, a color or a normalizer. Used to determine the color of the element being painted	borderColorCache	- used as a cacheborderWidth	- a block or a number that represent the border width.borderWidthCache	- cache of the width</body></comment><class><name>ROTextCache</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text adaptedText lines </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROTextCache</class-id><body>A ROTextCache is holder of cached values related to displayed text by ROAbstractLabel.Instance Variables	adaptedText:		&lt;String&gt;	lines:		&lt;Collection of Strings&gt;	text:		&lt;String&gt;adaptedText	- string returned by ROAbstractLabel&gt;&gt;textAdaptedFor:lines	- collection of lines returned by ROAbstractLabel&gt;&gt;linesOf:text	- string returned by ROAbstractLabel&gt;&gt;textFor:</body></comment><class><name>ROFocusViewTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view camera el1 el2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTracingCanvasTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHorizontalNarrowTreeLayout</name><environment>Roassal</environment><super>Roassal.RONarrowTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMotionMove</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element speedPoint increment initialTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROConstraintTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element1 element2 view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianViewBuilderLayoutTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLineTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROExportSVGCommand</name><environment>Roassal</environment><super>Roassal.ROExportCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTreeMapLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rootNodes weightBlock interactionBlock leafBlock canvas view inset minInset minAreaPerNode nodeBlock baseZIndex splitPercentages weightsCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROTreeMapLayout</class-id><body>A ROTreeMapLayout locates the element as a treeInstance Variables	baseZIndex:		&lt;Object&gt;	canvas:		&lt;Object&gt;	inset:		&lt;Object&gt;	interactionBlock:		&lt;Object&gt;	leafBlock:		&lt;Object&gt;	minAreaPerNode:		&lt;Object&gt;	minInset:		&lt;Object&gt;	nodeBlock:		&lt;Object&gt;	rootNodes:		&lt;Object&gt;	splitPercentages:		&lt;Object&gt;	view:		&lt;Object&gt;	weightBlock:		&lt;Object&gt;	weightsCache:		&lt;Object&gt;baseZIndex	- xxxxxcanvas	- xxxxxinset	- xxxxxinteractionBlock	- xxxxxleafBlock	- xxxxxminAreaPerNode	- xxxxxminInset	- xxxxxnodeBlock	- xxxxxrootNodes	- xxxxxsplitPercentages	- xxxxxview	- xxxxxweightBlock	- xxxxxweightsCache	- xxxxx</body></comment><class><name>ROOrthoHorizontalLineShape</name><environment>Roassal</environment><super>Roassal.ROAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROExpandChildrenOnClick</name><environment>Roassal</environment><super>Roassal.ROAbstractExpandChildrenOnClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROElementTranslated</name><environment>Roassal</environment><super>Roassal.ROElementEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAllConnectedNodeDraggable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCell</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements columns element number rowHeights columnWidths </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROImageTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVWSVGExporter</name><environment>Roassal</environment><super>Roassal.ROSVGExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROVWHTMLExporter</name><environment>Roassal</environment><super>Roassal.ROHTMLExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROVWEaselTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>easel builder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>RoassalIcons</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>RONativeExampleUtility</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Hooks</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVWExampleUtility</name><environment>Roassal</environment><super>Roassal.RONativeExampleUtility</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROControllerTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>RONativeWidgetFactory</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Hooks</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RONativeWidgetFactory</class-id><body>RONativeWidgetFactory is useful to create a ROMorph or ROVWVisual, depending on where the platform is running</body></comment><class><name>ROVWWidgetFactory</name><environment>Roassal</environment><super>Roassal.RONativeWidgetFactory</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROLayoutEvent</name><environment>Roassal</environment><super>Roassal.ROEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layout elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLayoutStep</name><environment>Roassal</environment><super>Roassal.ROLayoutEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentIteration maxInterations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractLayout</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPaint</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROGrowable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROGrowable</class-id><body>A ROGrowable makes the object grow when clicking on it.</body></comment><class><name>ROHorizontalAttachPoint</name><environment>Roassal</environment><super>Roassal.ROAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-AttachPoint</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMouseDragged</name><environment>Roassal</environment><super>Roassal.ROAbstractMouseDragging</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODynamicEdge</name><environment>Roassal</environment><super>Roassal.ROAbstractDynamicEdge</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMouseRightClick</name><environment>Roassal</environment><super>Roassal.ROMouseClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTreeLayerWrapper</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedHeight cachedWidth elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROTreeLayerWrapper</class-id><body>This class holds all figures that belong to the same layer. The class also contains auxiliary informationlike width and height of the layer.Instance Variables:	cachedHeight	&lt;ArithmeticValue&gt;	The height of the layer	cachedWidth	&lt;ArithmeticValue&gt;	The widht of the layer	figures	&lt;Collection of: AtlantisFigure&gt;	All figures that belong to this layer</body></comment><class><name>ROAbstractAdjustSize</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAdjustSizeOfNesting</name><environment>Roassal</environment><super>Roassal.ROAbstractAdjustSize</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractHorizontalTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractRegularTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHorizontalTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractHorizontalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROReversedRadialTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGraphLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>externalLayer maxLayer maxAbcissa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROGraphTransformationTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Transformation</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianFrame</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent view shape layout elements children interactionBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROMondrianFrame</class-id><body>The Mondrian specific language structures a visualization as a tree (using nodes:forEach:). A ROMondrianFrame is an element of this tree. A frame correspond to what has to be pushed and popup.It also contains funcionalities to lookup nodes.Instance Variables	children:		&lt;ROMondrianFrameS&gt;	elements:		&lt;ROElementS&gt;	interactions:		&lt;Object&gt;	layout:		&lt;Object&gt;	parent:		&lt;Object&gt;	shape:		&lt;Object&gt;	view:		&lt;Object&gt;children	- the list of children frameselements	- elements (nodes and edges) that are defined in the frame	interactions	- xxxxxlayout	- xxxxxparent	- xxxxxshape	- xxxxxview	- xxxxx</body></comment><class><name>RORemoveEdge</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROQuadTreeTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nodes quad </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHighlightElementTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVerticalAttachPoint</name><environment>Roassal</environment><super>Roassal.ROAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-AttachPoint</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZoomOnClickTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODraggableTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node draggableNode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianCacheTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROFixedSizedParent</name><environment>Roassal</environment><super>Roassal.ROAbstractResizeStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROFixedSizedParent</class-id><body>The size of the parent is fixed. Inner nodes cannot escape the outter element when they are dragged away.</body></comment><class><name>ROLayoutEnd</name><environment>Roassal</environment><super>Roassal.ROLayoutEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAllRecursivelyConnectedNodeDraggable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLayoutBegin</name><environment>Roassal</environment><super>Roassal.ROLayoutEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROScrollable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractCanvas</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>camera extent nativeCanvas offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAbstractCanvas</class-id><body>A ROAbstractCanvas is the abstract class of the canvases. In the core of Roassal, it has only one subclass, RONullCanvas. The platform package should subclass ROAbstractCanvas.Instance Variables	camera:		&lt;ROCamera&gt;	canvas:		&lt;Object&gt;	extent:		&lt;Point&gt;camera	- xxxxxcanvas	- xxxxxextent	- xxxxx</body></comment><class><name>ROTracingCanvas</name><environment>Roassal</environment><super>Roassal.ROAbstractCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>trace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROTracingCanvas</class-id><body>A ROTracingCanvas records all the drawing operations. It is essentially used by the testInstance Variables	trace:		&lt;Array&gt;trace	- list of drawing operations performed on the canvas</body></comment><class><name>ROAbstractAnimationMergeStrategy</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAbstractAnimationMergeStrategy</class-id><body>A ROAbstractAnimationMergeStrategy is a hierarchy of merging strategy for animation. Each animation has a merging strategy.</body></comment><class><name>ROAnimationAppend</name><environment>Roassal</environment><super>Roassal.ROAbstractAnimationMergeStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAnimationAppend</class-id><body>A ROAbstractAnimationAppend means that an animation is simply added to the queue kept in the view. This is the default strategy</body></comment><class><name>ROMouseLeftClick</name><environment>Roassal</environment><super>Roassal.ROMouseClick</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROShrikingSize</name><environment>Roassal</environment><super>Roassal.ROAbstractAdjustSize</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONumberLinearNormalizer</name><environment>Roassal</environment><super>Roassal.RONLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROFunctionMove</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element blockX blockY </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROView</name><environment>Roassal</environment><super>Roassal.ROContainer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>camera eventHandler title backgroundColor animations elementsToRender zOrdering renderedElementsToBeRemoved renderedElementsToBeAdded </inst-vars><class-inst-vars>nullView </class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROView</class-id><body>ROView is the main container of all Roassal objects. A view contains elements, typically instances of ROElement and ROEdges. It has also a camera that indicates what is currently visible. A view also contains animations that are currently operating. A view has a title, which is used when displayed in a window.ROView is an essential class.elementsToRender is the list of elements that are displayed. It contains a sorted collection of associations. Each association has a number of a key, and a collection of elements as a value. The key number corresponds to the zIndex. Elements with a low zIndex are displayed first.Instance Variables:	camera	&lt;ROCamera&gt;	eventHandler	&lt;ROAnnouncer&gt;	title	&lt;ProtoObject&gt;	backgroundColor	&lt;Color&gt;	animations	&lt;(Collection of: ROAnimation)&gt;	elementsToRender	&lt;SequenceableCollection&gt;	zOrdering	&lt;ROZOrdering&gt;Class Instance Variables:	nullView	&lt;ProtoObject&gt;</body></comment><class><name>ROTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractVerticalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCountingNullCanvas</name><environment>Roassal</environment><super>Roassal.ROAbstractCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberOfRectangles numberOfLines numberOfImages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROCountingNullCanvas</class-id><body>A ROCountingNullCanvas is essentially used in the tests.Instance Variables	numberOfImages:		&lt;Object&gt;	numberOfLines:		&lt;Object&gt;	numberOfRectangles:		&lt;Object&gt;numberOfImages	- amount of images that have been displayednumberOfLines	- amount of lines that have been renderednumberOfRectangles	- amount of rectangles that have been rendered</body></comment><class><name>RONColorLinearNormalizer</name><environment>Roassal</environment><super>Roassal.RONLinearNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minBrightness maxBrightness lowColor highColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHTMLEdgeShapeVisitor</name><environment>Roassal</environment><super>Roassal.ROHTMLShapeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idNodeFrom idNodeTo edge </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROKeyDown</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keyValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSVGCanvas</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream view camera bounds stringOffset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractBezierCurve</name><environment>Roassal</environment><super>Roassal.ROAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORemoveEdgeTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>el1 el2 el3 view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONullShape</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RONullShape</class-id><body>A RONullShape is the terminator of the shape chain. A new element will have an instance of null shape in it.</body></comment><class><name>ROCountingNullCanvasTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROElementTranslatedTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROElementTranslatedTest</class-id><body>A ROElementTranslatedTest is a test class for testing the behavior of ROElementTranslated</body></comment><class><name>Color</name><environment>Smalltalk</environment><super>Graphics.ColorValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-VW</category><attributes><package>Roassal-VWUtil</package></attributes></class><class><name>ROImage</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVerticalArrow</name><environment>Roassal</environment><super>Roassal.ROAbstractArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROReversedVerticalArrow</name><environment>Roassal</environment><super>Roassal.ROVerticalArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBorderTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROResize</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROResize</class-id><body>A ROResize is a general utility class to perform various operations regarding resizing</body></comment><class><name>ROVerticalLineLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractLineLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROVerticalLineLayout</class-id><body>A ROVerticalLineLayout locates all the elements vertically</body></comment><class><name>ROLinearMove</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>increment element finalPosition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROLinearMove</class-id><body>ROLinearMove moves an element in a number of cycles.Example of usage:-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	| view el |	view := ROView new.	el := ROElement sprite.	view add: el.	view on: ROMouseLeftClick do: [ :event | 		ROLinearMove new			nbCycles: 180;			for: el to: event position.	].	view open.-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</body></comment><class><name>ROGraphTransformation</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Transformation</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROGraphTransformation</class-id><body>A ROGraphTransformation performs some graph transformation. Really handing when you wish to transform an edge-based graph to a nesting-based one.</body></comment><class><name>ROAnimatedResizing</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>increment finalSize element </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSmoothLayoutTranslator</name><environment>Roassal</environment><super>Roassal.ROLayoutTranslator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>move nbCycles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTranslation</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberOfCycles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROTranslation</class-id><body>A ROFunctionMove is just a test, is not a complete interaction yet :)</body></comment><class><name>ROPopupTest</name><environment>Roassal</environment><super>Roassal.ROAbstractPopupTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>el </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTimelyAnimation</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>duration afterBlock strategy startingTime startedTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLinearMoveT</name><environment>Roassal</environment><super>Roassal.ROTimelyAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element initialPosition finalPosition newPosition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROIdentityMatrix</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rows </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROIdentityMatrix</class-id><body>A ROIdentityMatrix is essentially used by the sugiyama tree layout</body></comment><class><name>ROHorizontalLineLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZoomIntoElementOnClick</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stack view recursive </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROViewDisplayer</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROViewDisplayer</class-id><body>ROViewDisplayer is a shape that is used to display a view. It simply wraps a view into a shape.Instance Variables:	view	&lt;ROView&gt;</body></comment><class><name>ROZoomIntoElementOnClickTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAllRecursivelyConnectedNodeDraggableTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAllRecursivelyConnectedNodeDraggableTest</class-id><body>A ROAllRecursivelyConnectedNodeDraggableTest is a test class for testing the behavior of ROAllRecursivelyConnectedNodeDraggable</body></comment><class><name>ROLinearMoveTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROLinearMoveTest</class-id><body>A ROLinearMoveTest is a test class for testing the behavior of ROLinearMove</body></comment><class><name>RODominanceTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractVerticalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RODominanceTreeLayout</class-id><body>The dominance tree layout is similar to a regular tree layout, only it poses a stronger condition in the way it places a node: a child is placed under the deepest parent. This layout is for example useful when identifying layers of dependencies.Note: the layout is slower than the tree layout because of the more complex lookup</body></comment><class><name>RORadialBezierCurve</name><environment>Roassal</environment><super>Roassal.ROAbstractBezierCurve</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCollectingVisitor</name><environment>Roassal</environment><super>Roassal.ROVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edges nodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLoadViewCommand</name><environment>Roassal</environment><super>Roassal.ROCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZoomMove</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>camera incrementX1Y1 incrementX2Y2 topLeft bottomRight view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLabel</name><environment>Roassal</environment><super>Roassal.ROAbstractLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBlink</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROVWImageExporter</name><environment>Roassal</environment><super>Roassal.ROImageExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>RONormalizerSpecificTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROTimeOrganizer</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Hooks</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROTimeOrganizer</class-id><body>Abstract class for the time passing.</body></comment><class><name>ROVWTime</name><environment>Roassal</environment><super>Roassal.ROTimeOrganizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROVWPlatform</name><environment>Roassal</environment><super>Roassal.ROPlatform</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROStrokePaint</name><environment>Roassal</environment><super>Roassal.ROPaint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>joinStyle capStyle width </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>RODraggable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBasicZOrdering</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMotionMoveTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSVGPathTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pathShape view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBOSSExporter</name><environment>Roassal</environment><super>Roassal.ROSerializerExporter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROShapeCache</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>extent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONopAnimation</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RONopAnimation</class-id><body>RONopAnimation is a do nothing animation. Useful to simulate a pause between two animations</body></comment><class><name>ROEllipse</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderColor borderWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROEllipse</class-id><body>A ROCircle draws a circle</body></comment><class><name>ROShapeTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROWindowResized</name><environment>Roassal</environment><super>Roassal.ROEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldExtent extent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSVGPath</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>path lines borderWidth borderColor setToAdjustElement svg zoom </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROSVGPath</class-id><body>A ROSVGPath is a shape that render polygons represented using SVG path description</body></comment><class><name>RODraggableWithVelocity</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHorizontalArrow</name><environment>Roassal</environment><super>Roassal.ROAbstractArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROReversedHorizontalArrow</name><environment>Roassal</environment><super>Roassal.ROHorizontalArrow</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHTMLVisitor</name><environment>Roassal</environment><super>Roassal.ROVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idsDic idCount nodesStream linksStream shapeVisitor edgeVisitor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Visitor</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCenteredAttachPoint</name><environment>Roassal</environment><super>Roassal.ROAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-AttachPoint</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSortBlock</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROSortBlock</class-id><body>A ROSortBlock is used by the Sugiyama layout</body></comment><class><name>ROOrderedCollection</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZoomOnClick</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONoTextCanvasWrapper</name><environment>Roassal</environment><super>Roassal.ROCanvasWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAllConnectedNodeDraggableTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAllConnectedNodeDraggableTest</class-id><body>A ROAllConnectedNodeDraggableTest is a test class for testing the behavior of ROAllConnectedNodeDraggable</body></comment><class><name>ROTreeMapLayoutTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROColorTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAttachPointTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view el1 el2 edge shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-AttachPoint-Test</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROQuadTree</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>charge x y leaf nodes origin corner node cx cy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLightlyHighlightable</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>highlightColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROLightlyHighlightable</class-id><body>A ROLightlyHighlightable is a decorator that highlights the element when the mouse is over it.</body></comment><class><name>ROMenuElement</name><environment>Roassal</environment><super>Roassal.ROElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actionDictionary targetObject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Widgets</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBoxTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPluggableContainerCallback</name><environment>Roassal</environment><super>Roassal.ROContainerCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars>addingBlock removingBlock removingAllBlock childrenHasBeenResized </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RORubberBand</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tmpLine tmpElement dropAction targetSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAnnouncerTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>announcer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROGridLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractGridLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROGridLayout</class-id><body>A ROGridLayout places elements as a grid.Instance Variables	gapSize:		&lt;SmallInteger&gt;	lineItemsCountBlock:		&lt;BlockContext&gt;gapSize	- number of pixels between each elements, horizontally and verticallylineItemsCountBlock	- tells the amount of item per line should be used</body></comment><class><name>ROContainerCallbackLayout</name><environment>Roassal</environment><super>Roassal.ROContainerCallback</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layout </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROExample</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Example</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROExample</class-id><body>A ROExample contains a list of example of Roassal. It does not contains examples on the builder. </body></comment><class><name>ROViewTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node1 view emptyView node2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROViewStackTest</name><environment>Roassal</environment><super>Roassal.ROViewTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROShrinkingParent</name><environment>Roassal</environment><super>Roassal.ROAbstractResizeStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROShrinkingParent</class-id><body>A ROShrinkingParent is the minimum it can have according to the children it has</body></comment><class><name>ROScatterplotLayout</name><environment>Roassal</environment><super>Roassal.ROLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>horizontalPadding verticalPadding xBlock yBlock xOffset yOffset upSideDown scaleFactorX scaleFactorY scaledToWidth scaledToHeight </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROScatterplotLayout</class-id><body>A ROScatterplotLayout plots each element along a X-Y planInstance Variables	horizontalPadding:		&lt;Object&gt;	scaleFactorX:		&lt;Object&gt;	scaleFactorY:		&lt;Object&gt;	scaledToHeight:		&lt;Object&gt;	scaledToWidth:		&lt;Object&gt;	upSideDown:		&lt;Object&gt;	verticalPadding:		&lt;Object&gt;	xBlock:		&lt;Object&gt;	xOffset:		&lt;Object&gt;	yBlock:		&lt;Object&gt;	yOffset:		&lt;Object&gt;horizontalPadding	- xxxxxscaleFactorX	- xxxxxscaleFactorY	- xxxxxscaledToHeight	- xxxxxscaledToWidth	- xxxxxupSideDown	- xxxxxverticalPadding	- xxxxxxBlock	- xxxxxxOffset	- xxxxxyBlock	- xxxxxyOffset	- xxxxx</body></comment><class><name>ROPluggableAnimation</name><environment>Roassal</environment><super>Roassal.ROAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block nbIterationsBeforeRefresh nbIterations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROPluggableAnimationT</name><environment>Roassal</environment><super>Roassal.ROTimelyAnimation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block nbIterationsBeforeRefresh nbIterations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROFlowLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMiniMapDisplayer</name><environment>Roassal</environment><super>Roassal.ROViewDisplayer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>camera factor canvasWrapper originalCameraRealExtent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODecoratorTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box label element box2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RODynamicFadingEdge</name><environment>Roassal</environment><super>Roassal.ROAbstractDynamicEdge</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSaveViewCommand</name><environment>Roassal</environment><super>Roassal.ROCommand</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Exporter</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractFlowLayout</name><environment>Roassal</environment><super>Roassal.ROEdgeDrivenLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxWidth gapSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROBottomFlowLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractFlowLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONullCanvas</name><environment>Roassal</environment><super>Roassal.ROAbstractCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.RONullCanvas</class-id><body>A RONullCanvas is a null canvas. Useful when testing.</body></comment><class><name>ROVerticalLaggeredTree</name><environment>Roassal</environment><super>Roassal.ROAbstractCompactTree</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbsorbLayoutTranslator</name><environment>Roassal</environment><super>Roassal.ROLayoutTranslator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAddNameTest</name><environment>Roassal</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>element view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSelection</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter inclusionAction exclusionAction selectedElements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianScatterLayoutTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCenteredLabelTest</name><environment>Roassal</environment><super>Roassal.ROAbstractLabelTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROGrow</name><environment>Roassal</environment><super>Roassal.ROAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Actions</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROZOrdering</name><environment>Roassal</environment><super>Roassal.ROBasicZOrdering</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mapping </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROTriangle</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderColorCache borderColor borderWidthCache borderWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHorizontalDominanceTreeLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractHorizontalTreeLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROHorizontalDominanceTreeLayout</class-id><body>The dominance tree layout is similar to a regular tree layout, only it poses a stronger condition in the way it places a node: a child is placed under the deepest parent. This layout is for example useful when identifying layers of dependencies.Note: the layout is slower than the tree layout because of the more complex lookup</body></comment><class><name>RORefreshNeeded</name><environment>Roassal</environment><super>Roassal.ROEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAbstractCanvasTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROFlowLayout</name><environment>Roassal</environment><super>Roassal.ROAbstractFlowLayout</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCellLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCenteredLabel</name><environment>Roassal</environment><super>Roassal.ROAbstractLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMenuElementTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emptyMenu menu counter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Widgets-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONormalizerTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLine</name><environment>Roassal</environment><super>Roassal.ROAbstractLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONativeExampleUtilityTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Hooks-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianViewBuilderTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view window node </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian-Tests</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROMondrianViewBuilderTest</class-id><body>A ROMondrianViewBuilderTest is a test class for testing the behavior of ROMondrianViewBuilder</body></comment><class><name>ROPopupMondrianTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMouseLeave</name><environment>Roassal</environment><super>Roassal.ROComponentEvent</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROLayoutSteppingTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROConstraint</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROConstraint</class-id><body>A ROConstraint is a utility class that contains methods to position elements against others.</body></comment><class><name>ROVWVisual</name><environment>Roassal</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements view window controller extent graphicsContext canvas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROVWEasel</name><environment>Roassal</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>drawing drawingWrapper code roView view moView isCairoCanvas platform </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROVWCanvas</name><environment>Roassal</environment><super>Roassal.ROAbstractCanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form path paint </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROMondrianExample</name><environment>Roassal</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Example</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROMondrianExample</class-id><body>Example for the Mondrian builder</body></comment><class><name>ROVWMondrianExample</name><environment>Roassal</environment><super>Roassal.ROMondrianExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROShorterDistanceAttachPoint</name><environment>Roassal</environment><super>Roassal.ROAttachPoint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>offset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-AttachPoint</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROMondrianInteractionBuilder</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selfDefinedInteraction viewBuilder shouldHavePopup </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Builder-Mondrian</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROMondrianInteractionBuilder</class-id><body>A ROMondrianInteractionBuilder is a builder for interaction.Instance Variables	selfDefinedInteraction:		&lt;Object&gt;	shouldHavePopup:		&lt;Object&gt;	viewBuilder:		&lt;Object&gt;selfDefinedInteraction	- xxxxxshouldHavePopup	- xxxxxviewBuilder	- xxxxx</body></comment><class><name>RODiamond</name><environment>Roassal</environment><super>Roassal.ROShape</super><private>false</private><indexed-type>none</indexed-type><inst-vars>borderColorCache borderColor borderWidthCache borderWidth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROHTMLAssets</name><environment>Roassal</environment><super>Core.Assets</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Roassal-VWSpecific</package></attributes></class><class><name>ROTreeLayoutTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROViewStack</name><environment>Roassal</environment><super>Roassal.ROView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>views </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Core</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROViewStack</class-id><body>A ROViewStack is a stack of views. It is usually used to contains menus and popup, triggered by the added view. This is convenient to not have the buttons or popup be under the effect of zooming in and out.Inserting elements in the stack makes the elements not subject to the variation of the camera for the added views.Here an example:| stack view el1 el2 |view := ROView new.el1 := (ROEllipse red size: 30) element.view add: el1. el1 @ RODraggable.el1 translateTo: 100 @ 100.stack := ROViewStack new.stack zoomInButton; zoomOutButton.el2 := (ROEllipse green size: 30) element.el2 @ RODraggable.stack add: el2.stack addView: view.stack open</body></comment><class><name>ROMouseDragging</name><environment>Roassal</environment><super>Roassal.ROAbstractMouseDragging</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Event</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONIdentityNormalizer</name><environment>Roassal</environment><super>Roassal.RONAbstractNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dictionary colorIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>RONExplicitIdentityNormalizer</name><environment>Roassal</environment><super>Roassal.RONIdentityNormalizer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colors defaultColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Normalizers</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAddName</name><environment>Roassal</environment><super>Roassal.ROInteraction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROCellMatrix</name><environment>Roassal</environment><super>Roassal.ROObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nrows ncols contents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROAnimationExclusive</name><environment>Roassal</environment><super>Roassal.ROAbstractAnimationMergeStrategy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction</category><attributes><package>Roassal-Core</package></attributes></class><comment><class-id>Roassal.ROAnimationExclusive</class-id><body>A ROAnimationExclusive replaces all other animation for the element</body></comment><class><name>RORemoveNodeTest</name><environment>Roassal</environment><super>Roassal.ROTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Interaction-Tests</category><attributes><package>Roassal-Core</package></attributes></class><class><name>ROSmoothLayoutTranslatorTest</name><environment>Roassal</environment><super>Roassal.ROLayoutTranslatorTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Roassal-Layout-Tests</category><attributes><package>Roassal-Core</package></attributes></class><shared-variable><name>Instance</name><environment>Roassal.RORefreshNeeded</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal-Core</package></attributes></shared-variable><shared-variable><name>NbOfExecutions</name><environment>Roassal.RODraggable</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal-Core</package></attributes></shared-variable><shared-variable><name>Recursion</name><environment>Roassal.ROAbstractBezierCurve</environment><private>false</private><constant>false</constant><category>class variables</category><initializer>nil</initializer><attributes><package>Roassal-Core</package></attributes></shared-variable><methods><class-id>Roassal.ROEvent</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	"Empty constructor"</body></methods><methods><class-id>Roassal.ROEvent class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">new	^ self basicNew initialize</body></methods><methods><class-id>Roassal.ROCameraTranslated</class-id> <category>as yet unclassified</category><body package="Roassal-Core">step	^step </body><body package="Roassal-Core">step: aPoint	step := aPoint</body></methods><methods><class-id>Roassal.ROTest</class-id> <category>utility</category><body package="Roassal-VWSpecific">assert: actual equals: expected	self assert: expected = actual</body></methods><methods><class-id>Roassal.ROTest</class-id> <category>asserting</category><body package="Roassal-Core">validateShouldntException: exception	"Override strange method from TestCase"</body></methods><methods><class-id>Roassal.ROOrthoVerticalLineShapeTest</class-id> <category>tests</category><body package="Roassal-Core">testDrawOnFor	| view el1 el2 edge |	view := ROView new.	el1 := ROBox element.	el2 := ROBox element.	edge := ROEdge from: el1 to: el2.	edge + (ROOrthoVerticalLineShape new color: [:e | Color red ]).	view add: el1; add: el2; add: edge.	ROGridLayout on: (Array with: el1 with: el2).	self shouldnt: [ view drawOn: ROTracingCanvas new ] raise: Error.</body></methods><methods><class-id>Roassal.ROObject</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize</body></methods><methods><class-id>Roassal.ROObject class</class-id> <category>instance creation</category><body package="Roassal-Core">new	^ self basicNew initialize</body></methods><methods><class-id>Roassal.ROCommand</class-id> <category>accessing</category><body package="Roassal-Core">name	^name</body></methods><methods><class-id>Roassal.ROExportCommand</class-id> <category>execute</category><body package="Roassal-Core">executeOn: view	self prepareViewForExport: view.	self exportView: view.</body><body package="Roassal-Core">exportView: view	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROExportCommand</class-id> <category>util</category><body package="Roassal-Core">prepareViewForExport"	canvas camera windowSize: view encompassingRectangle bottomRight.	canvas view: view.	canvas addStart."</body><body package="Roassal-Core">prepareViewForExport: view	view makeAllElementAsRendered.</body></methods><methods><class-id>Roassal.ROExportCommand class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">commands	|commands|	commands := OrderedCollection new.	self subclasses do:[:cl | commands add: cl new].	^commands </body></methods><methods><class-id>Roassal.ROExportPNGCommand</class-id> <category>execute</category><body package="Roassal-Core">exportView: view	ROPlatform current imageExporterClass exportViewAsPNG: view</body></methods><methods><class-id>Roassal.ROExportPNGCommand</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	name := 'Export as PNG'</body></methods><methods><class-id>Roassal.ROPunchcardExample</class-id> <category>example</category><body package="Roassal-Core">example"self new example"builder := ROPunchcardBuilder new.builder addModels: #( 'hello' 'world' 'hello world' ).builder addMetric: [:word | word size] namedAs: 'length'.builder open</body><body package="Roassal-Core">example2"self new example2"builder := ROPunchcardBuilder new.builder addModels: #( 'hello' 'world' 'hello world' ).builder addMetric: [:word | word size] namedAs: 'length'.builder addMetric: [:word | word size * 2 ] namedAs: 'length 2'.builder open.</body><body package="Roassal-Core">example3"self new example3"builder := ROPunchcardBuilder new.builder addModels: #( 'hello' 'world' 'hello world' ).builder addMetric: [:word | word size] namedAs: 'length'.builder addMetric: [:word | word size * 2 ] namedAs: 'length 2'.builder minColor: Color green.builder maxColor: Color red.builder open.</body><body package="Roassal-Core">example4"self new example4"builder := ROPunchcardBuilder new.builder addModels: (ROObject withAllSubclasses copyFrom: 3 to: 9).builder addMetric: [ :c | c numberOfMethods + 5] namedAs: 'NOM'.builder addMetric: [ :c | c numberOfVariables * 5 ] namedAs: 'NOA'.builder addMetric: [ :c | c numberOfSubclasses * 5  ] namedAs: 'NOS'.builder popupText: [ :class :metricName :value | 'The value of ', metricName, ' for ', class name, ' is ', value asString ].builder minColor: Color green.builder maxColor: Color red.builder open.</body></methods><methods><class-id>Roassal.ROLayout</class-id> <category>hook</category><body package="Roassal-Core">applyOn: elements	"Return quickly if there is nothing to do"	elements isEmpty ifTrue: [ ^ self ].	self executeOnElements: elements</body><body package="Roassal-Core">doExecute: elements	"Performs the layout"	self subclassResponsibility</body><body package="Roassal-Core">doInitialize: elements	"Method executed before beginning the layout. Useful when the graph to be ordered need to be prepared"	self announce: (ROLayoutBegin new elements: elements).</body><body package="Roassal-Core">doPost: elements	"Method executed after performing the layout"	self announce: (ROLayoutEnd new elements: elements).</body><body package="Roassal-Core">on: elements	self applyOn: elements</body><body package="Roassal-Core">on: elements edges: edges	self applyOn: elements</body><body package="Roassal-Core">resizeStrategyFor: elements	"Return the resize strategy of these elements. This method assumes that all the elements have the same parent."	^ elements anyOne parent resizeStrategy</body></methods><methods><class-id>Roassal.ROLayout</class-id> <category>events</category><body package="Roassal-Core">announce: anEvent	"trigger an event. Objects who registered to me will get notified"	| eventToBeSent |	eventToBeSent := anEvent isBehavior 						ifTrue: [ anEvent new ]						ifFalse: [ anEvent ]. 		eventToBeSent layout: self.	eventHandler announce: eventToBeSent</body><body package="Roassal-Core">on: eventClass do: aBlock	"Register a block as an handler for eventClass"		eventHandler when: eventClass do: aBlock.</body><body package="Roassal-Core">step	currentIteraction := currentIteraction + 1.	(currentIteraction \\ self iterationsToSendEvent) = 0 		ifTrue: [ self announce: (ROLayoutStep new 											currentIteration: currentIteraction;											maxInterations: maxInterations) ].	</body></methods><methods><class-id>Roassal.ROLayout</class-id> <category>accessing</category><body package="Roassal-Core">executeOnElements: elements 	"Execute the layout, myself, on the elements"			maxInterations := elements size.	self doInitialize: elements.	self doExecute: elements asOrderedCollection.	self doPost: elements.</body><body package="Roassal-Core">iterationsToSendEvent	"This method return the amount of iterations before sending ROLayoutStep"	^ iterationsToSendEvent</body><body package="Roassal-Core">iterationsToSendEvent: anInteger	iterationsToSendEvent := anInteger</body><body package="Roassal-Core">translator	^ translator</body><body package="Roassal-Core">translator: t	translator := t</body></methods><methods><class-id>Roassal.ROLayout</class-id> <category>padding</category><body package="Roassal-Core">paddingFor: elements	^ (self resizeStrategyFor: elements) padding</body><body package="Roassal-Core">paddingLeftFor: elements	^ (self resizeStrategyFor: elements) paddingLeft</body><body package="Roassal-Core">paddingTopFor: elements	^ (self resizeStrategyFor: elements) paddingTop</body></methods><methods><class-id>Roassal.ROLayout</class-id> <category>configuration</category><body package="Roassal-Core">defaultIterationsToSendEvent	"Every 100 steps an event ROLayoutStep is sent"	^ 100</body></methods><methods><class-id>Roassal.ROLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	translator := ROLayoutTranslator default.	eventHandler := ROAnnouncer new.	currentIteraction := 0.	maxInterations := 0.	iterationsToSendEvent := self defaultIterationsToSendEvent </body></methods><methods><class-id>Roassal.ROLayout class</class-id> <category>public</category><body package="Roassal-Core">isAbstract	^ self name =  #ROLayout</body><body package="Roassal-Core">isNotAbstract	^ self isAbstract not</body><body package="Roassal-Core">on: aCollection	"main entry point of the class"		"If aCollection is empty, then there is not much to do"	aCollection isEmpty ifTrue: [ ^ aCollection ].	self new applyOn: aCollection.	^ aCollection</body><body package="Roassal-Core">on: elements edges: edges	"To make all the layout polymorphic"		^ self on: elements </body><body package="Roassal-Core">onElement: aRoassalViewOrRoassalElement	^ self on: aRoassalViewOrRoassalElement elements</body><body package="Roassal-Core">onView: aRoassalView	^ self on: aRoassalView elements</body></methods><methods><class-id>Roassal.ROAbstractGridLayout</class-id> <category>accessing</category><body package="Roassal-Core">defaultLineItemsCount		^ [ :elements | 			| height width |			(elements size &lt; 3 				ifTrue: [ (elements size max: 1) @ 1 ]				ifFalse: 					[ height := (elements size * 0.618034) sqrt ceiling truncated.					width := (elements size / height) ceiling truncated.					width @ height ]) x ]</body><body package="Roassal-Core">gapSize		^gapSize</body><body package="Roassal-Core">gapSize: anInteger	gapSize := anInteger</body><body package="Roassal-Core">lineItemsCount: aBlock		lineItemsCountBlock := aBlock</body><body package="Roassal-Core">lineItemsCountBlock		^ lineItemsCountBlock</body></methods><methods><class-id>Roassal.ROAbstractGridLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">defaultGapSize	^ 5</body><body package="Roassal-Core">initialize	super initialize.	gapSize := self defaultGapSize.	lineItemsCountBlock := self defaultLineItemsCount.</body></methods><methods><class-id>Roassal.ROAbstractGridLayout class</class-id> <category>instance creation</category><body package="Roassal-Core">withGap: anInteger 	^ self new 			gapSize: anInteger; 			yourself</body><body package="Roassal-Core">withGap: anInteger withLineItemsCount: aBlock		^self new		gapSize: anInteger;		lineItemsCount: aBlock;		yourself</body><body package="Roassal-Core">withLineItemsCount: aBlock		^self new		lineItemsCount: aBlock;		yourself</body></methods><methods><class-id>Roassal.ROAbstractGridLayout class</class-id> <category>public</category><body package="Roassal-Core">isAbstract	^ self name =  #ROAbstractGridLayout</body><body package="Roassal-Core">on: aCollectionOfElements withGap: anInteger withLineItemsCount: aBlock	"place the elements in a grid with (aBlock roValue: aCollectionOfElements) as the amount of elements horizontally"		| myLayout |	myLayout := self new gapSize: anInteger;  lineItemsCount: aBlock; yourself.	myLayout applyOn: aCollectionOfElements.	^ aCollectionOfElements</body><body package="Roassal-Core">on: aCollectionOfElements withLineItemsCount: aBlock	"place the elements in a grid with (aBlock roValue: aCollectionOfElements) as the amount of elements horizontally	For example:	self on: (ROElement forCollection: (1 to: 20)) withLineItemsCount: 5	=&gt; place the 20 elements on a grid 5 x 4		self on: (ROElement forCollection: (1 to: 20)) withLineItemsCount: [ :elements | elements size // 3 ]	=&gt; place the 20 elements on a grid 3 x 7	"			| myLayout |	myLayout := self new lineItemsCount: aBlock; yourself.	myLayout applyOn: aCollectionOfElements.	^ aCollectionOfElements</body></methods><methods><class-id>Roassal.ROCellLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements 	| pointer lineItemCount lineItemSize cell |	lineItemSize := self lineItemsCountBlock roValue: elements.	cell := ROCell elements: elements columns: lineItemSize.	pointer := self gapSize @ self gapSize.	lineItemCount := 0.	elements withIndexDo: 		[ :element :index | | inCellPointer |		cell element: element; number: index.		inCellPointer := inCellPosition roValue: cell.		translator translate: element to: pointer + inCellPointer.		pointer := (pointer x + cell extent x + (self gapSize * 2)) @ pointer y.		lineItemCount := lineItemCount + 1.		lineItemCount &gt;= lineItemSize ifTrue: 			[ pointer := self gapSize @ (pointer y + (self gapSize * 2) + cell extent y).			lineItemCount := 0 ].		self step ]</body></methods><methods><class-id>Roassal.ROCellLayout</class-id> <category>accessing</category><body package="Roassal-Core">inCellPosition: anObjectOrOneArgBlock	inCellPosition := anObjectOrOneArgBlock</body><body package="Roassal-Core">leftCentred	self inCellPosition: [ :cell | 0 @ ((cell extent y - cell element height) / 2) ]</body></methods><methods><class-id>Roassal.ROCellLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	inCellPosition :=  [ :cell |		((cell extent x - cell element width) / 2) @ ((cell extent y - cell element height) / 2)]</body></methods><methods><class-id>Roassal.ROFileOrganizer class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">current	^self allSubclasses first </body><body package="Roassal-Core">deleteFile: aFilename	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>interactions</category><body package="Roassal-Core">createNewInteractionBuilder	interactionBuilder := ROMondrianInteractionBuilder initializeOn: self.	interactionBuilder popupText.</body><body package="Roassal-Core">interaction	"For compatibility with Mondrian"	^ interactionBuilder</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>edges</category><body package="Roassal-Core">addEdge: edge	"private"	| commonParentNode frameOfCommonNode |	commonParentNode := (edge from mostSpecificParentCommonWith: edge to).	commonParentNode add: edge.		frameOfCommonNode := structureTree frameOfElement: commonParentNode.	frameOfCommonNode addEdge: edge</body><body package="Roassal-Core">addEdgeIn: aCollection from: source to: target model: model shape: aShape	"Mondrian interface."	| edge |			(source notNil and: [ target notNil ]) ifTrue: 		[ (source ~= target) ifTrue: [ "An edge is between two different nodes "			edge := ROEdge from: source to: target.			edge model: model.			edge + aShape.			(source mostSpecificParentCommonWith: target) add: edge.			aCollection addLast: edge ] ]</body><body package="Roassal-Core">addEdges: edges	"private"	edges do: [ :e | self addEdge: e ]</body><body package="Roassal-Core">buildEdgeFrom: fromNode to: toNode for: anObject	"Shape is not initialized here"		| edge |	edge := (ROEdge on: anObject from: fromNode to: toNode) + self getShape copy.	interactionBuilder applyToElement: edge.	^ edge</body><body package="Roassal-Core">edge: object from: fromBlock to: toBlock	"Add an edge going from (fromBlock roValue: object) to (toBlock roValue: object)"		^ self edgeFromAssociation: ((fromBlock roValue: object) -&gt; (toBlock roValue: object))	</body><body package="Roassal-Core">edge: object toAll: toAllBlock	"- object is the object from which the edges are defined from.	- toAllBlock will be called similarly to return a collection of destination correpsonding to each source."	^ self edges: (Array with: object) from: #yourself toAll: toAllBlock</body><body package="Roassal-Core">edgeFromAssociation: assoc	"Create an edge from an association	e.g.,		view nodes: #(1 2).	view edgeFromAssociation: 1 -&gt; 2.	" 	| edge |	(assoc key isNil or: [ assoc value isNil ]) ifTrue: [ ^ nil ].	(assoc key == assoc value) ifTrue: [ ^ nil ].		self prepareForNewEdge.	edge := self rawEdgeFromAssociation: assoc.	edge notNil ifTrue: [ self addEdge: edge ].	self unsetShape.	^ edge</body><body package="Roassal-Core">edgeShape	"Compatibility from Mondrian"	^ self getShape</body><body package="Roassal-Core">edges: objects from: fromBlock to: toBlock	"-  aCollectionOfEntities is the collection of from which the edges are defined from.	- aFromBlock will be called on each element of the collection and return one edge source each time.	- aToBlock will be called on each element of the collection and return the destination node.	Note that there is no restriction on the elements of aCollection, as long as aFromBlock returns a node.	"	| edges |	edges :=  self rawEdges: objects from: fromBlock to: toBlock.	self addEdges: edges.	^ edges</body><body package="Roassal-Core">edges: objects from: fromBlock toAll: toAllBlock	"- objects is the collection of from which the edges are defined from.	- fromBlock will be called on each entity of the collection and return one edge source each time.	- toAllBlock will be called similarly to return a collection of destination correpsonding to each source.	Note that there is no restriction on the entities of aCollection, as long as aFromBlock returns a node and aToBlock returns a collection of nodes.	For example:	  aView edges: someFamixInvocations from: #sender toAll: #candidates	Or:		| collection |	collection := #(1 2 3 4 5 6 7 8 9 10).	view shape label.	view nodes: collection.	view edges: collection from: #yourself toAll: (collection select: #odd).	view circleLayout			aToBlock should return a collection, edges will be drawn from the entity returned by aFromBlock to this collection"		| associations |	associations := OrderedCollection new.	objects do: [ :obj |		| from |		from := fromBlock roValue: obj.		(toAllBlock roValue: obj) do: [:to | 			associations add: (from -&gt; to)		]	].	^ self edgesFromAssociations: associations</body><body package="Roassal-Core">edges: aCollectionOfEntities from: aFromBlock toAll: aToBlock using: aShape fromGlobal: fromGlobal toGlobal: toGlobal 	"Mondrian interface.	Same than edges:from:toAll:using: but the lookup can be particularized	fromGlobal and toGlobal are boolean values"	| source target edges targetModels |	edges := OrderedCollection new.	aCollectionOfEntities do: 		[ :each | 			self flag: #lookuNode:gobally:.			source := self lookup: (aFromBlock roValue: each).			targetModels := aToBlock roValue: each.			self				assert: [targetModels isCollection or: [targetModels isNil]]				description: 'destination nodes is not a collection'.			targetModels ifNotNil: [				targetModels do: [ :targetModel | 					target := self lookup: targetModel .					self addEdgeIn: edges from: source to: target model: each shape: aShape ]]].	self flag: 'self resetInteraction'.	self flag: 'self root resetElementsToDisplayCacheRecursively'.	^ edges</body><body package="Roassal-Core">edges: objects fromAll: fromAllBlock to: toBlock		| associations |	associations := OrderedCollection new.	objects do: [ :obj |		| to |		to := toBlock roValue: obj.		(fromAllBlock roValue: obj) do: [:from | 			associations add: (from -&gt; to)		]	].	^ self edgesFromAssociations: associations</body><body package="Roassal-Core">edgesFrom: symbolOrBlock	"The message edgesFrom: defines one edge per node. For each node that has been added in the visualization, an edge is defined between this node and a node lookup from the provided block."	| edges |	edges := self rawEdgesFrom: symbolOrBlock.	self addEdges: edges.	^ edges</body><body package="Roassal-Core">edgesFrom: fromBlock to: toBlock	"-  aCollectionOfEntities is the collection of from which the edges are defined from.	- aFromBlock will be called on each element of the collection and return one edge source each time.	- aToBlock will be called on each element of the collection and return the destination node.	Note that there is no restriction on the elements of aCollection, as long as aFromBlock returns a node.	"	^ self edges: ((rawView elementsSuchThat: #isNotEdge) collect: #model) from: fromBlock to: toBlock</body><body package="Roassal-Core">edgesFromAssociations: associations	| answer edge interestingEdges |		self prepareForNewEdge.	interestingEdges := associations select: [ :assoc | 						assoc key notNil and: [ assoc value notNil ] ].	interestingEdges := interestingEdges select: [ :assoc |						assoc key ~~ assoc value ].						answer := interestingEdges collect: [ :assoc | 		edge := self rawEdgeFromAssociation: assoc.		edge notNil ifTrue: [ self addEdge: edge ].				edge ].	self unsetShape.	^ answer</body><body package="Roassal-Core">edgesToAll: symbolOrBlock	| edges |	edges := self rawEdgesToAll: symbolOrBlock.	edges do: [ :e | self addEdge: e ].	^ edges</body><body package="Roassal-Core">prepareForNewEdge	self needToSetup ifTrue: 		[ self setLineShapeIfNecessary ]</body><body package="Roassal-Core">rawEdgeFromAssociation: assoc	| from to |	from := self lookup: assoc key.	to := self lookup: assoc value.	(from isNil or: [ to isNil ])		ifTrue: [ ^ nil ].	^ self buildEdgeFrom: from to: to for: assoc</body><body package="Roassal-Core">rawEdges: objects from: symbolOrBlockFrom to: symbolOrBlockTo	| edges alreadyCreatedEdges |	edges := OrderedCollection new.	alreadyCreatedEdges := IdentityDictionary new.	self prepareForNewEdge.	objects 		do: [ :obj | 			| from to |			from := self lookup: (symbolOrBlockFrom roValue: obj).			to := self lookup: (symbolOrBlockTo roValue: obj).			((from notNil and: [ to notNil ]) and: [ from ~~ to ])				ifTrue: [ 					alreadyCreatedEdges at: from model ifAbsentPut: [ IdentitySet new ].										((alreadyCreatedEdges at: from model) includes: to model) not						ifTrue: [ 							(alreadyCreatedEdges at: from model) add: to model.							edges add: (self buildEdgeFrom: from to: to for: obj) ] ] ].	self unsetShape.	^ edges</body><body package="Roassal-Core">rawEdgesFrom: symbolOrBlockFrom	^ self rawEdgesFrom: symbolOrBlockFrom to: #yourself</body><body package="Roassal-Core">rawEdgesFrom: symbolOrBlockFrom to: symbolOrBlockTo	^ self 		rawEdges: (rawView elementsNotEdge collect: [:e | e model]) 		from: symbolOrBlockFrom 		to: symbolOrBlockTo</body><body package="Roassal-Core">rawEdgesToAll: symbolOrBlock	| edges values v |	edges := OrderedCollection new.	self prepareForNewEdge.	rawView		elementsNotEdge do: [ :el | 			values := symbolOrBlock roValue: el model.			rawView				elementsDo: [ :el2 | 					v := values detect: [ :n | n == el2 model ] ifNone: [ nil ].					(v notNil and: [ el ~~ el2 ]) ifTrue: [ edges add: (self buildEdgeFrom: el to: el2 for: el2) ] ] ].	self unsetShape.	^ edges</body><body package="Roassal-Core">removeAllEdgesFrom: anObject	|edges|	edges := (self elementFromModel: anObject) allEdgesFrom.	edges do: [ :ed |		(currentFrame frameOfElement: ed) removeElement: ed.		ed remove.		 ].	</body><body package="Roassal-Core">removeAllEdgesFromNodes: objects	objects do:[:ob |			self removeAllEdgesFrom: ob 		].</body><body package="Roassal-Core">removeAllEdgesTo: anObject	|edges|	edges := (self elementFromModel: anObject) allEdgesTo.	edges do: [ :ed |		(currentFrame frameOfElement: ed) removeElement: ed.		ed remove.		 ].	</body><body package="Roassal-Core">removeAllEdgesToNodes: objects	objects do:[:ob |			self removeAllEdgesTo: ob 		].</body><body package="Roassal-Core">setLineShapeIfNecessary	"If no shape for edge is defined, then we set up a default one"	self getShape ifNil: [ self shape line ]</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>stack</category><body package="Roassal-Core">currentFrame	^ currentFrame</body><body package="Roassal-Core">initFrame		structureTree := ROMondrianFrame newFrom: self.	structureTree parent: structureTree.	currentFrame :=  structureTree</body><body package="Roassal-Core">lastFrame	^ structureTree last</body><body package="Roassal-Core">numberOfFrames	"number of children of the root node"	^ structureTree numberOfFrames</body><body package="Roassal-Core">pop	rawView := currentFrame view.	self setShape: currentFrame shape.	self createNewInteractionBuilder.	currentFrame := currentFrame parent</body><body package="Roassal-Core">prepareStack	structureTree isEmpty ifTrue: [ self push ]</body><body package="Roassal-Core">push		| newFrame |	newFrame := ROMondrianFrame newFrom: self.		currentFrame addChild: newFrame.	newFrame parent: currentFrame.		currentFrame := newFrame.</body><body package="Roassal-Core">structureTree	^ structureTree</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>layout</category><body package="Roassal-Core">bottomFlowLayout	^ self layout: ROBottomFlowLayout new</body><body package="Roassal-Core">cellLayout		^ self layout: (ROCellLayout new gapSize: 2)</body><body package="Roassal-Core">circleLayout	^ self layout: ROCircleLayout new</body><body package="Roassal-Core">dominanceTreeLayout	self setEdgesAttachPoint: ROVerticalAttachPoint.	^self layout: RODominanceTreeLayout new</body><body package="Roassal-Core">flowLayout	^ self layout: ROFlowLayout new</body><body package="Roassal-Core">forceBasedLayout		^ self layout: ROForceBasedLayout new</body><body package="Roassal-Core">gridLayout		^ self layout: (ROGridLayout new gapSize: 2)		</body><body package="Roassal-Core">horizontalDominanceTreeLayout	self setEdgesAttachPoint: ROHorizontalAttachPoint.	^self layout: ROHorizontalDominanceTreeLayout new</body><body package="Roassal-Core">horizontalLineLayout	^ self layout: ROHorizontalLineLayout new</body><body package="Roassal-Core">horizontalNarrowTreeLayout	^ self layout: ROHorizontalNarrowTreeLayout new</body><body package="Roassal-Core">horizontalTreeLayout	self setEdgesAttachPoint: ROHorizontalAttachPoint.	^self layout: ROHorizontalTreeLayout new.</body><body package="Roassal-Core">narrowTreeLayout	^ self layout: ROVerticalNarrowTreeLayout new.</body><body package="Roassal-Core">noLayout	^ self layout: RONullLayout	</body><body package="Roassal-Core">radialNarrowTreeLayout		^ self layout: RONarrowRadialTreeLayout new</body><body package="Roassal-Core">radialTreeLayout		^ self layout: RORadialTreeLayout new</body><body package="Roassal-Core">scatterPlotLayout		^ self layout: ROScatterplotLayout new</body><body package="Roassal-Core">sugiyamaLayout	self setEdgesAttachPoint: ROVerticalAttachPoint.	^ self layout: ROSugiyamaLayout new	</body><body package="Roassal-Core">treeLayout	self setEdgesAttachPoint: ROVerticalAttachPoint.	^ self layout: ROTreeLayout new</body><body package="Roassal-Core">verticalLineLayout	^ self layout: ROVerticalLineLayout new.	</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>shapes</category><body package="Roassal-Core">homogenerizeShapeOf: element	"The way shapes are defined in Mondrian builder, all the shape need to have the same size"	| maxExtent |	maxExtent := 0 @ 0.	element shapesDo: [ :shape |  maxExtent := (shape extentFor: element) max: maxExtent ].	element extent: maxExtent</body><body package="Roassal-Core">setShape: aShape	self shape setShape: aShape.</body><body package="Roassal-Core">shape	^ shapeBuilder</body><body package="Roassal-Core">shape: aShape	self setShape: aShape</body><body package="Roassal-Core">unsetShape	self setShape: nil.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>accessing</category><body package="Roassal-Core">edgeFromModel: aModelObject	^ self raw edgeFromModel: aModelObject</body><body package="Roassal-Core">edges	^ self raw elementsSuchThat: [ :v | v class == ROEdge ]</body><body package="Roassal-Core">elementFromModel: aModelObject	^ self raw elementFromModel: aModelObject</body><body package="Roassal-Core">elementsFromModels: objects	^ self raw elementsFromModels: objects</body><body package="Roassal-Core">getShape	^ self shape getShape.</body><body package="Roassal-Core">nodes	^ self raw elementsSuchThat: [ :v | v class == ROElement ]</body><body package="Roassal-Core">nodesAndEdges	^ rawView elementsSuchThat: [ :v | true ]</body><body package="Roassal-Core">raw	^ rawView</body><body package="Roassal-Core">root	^ self </body><body package="Roassal-Core">stack	^ viewStack</body><body package="Roassal-Core">stack: aStack	"This method is essentially used in the VW Easel. It should not be existing actually"	viewStack := aStack</body><body package="Roassal-Core">title	"Return a string"		^ title</body><body package="Roassal-Core">title: aString	"Define the title of the view"	title := aString</body><body package="Roassal-Core">view	"This method is made to have the builder, roelement and roview polymorphic. Useful in the class ROPopupView"	^ self raw</body><body package="Roassal-Core">view: aView	rawView := aView</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>nodes</category><body package="Roassal-Core">extensibleSize	parentBehavior := ROExtensibleParent instance</body><body package="Roassal-Core">extensibleSizeWithPaddingGap: aNumber	parentBehavior := ROExtensibleParent new paddingGap: aNumber; yourself</body><body package="Roassal-Core">fixedSize	parentBehavior := ROFixedSizedParent instance</body><body package="Roassal-Core">fixedSizeWithPaddingGap: aNumber	parentBehavior := ROFixedSizedParent new paddingGap: aNumber; yourself</body><body package="Roassal-Core">lookup: anObject	"Return the node that has the object as model"		| ans |	ans := self raw elementsSuchThat: [ :n | n isEdge not and: [n model == anObject ] ].	ans isEmpty ifTrue: [ ^ self nestedLookup: anObject ].	ans size ~= 1 ifTrue: [ self error: 'Several candidates' ].	^ ans first</body><body package="Roassal-Core">nestedLookup: anObject	"Return the node that has the object as model, it goes "		self raw elementsDo: [ :el | 		| t |		t := self nestedLookup: anObject in: el.		t ifNotNil: [ ^ t ] ].	^ nil</body><body package="Roassal-Core">nestedLookup: anObject in: aNode	"Return the node that has the object as model, it goes "		| ans |	(aNode model = anObject)		ifTrue: [ ^ aNode ].			aNode elementsDo: [ :n | 		| t |		t := self nestedLookup: anObject in: n.		t ifNotNil: [ ^ t ] ].		^ nil. 		</body><body package="Roassal-Core">node: object	"Add a new node to the view"	^ (self nodes: (Array with: object)) first</body><body package="Roassal-Core">node: object forIt: aBlock	^ (self nodes: (Array with: object) forEach: [ :v | aBlock value ]) first</body><body package="Roassal-Core">nodes: objects	| els |	self assert: [ objects isCollection] description: 'Should provide a collection as parameter'.			self prepareForNewNode.		els := ROElement forCollection: objects.	els do: [ :el | 		el + self getShape chainedCopy @ RODraggable. 		self homogenerizeShapeOf: el.		el extent: (el extent max: (5 @ 5)).		el resizeStrategy: parentBehavior ].		interactionBuilder applyToElements: els.		self assert: [ els allSatisfy: [ :e | e model notNil ] ].	rawView addAll: els.	self unsetShape.		self createNewInteractionBuilder.	currentFrame addElements: els.	^ els</body><body package="Roassal-Core">nodes: objects forEach: aBlock	"Create a set of nodes, each representing an element of objects. Each node then acts as a view on its own."	| nodes oldResizeStrategy |	nodes := self nodes: objects.			nodes do: [ :n | 		self push.		self horizontalLineLayout.				rawView := n.		self createNewInteractionBuilder.				oldResizeStrategy := n resizeStrategy.		n resizeStrategy: (ROPermissiveParent new padding: oldResizeStrategy padding).		aBlock roValue: n model.		n resizeStrategy: oldResizeStrategy.				n adjustSizeIfNecessary.		self pop.		 ].	self unsetShape.	^ nodes</body><body package="Roassal-Core">prepareForNewNode	self needToSetup ifTrue: 		[ self setNodeShapeIfNecessary ].	parentBehavior ifNil: [ parentBehavior := ROExtensibleParent instance ]</body><body package="Roassal-Core">removeNode: anObject	self removeNodes: (Array with: anObject)</body><body package="Roassal-Core">removeNodes: objects	|elements|	self assert: [ objects isCollection] description: 'Should provide a collection as parameter'.	elements := self raw elementsFromModels: objects.	currentFrame removeElements: elements.	elements do: [:el | 		el remove ].	</body><body package="Roassal-Core">removeNodesAndEdgesOf: objects	self removeAllEdgesFromNodes: (2 to: 4). 	self removeAllEdgesToNodes: (2 to: 4).	self removeNodes: (2 to: 4).</body><body package="Roassal-Core">setNodeShapeIfNecessary	"If no shape for node is defined, then we set up a default one"	self getShape ifNil: [ self shape rectangle ]</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>initialize</category><body package="Roassal-Core">createMondrianView	"Creating the view that will contain all the nodes and edges"		| v |	v := ROView titled: title.	v @RODraggable @ RODraggableWithVelocity.	^ v</body><body package="Roassal-Core">defaultHeight	"Default height of a node"		^ 5</body><body package="Roassal-Core">defaultWidth	"Default width of a node"		^ 5</body><body package="Roassal-Core">initialize	self initializeWithTitle: ROView defaultWindowTitle.</body><body package="Roassal-Core">initializeWithRoassalView: aView	self initializeWithTitle: ROView defaultWindowTitle roassalView: aView</body><body package="Roassal-Core">initializeWithTitle: aTitleAsString	self initializeWithTitle: aTitleAsString roassalView: self createMondrianView.</body><body package="Roassal-Core">initializeWithTitle: aTitleAsString roassalView: aView	super initialize.	shapeBuilder := ROMondrianShapeBuilder initializeOn: self.	self createNewInteractionBuilder.		title := aTitleAsString.	rawView := aView.	aView title: title.	"Not strictly necessary apparently"	aView zOrdering: self zOrdering.			shouldHavePopup := true.	self initFrame.		viewStack := ROViewStack new addView: rawView; title: rawView title.	self setNodeShapeIfNecessary.	self horizontalLineLayout.</body><body package="Roassal-Core">needToSetup	^ self getShape isNil</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>layout - operating</category><body package="Roassal-Core">applyLayout	structureTree applyLayout.</body><body package="Roassal-Core">center	currentFrame layout on: ROLayoutEnd do: [ :event| ROFocusView centerView: rawView ].</body><body package="Roassal-Core">layout: aLayout	currentFrame layout: aLayout.	^ aLayout </body><body package="Roassal-Core">setEdgesAttachPoint: attachPointClass		self edges do: [ :ed | 		(ed isShapedAs: ROShape) 			ifTrue: [				(ed getShape: ROShape) attachPoint: attachPointClass instance ]			ifFalse: [ ROLine new color: self shape color; attachPoint: attachPointClass instance ] ]</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>compatibility</category><body package="Roassal-Core">addUserCommand: anArray 	"TODO"</body><body package="Roassal-Core">fromPositions: v	"For compatibility reason"</body><body package="Roassal-Core">toPositions: v	"For compatibility reason"</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>todo</category><body package="Roassal-Core">withoutBackground</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>zOrdering</category><body package="Roassal-Core">zOrdering	^ (ROZOrdering new			setZIndex: [:edge | ((edge source depth * 2) max: (edge target depth * 2)) - 1 ] if: #isEdge;			setZIndex: [ :element | element depth * 2 ] if: #isNotEdge).</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>opening</category><body package="Roassal-Core">open	"Open the view. Return the system window opened"	| win |	win := viewStack open.	self applyLayout.	^ win</body><body package="Roassal-Core">openInWindowSized: extent	"Open the view. Return the system window opened"	| win |	win := viewStack openInWindowSized: extent.	self applyLayout.	^ win</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>menu</category><body package="Roassal-Core">addMenu: aTitle callBack: aBlock	self stack addMenu: aTitle callBack: aBlock</body><body package="Roassal-Core">exportButton	self addMenu: 'Export' callBack: [ :stack | 		| exporters index|		exporters := SortedCollection  sortBlock: [ :a1 :a2 | a1 key &lt; a2 key ].		ROExportCommand commands do: [:cm | exporters add: cm name -&gt; cm ] .				index := UIManager default chooseFrom: (exporters collect: #key).		index &gt; 0 ifTrue: [ 	(exporters at: index) value executeOn: self raw ]	]</body><body package="Roassal-Core">populateBasicNavigationMenu	self exportButton.	self zoomInButton.	self zoomOutButton.		"We also do a small scrolling to not have the buttons over the nodes"	self raw translateBy: 0 @ 30.</body><body package="Roassal-Core">zoomInButton	self addMenu: 'Zoom in' callBack: [ :stack | ROZoomInMove new on: stack firstView ].</body><body package="Roassal-Core">zoomOutButton	self addMenu: 'Zoom out' callBack: [ :stack | ROZoomOutMove new on: stack firstView ].</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder</class-id> <category>signalling</category><body package="Roassal-Core">signalUpdate		rawView signalUpdate</body></methods><methods><class-id>Roassal.ROMondrianViewBuilder class</class-id> <category>public</category><body package="Roassal-Core">draggable	"Create a builder with a draggable roView in it, without the inertia"		^ self initializedView: (ROView new @ RODraggable)</body><body package="Roassal-Core">initializedView: aView		^ self basicNew		initializeWithRoassalView: aView; 		yourself</body><body package="Roassal-Core">nonDraggable	"Create a builder with a non draggable roView in it"		^ self initializedView: ROView new</body><body package="Roassal-Core">titled: aTitleAsString	^ self basicNew		initializeWithTitle: aTitleAsString; 		yourself</body><body package="Roassal-Core">titled: aTitleAsString view: aView	"Take a string and an instance of ROView as parameter"	^ self basicNew		initializeWithTitle: aTitleAsString roassalView: aView; 		yourself</body><body package="Roassal-Core">view: aView	"Take an instance of ROView as parameter"		aView @ RODraggable @ RODraggableWithVelocity.		^ self initializedView: aView</body></methods><methods><class-id>Roassal.ROLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout</body></methods><methods><class-id>Roassal.ROLayoutTest</class-id> <category>running</category><body package="Roassal-Core">setUp	elements := ROElement forCollection: (1 to: 20).	elements do: [ :n | n extent: 50@50; addShape: (ROBox new) ].	view := ROView new.	view addAll: elements.	elements allButFirst do: [:e | 	 	view add: (ROEdge lineFrom: elements first to: e) ]</body></methods><methods><class-id>Roassal.ROLayoutTest class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract 	^ self name == #ROLayoutTest  </body></methods><methods><class-id>Roassal.RORadialTreeLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	RORadialTreeLayout on: elements.		result := ((Array new: 20) at: 1 put: ((46@46)); at: 2 put: ((92.0@46.0)); at: 3 put: ((89.57594222755657@60.73557799954425)); at: 4 put: ((82.55924960953685@73.91811719990407)); at: 5 put: ((71.68943815800856@84.1582594876372)); at: 6 put: ((58.1121187831487@90.37675718867814)); at: 7 put: ((43.25825698754758@91.91821909932557)); at: 8 put: ((28.693357951049826@88.62018466629995)); at: 9 put: ((15.9524719655805@80.83024632443437)); at: 10 put: ((6.378409626830596@69.36941540348772)); at: 11 put: ((0.9802179011524856@55.44559261096352)); at: 12 put: ((0.3268328150578981@40.526262766963676)); at: 13 put: ((4.487117116214073@26.18383097879227)); at: 14 put: ((13.022602565673495@13.929900866095274)); at: 15 put: ((25.03370177885621@5.055960886814518)); at: 16 put: ((39.25451917300982@0.4972694400357156)); at: 17 put: ((54.18626853357793@0.734284414182163)); at: 18 put: ((68.25523581301002@5.742025896633642)); at: 19 put: ((79.97863885982957@14.992708902045635)); at: 20 put: ((88.12090348816136@27.511368646084257)); yourself).		(elements collect: #position) with: result do: [ :e1 :e2 | 		self assert: (e1 closeTo: e2) ]</body><body package="Roassal-Core">testLayout2	RORadialTreeLayout on: elements.		self assert: (elements allSatisfy: [ :e | e position &gt;= (0 @ 0) ])</body></methods><methods><class-id>Roassal.ROForceBasedLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	ROForceBasedLayout new 		on: elements.</body></methods><methods><class-id>Roassal.ROVisitor</class-id> <category>visit</category><body package="Roassal-Core">visitEdge: anEdge</body><body package="Roassal-Core">visitElement: aNode</body></methods><methods><class-id>Roassal.ROVisitor</class-id> <category>public</category><body package="Roassal-Core">runOn: aROView 	aROView elementsDo: [ :el | el accept: self ] </body></methods><methods><class-id>Roassal.ROCountingVisitor</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	nbOfEdges := 0.	nbOfNodes := 0</body></methods><methods><class-id>Roassal.ROCountingVisitor</class-id> <category>accessing</category><body package="Roassal-Core">nbOfEdges	^ nbOfEdges</body><body package="Roassal-Core">nbOfNodes	^ nbOfNodes</body></methods><methods><class-id>Roassal.ROCountingVisitor</class-id> <category>visiting</category><body package="Roassal-Core">visitEdge: anEdge	nbOfEdges := nbOfEdges + 1</body><body package="Roassal-Core">visitElement: aNode	nbOfNodes := nbOfNodes + 1</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>testing</category><body package="Roassal-Core">boundsFor: aROElement	^ 0 @ 0 extent: aROElement extent</body><body package="Roassal-Core">boundsFor: aROElement containsPoint: aPoint	"Return true if aPoint is contained in one of the chain of shape"		^ (self boundsFor: aROElement) containsPoint: aPoint</body><body package="Roassal-Core">hasNext	^ true</body><body package="Roassal-Core">isElementVisible: aROElement inCanvas: aROCanvas	"Say whether the element is visible within the canvas. The canvas knows about the camera."		^ (aROCanvas camera virtualToRealRectangle: (self absoluteBoundsFor: aROElement))		intersects: (0 @ 0 extent: aROCanvas camera windowSize)</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>accessing</category><body package="Roassal-Core">color	"Color associated to the shape"		^ color</body><body package="Roassal-Core">color: anObject	"Set a color. For practical reason, the color is cached and the cache needs to be reset"		color := anObject.	colorCache := nil.</body><body package="Roassal-Core">colorFor: element	"Compute the color of the element"	"We use a cache mechanism since computing the cache can be quite slow"	colorCache notNil ifTrue: [ ^ colorCache ].	^ colorCache := color roValue: element."	(element hasAttribute: (#element, self class name) asSymbol)		ifTrue: [ ^ element attributeAt: (#element, self class name) asSymbol ]. 	colorCache := color roValue: element.	element attributeAt: (#element, self class name) asSymbol put: colorCache.	^ colorCache"</body><body package="Roassal-Core">elementExtent: aPoint 	next elementExtent: aPoint</body><body package="Roassal-Core">extent	"Return the extent of the shape. Note that the width and height may be block and not immediate value.	  Use extentFor: to get immediate value"	^ width @ height</body><body package="Roassal-Core">extent: anExtentPoint	width := anExtentPoint x.	height := anExtentPoint y.</body><body package="Roassal-Core">extentFor: element	"Return the extent of element"		^ ((width roValue: element) @ (height roValue: element))" max: (self defaultExtent)".</body><body package="Roassal-Core">height	^ height</body><body package="Roassal-Core">height: aNumberOrSymbolOrOneArgBlock	height := aNumberOrSymbolOrOneArgBlock</body><body package="Roassal-Core">maxChainedExtentFor: element	^ (self extentFor: element) max: (self next maxChainedExtentFor: element)</body><body package="Roassal-Core">next	^ next</body><body package="Roassal-Core">next: aShape	next := aShape.	</body><body package="Roassal-Core">size: aNumberOrASymbolOrABlock	"Set the size of the shape as a square"	self width: aNumberOrASymbolOrABlock.	self height: aNumberOrASymbolOrABlock</body><body package="Roassal-Core">width	^ width</body><body package="Roassal-Core">width: aNumberOrSymbolOrOneArgBlock	width := aNumberOrSymbolOrOneArgBlock</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>linking</category><body package="Roassal-Core">+ aShape	self compose: aShape</body><body package="Roassal-Core">addLast: aShape	"Instance variable 'next' must be a RONullShape to provide the exit condition of this recursive call.  This is ensured by instance initialization. The Null Object design pattern is here applied"	self addLast: aShape in: self</body><body package="Roassal-Core">addLast: aShape in: elementToAdd	next addLast: aShape in: self</body><body package="Roassal-Core">change: aShapeClass for: aShape	"Replace a shape per another shape"	^ (self isKindOf: aShapeClass) 		ifTrue: [ aShape next: self next; yourself ]		ifFalse: [ self next: (self next change: aShapeClass for: aShape) ]</body><body package="Roassal-Core">compose: aShape 	self addLast: (aShape ensureInstance)</body><body package="Roassal-Core">ensureInstance	^ self</body><body package="Roassal-Core">isShapedAs: aShapeClass	^ (self isKindOf: aShapeClass) or: [ self next isShapedAs: aShapeClass ]</body><body package="Roassal-Core">removeShape: aShapeClass	"Remove a shape of the element"	^ (self isKindOf: aShapeClass)		ifTrue: [ next ]		ifFalse: [ next removeShape: aShapeClass previousShape: self ]</body><body package="Roassal-Core">removeShape: aShapeClass previousShape: aShape	"Remove a shape of the element. Return the element that has been removed"	^ (self isKindOf: aShapeClass)		ifTrue: [ aShape next: next. self ]		ifFalse: [ next removeShape: aShapeClass previousShape: next next ]</body><body package="Roassal-Core">shapeDetect: aBlock	(aBlock value: self) ifTrue: [ ^ self ].	^ self next shapeDetect: aBlock</body><body package="Roassal-Core">shapesDo: aBlock	aBlock value: self.	^ self next shapesDo: aBlock</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>initialize</category><body package="Roassal-Core">defaultExtent	"Each shape has a minimum size of 5@5"	^ self class defaultExtent</body><body package="Roassal-Core">initialize 	super initialize.	color := self class defaultColor.	next := self defaultShape.		self extent: self defaultExtent.</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>rendering</category><body package="Roassal-Core">absoluteBoundsFor: aROElement	^ (self boundsFor: aROElement) translateBy: aROElement absolutePosition</body><body package="Roassal-Core">chainedDrawOn: aCanvas for: aROElement	self drawOn: aCanvas for: aROElement.	next chainedDrawOn: aCanvas for: aROElement.</body><body package="Roassal-Core">drawOn: aCanvas for: aROElement 	</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>looking up elements</category><body package="Roassal-Core">elementAt: aPoint forElement: aROElement	"Return the element pointed by aPoint for a given element.	 The coordinate aPoint is local to the element aROElement. This means that aPoint = 0@0 refers to the topLeft of aROElement"	"If the point does not refer to myself, then we simply return the view"	| subElement |	 	(((0 @ 0) corner: (self extentFor: aROElement)) containsPoint: aPoint)		ifFalse: [ ^ aROElement view ].			"The point refers to myself. We now have to check whether a subelement is pointed"	subElement := self subElementsAt: aPoint forElement: aROElement.	^ subElement notNil		ifTrue: [ subElement elementAt: (aPoint - subElement position)  ]		ifFalse: [ aROElement ]	</body><body package="Roassal-Core">subElementsAt: aPoint forElement: aROElement	"Return one of the direct children element of aROElement pointed by aPoint. Return null if none"	"Note that we are here interested only in direct children. The recursion is done later on"	"For a shape that is not an abstractchildren one, there is nothing to do."	^ next subElementsAt: aPoint forElement: aROElement</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>public</category><body package="Roassal-Core">element	"Easy way to create element from a shape"	^ self elementOn: nil</body><body package="Roassal-Core">elementOn: object	"Easy way to create element from a shape"		^ (ROElement on: object) + self</body><body package="Roassal-Core">elementsOn: objects	"Easy way to create elements from a shape"		^ objects collect: [ :o | self elementOn: o ]</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>visitor</category><body package="Roassal-Core">accept: visitor	</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>hooks</category><body package="Roassal-Core">defaultShape 	^ RONullShape new</body><body package="Roassal-Core">installedOn: element	"This method is meant to be overriden in case a special treatment has to be realized on the element"		"self extent: (self preferedExtentFor: element)."	"element extent: (element extent max: extent)."		self hasNext ifTrue: [self next installedOn: element]</body><body package="Roassal-Core">preferedExtentFor: element	"Override this method is you want the element to have a particular shape"	^ self extentFor: element</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>copying</category><body package="Roassal-Core">chainedCopy	| s current |	s := self copy.	current := s.	self next shapesDo: [:shape | 			| shapeCopy |			shapeCopy := shape copy .			 current next: shapeCopy.			current := shapeCopy ].	^s	</body></methods><methods><class-id>Roassal.ROShape</class-id> <category>events-accessing</category><body package="Roassal-Core">modelChanged: aROAbstractComponent		"do nothing"</body></methods><methods><class-id>Roassal.ROShape class</class-id> <category>public</category><body package="Roassal-Core">black	^ self new color: Color black</body><body package="Roassal-Core">blue	^ self new color: Color blue</body><body package="Roassal-Core">defaultColor 	^ Color veryLightGray</body><body package="Roassal-Core">defaultExtent 	^ 5 @ 5</body><body package="Roassal-Core">element	^ self elementOn: nil</body><body package="Roassal-Core">elementOn: object	"Easy way to create element from a shape"		^ (ROElement on: object) + self</body><body package="Roassal-Core">elementsOn: objects	"Easy way to create elements from a shape"		^ objects collect: [ :o | self elementOn: o ]</body><body package="Roassal-Core">gray	^ self new color: Color gray</body><body package="Roassal-Core">green	^ self new color: Color green</body><body package="Roassal-Core">installedOn: element	^ self new installedOn: element; yourself</body><body package="Roassal-Core">lightGray	^ self new color: Color lightGray</body><body package="Roassal-Core">lightRed	^ self new color: (Color r: 1.0 g: 0.5 b: 0.5)</body><body package="Roassal-Core">red	^ self new color: Color red</body><body package="Roassal-Core">size: aSize	^ self new size: aSize</body><body package="Roassal-Core">white	^ self new color: Color white</body><body package="Roassal-Core">yellow	^ self new color: Color yellow</body></methods><methods><class-id>Roassal.ROShape class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROShape</body><body package="Roassal-Core">isEdgeShape	^ false</body></methods><methods><class-id>Roassal.ROShape class</class-id> <category>linking</category><body package="Roassal-Core">+ aShape	^ self compose: aShape</body><body package="Roassal-Core">compose: aShape 	^ self new compose: aShape; yourself</body><body package="Roassal-Core">ensureInstance		^ self new</body></methods><methods><class-id>Roassal.ROShape class</class-id> <category>copying</category><body package="Roassal-Core">chainedCopy		^ self</body></methods><methods><class-id>Roassal.ROBorder</class-id> <category>initialization</category><body package="Roassal-Core">initialize 	super initialize.	strokeWidth := 1.	color := self class defaultColor</body></methods><methods><class-id>Roassal.ROBorder</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| topLeft extent c strokeWidthComputed |	topLeft := aROElement absolutePosition.	extent := aROElement extent.	c := color roValue: aROElement.	strokeWidthComputed := strokeWidth roValue: aROElement.	aCanvas 		line: topLeft to: topLeft + (extent x @ 0) width: strokeWidthComputed color: c.	aCanvas 		line: topLeft + (extent x @ 0) to: topLeft + extent width: strokeWidthComputed color: c.	aCanvas 		line: topLeft + extent to: topLeft + (0 @ extent y) width: strokeWidthComputed color: c.	aCanvas 		line: topLeft + (0 @ extent y) to: topLeft width: strokeWidthComputed color: c.</body></methods><methods><class-id>Roassal.ROBorder</class-id> <category>visitor</category><body package="Roassal-Core">accept: visitor	visitor visitBorder: self</body></methods><methods><class-id>Roassal.ROBorder</class-id> <category>accessing</category><body package="Roassal-Core">strokeWidth: aNumberOrABlockOrASymbol	strokeWidth := aNumberOrABlockOrASymbol</body></methods><methods><class-id>Roassal.ROBorder class</class-id> <category>public</category><body package="Roassal-Core">defaultColor	^ Color black</body></methods><methods><class-id>Roassal.ROInnerBorder</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| topLeft extent c strokeWidthComputed halfStrokeWidth |		topLeft := aROElement absolutePosition.	extent := aROElement extent.	c := color roValue: aROElement.	strokeWidthComputed := self evenStrokeWidthFor: aROElement.		(strokeWidthComputed = 1)		ifTrue: [ 			"If the stroke width is 1, I cannot split a pixel"			super drawOn: aCanvas for: aROElement ]		ifFalse: [  			halfStrokeWidth := strokeWidthComputed / 2.				topLeft := topLeft + halfStrokeWidth.				aCanvas 				line: topLeft to: topLeft + (extent x - strokeWidthComputed @ 0) width: strokeWidthComputed color: c.			aCanvas 				line: topLeft + (extent x - strokeWidthComputed @ 0) to: topLeft + extent - strokeWidthComputed  width: strokeWidthComputed color: c.			aCanvas 				line: topLeft + extent - strokeWidthComputed to: topLeft + (strokeWidthComputed @ extent y - strokeWidthComputed) width: strokeWidthComputed color: c.			aCanvas 				line: topLeft + (strokeWidthComputed @ extent y - strokeWidthComputed) to: topLeft width: strokeWidthComputed color: c.		].</body><body package="Roassal-Core">evenStrokeWidthFor: aROElement	| computedWidth |	computedWidth := strokeWidth roValue: aROElement.	((computedWidth &gt; 1) and: [ (computedWidth \\ 2) = 1]) 		ifTrue: [ computedWidth := computedWidth + 1 ].		^ computedWidth.</body></methods><methods><class-id>Roassal.ROLayoutTranslatorTest</class-id> <category>tests</category><body package="Roassal-Core">testDefault	"	Commented out because isAbstractClass is not in VW	self assert: ROLayoutTranslator isAbstractClass.	self assert: ROLayoutTranslator defaultClass isAbstractClass not.	"		self assert: (ROLayoutTranslator withAllSubclasses select: #isDefault) size = 1.		self assert: ROLayoutTranslator default class ==  ROLayoutTranslator defaultClass</body></methods><methods><class-id>Roassal.ROLayoutTranslatorTest</class-id> <category>running</category><body package="Roassal-Core">setUp	| edges |	view := ROView new.	elements := ROElement spritesOn: (1 to: 5).	view addAll: elements.	view addAll: (edges := ROEdge linesFor: (Array with: elements first -&gt; elements second with: elements second -&gt; elements fifth with: elements second -&gt; elements third )).	layout := ROTreeLayout new</body></methods><methods><class-id>Roassal.RODirectLayoutTranslatorTest</class-id> <category>tests</category><body package="Roassal-Core">testLayout	| result |	layout translator: RODirectLayoutTranslator new.	layout applyOn: elements.	result := ((Array new: 7) at: 1 put: (31@5); at: 2 put: (31@75); at: 3 put: (58@145); at: 4 put: (111@5); at: 5 put: (5@145); at: 6 put: (32@5); at: 7 put: (32@75); yourself).	self assert: (result includesAll: (elements collect: #positionAsInteger))</body></methods><methods><class-id>Roassal.ROAction class</class-id> <category>public</category><body package="Roassal-Core">on: element	self subclassResponsibility</body></methods><methods><class-id>Roassal.RORemoveNode class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">suchThat: aBlock in: view	view elementsDo: [ :el | 		el isEdge			ifTrue: [ ((aBlock value: el from) or: [ (aBlock value: el to) ]) ifTrue: [ el remove ] ] 			ifFalse: [ (aBlock value: el) ifTrue: [ el remove ] ] ].	view signalUpdate </body></methods><methods><class-id>Roassal.ROHorizontalNarrowTreeLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	ROHorizontalNarrowTreeLayout on: elements.		result := ((Array new: 20) at: 1 put: ((3.0@480.0)); at: 2 put: ((73.0@3.0)); at: 3 put: ((73.0@56.0)); at: 4 put: ((73.0@109.0)); at: 5 put: ((73.0@162.0)); at: 6 put: ((73.0@215.0)); at: 7 put: ((73.0@268.0)); at: 8 put: ((73.0@321.0)); at: 9 put: ((73.0@374.0)); at: 10 put: ((73.0@427.0)); at: 11 put: ((73.0@480.0)); at: 12 put: ((73.0@533.0)); at: 13 put: ((73.0@586.0)); at: 14 put: ((73.0@639.0)); at: 15 put: ((73.0@692.0)); at: 16 put: ((73.0@745.0)); at: 17 put: ((73.0@798.0)); at: 18 put: ((73.0@851.0)); at: 19 put: ((73.0@904.0)); at: 20 put: ((73.0@957.0)); yourself).	self assert: (elements collect: #position) = result.</body></methods><methods><class-id>Roassal.ROZOrderingTest</class-id> <category>tests</category><body package="Roassal-Core">test	| view c1 c2 c3 c4 |	zordering setZIndex: 10 if: #isEdge.	zordering setZIndex: 20 if: #isNotEdge.	view := ROView new.	view zOrdering: zordering.	view add: (c1 := ROEdge new). 	view add: (c2 := ROElement new).	view add: (c3 := ROEdge new).	view add: (c4 := ROElement new).		self assert: c1 zIndex = 10.	self assert: c2 zIndex = 20.	self assert: c3 zIndex = 10.	self assert: c4 zIndex = 20.		self assert: view zOrdering == zordering.		self assert: view numberOfElementsToRender = 4.	self assert: view elementsToRender = (Array with: c1 with: c3 with: c2 with: c4)</body><body package="Roassal-Core">testDefault	self assert: (zordering zIndexOf: ROElement new) = 0</body><body package="Roassal-Core">testDefaultValue	zordering setZIndex: 10 if: true.	self assert: zordering numberOfEntries = 1.	self assert: (zordering zIndexOf: ROElement new) = 10</body><body package="Roassal-Core">testDefaultValueWithoutIf	zordering setZIndex: 10.	self assert: zordering numberOfEntries = 1.	self assert: (zordering zIndexOf: ROElement new) = 10</body><body package="Roassal-Core">testInitialization	self assert: zordering numberOfEntries = 0</body><body package="Roassal-Core">testView	self assert: ROView new zOrdering notNil</body><body package="Roassal-Core">testWithEdgesAndNestingWithMondrian	| view edge canvas |	view := ROMondrianViewBuilder new.	view node: 1 forIt: [ view shape rectangle fillColor: Color red. view node: 11].	view node: 2 forIt: [ view shape rectangle fillColor: Color green. view node: 22].	view node: 3 forIt: [ view shape rectangle fillColor: Color blue. view node: 33].	view shape line width: 3.	view edgeFromAssociation: 11-&gt;33.	view applyLayout.		"Check the zIndex"	"- nodes 1,2,3: zIndex 2	- nodes 11,22,33: zIndex 4	- edge: zIndex 3"	self assert: (view elementFromModel: 1) zIndex = 2.	self assert: (view elementFromModel: 3) zIndex = 2.	self assert: (view elementFromModel: 11) zIndex = 4.	self assert: (view elementFromModel: 33) zIndex = 4.	edge := view raw elementsAsEdge anyOne.	self assert: edge zIndex = 3.		"Check the list of elements to render"	self assert: ((view raw elementsToRender collect: #model) = ((Array new: 7) at: 1 put: 1; at: 2 put: 2; at: 3 put: 3; at: 4 put: (11-&gt;33); at: 5 put: 11; at: 6 put: 22; at: 7 put: 33; yourself)).		"Check the trace for the first render"	canvas := ROTracingCanvas new.	view raw drawOn: canvas.	self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(5@5) corner: (20@20)' 'Color white' 1 'Color black') #(#frameAndFillRectangle: '(30@5) corner: (45@20)' 'Color white' 1 'Color black') #(#frameAndFillRectangle: '(55@5) corner: (70@20)' 'Color white' 1 'Color black') #(#line '(60@12)' '(15@12)' 3 'Color veryLightGray') #(#frameAndFillRectangle: '(10@10) corner: (15@15)' 'Color red' 1 'Color black') #(#frameAndFillRectangle: '(35@10) corner: (40@15)' 'Color green' 1 'Color black') #(#frameAndFillRectangle: '(60@10) corner: (65@15)' 'Color blue' 1 'Color black')).		"Check the trace for the second render"	view open delete.		self assert: ((view raw elementsToRender collect: #model) = ((Array new: 7) at: 1 put: 1; at: 2 put: 2; at: 3 put: 3; at: 4 put: (11-&gt;33); at: 5 put: 11; at: 6 put: 22; at: 7 put: 33; yourself)).			canvas := ROTracingCanvas new.	view raw drawOn: canvas.	self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(5@5) corner: (20@20)' 'Color white' 1 'Color black') #(#frameAndFillRectangle: '(30@5) corner: (45@20)' 'Color white' 1 'Color black') #(#frameAndFillRectangle: '(55@5) corner: (70@20)' 'Color white' 1 'Color black') #(#line '(60@12)' '(15@12)' 3 'Color veryLightGray') #(#frameAndFillRectangle: '(10@10) corner: (15@15)' 'Color red' 1 'Color black') #(#frameAndFillRectangle: '(35@10) corner: (40@15)' 'Color green' 1 'Color black') #(#frameAndFillRectangle: '(60@10) corner: (65@15)' 'Color blue' 1 'Color black')).</body></methods><methods><class-id>Roassal.ROZOrderingTest</class-id> <category>dynamic</category><body package="Roassal-Core">testDynamic	| el1 el2 |	zordering setZIndex: [ :element | element depth + 1 ] if: true.		el1 := ROElement new.	el2 := ROElement new.	el1 add: el2.		self assert: (zordering zIndexOf: el1) = 2.	self assert: (zordering zIndexOf: el2) = 3.</body></methods><methods><class-id>Roassal.ROZOrderingTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	zordering := ROZOrdering new</body></methods><methods><class-id>Roassal.ROInteraction</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: element	self subclassResponsibility </body><body package="Roassal-Core">key 	"Used in the dictionary each element has"	^ self class</body></methods><methods><class-id>Roassal.ROInteraction</class-id> <category>accessing</category><body package="Roassal-Core">elementToBeAdded	^ self </body></methods><methods><class-id>Roassal.ROInteraction class</class-id> <category>public</category><body package="Roassal-Core">elementToBeAdded	^ self new </body><body package="Roassal-Core">initializeElement: element	^ self elementToBeAdded initializeElement: element; yourself</body><body package="Roassal-Core">key 	"Used in the dictionary each element has"	^ self </body></methods><methods><class-id>Roassal.ROAnimation</class-id> <category>accessing</category><body package="Roassal-Core">elapsedCycles	^ nbCycles - remainingCycles</body><body package="Roassal-Core">nbCycles	^ nbCycles</body><body package="Roassal-Core">nbCycles: integer	nbCycles := integer.	remainingCycles := integer</body><body package="Roassal-Core">strategy	"Return the merging strategy associated to this animation"	^ strategy</body><body package="Roassal-Core">strategy: anAnimationStrategy	"Set a new strategy when merging animations"	strategy := anAnimationStrategy </body></methods><methods><class-id>Roassal.ROAnimation</class-id> <category>hooks</category><body package="Roassal-Core">after: aBlock	"The after block is used to do something after the animation has completed"	afterBlock := aBlock</body><body package="Roassal-Core">defaultNumberOfCycles	^ 10</body><body package="Roassal-Core">doAfter	afterBlock value</body><body package="Roassal-Core">doCycle	self hasCompleted 		ifFalse: [ 			remainingCycles := remainingCycles - 1. 			self doStep.			self hasCompleted ifTrue: [ self doAfter ] ]</body><body package="Roassal-Core">doStep	"To be overriden"</body></methods><methods><class-id>Roassal.ROAnimation</class-id> <category>testing</category><body package="Roassal-Core">hasCompleted 	^ remainingCycles = 0</body></methods><methods><class-id>Roassal.ROAnimation</class-id> <category>action</category><body package="Roassal-Core">addedIn: aView	"I m added in a view"	strategy added: self in: aView</body></methods><methods><class-id>Roassal.ROAnimation</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	self nbCycles: self defaultNumberOfCycles.	afterBlock := #yourself.	strategy := ROAnimationAppend instance</body></methods><methods><class-id>Roassal.ROIncrementalZoomMove</class-id> <category>public</category><body package="Roassal-Core">on: view	| v step |	v := view camera bounds.	step := v extent * self step / 2.	v := (v origin +step) corner: (v corner - step).	ROZoomMove new 		nbCycles: nbCycles; 		on: view to: v</body></methods><methods><class-id>Roassal.ROIncrementalZoomMove</class-id> <category>stepping and presenter</category><body package="Roassal-Core">step	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROZoomInMove</class-id> <category>config</category><body package="Roassal-Core">step	^ 0.2</body></methods><methods><class-id>Roassal.ROCameraTest</class-id> <category>resizing</category><body package="Roassal-Core">testResizingHeight	camera1 height: 30.	self assert: camera1 height = 30.	self assert: camera1 width = 500</body><body package="Roassal-Core">testResizingView	| view |	view := ROView new.	self assert: view camera windowSize = (500 @ 500).	view windowSize: 40 @ 60.	self assert: view camera windowSize = (40 @ 60)</body><body package="Roassal-Core">testResizingWidth	camera1 width: 30.	self assert: camera1 width = 30.	self assert: camera1 height = 500</body><body package="Roassal-Core">testResizingWithMorph	| cls view camera visualElement |	view := ROView new.	cls := ROPlatform current hostVisualElement.	visualElement := cls on: view.	camera := view camera.		visualElement extent: (500 @ 500).	self assert: visualElement extent = (500 @ 500).	self assert: camera extent = (500 @ 500).	self assert: camera windowSize = (500 @ 500).	visualElement extent: (300 @ 200).	self assert: camera extent = (500 @ 500).	self assert: camera windowSize = (300 @ 200).	</body><body package="Roassal-Core">testResizingWithMorphAndStack	| cls view1 view2 viewStack camera visualElement |	view1 := ROView new.	view2 := ROView new.	viewStack := ROViewStack new.	viewStack addView: view1; addView: view2.		cls := ROPlatform current hostVisualElement.	visualElement := cls on: viewStack.	camera := viewStack camera.		visualElement extent: (500 @ 500).	self assert: visualElement extent = (500 @ 500).	self assert: camera extent = (500 @ 500).	self assert: camera windowSize = (500 @ 500).	self assert: view1 camera windowSize = (500 @ 500).	self assert: view1 camera windowSize = (500 @ 500).			visualElement extent: (300 @ 200).	self assert: camera extent = (500 @ 500).	self assert: camera windowSize = (300 @ 200).		self assert: view1 camera windowSize = (300 @ 200).	self assert: view1 camera windowSize = (300 @ 200).	</body></methods><methods><class-id>Roassal.ROCameraTest</class-id> <category>tests</category><body package="Roassal-Core">testAngle	self assert: camera1 angle = ROCamera defaultAngle</body><body package="Roassal-Core">testDefaultSize	self assert: camera1 extent = (500 @ 500).	self assert: camera1 width = 500.	self assert: camera1 height = 500.</body><body package="Roassal-Core">testInitialization		self assert: camera1 angle = ROCamera defaultAngle.	self assert: camera1 position = ROCamera defaultPosition.	self assert: camera1 windowSize = (500 @ 500)</body></methods><methods><class-id>Roassal.ROCameraTest</class-id> <category>running</category><body package="Roassal-Core">setUp	camera1 := ROCamera new.	camera2 := ROCamera new.	camera2 altitude: 20.</body></methods><methods><class-id>Roassal.ROCameraTest</class-id> <category>translating</category><body package="Roassal-Core">testTranslating	self assert: (camera1 virtualToRealPoint: (camera1 realToVirtualPoint: 250@500)) = ( 250@500).	self assert: (camera1 realToVirtualPoint: 250@500) = ( 250@500).	camera1 translateBy: 50@30.	self assert: (camera1 virtualToRealPoint: (camera1 realToVirtualPoint: 250@500)) = ( 250@500).	self assert: (camera1 realToVirtualPoint: 250@500) = ( 300@530).</body></methods><methods><class-id>Roassal.ROCameraTest</class-id> <category>initializing</category><body package="Roassal-Core">testInitialize	self assert: ROCamera new extent = ROCamera defaultExtent </body></methods><methods><class-id>Roassal.ROCameraTest</class-id> <category>moving</category><body package="Roassal-Core">testMovingUpAndDownCameraShouldBeCentered	| view el b1 b2 |	view := ROView new.	view add: (el := ROElement sprite).	"view open."	self assert: (el bounds = ( 0@0 corner: 50@50)).	b1 := (view camera virtualToRealRectangle: el bounds).	"we move up"	view camera moveDown.	b2 := (view camera virtualToRealRectangle: el bounds).	self assert: b1 extent &lt; b2 extent.	"check at the position of the element"	self assert: b1 origin &lt; b2 origin</body><body package="Roassal-Core">testMovingUpAndDownCameraShouldBeCentered2	| view el b1 b2 points |	view := ROView new.	view add: (el := ROElement sprite).	el center: 250@250.	self assert: el center = (250@250).	"view open."	b1 := (view camera virtualToRealRectangle: el bounds).	self assert: b1 center = (250@250).		"we move up"	view camera moveUp.	b2 := (view camera virtualToRealRectangle: el bounds).	points := Array with: 230@230 with: 229@229.	self assert: (points includes: b2 center).</body></methods><methods><class-id>Roassal.ROAbstractDynamicEdge</class-id> <category>public</category><body package="Roassal-Core">edges	"Return the edges that have been added"	^ edges</body><body package="Roassal-Core">fromAll: oneArgBlockOrValues using: aLineShape	fromAllElements := oneArgBlockOrValues.	lineShape := aLineShape</body><body package="Roassal-Core">toAll: oneArgBlockOrValues using: aLineShape	toAllElements := oneArgBlockOrValues.	lineShape := aLineShape</body></methods><methods><class-id>Roassal.ROAbstractDynamicEdge</class-id> <category>util</category><body package="Roassal-Core">attributeKey	^ (#dynamicEdges, self hash printString) asSymbol</body><body package="Roassal-Core">removeEdgesFromView: view	(view attributes includesKey: self attributeKey)		ifTrue: [ (view attributes at: self attributeKey) do: #remove ].	view attributes removeKey: self attributeKey ifAbsent: [  ]</body></methods><methods><class-id>Roassal.ROAbstractDynamicEdge</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: element	element on: ROMouseEnter do: [ :event |		self removeEdgesFromView: event view.				edges := OrderedCollection new.		(toAllElements roValue: element) do: [ :toElement |			(fromAllElements roValue: element) do: [ :fromElement |				| l |				event view add: (l := lineShape elementFrom: fromElement to: toElement).				self processCreatedEdge: l.				edges add: l.			].		]."		edges := (toAllElements roValue: element) collect: [ :el | 			| l |			event view add: (l := lineShape elementFrom: event element to: el).			self processCreatedEdge: l.			l ]."				event view attributes at: self attributeKey put: edges.		event view signalUpdate ].		element on: ROMouseLeave do: [ :event | 		self removeEdgesFromView: event view.		event view signalUpdate ].</body><body package="Roassal-Core">processCreatedEdge: element	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractDynamicEdge</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	fromAllElements := [ :el | Array with: el ].	toAllElements := [ :el | Array with: el ]</body></methods><methods><class-id>Roassal.ROAbstractDynamicEdge class</class-id> <category>public</category><body package="Roassal-Core">fromAll: elements using: aLineShape	^ self new fromAll: elements using: aLineShape</body><body package="Roassal-Core">to: element 	^ self toAll: (Array with: element) using: ROLine black</body><body package="Roassal-Core">toAll: elements using: aLineShape	^ self new toAll: elements using: aLineShape</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>layout</category><body package="Roassal-Core">testLayout	| node innerNodes outerFrame innerFrame |	view nodes: #(10 11) forEach: [ :each | view nodes: (1 to: 5) ].	view treeLayout.		outerFrame := view structureTree.	self assert: outerFrame layout class == ROTreeLayout.		innerFrame := outerFrame children anyOne.	self assert: innerFrame layout class == ROHorizontalLineLayout </body><body package="Roassal-Core">testNoLayout	| innerNodes |	view node: 10 forIt: [ innerNodes := view nodes: (1 to: 5). view horizontalLineLayout ].		"We haven't done a layout still"	self assert: (view structureTree children first layout class == ROHorizontalLineLayout).	self assert: (innerNodes allSatisfy: [ :n | n position = (5 @ 5)]) </body><body package="Roassal-Core">testRecursiveLayout	| innerNodes positions |	view node: 10 forIt: [ innerNodes := view nodes: (1 to: 5). view horizontalLineLayout ].		view applyLayout.	 	positions := OrderedCollection new.	positions add: (5@5); add: (20@5); add: (35@5); add: (50@5); add: (65@5).	self assert: (innerNodes collect: #position) = positions asArray.</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>frame</category><body package="Roassal-Core">testAddFrame	|parent child|	parent := ROMondrianFrame new.	child := ROMondrianFrame new.	self assert: parent children size = 0.	parent addChild: child.	child parent: parent.	self assert: parent children size = 1.	self assert: parent children first = child.</body><body package="Roassal-Core">testRemoveFrame	|parent child|	parent := ROMondrianFrame new.	child := ROMondrianFrame new.	parent addChild: child.	child parent: parent.	self assert: parent children size = 1.	self assert: parent children first = child.	parent removeChild: child.	self assert: parent children size = 0.	</body><body package="Roassal-Core">testRemoveFrameFromParent	| parent child |	parent := ROMondrianFrame new.	child := ROMondrianFrame new.	parent addChild: child.	child parent: parent.	self assert: parent children size = 1.	self assert: parent children first = child.	child removeFromParent.	self assert: parent children size = 0.</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>nesting</category><body package="Roassal-Core">testBasic	view nodes: (1 to: 4).	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 4.		view nodes: (5 to: 10).	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 10.</body><body package="Roassal-Core">testNesting	view node: 10 forIt: [ view nodes: (1 to: 5) ].	self assert: view numberOfFrames = 2.	self assert: view structureTree numberOfElements = 1.		self assert: (view structureTree numberOfChildren = 1).	self assert: (view structureTree children first numberOfElements = 5).</body><body package="Roassal-Core">testNesting2	| node innerNodes |	node := view node: 10 forIt: [ innerNodes := view nodes: (1 to: 5) ].	self assert: view structureTree elements first == node.	self assert: (view structureTree children first elements = innerNodes).</body><body package="Roassal-Core">testNesting3	view nodes: #(1 2) forEach: [ :e | view nodes: (1to: 3)].		self assert: view structureTree numberOfElements = 2.	self assert: view structureTree numberOfFrames = 3.</body><body package="Roassal-Core">testNestingWithEdges	| innerNodes edge innerFrame |	view node: 10 forIt: [ innerNodes := view nodes: (1 to: 5). edge := view edgeFromAssociation: 1-&gt;3  ].	innerFrame := view structureTree children first.	self assert: (innerFrame numberOfElements = 6).	self assert: (innerFrame edges size = 1).	self assert: (innerFrame edges anyOne == edge).		self assert: (innerFrame nodes = innerNodes).	self assert: (innerFrame edges first == edge).</body><body package="Roassal-Core">testRemoveNestedNode	view node: 1forIt: [ view nodes: (1 to: 4)].	self assert: view numberOfFrames = 2.	self assert: view currentFrame numberOfElements = 1.	self assert: view currentFrame children first numberOfElements = 4.		view removeNode: 1.	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 0.</body><body package="Roassal-Core">testRemoveNestedNodes	view nodes: (1 to: 3)forEach: [ view nodes: (1 to: 4)].	self assert: view numberOfFrames = 4.	self assert: view currentFrame numberOfElements = 3.	self assert: view currentFrame children first numberOfElements = 4.		view removeNodes: (2 to: 3).	self assert: view numberOfFrames = 2.	self assert: view currentFrame numberOfElements = 1.	self assert: view currentFrame children first numberOfElements = 4.</body><body package="Roassal-Core">testRemoveNode	view node: 1.	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 1.		view removeNode: 1.	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 0.</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>initialization</category><body package="Roassal-Core">testInitialization	self assert: view numberOfFrames = 1.	</body><body package="Roassal-Core">testInitializationFrame	self assert:  ROMondrianFrame new parent isNil</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>looking up</category><body package="Roassal-Core">testFrameOfElement	| outterNodes outterFrame firstInnerFrame secondInnerFrame |	outterNodes := view nodes: #(10 11) forEach: [ :e | view nodes: (1 to: 5) ].		outterFrame := view structureTree.	outterNodes do: [ :n | 		self assert: (outterFrame frameOfElement: n) == outterFrame ].		firstInnerFrame := outterFrame children first.	firstInnerFrame nodes do: [ :n | 		self assert: (outterFrame frameOfElement: n) == firstInnerFrame ].	secondInnerFrame := outterFrame children second.	secondInnerFrame nodes do: [ :n | 		self assert: (outterFrame frameOfElement: n) == secondInnerFrame ].</body><body package="Roassal-Core">testFrameOfElementNotFound	self assert: (view structureTree frameOfElement: ROElement new) == view structureTree</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>stack</category><body package="Roassal-Core">testPoping	view push.	view pop.	self assert: view currentFrame == view structureTree.	</body><body package="Roassal-Core">testPushing	self assert: view currentFrame == view structureTree. 		view push.	self assert: view currentFrame ~~ view structureTree.	self assert: view currentFrame parent == view structureTree.</body></methods><methods><class-id>Roassal.ROViewStructureTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROMondrianViewBuilder new.</body></methods><methods><class-id>Roassal.ROLineDecoration</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	offset := 0.	size := self defaultSize</body></methods><methods><class-id>Roassal.ROLineDecoration</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Draw the decorator on the canvas and return the begining and ending of the decoration"	self subclassResponsibility.	</body></methods><methods><class-id>Roassal.ROLineDecoration</class-id> <category>hooks</category><body package="Roassal-Core">getDirectionVectorFrom: fromPoint to: toPoint	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROLineDecoration</class-id> <category>configuration</category><body package="Roassal-Core">defaultSize	^ 10</body></methods><methods><class-id>Roassal.ROLineDecoration</class-id> <category>accessing</category><body package="Roassal-Core">offset	^ offset</body><body package="Roassal-Core">offset: aFloat 	offset := aFloat</body><body package="Roassal-Core">size	"Return the size of the decoration"		^ size</body><body package="Roassal-Core">size: anInteger	"Set the size of the decoration. DefaultSize return the default size"	size := anInteger</body></methods><methods><class-id>Roassal.RODiamondDecoration</class-id> <category>hooks</category><body package="Roassal-Core">getDirectionVectorFrom: fromPoint to: toPoint	^ toPoint - fromPoint</body></methods><methods><class-id>Roassal.RODiamondDecoration</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Return the begining and ending of the arrow"		| fromPoint toPoint vector normal unit endPoint leftPoint rightPoint w c toPointWithOffset r middlePoint |	fromPoint := line startingPointOf: anEdge.	toPoint := line endingPointOf: anEdge.	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		normal := vector normal.	unit := vector / r.	toPointWithOffset := toPoint - (offset * (vector r - size) * unit).	endPoint := toPointWithOffset - (unit * size). 	middlePoint := toPointWithOffset + (unit * size).	leftPoint :=  toPointWithOffset - (normal * size * 0.7 ).	rightPoint := toPointWithOffset + (normal * size * 0.7).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: endPoint to: leftPoint width: w color: c.	aCanvas line: leftPoint to: middlePoint width: w color: c.	aCanvas line: middlePoint to: rightPoint width: w color: c.		aCanvas line: rightPoint to: endPoint width: w color: c.		^ Array with: middlePoint with: endPoint</body></methods><methods><class-id>Roassal.ROFocusView</class-id> <category>public</category><body package="Roassal-Core">bottomLeftOn: element	"Public method"	self on: element offset: (0 @ (element view camera windowSize y - element height))</body><body package="Roassal-Core">bottomRightOn: element	"Public method"	self 		on: element 		offset: (((element view camera windowSize x - element width)) @ (element view camera windowSize y - element height))</body><body package="Roassal-Core">on: element	"Public method"	self on: element offset: (element view camera windowSize / 2).</body><body package="Roassal-Core">on: element offset: offset"	Without the translation""	element view camera translateTo: (element absolutePosition - offset)."	"We have the smooth translate until the point we are pointing to"	ROLinearMove new 		for: element view by: (element view camera position - element absolutePosition + offset);		after: [ self highlightElement: element ].	element view doAnimationCycle ; doAnimationCycle.	element signalUpdate.</body><body package="Roassal-Core">view: view toPosition: pointToFocusOn	view camera translateTo: (pointToFocusOn - (view camera windowSize / 2))	"ROLinearMove new 		for: view by: (view camera position - pointToFocusOn + (view camera windowSize / 2))"</body></methods><methods><class-id>Roassal.ROFocusView</class-id> <category>public deprecated</category><body package="Roassal-Core">on: element view: aView 	"Public method"	"There is some duplication with ROLinearMove. Need to check"		"Deprecated method"	self on: element</body></methods><methods><class-id>Roassal.ROFocusView</class-id> <category>private</category><body package="Roassal-Core">highlightElement: element	ROBlink on: element</body></methods><methods><class-id>Roassal.ROFocusView class</class-id> <category>public - center view</category><body package="Roassal-Core">centerView: aView	self new view: aView toPosition: aView encompassingRectangle center</body><body package="Roassal-Core">moveElementsTopLeft: aView	"Move all the elements in the top left corner. No elements have a negative coordinate"	self new view: aView toPosition: aView encompassingRectangle topLeft</body></methods><methods><class-id>Roassal.ROFocusView class</class-id> <category>public - focus on element</category><body package="Roassal-Core">bottomLeftOn: element	^ self new bottomLeftOn: element</body><body package="Roassal-Core">bottomRightOn: element	^ self new bottomRightOn: element</body><body package="Roassal-Core">on: element	^ self new on: element</body></methods><methods><class-id>Roassal.ROAbstractPopup</class-id> <category>hooks</category><body package="Roassal-Core">createElementFor: element	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractPopup</class-id> <category>initialization</category><body package="Roassal-Core">closestPositionOf: el from: realPosition in: aView	"Return the closest position for el to realPosition to be entierely visible in the view"	| idealVirtualPosition virtualPositionX virtualPositionY winSize |	idealVirtualPosition := (aView camera realToVirtualPoint: realPosition).		winSize := aView camera windowSize.		"If the popup is larger than the window, then there is not much we can do"	(el width &gt; winSize x or: [ el height &gt; winSize y ]) 		ifTrue: [ ^ idealVirtualPosition + self popupOffset ].		"Check if the element is within the width of the view"	virtualPositionX := 		((idealVirtualPosition x + el width + self popupOffset x) &lt; winSize x) 			ifTrue: [ idealVirtualPosition x + self popupOffset x ]			ifFalse: [ idealVirtualPosition x - el width - self popupOffset x ].	(aView camera realToVirtualPoint: virtualPositionX @ 0) x &lt; 0		ifTrue: [ virtualPositionX := idealVirtualPosition x + self popupOffset x   ].	virtualPositionY := 		((idealVirtualPosition y + el height + self popupOffset y) &lt; winSize y) 			ifTrue: [ idealVirtualPosition y + self popupOffset y ]			ifFalse: [ idealVirtualPosition y - el height - self popupOffset y ].	(aView camera realToVirtualPoint: 0 @ virtualPositionY) y &lt; 0		ifTrue: [ virtualPositionY := idealVirtualPosition y + self popupOffset y ].		^ virtualPositionX @ virtualPositionY</body><body package="Roassal-Core">createAndShowPopupFor: element event: event	| popupPosition el |	self removeAllPopups.	el := self createPopupFor: element.	popupPosition := self closestPositionOf: el from: event realPosition in: (self receivingViewFor: element).	el translateTo: popupPosition.	afterCreationBlock roValue: el.	^ el signalUpdate</body><body package="Roassal-Core">initialize	super initialize.	afterCreationBlock := #yourself.	receivingView := [ :element | element view ].</body><body package="Roassal-Core">initializeElement: element	element		on: ROMouseEnter		do: [ :event | self createAndShowPopupFor: element event: event ].	element		on: ROMouseLeave		do: [ :event | self removePopupFor: element ].	element		on: ROMouseDragging		do: [ :event | self removeAllPopups ]</body><body package="Roassal-Core">popups	^ self class popups</body><body package="Roassal-Core">removeAllPopups	self popups do: [ :p | self removePopup: p ].	self class resetPopups</body><body package="Roassal-Core">removePopup: el	el ifNotNil: [ el remove ].</body><body package="Roassal-Core">removePopupFor: element	self removeAllPopups.	^ element signalUpdate</body></methods><methods><class-id>Roassal.ROAbstractPopup</class-id> <category>accessing</category><body package="Roassal-Core">afterCreationBlock: aOneArgBlock	"The parameter block is evaluated with the popup after being added in the view but before the view has been refreshed"	afterCreationBlock := aOneArgBlock</body><body package="Roassal-Core">receivingView: roassalView	"roassalView corresponds to the view in which the popup has to be added. For example, in case a view belongs to a stack, then the popup should probably be displayed in the stack."	receivingView := roassalView</body></methods><methods><class-id>Roassal.ROAbstractPopup</class-id> <category>creation</category><body package="Roassal-Core">createPopupFor: element	| el |	el := self createElementFor: element.	el on: ROMouseLeave do: [ :e | el view remove: el ifAbsent: [  ] ].	(self receivingViewFor: element) add: el.		self popups add: el.	^ el</body><body package="Roassal-Core">receivingViewFor: element	"Return the view in which the popup has to be added. Per default this view is the view in which the element is contained.	However, this may be different, especially when contained in a stack"	^ receivingView roValue: element</body></methods><methods><class-id>Roassal.ROAbstractPopup</class-id> <category>configuration</category><body package="Roassal-Core">popupOffset	"Return a point representing the offset of the popup"		^ self class defaultPopupOffset</body></methods><methods><class-id>Roassal.ROAbstractPopup class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">popups	^ popups ifNil: [ popups := OrderedCollection new ]</body><body package="Roassal-Core">resetPopups	popups := nil</body></methods><methods><class-id>Roassal.ROAbstractPopup class</class-id> <category>configuration</category><body package="Roassal-Core">defaultPopupOffset	^ 10 @ 10</body></methods><methods><class-id>Roassal.ROPopupView</class-id> <category>accessing</category><body package="Roassal-Core">view	^ view</body><body package="Roassal-Core">view: aView	view := aView</body></methods><methods><class-id>Roassal.ROPopupView</class-id> <category>hooks</category><body package="Roassal-Core">createElementFor: element	| v extent encompassingRectangle |	"We need here to have a proper extent here."	v := (view roValue: element) view.	encompassingRectangle := v encompassingRectangle.	extent := encompassingRectangle corner asIntegerPoint + (1 @ 1).	^ (ROElement new extent: extent) + (ROViewDisplayer new view: v; yourself).</body></methods><methods><class-id>Roassal.ROPopupView</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	view := ROView nullView.</body></methods><methods><class-id>Roassal.ROPopupView class</class-id> <category>public</category><body package="Roassal-Core">view: v	^ self new view: v</body></methods><methods><class-id>Roassal.ROScrollableTest</class-id> <category>tests</category><body package="Roassal-Core">testMovingScrollbar	ROGridLayout on: view elements .	verticalScrollbar announce: (ROMouseDragging step: 0 @ 250).	self assert: verticalScrollbar position = (0 @ 250).		self assert: view encompassingRectangle height =  350.	self assert: view camera position =  (0 @ 175) " ((2995-  view camera width) @0).".			horizontalScrollbar announce: (ROMouseDragging step: 250 @ 0).	self assert: horizontalScrollbar position = (250 @ 0).		self assert: view encompassingRectangle width =   530.	self assert: view camera position =  (265 @ 175) " ((2995-  view camera width) @0)."</body><body package="Roassal-Core">testScrollbar	self assert: horizontalScrollbar position = (0 @ 0).	self assert: view camera position = (0 @ 0)</body><body package="Roassal-Core">testScrollbarBottomMost	verticalScrollbar announce: (ROMouseDragging step: 0 @ 10000).	self assert: verticalScrollbar position = (0 @ 420).		self assert: view encompassingRectangle height =  55.	self assert: view camera position =   (0@46) " ((2995-  view camera width) @0)."</body><body package="Roassal-Core">testScrollbarRightMost	| points |	horizontalScrollbar announce: (ROMouseDragging step: 10000 @ 0).	self assert: horizontalScrollbar position = (420 @ 0).		points := Array with: 2515@0 with: 2516@0.	self assert: (points includes: view camera position).</body><body package="Roassal-Core">testStack	"Only one element in the stack so far. Soon we will have two!"	self assert: stack numberOfElements = 2.</body></methods><methods><class-id>Roassal.ROScrollableTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROView new.	view add: ROElement sprite.	view addAll: (ROHorizontalLineLayout on: (ROElement spritesOn: (1 to: 50))).	"view @ RODraggable ."	stack := ROViewStack new.	stack addView: view.	stack @ ROScrollable.	"stack open."	"Get the scrollbars"		horizontalScrollbar := stack elements first.	verticalScrollbar := stack elements second.</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>accessing</category><body package="Roassal-Core">callback	^ callback</body><body package="Roassal-Core">callback: rocontainercallback	callback := rocontainercallback</body><body package="Roassal-Core">elements	^ elements copy asArray</body><body package="Roassal-Core">elementsWithModelDo: aBlock	^ (elements copy select: [ :n | n model notNil ]) do: aBlock	</body><body package="Roassal-Core">encompassingNestedRectangle	elements isEmpty		ifTrue: [ ^ Rectangle origin: self topLeft extent: self padding ].	^ ((Rectangle merging: (self elementsNotEdge collect: #bounds)) translateBy: self topLeft) extendBy: self padding</body><body package="Roassal-Core">encompassingRectangle	elements isEmpty ifTrue: [ ^ self bounds ].	^ Rectangle merging: 		(Array with: self encompassingNestedRectangle),		(Array with: self bounds)</body><body package="Roassal-Core">resizeStrategy	"No reason to give the object itself"	^ resizeStrategy copy</body><body package="Roassal-Core">resizeStrategy: anInstanceOfROAbstractResizeStrategy	resizeStrategy := anInstanceOfROAbstractResizeStrategy</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>actions</category><body package="Roassal-Core">addElement: element	elements add: element.	callback addElement: element in: self</body><body package="Roassal-Core">elementFromModel: object	"Recursively look for the element with a model object"	| v |		(self model = object) ifTrue: [ ^ self ].		v :=  elements reverse		detect: [ :e | (e model = object) and: [ e isElement ] ]		ifNone: [ nil ].	v ifNotNil: [ ^ v ].		elements reverse do: [ :e |		v := e elementFromModel: object.		v ifNotNil: [ ^ v ] ].		^ nil	"^ (self elementsSuchThat: [ :el | object = el model ]) first"</body><body package="Roassal-Core">elementsCollect: aBlock	^ elements collect: aBlock</body><body package="Roassal-Core">elementsDo: aBlock	^ elements copy do: aBlock</body><body package="Roassal-Core">elementsSuchThat: aBlock	^ elements select: aBlock</body><body package="Roassal-Core">remove: element	"Remove the element from myself. However, the element is not removed from the visualization. Send #remove to element to actually remove it."	elements remove: element.	callback removeElement: element in: self</body><body package="Roassal-Core">remove: element ifAbsent: aBlock	elements remove: element ifAbsent: aBlock</body><body package="Roassal-Core">removeAllElements	elements := OrderedCollection new.	callback removeAllElementsFrom: self</body><body package="Roassal-Core">removeAttribute: aKey	self attributes removeKey: aKey</body><body package="Roassal-Core">replace: element by: anotherElement	"Replace an element by another. The position in the list of elements is preserved"	| index oldElements |	index := elements indexOf: element.	oldElements := elements copy.		element remove.	self add: anotherElement.		elements := oldElements.	elements at: index put: anotherElement.	callback removeElement: element in: self.	callback addElement: anotherElement in: self</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>testing</category><body package="Roassal-Core">hasAttribute: aKey	"Return true if atribute is present"		^ attributes notNil and: [ attributes includesKey: aKey ]</body><body package="Roassal-Core">hasAttributes 	"Return true if at least one attributes is present"		^ attributes notNil and: [ attributes notEmpty ]</body><body package="Roassal-Core">isView	^ false</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>enumerating</category><body package="Roassal-Core">allElementsDo: aBlockOrSymbol	"Recursively perform an action for each elements."	self elementsDo: [ :each | each withAllElementsDo: aBlockOrSymbol ]</body><body package="Roassal-Core">elementsReverseDo: aBlock	^ elements reverse do: aBlock</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>translating</category><body package="Roassal-Core">adjustSizeIfNecessary	self subclassResponsibility</body><body package="Roassal-Core">translate: innerElement by: aPoint	"Translate innerElement by aPoint amount of pixels"		resizeStrategy translate: innerElement by: aPoint.	self adjustSizeIfNecessary</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>accessing-computed</category><body package="Roassal-Core">edgeFromModel: object	"Recursively look for the element with a model object"	| v |		(self model = object) ifTrue: [ ^ self ].		v :=  elements 		detect: [ :e | (e model = object) and: [ e isEdge ] ]		ifNone: [ nil ].	v ifNotNil: [ ^ v ].		elements do: [ :e |		v := e elementFromModel: object.		v ifNotNil: [ ^ v ] ].		^ nil</body><body package="Roassal-Core">elementsAsEdge	^ elements select: #isEdge</body><body package="Roassal-Core">elementsNotEdge	^ elements reject: #isEdge</body><body package="Roassal-Core">numberOfElements 	^ elements size</body><body package="Roassal-Core">padding	^ resizeStrategy padding</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>hooks</category><body package="Roassal-Core">bounds	self subclassResponsibility</body><body package="Roassal-Core">model	"Return the domain object that is behind the Roassal element. Could be nil"	self subclassResponsibility </body><body package="Roassal-Core">topLeft	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	elements := OrderedCollection new.	"Per default, the parent is always extensible"	resizeStrategy := ROExtensibleParent instance.	callback := ROContainerCallbackNull instance</body></methods><methods><class-id>Roassal.ROContainer</class-id> <category>accessing-attributes</category><body package="Roassal-Core">attributeAt: aKey	^ self attributes at: aKey</body><body package="Roassal-Core">attributeAt: aKey ifAbsentPut: aBlockClosure 		^ self attributes at: aKey ifAbsentPut: aBlockClosure</body><body package="Roassal-Core">attributeAt: aKey put: value	^ self attributes at: aKey put: value</body><body package="Roassal-Core">attributes	"Return the list of attributes associated to the element. Attributes are useful for caching values"	^ attributes ifNil: [ attributes := Dictionary new ]</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>events</category><body package="Roassal-Core">announce: anEvent	"trigger an event. Objects who registered to me will get notified"	| eventToBeSent |	eventToBeSent := anEvent isBehavior 						ifTrue: [ anEvent new ]						ifFalse: [ anEvent ]. 		eventToBeSent element: self.	eventHandler announce: eventToBeSent</body><body package="Roassal-Core">forward	eventHandler forward</body><body package="Roassal-Core">forward: obj	eventHandler forward: obj</body><body package="Roassal-Core">modelChanged		"We should do an annoucement like ROModelChanged. 	But for now it is not useful. It is here just because of cache of ROLabel."		self shapesDo: [ :eachShape | eachShape modelChanged: self ]</body><body package="Roassal-Core">on: eventClass do: aBlock	"Register a block as an handler for eventClass"		eventHandler when: eventClass do: aBlock.	"interactions at: eventClass put: aBlock"</body><body package="Roassal-Core">on: eventClass doOnce: aBlock	"Register a block as an handler for eventClass. The callback is removed when exected"		eventHandler when: eventClass do: [ :arg | 		aBlock value: arg.		eventHandler unsubscribeForEvent: eventClass.		"self removeInteraction: eventClass "]</body><body package="Roassal-Core">parentAnnounce: event	"Make the parent announce something"			parent announce: event</body><body package="Roassal-Core">signalUpdate	"Trigger a redisplay of the view"		^ view signalUpdate</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>testing</category><body package="Roassal-Core">is: anInteractionClass	"Return true if the element has the interaction class provided in parameter"		interactions ifNil: [ ^ false ].	^ interactions includesKey: anInteractionClass</body><body package="Roassal-Core">isEdge	"True if I am an edge"	self subclassResponsibility</body><body package="Roassal-Core">isElement	^ self isEdge not</body><body package="Roassal-Core">isNotEdge	^ self isEdge not</body><body package="Roassal-Core">isRendered	"Return true I will be rendered by the view that contains me"		^ self view isRendered: self </body><body package="Roassal-Core">isShapedAs: aShapeClass	^ shape isShapedAs: aShapeClass</body><body package="Roassal-Core">isVisibleIn: rectangle	"Return true if the element is completely or partially visible in the rectangle given in parameter"	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>shapes</category><body package="Roassal-Core">+ aShape 	"Add a shape to myself. aShape could either be an instance of a shape class or a class"	self addShape: aShape.</body><body package="Roassal-Core">- aShape 	"Remove a shape from myself. aShape could either be an instance of a shape class or a class"		self removeShape: aShape.	^ self </body><body package="Roassal-Core">addShape: aShapeOrShapeClass	"Add a shape to myself. aShape could either be an instance of a shape class or simply a class"	| s |	s := (aShapeOrShapeClass installedOn: self).	s addLast: shape.	shape := s.</body><body package="Roassal-Core">change: aShapeClass for: aShape	"aDecorator could be a class or a shape"		shape := shape change: aShapeClass for: (aShape installedOn: self).</body><body package="Roassal-Core">forShape: shapeClass do: aOneArgBlock	"Find the shape that correspond to the shape class, and evaluate the block by passing the shape to it"	| v |	v := ( self getShape: shapeClass). 	v ifNotNil: [ aOneArgBlock value: v  ]</body><body package="Roassal-Core">getShape: shapeClass	"Return a shape instance, instance of the shape class provided as parameter"	^ self shapeDetect: [ :de | de isKindOf: shapeClass ]</body><body package="Roassal-Core">removeShape: aShapeClass	"Remove a shape of the element"	shape := shape removeShape: aShapeClass</body><body package="Roassal-Core">reversedShapesDo: aBlock	^ self shapes reverse do: aBlock</body><body package="Roassal-Core">shapeDetect: aBlock	^ shape shapeDetect: aBlock</body><body package="Roassal-Core">shapes	"Return the list of shapes"		| ans d |	ans := OrderedCollection new.	d := shape. 	[ d hasNext ] whileTrue: [ 		ans add: d.		d := d next ].	ans add: d.	^ ans.</body><body package="Roassal-Core">shapesCollect: aBlock	^ self shapes collect: aBlock</body><body package="Roassal-Core">shapesDo: aBlock	^ shape shapesDo: aBlock</body><body package="Roassal-Core">shapesSelect: aBlock	^ self shapes select: aBlock</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>accessing</category><body package="Roassal-Core">@ anInteractionClassOrInstance	"Add an interaction to the node"		self addInteraction: anInteractionClassOrInstance</body><body package="Roassal-Core">model	"Return the object behind the element"	^ model</body><body package="Roassal-Core">model: anObject 	"Set the object behind the element"		model := anObject.	self modelChanged.	self resetCache.</body><body package="Roassal-Core">on: anObject 	"Set the object model of myself. The object model is used by the shape when computing metrics that may be used by the shapes"	self model: anObject</body><body package="Roassal-Core">parent	"Return the node in which I am contained"		^ parent</body><body package="Roassal-Core">parent: aViewOrAnElement	"Set the node in which I am contained"	parent := aViewOrAnElement</body><body package="Roassal-Core">view	"Answer the view in which I am defined"	^ view</body><body package="Roassal-Core">view: aView	"Set the view in which I am defined. All my elements should also belong to the same view"	view := aView.</body><body package="Roassal-Core">zIndex	^ zIndex</body><body package="Roassal-Core">zIndex: anInteger	zIndex := anInteger</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>enumerating</category><body package="Roassal-Core">allElementsDo: aBlock	"aBlock is a one-arg block. This method executes aBlock for each element that I contains. 	 The block receive the element as argument"		self elementsDo: [:each | 		aBlock value: each.		each allElementsDo: aBlock ]</body><body package="Roassal-Core">withAllElementsDo: aBlock	aBlock value: self.	self allElementsDo: aBlock</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>actions</category><body package="Roassal-Core">remove	"Remove myself from the view I belong to (if I actually belong to the view, else do nothing) and from my parent."	self removeFromParent.	self view removeElementToRender: self.	"We remove all the subelements"	self allElementsDo: #remove</body><body package="Roassal-Core">removeFromParent	parent remove: self ifAbsent: [  ]</body><body package="Roassal-Core">resetCache	self attributeCaches do: [ :k | self removeAttribute: k ]</body><body package="Roassal-Core">setAsNotRendered	self view markAsToBeRemoved: self.</body><body package="Roassal-Core">setAsRendered	self view markAsToBeAdded: self</body><body package="Roassal-Core">setZindexFrom: aZOrdering	aZOrdering setZindexOf: self</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>interaction</category><body package="Roassal-Core">addInteraction: anInteractionClassOrInstance	"Add an interaction to the node"		interactions at: anInteractionClassOrInstance key put: (anInteractionClassOrInstance initializeElement: self)	</body><body package="Roassal-Core">changeInteraction: anInteractionClass for: anInteraction	"Change an interaction, instance of anInteractionClass, for an Interaction"		self removeInteraction: anInteractionClass.	self @ anInteraction</body><body package="Roassal-Core">getInteraction: anInteractionClass	^ interactions at: anInteractionClass</body><body package="Roassal-Core">getInteraction: anInteractionClass ifPresent: aBlock	^ interactions at: anInteractionClass ifPresent: aBlock</body><body package="Roassal-Core">interactionsDo: aBlock	"Execute a block for each interaction"		interactions ifNil: [ ^ self ].	interactions values do: aBlock</body><body package="Roassal-Core">removeInteraction: anInteractionClass	"Remove an interaction from the receiver. No error is raised if no interaction is found"		| ds |	ds := interactions select: [ :d | d isKindOf: anInteractionClass ].	ds associationsDo: [ :assoc | 		interactions removeKey: assoc key.		eventHandler unsubscribe: assoc value ].</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>accessing-computed</category><body package="Roassal-Core">depth	^ 1 + parent depth</body><body package="Roassal-Core">numberOfInteractions	"Answer the number of interactions"	"	^ eventHandler numberOfSubscriptions"	interactions ifNil: [ ^ 0 ].	^ interactions size </body><body package="Roassal-Core">numberOfShapes	"Return the number of shapes associated to the element"		^ self shapes size </body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas	"This should be changed. drawOn: should not do an explicit iteration, but letting each shape call drawOn: on its next "	shape chainedDrawOn: aCanvas for: self</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	parent := ROView nullView.		eventHandler := ROAnnouncer new.	view := ROView nullView.	shape := RONullShape new.			"Actually, I am not sure we need to have a variable interactions"	interactions := IdentityDictionary new.	zIndex := 0</body></methods><methods><class-id>Roassal.ROAbstractComponent</class-id> <category>cache</category><body package="Roassal-Core">attributeCaches	^ self attributes keys select: [ :k | k endsWith: 'Cache' ]</body></methods><methods><class-id>Roassal.ROAbstractComponent class</class-id> <category>public</category><body package="Roassal-Core">model: anObject	^ self on: anObject</body><body package="Roassal-Core">on: anObject 	^ self new on: anObject; yourself</body></methods><methods><class-id>Roassal.ROEdge</class-id> <category>testing</category><body package="Roassal-Core">contains: aPoint	^ shape contains:  aPoint for: self</body><body package="Roassal-Core">isEdge	^ true</body><body package="Roassal-Core">isVisibleIn: rectangle	"Return true if the element is completely or partially visible in the rectangle given in parameter"	"In the case of an edge, the method returns true if one of the boundary is on screen. This has the effect to display the edge even if one extremity is not visible"	^ (from isVisibleIn: rectangle) or: [ to isVisibleIn: rectangle ]</body></methods><methods><class-id>Roassal.ROEdge</class-id> <category>accessing-computed</category><body package="Roassal-Core">absolutePosition	^  self from absolutePosition </body><body package="Roassal-Core">bounds	^  Rectangle merging: (Array with: self from bounds with: self to bounds)</body><body package="Roassal-Core">edgeFromModel: object	"if the object is equal to the mode, then return itself, else nil"		(self model = object) ifTrue: [ ^ self ].	^ nil</body><body package="Roassal-Core">elementAt: aPoint	"Do nothing since an edge cannot contain other elements"	^ self </body><body package="Roassal-Core">elementsDo: aBlock	"Do nothing"</body><body package="Roassal-Core">extent	^ self bounds extent </body><body package="Roassal-Core">topLeft	^ (shape lineSegmentsFor: self) first</body></methods><methods><class-id>Roassal.ROEdge</class-id> <category>accessing</category><body package="Roassal-Core">from	^ from</body><body package="Roassal-Core">from: f to: t	from := f.	to := t</body><body package="Roassal-Core">height 	 ^((self from position y) - (self to position y)) abs</body><body package="Roassal-Core">position 		^self from position </body><body package="Roassal-Core">source	^ self from</body><body package="Roassal-Core">target	^ self to</body><body package="Roassal-Core">to 	^ to</body><body package="Roassal-Core">width 	 ^(self getShape: ROLine) width  </body></methods><methods><class-id>Roassal.ROEdge</class-id> <category>actions</category><body package="Roassal-Core">addedInAnElement: el	el addElement: self.	self parent: el; view: el view.</body><body package="Roassal-Core">elementFromModel: object	"if the object is equal to the mode, then return itself, else nil"		"(self model = object) ifTrue: [ ^ self ]."	^ nil</body></methods><methods><class-id>Roassal.ROEdge</class-id> <category>translation</category><body package="Roassal-Core">translateBy: aPoint </body><body package="Roassal-Core">translateTo: aPoint </body></methods><methods><class-id>Roassal.ROEdge</class-id> <category>visiting</category><body package="Roassal-Core">accept: aVisitor	aVisitor visitEdge: self</body></methods><methods><class-id>Roassal.ROEdge class</class-id> <category>public</category><body package="Roassal-Core">arrowedLineFrom: f to: t	^ (self from: f to: t)		+ (ROLine new addBegining: ROArrow new) ;		yourself</body><body package="Roassal-Core">from: fromNode to: toNode	^ self on: nil from: fromNode to: toNode</body><body package="Roassal-Core">lineFrom: f to: t	^ (self from: f to: t)		+ ROLine ;		yourself</body><body package="Roassal-Core">linesFor: associations 	"Return a collection of edges, one for each provided association"	^ associations collect: [ :assoc | self lineFrom: assoc key to: assoc value ]</body><body package="Roassal-Core">on: aModel from: f to: t	self assert: [ f isKindOf: ROElement ].	self assert: [ t isKindOf: ROElement ].	^ (self on: aModel) from: f to: t; yourself</body></methods><methods><class-id>Roassal.ROEdge class</class-id> <category>public - edges constructions</category><body package="Roassal-Core">buildEdgesFromAssociations: associations inView: view	"associations could be {2 -&gt; 5 . 1 -&gt; 5 }.	 Takes the model of element into account"		^ self buildEdgesFromElements: associations from: #key to: #value inView: view</body><body package="Roassal-Core">buildEdgesFromAssociations: associations using: aLineShape	"associations could be {2 -&gt; 5 . 1 -&gt; 5 }.	 Takes the model of element into account"		^ self buildEdgesFromElements: associations from: #key to: #value using: aLineShape</body><body package="Roassal-Core">buildEdgesFromAssociations: associations using: aLineShape inView: view	"associations could be {2 -&gt; 5 . 1 -&gt; 5 }.	 Takes the model of element into account"		| edges associationsOfElements |	associationsOfElements := associations collect: [ :assoc | (view elementFromModel: assoc key) -&gt; (view elementFromModel: assoc value) ].	associationsOfElements isEmpty ifTrue: [ ^ #() ].		edges := OrderedCollection new.	associationsOfElements do: [ :associationOfTwoElements |				| edge |				edge := ROEdge from: associationOfTwoElements key to: associationOfTwoElements value. 				edge + aLineShape.				edges add: edge ].	view addAll: edges.	^ edges</body><body package="Roassal-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock	"Handy method to easily build edges. Return a list of edges"	^ self buildEdgesFromElements: elements from: fromBlock to: toBlock using: ROLine</body><body package="Roassal-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock using: aLineShape	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	| edges container fromElement toElement elementsWithModels |	elements isEmpty ifTrue: [ ^ #() ].	edges := OrderedCollection new.	elementsWithModels := elements select: [ :el | el model notNil ].	elementsWithModels do: [ :element |		container := element parent.		fromElement := container elementFromModel: (fromBlock roValue: element model).		toElement := container elementFromModel: (toBlock roValue: element model).		(fromElement notNil and: [ toElement notNil ])			ifTrue: [  				| edge |				edge := ROEdge from: fromElement to: toElement. 				edge + aLineShape.				edges add: edge.				container add: edge ] ].	^ edges</body><body package="Roassal-Core">buildEdgesFromElements: elements from: fromBlock toAll: toBlock using: aLineShape	"Handy method to easily build edges. Return a list of edges"	"fromBlock and toBlock operate on the model of the elements"	"toBlock should return a collection of models"	| edges container fromElement toElements elementsWithModels |	elements isEmpty ifTrue: [ ^ #() ].	edges := OrderedCollection new.	elementsWithModels := elements select: [ :el | el model notNil ].		elementsWithModels do: [ :element |		container := element parent.		fromElement := container elementFromModel: (fromBlock roValue: element model).				"We get the list of elements that corresponds to (toBlock roValues: element model)"		toElements := OrderedCollection new.		(toBlock roValue: element model) do: [ :model | 			| v |			v := container elementFromModel: model.			v notNil ifTrue: [ toElements add: v ] ].						(fromElement notNil and: [ toElements notEmpty ])			ifTrue: [  				toElements do: [ :toElement |					| edge |					edge := ROEdge from: fromElement to: toElement. 					edge + aLineShape.					edges add: edge.					container add: edge ] ]  ].	^ edges</body></methods><methods><class-id>Roassal.ROVerticalNarrowTreeLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	ROVerticalNarrowTreeLayout on: elements.		result := ((Array new: 20) at: 1 put: ((480.0@3.0)); at: 2 put: ((3.0@73.0)); at: 3 put: ((56.0@73.0)); at: 4 put: ((109.0@73.0)); at: 5 put: ((162.0@73.0)); at: 6 put: ((215.0@73.0)); at: 7 put: ((268.0@73.0)); at: 8 put: ((321.0@73.0)); at: 9 put: ((374.0@73.0)); at: 10 put: ((427.0@73.0)); at: 11 put: ((480.0@73.0)); at: 12 put: ((533.0@73.0)); at: 13 put: ((586.0@73.0)); at: 14 put: ((639.0@73.0)); at: 15 put: ((692.0@73.0)); at: 16 put: ((745.0@73.0)); at: 17 put: ((798.0@73.0)); at: 18 put: ((851.0@73.0)); at: 19 put: ((904.0@73.0)); at: 20 put: ((957.0@73.0)); yourself).	self assert: (elements collect: #position) = result.</body></methods><methods><class-id>Roassal.ROColorAlphaFading</class-id> <category>hooks</category><body package="Roassal-Core">doStep	(alpha &lt; 0.0 and: [ alpha &gt; 1.0 ]) ifTrue: [  ^ self ].	self setAlpha: alpha to: element.	alpha := alpha + increment.</body><body package="Roassal-Core">setAlpha: alphaValue to: anElement	"alphaValue is a float between 0.0 and 1.0. 1.0 there is no alpha, the color is not transparent. With 0.0 the color is completely transparent"	| shape |	shape := element getShape: ROShape.	shape color: ((shape color roValue: element) alpha: alpha).	element signalUpdate</body></methods><methods><class-id>Roassal.ROColorAlphaFading</class-id> <category>public</category><body package="Roassal-Core">for: anElement nbCycles: integer	self nbCycles: integer.	element := anElement.	increment := (1 / nbCycles) asFloat.	alpha := 0.	self setAlpha: 0.0 to: anElement.	anElement view addAnimation: self.</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>events</category><body package="Roassal-Core">setLupaAnnouncementsFor: view		lupa on: ROMouseDragging do: [ :event | 		lupa translateByRealPoint: (event step).		lupaBack translateByRealPoint: (event step).		view camera translateBy: event step * (view camera realExtent / self camera realExtent).		lupa signalUpdate.		lupaBack signalUpdate.					view signalUpdate.		view updateElementsToRender.	].	lupa on: ROMouseLeftClick do:[:event |		self translateLupaTo: event position for: view	].</body><body package="Roassal-Core">setMiniMapAnnouncementsFor: view	miniMap on: ROMouseLeftClick do:[:event |		self translateLupaTo: event position for: view	].</body><body package="Roassal-Core">setMiniMapContainerAnnouncementsFor: view	miniMapContainer on: ROKeyDown do: [:event | 		(event keyValue = self symbolValueForOpen)			ifTrue: [				self openMiniMapFor: view							]			].	miniMapContainer on: ROWindowResized do:[:event |			 self resizeContainer: event extent for: view	].	miniMapContainer on: ROMouseLeftClick do: [:event | 		self translateLupaTo: event position for: view	].</body><body package="Roassal-Core">setViewAnnouncementsFor: view		view on: ROCameraTranslated do: [:event | 		|trans|		trans := (event step * (self camera realExtent / view camera realExtent)) asIntegerPoint.		lupa translateBy: trans.		lupaBack translateBy: trans.		miniMapContainer signalUpdate.	].	view on: ROCameraResized do: [:event |			self setLupaPositionAndSizeFor: view.			lupa signalUpdate.		].	targetView on: ROKeyDown do: [:event | 		(event keyValue = self symbolValueForOpen)			ifTrue: [				self openMiniMapFor: view.			]			].	view on: ROWindowResized do: [:event |		self setLupaSizeFor: view.		lupa signalUpdate.		].</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>lupa</category><body package="Roassal-Core">setLupaPositionAndSizeFor: view	self setLupaSizeFor: view.	self setLupaPositionFor: view.</body><body package="Roassal-Core">setLupaPositionFor: view	| position |	position := (view camera position * (self camera realExtent / view camera realExtent) + miniMap position) asIntegerPoint.	lupa translateToRealPoint: position.	lupaBack translateToRealPoint: position.</body><body package="Roassal-Core">setLupaSizeFor: aView		|extent|	extent := self camera virtualToRealPoint: (aView camera windowSize * (aView camera extent/ aView camera realExtent)) asIntegerPoint.	lupa extent: extent.	lupaBack extent: extent.</body><body package="Roassal-Core">setupLupaFor: aView		lupa := ROElement new.	lupa + (ROBorder new color: Color black).		lupaBack := ROElement new.	lupaBack + (ROBox new color: Color white).		self setLupaAnnouncementsFor: aView.	lupa resizeStrategy: ROFixedSizedParent instance.</body><body package="Roassal-Core">translateLupaTo: position for: view		|step|		step := position - lupa position.		lupa translateByRealPoint: step.		lupaBack translateByRealPoint: step.		view camera translateBy: step * (view camera realExtent / self camera realExtent).		lupa signalUpdate.		lupaBack signalUpdate.					view signalUpdate.		view updateElementsToRender.</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>opening</category><body package="Roassal-Core">openMiniMapFor: view	(miniMapWindow isNil or:[miniMapWindow owner isNil])		ifTrue: [ miniMapWindow := miniMapStack openInWindowSized: self defaultWindowSize ]		ifFalse: [ miniMapWindow delete. miniMapWindow := nil.]</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: view		"TODO: remove targetView and make the ROKeyEvent work without help "	targetView isNil 		ifTrue: [ targetView := view ].		containerSize := self defaultWindowSize.		self setupMiniMapFor: view.	self setupLupaFor: view.	self setupMiniMapContainerForView: view.	self setupStackFor: view. 		self setViewAnnouncementsFor: view.		view attributeAt: #miniMap put: self</body><body package="Roassal-Core">setupStackFor: view	| zoomIn zoomOut |	miniMapStack := ROViewStack new.		zoomIn := ROElement new model: 'zoom in'; 				+(ROLabel new color: Color red ); 				+ (ROBorder new color: Color red );				yourself.	zoomOut := ROElement new model: 'zoom out'; 				+(ROLabel new color: Color red ); 				+ (ROBorder new color: Color red );				yourself.		zoomIn on: ROMouseLeftClick do:[:event |			ROZoomInMove new on: view.			].	zoomOut on: ROMouseLeftClick do:[:event |			ROZoomOutMove new on: view.			].		miniMapStack 		add: zoomIn; 		add: zoomOut;		addView: miniMapContainer.			ROHorizontalLineLayout new on: miniMapStack elements.</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>minimap</category><body package="Roassal-Core">getEncompassingRectangleOfView: view	"Return the encompassing rectangle of the view. This methods makes sure this is not too small"	| encompassingRectangle enRect |	encompassingRectangle := view encompassingRectangle.	"Make sure we are dealing with a meaningful size"	enRect := encompassingRectangle origin 						extent: (self minimumViewExtent max: encompassingRectangle extent).	^ enRect</body><body package="Roassal-Core">setMiniMapPosition	| position |	position := (0 @ 0 corner: containerSize) center - (miniMap extent / 2).	miniMap translateToRealPoint: position.</body><body package="Roassal-Core">setMiniMapPositionAndSizeFor: view	self setMiniMapSizeFor: view.	self setMiniMapPosition.</body><body package="Roassal-Core">setMiniMapSizeFor: view	| enRect extent e |	(view encompassingRectangle extent &lt;= (1 @ 1))		ifTrue: [ ^ self ].  		enRect := self getEncompassingRectangleOfView: view.	extent := self camera virtualToRealPoint: enRect extent.	extent y * (containerSize x / extent x) &lt; containerSize y		ifTrue: [ e := containerSize x @ (extent y * (containerSize x / extent x)) ]		ifFalse: [ e := (extent x * (containerSize y / extent y)) @ containerSize y ].	miniMap extent: e</body><body package="Roassal-Core">setupMiniMapFor: view	miniMap := ROElement new.	miniMap extent: 5 @ 5."	miniMap extent: self defaultWindowSize."	miniMapDisplayer := ROMiniMapDisplayer new view: view; factor: self factor.	miniMap + miniMapDisplayer.	self setMiniMapPositionAndSizeFor: view.	miniMap resizeStrategy: ROFixedSizedParent instance.		self setMiniMapAnnouncementsFor: view.</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>container</category><body package="Roassal-Core">resizeContainer: extent for: view	containerSize := extent.	self setMiniMapPositionAndSizeFor: view.	miniMapDisplayer setCameraRealExtentFor: miniMap.	self setLupaPositionAndSizeFor: view.</body><body package="Roassal-Core">setupMiniMapContainerForView: view		miniMapContainer := ROView new title: (view title , ' miniMap').	miniMapContainer backgroundColor: Color lightGray.		miniMapContainer add: lupaBack.	miniMapContainer add: miniMap.	miniMapContainer add: lupa.			self setMiniMapContainerAnnouncementsFor: view.</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>accessing</category><body package="Roassal-Core">camera	^miniMapDisplayer camera</body><body package="Roassal-Core">container	^miniMapContainer</body><body package="Roassal-Core">containerSize	^containerSize</body><body package="Roassal-Core">defaultWindowSize	"Default size of the mini map when opened"	^ 200 @ 200</body><body package="Roassal-Core">factor	^0.2</body><body package="Roassal-Core">lupa	^ lupa</body><body package="Roassal-Core">miniMap	^ miniMap</body><body package="Roassal-Core">miniMapDisplayer		^miniMapDisplayer</body><body package="Roassal-Core">symbolValueForOpen	^$m asInteger</body><body package="Roassal-Core">targetView: aView	targetView := aView</body></methods><methods><class-id>Roassal.ROMiniMap</class-id> <category>configuration</category><body package="Roassal-Core">minimumViewExtent	"Return the minimum size of a view. This is particularly useful if the minimap is open on an empty view for example"	^ 50 @ 50</body><body package="Roassal-Core">minimumViewRectangle	^ (0 @ 0) extent: self minimumViewExtent</body></methods><methods><class-id>Roassal.ManifestRoassal class</class-id> <category>meta data</category><body package="Roassal-Core">rejectClasses^ #()</body><body package="Roassal-Core">rejectRules^ #()</body></methods><methods><class-id>Roassal.ROAttachPoint</class-id> <category>public - hooks</category><body package="Roassal-Core">endingPointOf: anEdge	self subclassResponsibility</body><body package="Roassal-Core">startingPointOf: anEdge	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAttachPoint class</class-id> <category>public - creation</category><body package="Roassal-Core">instance	"Useful to avoid create unnecessary instances"		instance ifNil: [ instance := self new ].	^ instance</body><body package="Roassal-Core">resetInstance	"	self withAllSubclassesDo: #resetInstance	"	instance := nil.</body></methods><methods><class-id>Roassal.ROLayoutTranslator</class-id> <category>hook</category><body package="Roassal-Core">nbCycles: anInteger	"Do nothing"</body><body package="Roassal-Core">translate: element to: newPosition	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROLayoutTranslator class</class-id> <category>accessing</category><body package="Roassal-Core">default	"Return the default translator, the one used in the layouts"	defaultTranslator ifNotNil: [ ^ defaultTranslator ].	^ defaultTranslator := self defaultClass new</body><body package="Roassal-Core">defaultClass	^ self withAllSubclasses detect: #isDefault</body></methods><methods><class-id>Roassal.ROLayoutTranslator class</class-id> <category>testing</category><body package="Roassal-Core">isDefault	^ false</body></methods><methods><class-id>Roassal.RODirectLayoutTranslator</class-id> <category>hook</category><body package="Roassal-Core">translate: element to: newPosition	element translateTo: newPosition</body></methods><methods><class-id>Roassal.RODirectLayoutTranslator class</class-id> <category>testing</category><body package="Roassal-Core">isDefault	^ true</body></methods><methods><class-id>Roassal.ROAbstractLabel</class-id> <category>accessing</category><body package="Roassal-Core">clearTextCache	"private"	textCache := nil</body><body package="Roassal-Core">extentFor: element	 ^(super extentFor: element) max: (self preferedExtentFor: element)</body><body package="Roassal-Core">fontFor: anElement	^ self fontFor: anElement with: anElement view camera</body><body package="Roassal-Core">fontFor: anElement with: aCamera	|fo|	fo := ROPlatform current fontOrganizerClass.	^ fontSize isNil 		ifTrue:  [ fo defaultFontForSize: fo defaultFontSize * (aCamera scale x) ]		ifFalse: [ fo defaultFontForSize: ((self fontSizeFor: anElement) * (aCamera scale x)) ].</body><body package="Roassal-Core">fontSize: aBlockOrASymbolOrAnObject	fontSize := aBlockOrASymbolOrAnObject.</body><body package="Roassal-Core">fontSizeFor: anElement	^fontSize roValue: anElement</body><body package="Roassal-Core">interlineSpace	"Space between lines in a multi-line text"	^ interlineSpace</body><body package="Roassal-Core">interlineSpace: anInteger	"Space between lines in a multi-line text"	interlineSpace := anInteger</body><body package="Roassal-Core">preferedExtentFor: aROElement	^ (self widthFor: aROElement) @ (self heightFor: aROElement)</body><body package="Roassal-Core">text	^ text</body><body package="Roassal-Core">text: aOneArgBlockOrSymbolOrValue	text := aOneArgBlockOrSymbolOrValue.	self clearTextCache</body><body package="Roassal-Core">textCache	^ textCache ifNil: [ textCache := ROTextCache new ]</body><body package="Roassal-Core">textHorizontalPadding: aSmallInteger 	textHorizontalPadding := aSmallInteger</body><body package="Roassal-Core">textPadding: aSmallInteger 		self textVerticalPadding: aSmallInteger.	self textHorizontalPadding: aSmallInteger.</body><body package="Roassal-Core">textVerticalPadding	^ textVerticalPadding</body><body package="Roassal-Core">textVerticalPadding: aSmallInteger 	textVerticalPadding := aSmallInteger</body></methods><methods><class-id>Roassal.ROAbstractLabel</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	self subclassResponsibility </body><body package="Roassal-Core">heightFor: aROElement	"Return the height for the element"	| tmpFont |	tmpFont := self fontFor: aROElement with: aROElement view camera.	^ self heightFor: aROElement withFont: tmpFont</body><body package="Roassal-Core">heightFor: aROElement withFont: aFont	"Return the height for the element"	| lineCount |	lineCount := (self linesOf: aROElement) size.	^ ((aFont height asInteger + self interlineSpace) * lineCount) + (2 * textVerticalPadding) - self interlineSpace.</body><body package="Roassal-Core">heightOfLineWithFont: font	"Return the height of a string. It is expected the string is just one line."		^ font height asInteger + self interlineSpace</body><body package="Roassal-Core">linesOf: aROElement	^ self textCache hasLines			ifTrue: [ self textCache lines ]			ifFalse: [ | str v |				str := self textAdaptedFor: aROElement.				v := self rawLinesOf: str.				self textCache lines: v.				v ]</body><body package="Roassal-Core">linesOf: aROElement do: aOneArgBlock		(self linesOf: aROElement) do: aOneArgBlock</body><body package="Roassal-Core">offsetWhenDrawing	^ ROPlatform current fontOrganizerClass offsetWhenDrawing</body><body package="Roassal-Core">rawLinesOf: aString	"Return a collection of strings got from aString."		| ans |	ans := OrderedCollection new.	aString lineIndicesDo: [:start :endWithoutDelimiters :end |		ans add: (aString copyFrom: start to: endWithoutDelimiters)].	^ ans asArray</body><body package="Roassal-Core">textAdaptedFor: anElement	"Return the text from anElement. All the tabulation are replaced"		^ self textCache hasAdaptedText			ifTrue: [ self textCache adaptedText ]			ifFalse: [ | v |				v := (self textFor: anElement) copyReplaceAll: '	' with: '      '.				self textCache adaptedText: v.				v ]</body><body package="Roassal-Core">textFor: aROElement	^ self textCache hasText 			ifTrue: [ self textCache text ]			ifFalse: [ | v |				v := (text roValue: aROElement).				 (v class == 'abc' class)					ifFalse: [ v := v printString ].				self textCache text: v.				v ]</body><body package="Roassal-Core">widthFor: aROElement	"Return the width for the element"		| cols tmpFont tmpWidth |	tmpFont := self fontFor: aROElement with: aROElement view camera.	cols := (self linesOf: aROElement) collect: [ :line | self widthOfLine: line withFont: tmpFont ].	tmpWidth := cols notEmpty						ifTrue: [ cols inject: cols anyOne into: [ :s :e | s max: e ] ]						ifFalse: [ 0 ].	^ tmpWidth + (2 * textHorizontalPadding)</body><body package="Roassal-Core">widthOfLine: string withFont: aFont	"Return the length of a string. It is expected the string is just one line."		^ ROPlatform current fontOrganizerClass widthOfString: string font: aFont</body></methods><methods><class-id>Roassal.ROAbstractLabel</class-id> <category>visitor</category><body package="Roassal-Core">accept: visitor	visitor visitAbstractLabel: self</body></methods><methods><class-id>Roassal.ROAbstractLabel</class-id> <category>initialize</category><body package="Roassal-Core">initialize 	super initialize.	text := #model.	textHorizontalPadding := textVerticalPadding := 3.	interlineSpace := self defaultInterlineSpace</body></methods><methods><class-id>Roassal.ROAbstractLabel</class-id> <category>configuration</category><body package="Roassal-Core">defaultInterlineSpace	^ 3</body></methods><methods><class-id>Roassal.ROAbstractLabel</class-id> <category>events-accessing</category><body package="Roassal-Core">modelChanged: aROAbstractComponent		self clearTextCache</body></methods><methods><class-id>Roassal.ROAbstractLabel class</class-id> <category>public</category><body package="Roassal-Core">defaultColor	^ Color black</body><body package="Roassal-Core">text: aBlock	^ self new text: aBlock</body></methods><methods><class-id>Roassal.ROAbstractLabel class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractLabel</body></methods><methods><class-id>Roassal.ROAbstractArrow</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge fromPoint: fromPoint toPoint: toPoint line: line	"Draw the arrow on the canvas and return the begining and ending of the arrow"		| vector u unit arrowMiddle arrowLeft arrowRight w c toPointWithOffset r |	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		u := vector normal.	unit := vector / r.	toPointWithOffset := toPoint - (offset * (vector r - size) * unit).	arrowMiddle := toPointWithOffset - (unit * size). 	arrowLeft :=  arrowMiddle- (u * size).	arrowRight := arrowMiddle + (u * size).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: toPointWithOffset to: arrowLeft width: w color: c.	aCanvas line: arrowLeft to: arrowRight width: w color: c.	aCanvas line: arrowRight to: toPointWithOffset width: w color: c.		^ Array with: toPointWithOffset with: arrowMiddle</body><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Draw the arrow on the canvas and return the begining and ending of the arrow"	^ self drawOn: aCanvas for: anEdge fromPoint: (line startingPointOf: anEdge) toPoint: (line endingPointOf: anEdge) line: line</body></methods><methods><class-id>Roassal.ROArrow</class-id> <category>hooks</category><body package="Roassal-Core">getDirectionVectorFrom: fromPoint to: toPoint	^ toPoint - fromPoint</body></methods><methods><class-id>Roassal.ROReversedArrow</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Return the begining and ending of the arrow"		| fromPoint toPoint vector u unit arrowMiddle arrowLeft arrowRight w c toPointWithOffset r |	fromPoint := line startingPointOf: anEdge.	toPoint := line endingPointOf: anEdge.	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		u := vector normal.	unit := vector / r.	toPointWithOffset := toPoint - (offset * (vector r - size) * unit).	arrowMiddle := toPointWithOffset - (unit * size). 	arrowLeft :=  toPointWithOffset - (u * size).	arrowRight := toPointWithOffset + (u * size).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: arrowMiddle to: arrowLeft width: w color: c.	aCanvas line: arrowLeft to: arrowRight width: w color: c.	aCanvas line: arrowRight to: arrowMiddle width: w color: c.		^ Array with: toPointWithOffset with: arrowMiddle</body></methods><methods><class-id>Roassal.ROVerticalLineLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| previous |	ROVerticalLineLayout on: elements.	previous := nil.	elements do: [ :el |		previous notNil ifTrue: [ self assert: el position y &gt; previous position y ].		previous := el ]</body><body package="Roassal-Core">testLayoutOnEmptyCollection	self shouldnt: [ ROVerticalLineLayout on: #() ] raise: Error.	self shouldnt: [ ROVerticalLineLayout on: #() edges: #() ] raise: Error.	self shouldnt: [ ROVerticalLineLayout new on: #() edges: #() ] raise: Error</body><body package="Roassal-Core">testLayoutWithAlignment	| previous |	ROVerticalLineLayout new alignment: #bottom; on: elements.	previous := nil.	elements do: [ :el |		previous notNil ifTrue: [ self assert: el position y &gt; previous position y ].		previous := el ].	</body><body package="Roassal-Core">testLayoutWithMargin	| element result |	element := ROBox blue element.	element resizeStrategy: (ROExtensibleParent new paddingGap: 25).	element addAll: elements.	ROVerticalLineLayout on: elements.		view := ROView new.	view add: element.		result := (((Array new: 20) at: 1 put: ((25@25)); at: 2 put: ((25@85)); at: 3 put: ((25@145)); at: 4 put: ((25@205)); at: 5 put: ((25@265)); at: 6 put: ((25@325)); at: 7 put: ((25@385)); at: 8 put: ((25@445)); at: 9 put: ((25@505)); at: 10 put: ((25@565)); at: 11 put: ((25@625)); at: 12 put: ((25@685)); at: 13 put: ((25@745)); at: 14 put: ((25@805)); at: 15 put: ((25@865)); at: 16 put: ((25@925)); at: 17 put: ((25@985)); at: 18 put: ((25@1045)); at: 19 put: ((25@1105)); at: 20 put: ((25@1165)); yourself)).		self assert: (elements collect: #position) = result</body><body package="Roassal-Core">testStretch	 | previous |	 ROVerticalLineLayout new stretch; on: elements.	 previous := nil.	 elements do: [ :el |		 previous notNil ifTrue: [ self assert: el position y &gt; previous position y ].		 previous := el ].</body><body package="Roassal-Core">testStretchInsideElement	 | previous random rootElement |		elements := ROElement forCollection: (1 to: 10).	random := #(23 53 60 50).	elements do: [ :n | n 						extent: (random anyOne) @ (random anyOne); 						addShape: (ROBox new); addShape: (ROBorder new) ].	rootElement := ROElement on: 11.	rootElement size: (11 * 55).	rootElement addShape: ROBorder black.	rootElement addAll: elements.	view := ROView new.	view add: rootElement.		 ROVerticalLineLayout new stretch; on: elements.	 previous := nil.	 elements do: [ :el |		 previous notNil ifTrue: [ 			self assert: el position y &gt; previous position y.			self assert: el width = previous width.			 ].		 previous := el ].</body></methods><methods><class-id>Roassal.ROZoomOutMove</class-id> <category>config</category><body package="Roassal-Core">step	^ -0.25</body></methods><methods><class-id>Roassal.ROAbstractCircleLayout</class-id> <category>accessing</category><body package="Roassal-Core">initialAngle	"Return the initial angle, in radian"	^ initialAngle</body><body package="Roassal-Core">initialAngle: aFloat	"aFloat is an angle in Radian."	initialAngle := aFloat</body><body package="Roassal-Core">initialAngleInDegree 	"Return the initial angle in degree"	^ self initialAngle * 180 / Float pi</body><body package="Roassal-Core">initialAngleInDegree: aNumber	"Set the initial angle in radian"	self initialAngle: aNumber * Float pi / 180</body><body package="Roassal-Core">initialIncrementalAngle	"Return the initial incremental angle"	^ initialIncrementalAngle</body><body package="Roassal-Core">initialIncrementalAngle: aNumberInRadian	initialIncrementalAngle := aNumberInRadian</body><body package="Roassal-Core">initialIncrementalAngleInDegree: aNumberInDegree	self initialIncrementalAngle: aNumberInDegree * Float pi / 180</body><body package="Roassal-Core">initialRadius	"Return the radius in pixels of the circle"	^ initialRadius</body><body package="Roassal-Core">initialRadius: aNumber	"Set the radius of the circle"	initialRadius := aNumber</body><body package="Roassal-Core">scaleBy: aNumber		factor := aNumber</body><body package="Roassal-Core">scaleFactor	^ factor</body></methods><methods><class-id>Roassal.ROAbstractCircleLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize.	self scaleBy: 11.		"Represent the initial angle to place the elements"	initialAngle := 0.		"Distance of the circle. If it is 0 when entering doExecute, then it is computed"	initialRadius := 0.		"0 means that it is computed, and not set by the user"	initialIncrementalAngle := 0.</body></methods><methods><class-id>Roassal.ROAbstractCircleLayout class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractCircleLayout</body></methods><methods><class-id>Roassal.ROCenteredCircleLayout</class-id> <category>as yet unclassified</category><body package="Roassal-Core">computeIncrementalAngleFor: elements	"Return the value _in radian_ of the incremental angle"		^ initialIncrementalAngle = 0		ifTrue: [ 2 * Float pi / elements size ]		ifFalse: [ initialIncrementalAngle ]</body><body package="Roassal-Core">computeRadiusFor: elements	"Return the radius of the circle. If none has been set (i.e., initialRadius = 0), then it is computed as the scale factor times the number of elements"	^ initialRadius = 0 		ifTrue: [ elements size * self scaleFactor ]		ifFalse: [ initialRadius ]</body><body package="Roassal-Core">doExecute: elements	| angleIncrement angle rad centerPoint |	rad := self computeRadiusFor: elements.	centerPoint := center.	angleIncrement := self computeIncrementalAngleFor: elements.	angle := self initialAngle.	elements		do: [ :each | 			| point |			point := centerPoint + (Point radius: rad theta: angle).			angle := angle + angleIncrement.			translator translate: each to: point.			self step ]</body><body package="Roassal-Core">initialize	super initialize.	center := 0 @ 0</body></methods><methods><class-id>Roassal.ROCenteredCircleLayout</class-id> <category>accessing</category><body package="Roassal-Core">center	"Return the point around which the layout will place nodes"	^ center</body><body package="Roassal-Core">center: aPoint	"Set the point around which the layout will place nodes"	center := aPoint</body></methods><methods><class-id>Roassal.ROComponentEvent</class-id> <category>accessing</category><body package="Roassal-Core">element	^ element</body><body package="Roassal-Core">element: anObject	element := anObject</body><body package="Roassal-Core">model 	^ element isNil		ifTrue: [ nil ]		ifFalse: [ self element model ] </body><body package="Roassal-Core">position	^ position</body><body package="Roassal-Core">position: aPoint	"Set the position of the even in the view.  The position does not necessary correspond to the position on the screen"	position := aPoint	</body><body package="Roassal-Core">realPosition	^ realPosition</body><body package="Roassal-Core">realPosition: aPoint	"aPoint corresponds to the position on the screen. This is useful to process later on"	realPosition := aPoint</body><body package="Roassal-Core">view	self element ifNil: [ ^ nil ].	^ self element view</body></methods><methods><class-id>Roassal.ROComponentEvent</class-id> <category>action</category><body package="Roassal-Core">emitToParent	element ifNil: [ ^ self ].	element parent announce: self</body></methods><methods><class-id>Roassal.ROComponentEvent</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	position := 0 @ 0.	realPosition := 0 @ 0</body></methods><methods><class-id>Roassal.ROComponentEvent</class-id> <category>testing</category><body package="Roassal-Core">hasElement	^ element notNil</body></methods><methods><class-id>Roassal.ROAbstractMouseDragging</class-id> <category>accessing</category><body package="Roassal-Core">buttons	^ buttons</body><body package="Roassal-Core">buttons: anObject	buttons := anObject</body><body package="Roassal-Core">commandKeyPressed	^commandKeyPressed</body><body package="Roassal-Core">commandKeyPressed: anObject	commandKeyPressed := anObject</body><body package="Roassal-Core">controlKeyPressed	^ controlKeyPressed</body><body package="Roassal-Core">controlKeyPressed: anObject	controlKeyPressed := anObject</body><body package="Roassal-Core">shiftKeyPressed	^ shiftKeyPressed</body><body package="Roassal-Core">shiftKeyPressed: anObject	shiftKeyPressed := anObject</body><body package="Roassal-Core">step	^ step</body><body package="Roassal-Core">step: anObject	step := anObject</body></methods><methods><class-id>Roassal.ROHTMLShapeVisitor</class-id> <category>stream</category><body package="Roassal-Core">addToStream: aShape</body><body package="Roassal-Core">stream: aStream	stream := aStream</body></methods><methods><class-id>Roassal.ROHTMLShapeVisitor</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	attributes := IdentityDictionary new.</body></methods><methods><class-id>Roassal.ROHTMLShapeVisitor</class-id> <category>accesing</category><body package="Roassal-Core">attributes	^attributes ifNil: [ attributes := Dictionary new ]</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>event</category><body package="Roassal-Core">testAllElementsDo	| node1 node2 node21 edge root traversed |	root := ROElement new.	node1 := ROElement new.	node2 := ROElement new.	edge := ROEdge from: node1 to: node2.	node21 := ROElement new.	root add: node1.	root add: node2.	root add: edge.	node2 add: node21.		traversed := OrderedCollection new.	root allElementsDo: [:each | traversed add: each].	self assert: traversed size = 4.	self assert: traversed first = node1.	self assert: traversed second = node2.	self assert: (traversed at: 3) = node21.	self assert: traversed last = edge</body><body package="Roassal-Core">testAnnounce	| node1 node2 bounds |	node1 := ROElement new.	node2 := ROElement new.		node1 on: ROMouseClick do: [ ROGrow on: node2 by: 1 ].	bounds := node2 bounds.	node1 announce: ROMouseClick.	self assert: (bounds extent &lt; node2 bounds extent)</body><body package="Roassal-Core">testDragAndDropWithInner	| view outter inner |	view := ROView new.	outter := ROElement spriteOn: 'outter'.	inner := ROElement spriteOn: 'inner'.	self assert: outter bounds = (0@0 corner: 50 @ 50).	self assert: inner bounds = ( (0@0) corner: (50@50)).	outter add: inner.	view add: outter.		self assert: outter bounds = (0@0 corner: 60 @ 60).	self assert: inner bounds = ( (5@5) corner: (55@55)).		inner translateBy: -10 @ -10.	self assert: outter bounds = ( (-5@ -5) corner: (60@60)).	self assert: inner bounds = (0@0 corner: 50@50).</body><body package="Roassal-Core">testEventTranslation2	| t outter inner1 inner2 |	t := 0.	outter := ROElement on: 'outter'.	inner1 := ROElement on: 'inner1'.	inner2 := ROElement on: 'inner1'.		inner1 on: ROElementTranslated do: [ :event | t := t + 1 ].	self assert: t = 0.	inner1 translateTo: 50 @ 50.	self assert: t = 1.		inner2 translateBy: 50 @ 50.	self assert: t = 1.		outter translateBy: 50 @ 50.	self assert: t = 1.</body><body package="Roassal-Core">testOnDoOnce	| element t |	element := ROElement new.	t := 0.	self assert: element numberOfInteractions = 0.	element on: ROMouseClick doOnce: [ :ann | t := t + 1 ].	"self assert: element numberOfInteractions = 1."	self assert: t = 0.		element announce: ROMouseClick.	self assert: t = 1.	"self assert: element numberOfInteractions = 0."		element announce: ROMouseClick.	self assert: t = 1.</body><body package="Roassal-Core">testOnDoOnce2	| element t |	element := ROElement new.	t := 0.	self assert: element numberOfInteractions = 0.	element on: ROMouseLeave doOnce: [ :ann | t := t + 1 ].	"self assert: element numberOfInteractions = 1."	self assert: t = 0.		element announce: ROMouseLeave.	self assert: t = 1.	"self assert: element numberOfInteractions = 0."		element announce: ROMouseLeave.	self assert: t = 1.		element announce: ROMouseClick.	self assert: t = 1.</body><body package="Roassal-Core">testWithAllElementsDo	| node1 node2 node21 edge root traversed |	root := ROElement new.	node1 := ROElement new.	node2 := ROElement new.	edge := ROEdge from: node1 to: node2.	node21 := ROElement new.	root add: node1.	root add: node2.	root add: edge.	node2 add: node21.		traversed := OrderedCollection new.	root withAllElementsDo: [:each | traversed add: each].	self assert: traversed size = 5.	self assert: traversed first = root.	self assert: (traversed at: 2) = node1.	self assert: (traversed at: 3) = node2.	self assert: (traversed at: 4) = node21.	self assert: traversed last = edge</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>tests</category><body package="Roassal-Core">testContains	self assert: (node contains: node position).	self deny: (node contains: node position - (1 @ 1)).</body><body package="Roassal-Core">testCornerRadius	node := ROElement new center: 10@8 radius: 5.	self assert: node bounds = (5@3 corner: 15@13)</body><body package="Roassal-Core">testExtentOnModelChange	| sprite |	sprite := ROElement sprite.	self assert: sprite extent = (50 @ 50).	sprite on: 'word'.	self assert: sprite extent = (50 @ 50).	sprite extent: 30@30.	self assert: sprite extent = (30 @ 30).	sprite on: 'word'.	self assert: sprite extent = (30 @ 30).</body><body package="Roassal-Core">testInitialization	| aNode |	aNode := ROElement new.	self assert: aNode bounds = ROElement defaultBounds.	self assert: aNode extent = aNode bounds extent.		self assert: aNode numberOfShapes = 1</body><body package="Roassal-Core">testInitialization2	self assert: ROElement new view camera notNil.</body><body package="Roassal-Core">testIsNotEdge	self assert: node isNotEdge.	self deny: node isEdge.	self assert: node isElement</body><body package="Roassal-Core">testIsVisibleIn	| el |	el := (ROBox new size: 40) element.	self assert: (el isVisibleIn: (0 @ 0 corner: 50 @ 50)).	self assert: (el isVisibleIn: (0 @ 0 corner: 10 @ 10)).	self deny:  (el isVisibleIn: (41 @ 41 corner: 50 @ 50)).		el translateTo: 20 @ 30.	self assert: (el isVisibleIn: (50 @ 60 corner: 100 @ 100)).	self deny:  (el isVisibleIn: (61 @ 71 corner: 100 @ 100)).</body><body package="Roassal-Core">testModel	| aNode object |	aNode := ROElement new.	self assert: aNode model isNil.	aNode := ROElement on: (object := Object new).	self assert: (aNode model == object)</body><body package="Roassal-Core">testReducingSize	| el |	el := (ROElement new extent: 90@20) + ROBox green.	el extent: 10 @ 12.	self assert: el extent = (10 @ 12)</body><body package="Roassal-Core">testRendering		| nullCanvas |	nullCanvas := ROCountingNullCanvas new.	self assert: nullCanvas numberOfRectangles isZero.	node drawOn: nullCanvas.	self assert: nullCanvas numberOfRectangles = 1.	self assert: nullCanvas numberOfLines = 4.</body><body package="Roassal-Core">testSize	| el |	el := (ROElement new extent: 90@20) + ROBox green.	self assert: el extent = (90@20)</body><body package="Roassal-Core">testSize2	| el |	el := (ROElement new) + ROBox green.	el extent: 90@20.	self assert: el extent = ( 90 @ 20 )</body><body package="Roassal-Core">testSize3	| el |	el := ROElement new + ROEllipse.	el extent: 30 @ 30.	self assert: el extent = ( 30 @ 30 )</body><body package="Roassal-Core">testSprite	| sprite |	sprite := ROElement sprite.	self assert: sprite extent = (50 @ 50).</body><body package="Roassal-Core">testTranslatingByFloats		self assert: draggableNode position = (0@0).	draggableNode translateBy: 4.5 @ 1.3.	self assert: draggableNode position = (4.5 @ 1.3).		node translateTo: 2.4 @ 6.4.	self assert: node position = ( 2.4@6.4).		node translateBy: 2.4 @ 6.4.	self assert: node position = ( 4.8@12.8)</body><body package="Roassal-Core">testTranslatingByRealPoint	| view p1 |	view := ROView new.	view add: draggableNode.		"dragging a node increases its position by the dragging step"	p1 := draggableNode position.	self assert: (p1 = (0@0)).	draggableNode translateByRealPoint: 10 @ 6.	self assert: (draggableNode position = ( 10 @ 6)).	draggableNode translateByRealPoint: -10 @ -6.	self assert: (draggableNode position = ( 0 @ 0)).	"take care of real vs virtual steps"	view camera bounds: (0@0 corner: 250@250).	draggableNode translateByRealPoint: 10 @ 6.	self assert: (draggableNode position = ( 5@3)).</body><body package="Roassal-Core">testView	self assert: node view == ROView nullView.	ROView new add: node.	self assert: node view notNil.	  </body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>depth</category><body package="Roassal-Core">testDepth	self assert: ROElement new depth = 1.</body><body package="Roassal-Core">testDepthOfElementInView	| view el |	view := ROView new.	view add: (el := ROElement new).	self assert: el depth = 1.</body><body package="Roassal-Core">testDepthOfElementInViewWithNesting	| view el1 el2 |	view := ROView new.	view add: (el1 := ROElement new).	el1 add: (el2 := ROElement new).	self assert: el1 depth = 1.	self assert: el2 depth = 2.</body><body package="Roassal-Core">testDepthOfView	self assert: ROView new depth = 0</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>shapes</category><body package="Roassal-Core">testAddShape	| el shape1 shape2 |	el := ROElement new.	self assert: el numberOfShapes = 1. 	shape1 := ROBox new.	shape2 := ROLabel new.	shape1 next: shape2.	el addShape: shape1.		self assert: el numberOfShapes = 3</body><body package="Roassal-Core">testChangeShape	"	self debug: #testChangeShape	"	| element |	element := ROEdge new.	self deny: (element isShapedAs: ROLine).	element + ROLine.	element change: ROShape for: ROLine.	self assert: (element isShapedAs: ROLine).	self assert: (element isShapedAs: ROShape).		element change: ROShape for: ROOrthoVerticalLineShape.	self assert: (element isShapedAs: ROShape).	self assert: (element isShapedAs: ROOrthoVerticalLineShape).</body><body package="Roassal-Core">testDecoration	| el |		el := ROElement bare.	self deny: (el isShapedAs: ROShape).	self deny: (el isShapedAs: ROLabel).		el addShape: ROLabel.	self assert: (el isShapedAs: ROShape).	self assert: (el isShapedAs: ROLabel).</body><body package="Roassal-Core">testForShapeDo	| border |	border := node getShape: ROBorder.	self assert: border color = ROBorder defaultColor.	node forShape: ROBorder do: [ :s | s color: Color blue ].	self assert: border color = Color blue</body><body package="Roassal-Core">testGetShape	| el deco |		el := ROElement new.	deco := ROBox new.	deco color: Color red.	el addShape: deco.		self assert: (el getShape: ROBox) == deco.</body><body package="Roassal-Core">testHeightAndWidth	draggableNode width: 100.	self assert: ((draggableNode getShape: ROBorder) width = 5).	self assert: (draggableNode width = 100).		draggableNode height: 59.	self assert: ((draggableNode getShape: ROBorder) height = 5).	self assert: (draggableNode height = 59).</body><body package="Roassal-Core">testInitialSize	self assert: ROElement new extent = (5 @ 5)</body><body package="Roassal-Core">testRemoveShape	self assert: (node numberOfShapes = 3).	node - ROBox.	self assert: (node shapes size = 2).	node + ROBox.	self assert: (node shapes size = 3).		"No error should happen here"	self shouldnt: [ node - ROLine ] raise: Error.		node - ROBorder.	node - ROBox.	self assert: (node shapes size = 1).</body><body package="Roassal-Core">testRemoveShapeOnEdges	| edge |	edge := ROEdge new.	self assert: (edge shapes size = 1).	edge - ROLine.	self assert: (edge shapes size = 1).	edge + ROLine.	self assert: (edge shapes size = 2).		"No error should happen here"	self shouldnt: [ edge - ROBox] raise: Error.	</body><body package="Roassal-Core">testRemoveSubscription	"Ugly test, but we need to get the hand on it. A bug is hidding at the moment we are writting this test"	"This test makes some strong assumption on the implementation of Announcement"		| eventHandler aPopup |	eventHandler := node instVarNamed: 'eventHandler'.	self assert: eventHandler numberOfSubscriptions = 0.		aPopup := ROPopup new.	node @ aPopup.	self assert: eventHandler numberOfSubscriptions = 3.	eventHandler unsubscribe: aPopup.	self assert: eventHandler numberOfSubscriptions = 0.</body><body package="Roassal-Core">testResizing	| t |	t := 0.	node on: ROElementResized do: [ :event | t := t + 1 ].	node extent: 20 @ 10.	self assert: t = 1.</body><body package="Roassal-Core">testResizing2	| t |	t := 0.	node on: ROElementResized do: [ :event | t := t + 1 ].	node extent: node extent.	self assert: t = 0.</body><body package="Roassal-Core">testResizing3	| t |	t := 0.	node on: ROElementResized do: [ :event | t := t + 1 ].	node width: 60.	self assert: t = 1.</body><body package="Roassal-Core">testResizing4	| t |	t := 0.	node on: ROElementResized do: [ :event | t := t + 1 ].	node height: 60.	self assert: t = 1.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>actions</category><body package="Roassal-Core">testEventTranslation	| t el |	t := 0.	el := ROElement new.	el on: ROElementTranslated do: [ :event | t := t + 1 ].	self assert: t = 0.	el translateTo: 50 @ 50.	self assert: t = 1.		el translateBy: 50 @ 50.	self assert: t = 2.</body><body package="Roassal-Core">testRemoveElements	| elements |	elements := node elementsSuchThat: [:e | true ].	self assert: elements isEmpty.		node addAll: (ROElement forCollection: (1 to: 20)).	elements := node elementsSuchThat: [:e | true ].	self assert: elements notEmpty.		node removeAllElements.	elements := node elementsSuchThat: [:e | true ].	self assert: elements isEmpty.</body><body package="Roassal-Core">testRemoveElementsAndError	self shouldnt:  [ node remove ] raise: Error</body><body package="Roassal-Core">testRemoveOnElement	| view |	view := ROView new.	view add: node.	self assert: (view elements includes: node).		node remove.	self deny: (view elements includes: node).</body><body package="Roassal-Core">testTranslatingByAFloatPoint	| el |	el := ROElement new.	self assert: el position = (0 @ 0).		el translateBy: 0.4 @ 0.3.	self assert: el position = (0.4 @ 0.3).	</body><body package="Roassal-Core">testTranslation	| elOutter elInner view |	elOutter := ROElement new + ROBorder.	elOutter @ RODraggable.	elInner := ROElement new + ROBorder.	elInner @ RODraggable.	elOutter add: elInner .	 	"elInner is now centered"	ROHorizontalLineLayout on: (Array with: elInner).		"view := ROView new.	view add: elOutter.	view open."		self assert: elInner position = (5 @ 5).	elInner translateBy: -5 @ -5.	self assert: elInner position = (0 @ 0).</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>interaction</category><body package="Roassal-Core">testForwarding	| inner view outter bInner bOutter |	outter := ROElement spriteOn: 'outter'.	inner := ROElement spriteOn: 'inner'.	inner forward.	outter add: inner. 	view := ROView new.	view add: outter.	bInner := inner bounds.	bOutter := outter bounds.	inner announce: (ROMouseDragging step: 10@10). 	self assert: inner bounds = bInner.	self assert: outter bounds = (bOutter translateBy: (10@10)).</body><body package="Roassal-Core">testForwardingEvent	| inner view outter bInner bOutter t |	t := 0.	outter := ROElement spriteOn: 'outter'.	inner := ROElement spriteOn: 'inner'.	inner forward.	outter add: inner. 	view := ROView new.	view add: outter.	bInner := inner bounds.	bOutter := outter bounds.	outter on: ROMouseDragging do: [ :evt | t := t + 1 ].	self assert: t = 0.	inner announce: (ROMouseDragging step: 10@10). 	self assert: t = 1.</body><body package="Roassal-Core">testForwardingEventWithView	| inner view outter bInner bOutter t |	t := 0.	view := ROView new.	view on: ROEvent do: [ :evt | t := t + 1 ].	outter := ROElement spriteOn: 'outter'.	inner := ROElement spriteOn: 'inner'.		outter add: inner. 	view add: outter.	inner forward.	outter forward.		self assert: outter parent == view.	self assert: inner parent == outter.	self assert: t = 0.	inner announce: (ROMouseDragging step: 10@10). 	self assert: t = 1.</body><body package="Roassal-Core">testInteraction 	| int int2 |	self deny: (node is: ROMenuActivable).	node @ (int := ROMenuActivable new item: 'act' action: #inspect).	self assert: (node is: ROMenuActivable).		self assert: int == (node getInteraction: ROMenuActivable).	self assert: int numberOfEntries = 1.		"We add a new action. We should fill the first interaction only"	node @ (int2 := ROMenuActivable new item: 'act2' action: #inspect).	self assert: int numberOfEntries = 2.	self assert: int == (node getInteraction: ROMenuActivable).</body><body package="Roassal-Core">testOverridingIteraction	"Ugly test, but we need to get the hand on it. A bug is hidding at the moment we are writting this test"	"This test makes some strong assumption on the implementation of Announcement"		| eventHandler |	eventHandler := node instVarNamed: 'eventHandler'.	self assert: eventHandler numberOfSubscriptions = 0.		"Two subscription, one for entering and another for leaving"	node @ ROPopup.	self assert: eventHandler numberOfSubscriptions = 3.		node changeInteraction: ROAbstractPopup for: (ROPopupView new view: ROView new).	self assert: eventHandler numberOfSubscriptions = 3.	</body><body package="Roassal-Core">testRemoveInteraction	| el |	el := ROElement new.	self deny: (el is: RODraggable).		el @ RODraggable.	self assert: (el is: RODraggable).	el removeInteraction: RODraggable.	self deny: (el is: RODraggable).</body><body package="Roassal-Core">testRemoveInteraction2	self shouldnt: [ ROElement new removeInteraction: ROAbstractPopup ] raise: Error </body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>parent</category><body package="Roassal-Core">testParentAndNesting	| inner outter |	inner := ROElement new.	outter := ROElement new.		self assert: inner parent == ROView nullView.	self assert: outter parent == ROView nullView.		outter add: inner. 	self assert: inner parent == outter.	self assert: outter parent == ROView nullView</body><body package="Roassal-Core">testParentAndView	| element view |	element := ROElement new.	self assert: element parent == ROView nullView.	view := ROView new.	view add: element.	self assert: element parent == view.</body><body package="Roassal-Core">testParentBehavior	| element outterElement |	element := ROElement new.	self assert: element resizeStrategy isExtensible.		outterElement := ROElement new.	outterElement add: element.	self assert: element resizeStrategy isExtensible</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>margin</category><body package="Roassal-Core">testDefaultMargin	self assert: ROElement new padding = (5 @ 5)</body><body package="Roassal-Core">testMargin	| el1 el2 |	el1 := ROBox blue element.	el2 := ROBox red element.	el2 extent: 20 @ 20.		self assert: el1 extent = (5 @ 5).	el1 resizeStrategy: (ROShrinkingParent new paddingGap: 0).	el1 add: el2.	self assert: el1 extent = (20 @ 20).		</body><body package="Roassal-Core">testMargin2	| el1 el2 |	el1 := ROBox blue element.	el2 := ROBox red element.	el2 extent: 20 @ 20.		self assert: el1 extent = (5 @ 5).	el1 resizeStrategy: (ROShrinkingParent new paddingGap: 10).	el1 add: el2.	self assert: el1 extent = (30 @ 30).		</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>iteration</category><body package="Roassal-Core">testIteratingOnEmptyCollections	self shouldnt: [ ROElement new interactionsDo: [ :el | ] ]  raise: Error</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>printing</category><body package="Roassal-Core">testPrinting	self assert: (#('a ROElement' 'a Roassal.ROElement') includes: ROElement new printString).	self assert: (#( 'a ROElement&lt;10&gt;'  'a Roassal.ROElement&lt;10&gt;') includes: (ROElement on: 10) printString).</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>nesting</category><body package="Roassal-Core">testMostSpecificParentCommonWith	| view el1 el11 el111 el12 el2 el21 |	view := ROView new.	el1 := ROElement sprite @ ROPopup .	el11 := ROElement sprite @ ROPopup .	el111 := ROElement sprite @ ROPopup .	el12 := ROElement sprite @ ROPopup .	el2 := ROElement sprite @ ROPopup .	el21 := ROElement sprite @ ROPopup .		el1 add: el11; add: el12.	el11 add: el111.	el2 add: el21.		view add: el1; add: el2. 		self assert: (el1 mostSpecificParentCommonWith: el2) == view.	self assert: (el1 mostSpecificParentCommonWith: el21) == view.		self assert: (el1 mostSpecificParentCommonWith: el11) == view.	self assert: (el12 mostSpecificParentCommonWith: el111) == el1.	self assert: (el11 mostSpecificParentCommonWith: el111) == el1.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>removing</category><body package="Roassal-Core">testRemoving	| view |	view := ROView new.	view add: node.	node remove.	self assert: view numberOfElements = 0.</body><body package="Roassal-Core">testRemovingNestedNode	| innerNode |		innerNode := ROElement new.	node add: innerNode.	self assert: node numberOfElements = 1.	innerNode remove.	self assert: node numberOfElements = 0.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>group of nodes</category><body package="Roassal-Core">testGroupOfNodes	| nodes |	nodes := ROElement forCollection: (1 to: 20).	self assert: (nodes size = 20).	self assert: (nodes collect: #model) = (1 to: 20) asArray</body><body package="Roassal-Core">testReplacingElement	| el1 el2 el3 el20 |	el1 := ROElement on: 1.	el2 := ROElement on: 2.	el3 := ROElement on: 3.	el20 := ROElement on: 20.		el1 add: el2; add: el3.	el1 replace: el2 by: el20.		self assert: el1 elements = (Array with: el20 with: el3)</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>attributes</category><body package="Roassal-Core">testAttributes	node := ROElement new.	self deny: node hasAttributes.	node attributes at: #oldColor put: Color black.	self assert: node hasAttributes.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>running</category><body package="Roassal-Core">setUp	node := ROElement on: 'hello'.	node extent: 40 @ 30.	node		addShape: ROBox new;		addShape: ROBorder new.		draggableNode := ROElement new.	draggableNode @ RODraggable.	draggableNode extent: 50@50.	draggableNode + ROBorder red.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>initialize-release</category><body package="Roassal-Core">testInitializationBare	| aNode |	aNode := ROElement bare.	self assert: aNode bounds = ROElement defaultBounds.	self assert: aNode extent = aNode bounds extent.		"Just the null shape"	self assert: aNode numberOfShapes = 1</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>cache</category><body package="Roassal-Core">testCacheOnElement	| e |	e := ROElement new.	self assert: e attributes isEmpty.</body><body package="Roassal-Core">testCacheOnElement2	| e |	e := ROElement new.	e attributeAt: #anyCache put: 5.	self assert: e attributes size = 1</body><body package="Roassal-Core">testCacheOnElementAndAddingShape	| e |	e := ROElement new.	e attributeAt: #fooCache put: -1.	e + ROBox.	self deny: e attributes isEmpty.	self assert: (e attributes keys includesAllOf:  #(#shapeCache #fooCache)).	self assert: e attributes size = 2.</body><body package="Roassal-Core">testCacheOnElementAndResetcache	| e |	e := ROElement new.	e attributeAt: #anyCache put: 5.	e resetCache.	self assert: e attributes isEmpty</body><body package="Roassal-Core">testExtent	|  el trigger |	trigger := OrderedCollection new.	el := ROElement new.	el + (ROBox green width: [ :e | trigger add: #gw. 10 ]; height: [ :e | trigger add: #gh. 20 ]).	el + (ROBox blue width: [ :e | trigger add: #bw. 30 ]; height: [ :e | trigger add: #bh. 40 ]).	self assert: el extent = (30 @ 40).	self assert: trigger size = 4.	self assert: trigger asSet size = 4.		trigger := OrderedCollection new.	el := ROElement new.	el + (ROBox blue width: [ :e | trigger add: #bw. 30 ]; height: [ :e | trigger add: #bh. 40 ]).	el + (ROBox green width: [ :e | trigger add: #gw. 10 ]; height: [ :e | trigger add: #gh. 20 ]).	self assert: el extent = (30 @ 40).	self assert: trigger size = 4.	self assert: trigger asSet size = 4.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>zIndex</category><body package="Roassal-Core">testOrderingInTheView	| el1 el2 view |	el1 := ROBox green element.	el2 := ROBox gray element.	el1 zIndex: 4.	el2 zIndex: 1.	view := ROView new.	view add: el1; add: el2.	self assert: view elements asArray = (Array with: el1 with: el2)</body><body package="Roassal-Core">testZIndex	| el1 el2 view |	el1 := ROBox green element size: 40.	el2 := ROBox blue element size: 40.	el1 zIndex: 2.	el2 zIndex: 3.		self assert: el1 zIndex = 2.	self assert: el2 zIndex = 3.	view := ROView new.	view add: el1; add: el2.			self assert: el1 zIndex = 2.	self assert: el2 zIndex = 3.</body><body package="Roassal-Core">testZIndexElementCreation	self assert: ROBox green element zIndex = 0.</body><body package="Roassal-Core">testZIndexElementCreationAndZOrdering	| el zOrdering |	el := ROBox green element.	el zIndex: 5.	zOrdering := ROZOrdering new.	self assert: (zOrdering zIndexOf: el) = 5.</body></methods><methods><class-id>Roassal.ROElementTest</class-id> <category>callback</category><body package="Roassal-Core">testCallback	| el |	el := ROBox green element.	el callback: (ROContainerCallbackLayout for: (ROHorizontalLineLayout new)).		self assert: el extent = (5 @ 5).		el add: ROBox element.	self assert: el extent = (15 @ 15).		el add: ROBox element.	el add: ROBox element.	self assert: el extent = (45 @ 15).	"	ROView new add: el; open	"</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>tests</category><body package="Roassal-Core">testAddingWithResize	self assert: node3 extent &lt; node1 extent.	node3 add: node1.	self assert: node3 extent &gt; node1 extent</body><body package="Roassal-Core">testAddingWithoutResize	self assert: node3 extent &lt; node1 extent.	node3 resizeStrategy: ROFixedSizedParent instance.	node3 add: node1.	self assert: node3 extent &lt; node1 extent</body><body package="Roassal-Core">testContainsEdge	| view roView nodes edge |	view := ROMondrianViewBuilder new.	view shape rectangle size: 50.	nodes := view nodes: #( 1 2 ).	node1 := nodes first.	node2 := nodes second.	view shape line width: 4.		view interaction popupText: 'edge!'.	edge := view edgeFromAssociation: 1 -&gt; 2.	view applyLayout.	roView := view raw.		self assert: (edge contains: 60 @ 30).	self assert: (roView elementAt: 60 @ 30) == edge.	self assert: (roView elementAt: edge bounds center) == edge.		self assert: (roView elementAt: node1 center) == node1.	self assert: (roView elementAt: node2 center) == node2.	</body><body package="Roassal-Core">testRemovingWithResize	node3 add: node1.	self assert: node3 extent &gt; node1 extent.	node3 removeAllElements.	ROShrikingSize on: node3.	self assert: node3 extent &lt; node1 extent</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>translation shape and inner nodes</category><body package="Roassal-Core">testElementAt	| el view |	el := ROElement new + ROBox.	el extent: 20 @ 20.		view := ROView new.	view add: el.	el translateTo: 3 @ 3.		self assert: (view elementAt: 3 @ 3) == el.</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>blocking and nesting</category><body package="Roassal-Core">testBlockingAndNesting	| outter inner |	outter := ROBox element extent: 50 @ 50; yourself.	inner := ROBox green element extent: 20 @ 20; yourself.	outter resizeStrategy: (ROFixedSizedParent new).	outter add: inner.		self assert: outter extent = (50 @ 50).	self assert: outter position = (0 @ 0).	"Translating the inner node should not modify the outter node at all"	inner translateBy: -15 @ -15.	self assert: inner position = outter resizeStrategy padding.	self assert: inner position = (5 @ 5).			self assert: outter extent = (50 @ 50).	self assert: outter position = (0 @ 0).</body><body package="Roassal-Core">testBlockingAndNesting2	| outter inner |	outter := ROBox element extent: 50 @ 50; yourself.	inner := ROBox green element extent: 20 @ 20; yourself.	outter resizeStrategy: (ROFixedSizedParent new).	outter add: inner.		self assert: outter extent = (50 @ 50).	self assert: outter position = (0 @ 0).	"Translating the inner node should not modify the outter node at all"	inner translateBy: 150 @ 100.	self assert: inner position = (25 @ 25).		self assert: outter extent = (50 @ 50).	self assert: outter position = (0 @ 0)."| view |view := ROView new.view add: outter.view open"</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>events</category><body package="Roassal-Core">testEventForNested	| view circle grid options choice t morph |	t := 0.	view := ROView new.	circle := ROElement new 				addInteraction: RODraggable;				extent: 100@40; 				addShape: (ROBorder red);				addShape: (ROLabel text: 'circle'). 	circle on: ROMouseClick do: [:e | t := t + 1 ].	grid := ROElement new 				addInteraction: RODraggable;				extent: 100@40; 				addShape: (ROBorder red);				addShape: (ROLabel text: 'grid').	grid on: ROMouseClick do: [:e | t := t + 10 ].	options := (Array with: circle with: grid).	choice := ROElement new.	choice addAll: (ROHorizontalLineLayout on: options).		view add: choice.	"	view openInWindow.	"		"grid adjustSizeOfParent  " 	morph := ROPlatform current widgetFactory forView: view.	morph extent: 200@200.		self assert: choice bounds = ( 0@0 corner: 225@55).		"virtual position = 63@29"	self assert: (choice contains: 63@29).		"real position 32@15"	self assert: (morph elementForRealPosition: 32@15) ~~ view.</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>translating shape</category><body package="Roassal-Core">testNoTranslationShape	| el |	el := ROElement new.	el + ROBox.	el extent: 50 @ 50.	self assert: (el contains: 0 @ 0).	self assert: (el contains: 25 @ 25).	self deny: (el contains: 50 @ 50).</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>sizing</category><body package="Roassal-Core">testSize	| el el2 |	el := ROElement new.	self assert: (el extent = (5 @ 5)).	el add: (el2 := ROElement sprite).		ROAdjustSizeOfNesting on: el.	self assert: (el extent = (el2 extent + (10 @ 10)))	</body><body package="Roassal-Core">testSize2	| bounds el |	el := ROElement sprite.	bounds := el bounds.		ROAdjustSizeOfNesting on: el.	self assert: (el bounds = bounds)	</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>running</category><body package="Roassal-Core">setUp	node2 := ROElement on: 'world'.	node2 extent: 40@30.	node2 addShape: (ROBox new color: Color green).	node3 := ROElement on: 'world'.	node3 extent: 40@30.	node3 addShape: (ROBox new color: Color yellow).	node3 translateBy: 40@30.	node1 := ROElement on: 'hello'.	node1 extent: 100 @ 130.	node1		addShape: ROBox new;		addShape: ROBorder new.</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>dragging</category><body package="Roassal-Core">testDraggingNestedElement	| b |	"node1 bounds = 50@50 corner: 150@180 	node3 bounds =  190@130 corner: 230@160 "	node1 addInteraction: RODraggable.	node3 addInteraction: RODraggable.	node1 add: node3.	node1 translateBy: 50 @ 50.		"We move the inner node toward the bottom right corner"	node3 translateBy: 150 @ 100.	self assert: (node1 extent =  (240@170)).		"We move the inner node toward the top left corner"	b := node1 bounds.	node3 translateBy: -200 @ -150.	self assert: node1 topLeft ~= b topLeft.	self assert: node1 topLeft  =  (45@35)	"	view open	"</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>view</category><body package="Roassal-Core">testElementAtAfterDragging	| view |	view := ROView new.	node1 add: node2.	view add: node1.		node1 translateTo: 50@50.	self assert: (view elementAt: (node1 extent + node1 absolutePosition)) == view.	self assert: (view elementAt: (50 @ 50)) == node1.	self assert: (view elementAt: (55 @ 55)) == node2.	self assert: (view elementAt: node1 topLeft + (5 @ 5)) == node2	</body><body package="Roassal-Core">testSettingTheView	| newNode view |	newNode := ROElement new.	self assert: (newNode view == ROView nullView).	self assert: (node1 view == ROView nullView).	view := ROView new.	view add: node1.		node1 add: newNode.		self assert: (newNode view == view)</body></methods><methods><class-id>Roassal.ROContainingElementTest</class-id> <category>element from model</category><body package="Roassal-Core">testElementFromModel	| el1 el2 el3 el4 |	el1 := ROElement on: 1. 	el2 := ROElement on: 2.	el3 := ROElement on: 3.	el4 := ROElement on: 4.		el1 add: el2.	el1 add: el4.		el2 add: el3.	self assert: (el3 elementFromModel: 4) isNil.	self assert: (el2 elementFromModel: 1) isNil.		self assert: (el2 elementFromModel: 3) == el3.	self assert: (el1 elementFromModel: 3) == el3.</body></methods><methods><class-id>Roassal.ROSVGExample</class-id> <category>geography</category><body package="Roassal-Core">showCountries	"	self new showCountries	"| view element nameComponent label |view := ROView new.ROSVGPath countries do: [ :k |	element := (ROSVGPath path: (ROSVGPath perform: k)) elementOn: k.	view add: element.]. nameComponent := ROElement new.ROSVGPath countries do: [ :k |	label := ROLabel elementOn: k asString.	label @ ROLightlyHighlightable.	label on: ROMouseEnter do: [ :event | ROBlink highlight: (view elementFromModel: event model asSymbol) ].	label on: ROMouseLeave do: [ :event | ROBlink unhighlight: (view elementFromModel: event model asSymbol) ].	nameComponent add: label.].ROGridLayout new	gapSize: -3;	lineItemsCount: 15;	on: nameComponent elements.	view add: nameComponent.nameComponent translateTo: 0 @ 400.view openInWindowSized: 1000 @ 700</body><body package="Roassal-Core">showSouthAmericanCountries	"	self new showSouthAmericanCountries	"| view element nameComponent label |view := ROView new.ROSVGPath southAmerica do: [ :k |	element := (ROSVGPath path: (ROSVGPath perform: k)) setToAdjustElement; elementOn: k asString.	element @ ROPopup.	view add: element.]. nameComponent := ROElement new.ROSVGPath southAmerica do: [ :k |	label := ROLabel elementOn: k asString.	label @ ROLightlyHighlightable.	label on: ROMouseEnter do: [ :event | ROBlink highlight: (view elementFromModel: event model asString) ].	label on: ROMouseLeave do: [ :event | ROBlink unhighlight: (view elementFromModel: event model asString) ].	nameComponent add: label.].ROGridLayout new	gapSize: -3;	lineItemsCount: 15;	on: nameComponent elements.	view add: nameComponent.nameComponent translateTo: 0 @ 400.view open</body><body package="Roassal-Core">showZoomableCountries	"	self new showZoomableCountries	"| view element nameComponent label stack |view := ROView new.view @ RODraggable.ROSVGPath southAmerica do: [ :k |	element := (ROSVGPath path: (ROSVGPath perform: k)) elementOn: k.	view add: element.]. nameComponent := ROElement new.ROSVGPath southAmerica do: [ :k |	label := ROLabel elementOn: k asString.	label @ ROLightlyHighlightable.	label on: ROMouseEnter do: [ :event | ROBlink highlight: (view elementFromModel: event model asSymbol) ].	label on: ROMouseLeave do: [ :event | ROBlink unhighlight: (view elementFromModel: event model asSymbol) ].	nameComponent add: label.].ROGridLayout new	gapSize: -3;	lineItemsCount: 15;	on: nameComponent elements.stack := ROViewStack new.stack zoomInButton; zoomOutButton.stack addView: view.stack add: nameComponent.nameComponent translateTo: 0 @ 20.stack openInWindowSized: 1000 @ 700</body></methods><methods><class-id>Roassal.ROSVGExample</class-id> <category>adjusted element</category><body package="Roassal-Core">adjustedElement	"	self new adjustedElement	"	| view path element |view := ROView new.path := ROSVGPath new path: 'M100,100L300,100L200,300,z'; width: 2.path setToAdjustElement.element := path elementOn: 'an SVG triangle'.element + ROBox @ RODraggable @ ROPopup.view add: element.view open</body><body package="Roassal-Core">nonAdjustedElement	"	self new nonAdjustedElement	"	| view path |view := ROView new.path := ROSVGPath new path: 'M100,100L300,100L200,300,z'; width: 2.view add: path element + ROBox @ RODraggable.view open</body></methods><methods><class-id>Roassal.RoassalExporterHTMLTest</class-id> <category>tests</category><body package="Roassal-Core">testCircle	|view element visitor|	view := ROView new.	element := (ROElement new on: 'My Model') + (ROEllipse new color: Color green).	view add: element.	visitor := ROHTMLVisitor new runOn: view.	self assert: (visitor nodesStream contents = ' nodes:[ { nodeID: 1, nodeShape: "ROElement", nodeModel: "My Model", nodeWidth: 5, nodeHeight: 5, x: 0, y: 0, nodeParentID: 0, draggable: "false"},{ nodeID: 2, nodeParentID: 1, nodeShape: "ROEllipse", nodeWidth: 5, nodeHeight: 5, x: 0, y: 0, nodeFillColor: "#00FF00", nodeBorderColor: "#000000", nodeBorderWidth: "0", draggable: "false"}, ], ').	self assert: (visitor linksStream contents = ' links:[  ] ')	</body><body package="Roassal-Core">testLabel	|view element visitor w|	view := ROView new.	element := (ROElement spriteOn: 'My Model') + ROLabel.	view add: element.	w := element width.	visitor := ROHTMLVisitor new runOn: view.	self assert: (visitor nodesStream contents = (' nodes:[ { nodeID: 1, nodeShape: "ROElement", nodeModel: "My Model", nodeWidth: ', w printString ,', nodeHeight: 50, x: 0, y: 0, nodeParentID: 0, draggable: "true"},{ nodeID: 2, nodeParentID: 1, nodeModel: "My Model", nodeShape: "ROLabel", nodeWidth: ', w printString ,', nodeHeight: 50, x: 0, y: 10, nodeFillColor: "none", nodeBorderColor: "#000000", draggable: "true"},{ nodeID: 3, nodeParentID: 1, nodeShape: "ROBorder", nodeWidth: ', w printString ,', nodeHeight: 50, x: 0, y: 0, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"}, ], ')).	self assert: (visitor linksStream contents = ' links:[  ] ')	</body><body package="Roassal-Core">testLinks	|view node1 node2 visitor edge|	view := ROView new.	node1 := (ROElement spriteOn: 'node1') + (ROBox new color: (Color r: 0 g: 0 b: 1)).	node2 := (ROElement spriteOn: 'node2') + (ROBox new color: (Color r: 0 g: 0 b: 1)).	node2 translateBy: 200@200.	edge := ROEdge  from: node1 to: node2.	edge + (ROLine new color: Color black).	view add: node1; add: node2; add: edge.	visitor := ROHTMLVisitor new runOn: view.	self assert: (visitor nodesStream contents = ' nodes:[ { nodeID: 1, nodeShape: "ROElement", nodeModel: "node1", nodeWidth: 50, nodeHeight: 50, x: 0, y: 0, nodeParentID: 0, draggable: "true"},{ nodeID: 2, nodeParentID: 1, nodeShape: "ROBox", nodeWidth: 50, nodeHeight: 50, x: 0, y: 0, nodeFillColor: "#0000FF", nodeBorderColor: "#000000", nodeBorderWidth: "0", draggable: "true"},{ nodeID: 3, nodeParentID: 1, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 0, y: 0, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 5, nodeShape: "ROElement", nodeModel: "node2", nodeWidth: 50, nodeHeight: 50, x: 200, y: 200, nodeParentID: 0, draggable: "true"},{ nodeID: 6, nodeParentID: 5, nodeShape: "ROBox", nodeWidth: 50, nodeHeight: 50, x: 200, y: 200, nodeFillColor: "#0000FF", nodeBorderColor: "#000000", nodeBorderWidth: "0", draggable: "true"},{ nodeID: 7, nodeParentID: 5, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 200, y: 200, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"}, ], ').	self assert: (visitor linksStream contents = ' links:[ { sourceID: "1", targetID: "5", edgeColor: "#000000", edgeWidth: "1"}, ] ')</body><body package="Roassal-Core">testNestedNodes	|view element visitor children|	view := ROView new.	element := (ROElement on: 'parent') + ROBorder new.	children := ROElement spritesOn: (1 to: 6).	element addAll: children.	ROGridLayout new on: element elements .	view add: element .	visitor := ROHTMLVisitor new runOn: view.	self assert: (visitor nodesStream contents = ' nodes:[ { nodeID: 1, nodeShape: "ROElement", nodeModel: "parent", nodeWidth: 180, nodeHeight: 120, x: 0, y: 0, nodeParentID: 0, draggable: "false"},{ nodeID: 2, nodeParentID: 1, nodeShape: "ROBorder", nodeWidth: 180, nodeHeight: 120, x: 0, y: 0, nodeFillColor: "none", nodeBorderColor: "#000000", draggable: "false"},{ nodeID: 4, nodeShape: "ROElement", nodeModel: "1", nodeWidth: 50, nodeHeight: 50, x: 5, y: 5, nodeParentID: 1, draggable: "true"},{ nodeID: 5, nodeParentID: 4, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 5, y: 5, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 7, nodeShape: "ROElement", nodeModel: "2", nodeWidth: 50, nodeHeight: 50, x: 65, y: 5, nodeParentID: 1, draggable: "true"},{ nodeID: 8, nodeParentID: 7, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 65, y: 5, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 10, nodeShape: "ROElement", nodeModel: "3", nodeWidth: 50, nodeHeight: 50, x: 125, y: 5, nodeParentID: 1, draggable: "true"},{ nodeID: 11, nodeParentID: 10, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 125, y: 5, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 13, nodeShape: "ROElement", nodeModel: "4", nodeWidth: 50, nodeHeight: 50, x: 5, y: 65, nodeParentID: 1, draggable: "true"},{ nodeID: 14, nodeParentID: 13, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 5, y: 65, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 16, nodeShape: "ROElement", nodeModel: "5", nodeWidth: 50, nodeHeight: 50, x: 65, y: 65, nodeParentID: 1, draggable: "true"},{ nodeID: 17, nodeParentID: 16, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 65, y: 65, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 19, nodeShape: "ROElement", nodeModel: "6", nodeWidth: 50, nodeHeight: 50, x: 125, y: 65, nodeParentID: 1, draggable: "true"},{ nodeID: 20, nodeParentID: 19, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 125, y: 65, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"}, ], ').	self assert: (visitor linksStream contents = ' links:[  ] ')</body><body package="Roassal-Core">testNestedNodes2	|view element visitor children|	view := ROView new.	element := (ROElement on: 'parent') + ROBorder new.	children := ROElement spritesOn: (1 to: 2).	element addAll: children.	children do: [:node | 		node addAll: (ROElement spritesOn: (1 to: 3)).		ROGridLayout new on: node elements.	].	ROGridLayout new on: element elements.	view add: element .	visitor := ROHTMLVisitor new runOn: view.	self assert: (visitor nodesStream contents = ' nodes:[ { nodeID: 1, nodeShape: "ROElement", nodeModel: "parent", nodeWidth: 260, nodeHeight: 130, x: 0, y: 0, nodeParentID: 0, draggable: "false"},{ nodeID: 2, nodeParentID: 1, nodeShape: "ROBorder", nodeWidth: 260, nodeHeight: 130, x: 0, y: 0, nodeFillColor: "none", nodeBorderColor: "#000000", draggable: "false"},{ nodeID: 4, nodeShape: "ROElement", nodeModel: "1", nodeWidth: 120, nodeHeight: 120, x: 5, y: 5, nodeParentID: 1, draggable: "true"},{ nodeID: 5, nodeParentID: 4, nodeShape: "ROBorder", nodeWidth: 120, nodeHeight: 120, x: 5, y: 5, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 7, nodeShape: "ROElement", nodeModel: "1", nodeWidth: 50, nodeHeight: 50, x: 10, y: 10, nodeParentID: 4, draggable: "true"},{ nodeID: 8, nodeParentID: 7, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 10, y: 10, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 10, nodeShape: "ROElement", nodeModel: "2", nodeWidth: 50, nodeHeight: 50, x: 70, y: 10, nodeParentID: 4, draggable: "true"},{ nodeID: 11, nodeParentID: 10, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 70, y: 10, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 13, nodeShape: "ROElement", nodeModel: "3", nodeWidth: 50, nodeHeight: 50, x: 10, y: 70, nodeParentID: 4, draggable: "true"},{ nodeID: 14, nodeParentID: 13, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 10, y: 70, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 16, nodeShape: "ROElement", nodeModel: "2", nodeWidth: 120, nodeHeight: 120, x: 135, y: 5, nodeParentID: 1, draggable: "true"},{ nodeID: 17, nodeParentID: 16, nodeShape: "ROBorder", nodeWidth: 120, nodeHeight: 120, x: 135, y: 5, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 19, nodeShape: "ROElement", nodeModel: "1", nodeWidth: 50, nodeHeight: 50, x: 140, y: 10, nodeParentID: 16, draggable: "true"},{ nodeID: 20, nodeParentID: 19, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 140, y: 10, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 22, nodeShape: "ROElement", nodeModel: "2", nodeWidth: 50, nodeHeight: 50, x: 200, y: 10, nodeParentID: 16, draggable: "true"},{ nodeID: 23, nodeParentID: 22, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 200, y: 10, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"},{ nodeID: 25, nodeShape: "ROElement", nodeModel: "3", nodeWidth: 50, nodeHeight: 50, x: 140, y: 70, nodeParentID: 16, draggable: "true"},{ nodeID: 26, nodeParentID: 25, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 140, y: 70, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"}, ], ').	self assert: (visitor linksStream contents = ' links:[  ] ')</body><body package="Roassal-Core">testShapeComposition	|view element visitor|	view := ROView new.	element := (ROElement spriteOn: 'My Model') + (ROEllipse new color: Color green).	view add: element.	visitor := ROHTMLVisitor new runOn: view.	self assert: (visitor nodesStream contents =' nodes:[ { nodeID: 1, nodeShape: "ROElement", nodeModel: "My Model", nodeWidth: 50, nodeHeight: 50, x: 0, y: 0, nodeParentID: 0, draggable: "true"},{ nodeID: 2, nodeParentID: 1, nodeShape: "ROEllipse", nodeWidth: 50, nodeHeight: 50, x: 0, y: 0, nodeFillColor: "#00FF00", nodeBorderColor: "#000000", nodeBorderWidth: "0", draggable: "true"},{ nodeID: 3, nodeParentID: 1, nodeShape: "ROBorder", nodeWidth: 50, nodeHeight: 50, x: 0, y: 0, nodeFillColor: "none", nodeBorderColor: "#FF0000", draggable: "true"}, ], ').	self assert: (visitor linksStream contents = ' links:[  ] ')	</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>testing</category><body package="Roassal-Core">isLineLayout	^ false</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: aGraphElement		self subclassResponsibility</body><body package="Roassal-Core">doIncrementallyExecute: anElementNode	"called by refreshLayoutEvery: ms. It is used to convey a feeling of incremental execution."		self doExecute: anElementNode</body><body package="Roassal-Core">executeOnElements: elements 	"Execute the layout, myself, on the elements"	self userDefinedEdges isNil 		ifTrue: [ self setEdgesFromElements: elements ]		ifFalse: 			[ | flat |			flat := OrderedCollection new.			self userDefinedEdges do: 				[ :each | 				each isCollection 					ifTrue: [ flat addAll: each ]					ifFalse: [ flat add: each ] ].			self edges: flat ].			super executeOnElements: elements</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>accessing</category><body package="Roassal-Core">affectedNodes		^affectedNodes</body><body package="Roassal-Core">affectedNodes: anObject		affectedNodes := anObject</body><body package="Roassal-Core">affectedNodesOf:  aNode 	^ affectedNodes ifNil: [ aNode nodes ]</body><body package="Roassal-Core">edges: aCollection		edges := aCollection</body><body package="Roassal-Core">fromPositions: anArray		fromPositions := anArray</body><body package="Roassal-Core">setEdgesFromElements: elements 	| view |	elements isEmpty ifTrue: [ ^ self ].	self assert: [ (elements collect: #view) asSet size = 1 ].		elements isEmpty ifTrue: [ ^ self ].		view := elements anyOne view.	self edges: (view elementsSuchThat: [ :el | ((el isKindOf: ROEdge) and: [ elements includes: el from ]) and: [ elements includes: el to ] ]).	</body><body package="Roassal-Core">toPositions: anArray		toPositions := anArray</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	"Initialization"	super initialize.	edges := nil</body><body package="Roassal-Core">userDefinedEdges: aCollectionOfEdges	"useful to tell to the layout which edges have to be used for the layout"	userDefinedEdges := aCollectionOfEdges.	</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>private</category><body package="Roassal-Core">edges		^edges</body><body package="Roassal-Core">fromPositions		^fromPositions ifNil: [fromPositions := self defaultFromPositions]</body><body package="Roassal-Core">toPositions		^toPositions ifNil: [toPositions := self defaultToPositions]</body><body package="Roassal-Core">userDefinedEdges		^userDefinedEdges</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>default values</category><body package="Roassal-Core">defaultFromPositions	^ #()	</body><body package="Roassal-Core">defaultToPositions	^ #()</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout</class-id> <category>iterator</category><body package="Roassal-Core">edgesDo: aBlock	"Iterates over all the edges of the receiver."		edges ifNil: [ ^ self ].	edges do: aBlock</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout class</class-id> <category>instance creation</category><body package="Roassal-Core">withEdges: aCollection		^self new initialize userDefinedEdges: aCollection</body></methods><methods><class-id>Roassal.ROEdgeDrivenLayout class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">isAbstract	^ self name = #ROEdgeDrivenLayout</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout</class-id> <category>actions</category><body package="Roassal-Core">on: el edges: edgs	"Do the layout of the elements tacking into account the provided edges"	self userDefinedEdges ifNil: [ self userDefinedEdges: edgs ].	^ self applyOn: el.</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout</class-id> <category>private</category><body package="Roassal-Core">cachedChildren		cachedChildren ifNil: [cachedChildren := IdentityDictionary new: 1000].	^cachedChildren</body><body package="Roassal-Core">cachedParents		cachedParents ifNil: [cachedParents := IdentityDictionary new: 1000].	^cachedParents</body><body package="Roassal-Core">cachedParentsWithHighestNestings		cachedParentsWithHighestNestings		ifNil: [cachedParentsWithHighestNestings := IdentityDictionary new: 1000].	^cachedParentsWithHighestNestings</body><body package="Roassal-Core">childrenFor: aNode		^self cachedChildren		at: aNode		ifAbsentPut:			[| nodes |			nodes := OrderedCollection new.			self edgesDo:					[:edge | 					(edge from == aNode and: [edge to ~= aNode])						ifTrue:							[(nodes includes: edge from) ifFalse: [nodes add: edge to]]].			nodes]</body><body package="Roassal-Core">childrenFor: aNode except: aNodeCollection		^(self childrenFor: aNode) 		reject: [:each | aNodeCollection includes: each]		"we are explicitly not using the default Collection&gt;&gt;difference: behavior here because we want to preserve the order of the collection"</body><body package="Roassal-Core">childrenWithHighestNestingLevelFor: aNode		^(self childrenFor: aNode)		select: [:eachChild | (self highestNestingParentFor: eachChild) == aNode]</body><body package="Roassal-Core">clear		cachedParents := nil.	cachedChildren := nil.	cachedParentsWithHighestNestings := nil</body><body package="Roassal-Core">executeWithoutResizeStrategy: nodeElements block: block	| hasParentWhichIsNotAView oldResizeStrategy parent |	hasParentWhichIsNotAView := nodeElements notEmpty and: [ nodeElements first parent isView not ] .	hasParentWhichIsNotAView ifTrue: [		parent := nodeElements first parent.		oldResizeStrategy := parent resizeStrategy.		parent resizeStrategy: (ROPermissiveParent new padding: oldResizeStrategy padding). ].	block value.		hasParentWhichIsNotAView ifTrue: [		parent resizeStrategy: oldResizeStrategy.		parent adjustSizeIfNecessary ].</body><body package="Roassal-Core">highestNestingParentFor: aNodeFigure		| parents |	^self cachedParentsWithHighestNestings		at: aNodeFigure		ifAbsentPut:			[parents := self parentsFor: aNodeFigure.			parents isEmpty				ifTrue: [0]				ifFalse:					[parents detectMax: [:eachParent | self nestingLevelFor: eachParent]]]</body><body package="Roassal-Core">maximumDiameter: aCollection		^aCollection		inject: 0		into: [:max :node | max max: (node radius * 2) ]</body><body package="Roassal-Core">maximumRadius: aCollection		^aCollection		inject: 0		into: [:max :node | max max: node radius]</body><body package="Roassal-Core">nestingLevelFor: aNodeFigure		| parents parentsNesting |	parents := self parentsFor: aNodeFigure.	parentsNesting := parents		collect: [:eachParent | self nestingLevelFor: eachParent].	^parentsNesting isEmpty		ifTrue: [0]		ifFalse: [parentsNesting max + 1]</body><body package="Roassal-Core">parentsFor: aNode	^ self cachedParents		at: aNode		ifAbsentPut:			[ | nodes |			nodes := OrderedCollection new.			self edgesDo:					[:edge | edge to == aNode ifTrue: [ nodes add: edge from ] ].			nodes ]</body><body package="Roassal-Core">rootNodesFor: aCollection	^ aCollection select: [:node | 		node isNotEdge and: 			[ (self parentsFor: node) isEmpty ] ].	</body><body package="Roassal-Core">shiftTree: aNode by: aPoint		aNode translateBy: aPoint.	(self childrenFor: aNode) do: [:child | self shiftTree: child by: aPoint]</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout</class-id> <category>accessing</category><body package="Roassal-Core">horizontalGap		^horizontalGap ifNil: [ self class horizontalGap ]</body><body package="Roassal-Core">horizontalGap: anInteger		horizontalGap := anInteger</body><body package="Roassal-Core">verticalGap		^verticalGap ifNil: [self class verticalGap]</body><body package="Roassal-Core">verticalGap: anInteger		verticalGap := anInteger</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout</class-id> <category>battista</category><body package="Roassal-Core">greedyCycleRemoval: aCollection	"Di Battista Greedy-Cycle-Removal algorithm. Chapter 9.4, page 297. The last part is not like in the book. The original algorithm only takes	 local optimas into account. This will break ordinary trees sometimes. This version also takes global optimas into account."		| g sl sr s indeg outdeg degrees vertex | 	g := aCollection copy asOrderedCollection.	sl := OrderedCollection new.	sr := OrderedCollection new.	"While g contains a sink (aka leaf)"	g copy		do:			[:node | 			(self childrenFor: node) isEmpty				ifTrue:					[sr addFirst: node.					g remove: node]	"self edges detect: [:edge | edge fromFigure == node] ifNone: [sr addFirst: node. g remove: node]"].	"While g contains a source (aka root)"	g copy		do:			[:node | 			(self parentsFor: node) isEmpty				ifTrue:					[sl addLast: node.					g remove: node]	"self edges detect: [:edge | edge toFigure == node] ifNone: [sl addLast: node. g remove: node]"].	"Calculate deg for all remaining vertices"	degrees := IdentityDictionary new.	g		do:			[:node | 			indeg := (self parentsFor: node) size.			outdeg := (self childrenFor: node) size.	"indeg := self edges inject: 0 into: [:sum :edge | (edge toFigure == node) ifTrue: [sum + 1] ifFalse: [sum]].		outdeg := self edges inject: 0 into: [:sum :edge | (edge fromFigure == node) ifTrue: [sum + 1] ifFalse: [sum]]."			degrees				at: node				put: outdeg - indeg].	"While g not empty"	g := g asSortedCollection: [:a :b | (degrees at: a) &gt;= (degrees at: b)].	[g isEmpty]		whileFalse:			[vertex := g				detect: [:v | (self parentsFor: v) anySatisfy: [:w | sl includes: w]]				ifNone: [g first].	"Corner case: Closed cycle with not root at all. Eg 1 -&gt; 2 -&gt; 3 -&gt; 1"			sl addLast: vertex.			g remove: vertex].	"Remove all leftward edges"	s := sl , sr.	self edges notNil		ifTrue: 			[ self edges copy				do:					[:edge | 					(s indexOf: edge source) &gt; (s indexOf: edge target)						ifTrue: [self edges remove: edge ] ] ].		"Reset the cache"	self clear</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout</class-id> <category>default values</category><body package="Roassal-Core">defaultFromPositions		^#(#bottomCenter)</body><body package="Roassal-Core">defaultToPositions		^#(#topCenter)</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout</class-id> <category>hook</category><body package="Roassal-Core">doInitialize: elements 	super doInitialize: elements.	self clear.	self greedyCycleRemoval: elements</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout class</class-id> <category>constants</category><body package="Roassal-Core">horizontalGap		^3.0</body><body package="Roassal-Core">verticalGap		^20.0</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout class</class-id> <category>public</category><body package="Roassal-Core">on: elements edges: edges	"Do the layout of the elements tacking into account the provided edges"	^ self new 		userDefinedEdges: edges;		applyOn: elements.</body></methods><methods><class-id>Roassal.ROAbstractGraphLayout class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractGraphLayout</body></methods><methods><class-id>Roassal.ROSugiyamaLayout</class-id> <category>private</category><body package="Roassal-Core">addDummyNodes		| layer layerNr |	connections := ROIdentityMatrix new.	self edgesDo:			[:edge | 			| a b span fromNode toNode |			"edge hints removeAll."			a := layerNrs at: edge source.			b := layerNrs at: edge target.			span := (a - b) abs.			span = 1				ifTrue:					[connections						at: edge source						at: edge target						put: true].	"Normal case where nodes are in adjacent layers"			fromNode := edge source.			[span &gt; 1]				whileTrue:					[span := span - 1.					layerNr := b + span.					layer := layers at: layerNr.					toNode := RODummyNode						on: edge						slot: a - span.					layer add: toNode.					layerNrs at: toNode put: layerNr.					connections at: fromNode at: toNode put: true.					fromNode := toNode].			(a - b) abs &gt; 1				ifTrue:					[connections						at: fromNode						at: edge target						put: true]]</body><body package="Roassal-Core">assignLabels: aNodeCollection 	"Initialize label dictionary"	| label vertices parentLabels |	labels := IdentityDictionary new.	label := 1.	"Assign labels to the roots"	(self rootNodesFor: aNodeCollection) do: 		[ :node | 		labels 			at: node			put: label.		label := label + 1 ].	"Assign labels to the rest"	[ labels keys size &lt; aNodeCollection size ] whileTrue: 		[ vertices := SortedCollection sortBlock: self sortBlock.		aNodeCollection do: 			[ :node | 			(labels includesKey: node) ifFalse: 				[ parentLabels := ((self parentsFor: node) collect: 					[ :pn | 					labels 						at: pn						ifAbsent: [ self maxFloat ] ]) asSortedCollection.				parentLabels last ~= self maxFloat ifTrue: [ vertices add: node -&gt; parentLabels ] ] ].		labels 			at: vertices first key			put: label.		label := label + 1 ]</body><body package="Roassal-Core">buildLayers: g		| w layerNr u vertices vertex layer done |	w := self maxFloat.	u := OrderedCollection new.	layers := IdentityDictionary new.	layerNrs := IdentityDictionary new.	"Assign all nodes to layers"	[g isEmpty]		whileFalse:			[vertices := g				select:					[:e | (self childrenFor: e) allSatisfy: [:node | u includes: node]].			vertex := vertices detectMax: [:e | labels at: e].			done := false.			layerNr := 1.			[done]				whileFalse:					[layer := layers						at: layerNr						ifAbsentPut: [OrderedCollection new].					(layer size &gt;= w						or:							[(self childrenFor: vertex) anySatisfy: [:n | (layerNrs at: n) &gt;= layerNr]])						ifTrue: [layerNr := layerNr + 1]						ifFalse: [done := true]].			layer add: vertex.			layerNrs at: vertex put: layerNr.			u add: vertex.			g remove: vertex]</body><body package="Roassal-Core">cl: layer u: u v: v	"Calculates cuv. Di Battista, chapter 9.2.2, page 283"		| partnersOfU partnersOfV c partnersOfUIndex partnersOfVIndex layerNr |	layerNr := layerNrs at: u.	":= layerNrs at: v"	partnersOfU := (connections at: u)		select: [:each | (layerNrs at: each) = (layerNr - 1)].	partnersOfV := (connections at: v)		select: [:each | (layerNrs at: each) = (layerNr - 1)].	c := 0.	partnersOfUIndex := partnersOfU collect: [:node | layer indexOf: node].	partnersOfVIndex := partnersOfV collect: [:node | layer indexOf: node].	partnersOfUIndex		do:			[:uIndex | partnersOfVIndex do: [:vIndex | vIndex &lt; uIndex ifTrue: [c := c + 1]]].	^c</body><body package="Roassal-Core">layoutAt: aPoint		| treeWidth layerKeys layer layerWidth horizontalPosition verticalPosition layerHeight |	treeWidth := layers values		inject: self maxFloat negated		into:			[:max :e | max max: (e sum: #width) + ((e size - 1) * self horizontalGap)].	verticalPosition := self horizontalGap.	"For visual reasons NOT: self class verticalGap"	layerKeys := layers keys asSortedCollection reverse.	layerKeys		do:			[:aKey | 			layer := layers at: aKey.			layerWidth := (layer sum: #width)				+ ((layer size - 1) * self horizontalGap).			layerHeight := (layer detectMax: #height) height.			horizontalPosition := treeWidth / 2.0 + aPoint x - (layerWidth / 2.0).			layer				do:					[:node | 					translator translate: node to:  horizontalPosition @ verticalPosition.										horizontalPosition := horizontalPosition + node width						+ self horizontalGap].			verticalPosition := verticalPosition + layerHeight + self verticalGap]</body><body package="Roassal-Core">maxFloat	^ 1e10</body><body package="Roassal-Core">reduceCrossing	"Crossing reduction"		| layer2 u v c1 c2 layer1 done |	2		to: layers keys size		do:			[:index | 			layer1 := layers at: index - 1.			layer2 := layers at: index.			done := false.			[done]				whileFalse:					[done := true.					2						to: layer2 size						do:							[:i | 							u := layer2 at: i - 1.							v := layer2 at: i.							c1 := self cl: layer1 u: u v: v.							c2 := self cl: layer1 u: v v: u.							c1 &gt; c2								ifTrue:									[layer2 roSwapElement: u withElement: v.									done := false]]]]</body><body package="Roassal-Core">sortBlock		sortBlock isNil ifTrue: [ sortBlock := self class sortBlock ].	^sortBlock</body></methods><methods><class-id>Roassal.ROSugiyamaLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: aNodeCollection 	"Coffman-Graham-Layering. Di Battista Book, page 275, chapter, 9.2.1"	self assignLabels: aNodeCollection.	self buildLayers: aNodeCollection copy.	self addDummyNodes.	self reduceCrossing.	self layoutAt: self verticalGap @ self horizontalGap</body></methods><methods><class-id>Roassal.ROSugiyamaLayout class</class-id> <category>utils</category><body package="Roassal-Core">sortBlock		^ ROSortBlock new</body></methods><methods><class-id>Roassal.ROCanvasWrapperTest</class-id> <category>tests</category><body package="Roassal-Core">testCreation	|wrapper canvas|		canvas := RONullCanvas new.		wrapper := ROCanvasWrapper onCanvas: canvas.		self assert: (wrapper canvas = canvas)		</body><body package="Roassal-Core">testDrawing	|wrapper canvas view|		canvas := ROTracingCanvas new.		wrapper := ROCanvasWrapper onCanvas: canvas.	view := ROView new.	view add: ROElement sprite.		self assert: (wrapper canvas = canvas).		view drawOn: wrapper.		self assert: (wrapper canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#line '(0@0)' '(50@0)' 1 'Color red') #(#line '(50@0)' '(50@50)' 1 'Color red') #(#line '(50@50)' '(0@50)' 1 'Color red') #(#line '(0@50)' '(0@0)' 1 'Color red')))			</body></methods><methods><class-id>Roassal.RONoTextCanvasWrapperTest</class-id> <category>tests</category><body package="Roassal-Core">testLabelDrawing	|wrapper view canvas|	canvas := ROTracingCanvas new.	wrapper := RONoTextCanvasWrapper onCanvas: canvas.	view := ROView new.		view add: ((ROElement new model: 'hola') + ROLabel).		view drawOn:  canvas.	self assert: (canvas trace size = 2).	self assert: (canvas trace first = #(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white')).	self assert: canvas trace second =  #(#drawStringColor 'hola' '(3@3)' 'Color black').		canvas initialize.	view drawOn:  wrapper.		self assert: (canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white'))).</body></methods><methods><class-id>Roassal.RONullLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements	"do nothing"</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>configuration</category><body package="Roassal-Core">defaultColor	^ Color veryLightGray.</body><body package="Roassal-Core">defaultLineColor	^ Color veryLightGray.</body><body package="Roassal-Core">defaultNodeColor	^ Color white</body><body package="Roassal-Core">defaultTextColor	^ Color black.</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>accessors</category><body package="Roassal-Core">color	^color.</body><body package="Roassal-Core">getShape	^shape</body><body package="Roassal-Core">setShape: aShape	shape := aShape.</body><body package="Roassal-Core">viewBuilder	^viewBuilder</body><body package="Roassal-Core">viewBuilder: aViewBuilder	viewBuilder := aViewBuilder.</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>shapes - nodes</category><body package="Roassal-Core">centeredLabel	self setShape: self newCenteredLabel.</body><body package="Roassal-Core">circle	self setShape: ROEllipse new.	self color: self defaultNodeColor.	self getShape borderWidth: 1.</body><body package="Roassal-Core">ellipse	self circle</body><body package="Roassal-Core">label	self setShape: self newLabel.</body><body package="Roassal-Core">rectangle	self setShape: ROBox new.	self color: self defaultNodeColor.	self getShape borderWidth: 1.</body><body package="Roassal-Core">rectangleWithoutBorder	self setShape: ROBox new.	self color: self defaultNodeColor</body><body package="Roassal-Core">triangle	self setShape: ROTriangle new.	self color: self defaultNodeColor.	self getShape borderWidth: 1.</body><body package="Roassal-Core">withoutBorder	self getShape borderWidth: 0</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>shapes - color</category><body package="Roassal-Core">borderColor: aBlockOrSymbol	"aBlockOrSymbol expect to be evaluated against the model. It may either be a symbol or a one-arg block"	self getShape borderColor: [ :element | aBlockOrSymbol roValue: element model ]</body><body package="Roassal-Core">color: aBlockOrSymbol	color := aBlockOrSymbol.	self getShape color: [ :element | aBlockOrSymbol roValue: element model ]</body><body package="Roassal-Core">fillColor: aBlockOrSymbol	"aBlockOrSymbol expect to be evaluated against the model. It may either be a symbol or a one-arg block"	self getShape color: [ :element | aBlockOrSymbol roValue: element model ]</body><body package="Roassal-Core">fontColor: aBlockOrASymbolAnOrObject	self getLabelShape color: [ :element | aBlockOrASymbolAnOrObject roValue: element model ]</body><body package="Roassal-Core">if: conditionBlock borderColor: colorBlock	"If conditionBlock is evaluated at true, then colorBlock is used to pick the color to use. Both conditionBlock and colorBlock are evaluated with the model value of the node."	| oldBlockOrValue |	oldBlockOrValue := self borderColor.	^ self borderColor: [ :aModel | (conditionBlock roValue: aModel)									ifTrue: [ colorBlock roValue: aModel ] 									ifFalse: [ 										"Having to create a new element is rather ugly. 										Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"										oldBlockOrValue roValue: (ROElement on: aModel) ]].</body><body package="Roassal-Core">if: conditionBlock fillColor: colorBlock	"If conditionBlock is evaluated at true, then colorBlock is used to set the color of the node. Both conditionBlock and colorBlock are evaluated with the model value of the node."	| oldBlockOrValue |	oldBlockOrValue := self fillColor.	^self fillColor: [ :aModel | (conditionBlock roValue: aModel)									ifTrue: [ colorBlock roValue: aModel ] 									ifFalse: [ 										"Having to create a new element is rather ugly. 										Ideally, the oldBlockOrValue has to be 'unwrapped' for the translation"										oldBlockOrValue roValue: (ROElement on: aModel) ]].</body><body package="Roassal-Core">linearFillColor: block	"Set the linear fill color for the nodes. The gradient goes from white to black. anObject could be a symbol, a block or a value. anObject is evaluated against the model of the node to be paint. aGroup is a collection of the model values. This is where the maximum is looked into."	self getShape color: [ :element | 		| max |		max := (element view attributes includesKey: #tmpMaxValue)			ifTrue: [ element view attributeAt: #tmpMaxValue ]			ifFalse: [ element view attributeAt: #tmpMaxValue put: ((element view elements collect: #model) maxValue: block )].					Color gray256: 256 - ((block roValue: element model) max: max in: (1 to: 256)) ]</body><body package="Roassal-Core">linearFillColor: block within: groupOfObjects	"Set the linear fill color for the nodes. The gradient goes from white to black. anObject could be a symbol, a block or a value. anObject is evaluated against the model of the node to be paint. aGroup is a collection of the model values. This is where the maximum is looked into."		| max |	"If the collection is empty, then we return an arbitrary color. 	 If the script is properly done, the color should not be used"	groupOfObjects isEmpty ifTrue: [ ^ Color red ].		max := groupOfObjects maxValue: block.	self getShape color: [ :v | Color gray256: 256 - ((block roValue: v model) max: max in: (1 to: 256)) ]</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>shapes - private</category><body package="Roassal-Core">borderColor	^ self getShape borderColor</body><body package="Roassal-Core">fillColor	^ self getShape color</body><body package="Roassal-Core">getLabelShape	"private"	^ self getShape shapeDetect: [ :s | s isKindOf: ROAbstractLabel ]</body><body package="Roassal-Core">newCenteredLabel	^ ROCenteredLabel new color: self defaultTextColor; yourself</body><body package="Roassal-Core">newLabel	^ ROLabel new color: self defaultTextColor; yourself</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>shapes - size</category><body package="Roassal-Core">borderWidth: aBlockOrSymbol	"aBlockOrSymbol expect to be evaluated against the model. It may either be a symbol or a one-arg block"	self getShape borderWidth: [ :element | aBlockOrSymbol roValue: element model ]</body><body package="Roassal-Core">fixedSize	self viewBuilder fixedSize.</body><body package="Roassal-Core">fontSize: aBlockOrASymbolOrAnObject	self getLabelShape fontSize: [:element | aBlockOrASymbolOrAnObject roValue: element model]</body><body package="Roassal-Core">height: aHeightBlock	self getShape height: [ :elem | (aHeightBlock roValue: elem model) ]</body><body package="Roassal-Core">linearFontSize: anObject within: aCollection	"Set the linear font size for the nodes. The gradient goes from 0 to the maximum, obtained from aCollection. anObject could be a symbol, a block or a value. anObject is evaluated against the model of the node to be paint. aGroup is a collection of the model values. This is where the maximum is looked into."		self fontSize: (RONFontLinearNormalizer inContext: aCollection withCommand: anObject)</body><body package="Roassal-Core">logHeight: aBlock	self height: [ :v | ((aBlock value: v) + 1) log * 10 ]</body><body package="Roassal-Core">logWidth: aBlock	self width: [ :v | ((aBlock value: v) + 1) log * 10 ]</body><body package="Roassal-Core">size: aSizeBlock	self width: aSizeBlock.	self height: aSizeBlock.</body><body package="Roassal-Core">width: aWidthBlock	self getShape width: [ :elem | (aWidthBlock roValue: elem model) ]</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>shapes - text</category><body package="Roassal-Core">text: aBlockOrSymbol	"aBlockOrSymbol expect to be evaluated against the model. It may either be a unary symbol or a one-arg block"	self getShape text: [ :element | aBlockOrSymbol roValue: element model ]</body><body package="Roassal-Core">textHorizontalPadding: aSmallInteger 		^ self getLabelShape textHorizontalPadding: aSmallInteger</body><body package="Roassal-Core">textPadding: aSmallInteger 		^ self getLabelShape textPadding: aSmallInteger</body><body package="Roassal-Core">textVerticalPadding: aSmallInteger 		^ self getLabelShape textVerticalPadding: aSmallInteger</body><body package="Roassal-Core">withCenteredText	^ self withCenteredText: #yourself</body><body package="Roassal-Core">withCenteredText: aBlockOrASymbolAnOrObject	| label |	label := self newCenteredLabel text: [ :anElement | 		aBlockOrASymbolAnOrObject roValue: anElement model ].	self getShape + label.</body><body package="Roassal-Core">withText	^ self withText: #yourself</body><body package="Roassal-Core">withText: aBlockOrASymbolAnOrObject	| label |	label := self newLabel text: [ :anElement | aBlockOrASymbolAnOrObject roValue: anElement model ].	self getShape + label."	width := [ :v | label widthOfString: v printString ].	height := [ :v | label heightOfString: v printString ]."</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder</class-id> <category>shapes - lines</category><body package="Roassal-Core">arrowedLine	self arrowedLineWithOffset: 0</body><body package="Roassal-Core">arrowedLineReversed	self arrowedLineReversedWithOffset: 1.0</body><body package="Roassal-Core">arrowedLineReversedWithOffset: aFloat	self setShape: ROLine new.	self getShape add: (ROReversedArrow new offset: aFloat).	self color: self defaultLineColor.</body><body package="Roassal-Core">arrowedLineWithOffset: aFloat	self setShape: ROLine new.	self getShape add: (ROArrow new offset: aFloat).	self color: self defaultLineColor.</body><body package="Roassal-Core">attachPoint: aROHorizontalAttachPoint 		self getShape attachPoint: aROHorizontalAttachPoint</body><body package="Roassal-Core">bezierLine	self setShape: RORadialBezierCurve new.	self color: self defaultLineColor.</body><body package="Roassal-Core">line	self setShape: ROLine new.	self color: self defaultLineColor.</body><body package="Roassal-Core">orthoHorizontalLine	self setShape: ROOrthoHorizontalLineShape new.	self color: self defaultLineColor.</body><body package="Roassal-Core">orthoVerticalLine	self setShape: ROOrthoVerticalLineShape new.	self color: self defaultLineColor.</body></methods><methods><class-id>Roassal.ROMondrianShapeBuilder class</class-id> <category>createInstance</category><body package="Roassal-Core">initializeOn: aViewBuilder	^self new viewBuilder: aViewBuilder.</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>translation</category><body package="Roassal-Core">setBounds:  aBounds	self extent: aBounds extent.	self translateTo: aBounds origin.</body><body package="Roassal-Core">translateBy: aPoint 	parent translate: self by: aPoint</body><body package="Roassal-Core">translateByRealPoint: aPoint 	| p |	p := self view camera virtualToRealPointNoTrunc: self position.	self translateTo: (self view camera realToVirtualPointNoTrunc: (p + aPoint)).</body><body package="Roassal-Core">translateTo: aPoint 	self translateBy: (aPoint - self bounds origin)</body><body package="Roassal-Core">translateToRealPoint: aPoint 	| p |	p := self view camera realToVirtualPoint: aPoint. 	self translateTo: p.</body><body package="Roassal-Core">translateWithoutUpdatingContainedElementsBy: aPoint	"translate myself without updating the parent."	aPoint = (0 @ 0) ifTrue: [ ^ self ].	position := position + aPoint.	self announce: (ROElementTranslated step: aPoint)</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>accessing</category><body package="Roassal-Core">absolutePosition	"Return the absolute position of the element, the top left corner"	^ parent 		ifNil: [ self position ]		ifNotNil: [ self position + parent absolutePosition ]</body><body package="Roassal-Core">allEdgesFrom	"Return all the edges that begins from me"	| edges |	edges := OrderedCollection new.	self view allElementsDo:  [ :edge | 		(edge isEdge and: [ edge from == self ]) 			ifTrue: [ edges add: edge ] ].	^ edges</body><body package="Roassal-Core">allEdgesTo	"Return all the edges that ends to me"	| edges |	edges := OrderedCollection new.	self view allElementsDo:  [ :edge | 		(edge isEdge and: [ edge to == self ]) 			ifTrue: [ edges add: edge ] ].	^ edges</body><body package="Roassal-Core">bottomCenter	^ self bounds bottomCenter</body><body package="Roassal-Core">bottomLeft	^ self bounds bottomLeft</body><body package="Roassal-Core">bottomRight 	^ self bounds bottomRight</body><body package="Roassal-Core">bounds	"Return the bounds of the element"		^ self position extent: self extent</body><body package="Roassal-Core">center	^ self bounds center</body><body package="Roassal-Core">center: pos	^ self translateTo: (pos - (self extent / 2))</body><body package="Roassal-Core">center: aPoint radius: d	position := (aPoint - (d @ d)).	self extent: (2 * d @ ( 2 * d))</body><body package="Roassal-Core">extent	"Return the extent of myself"	^ self shapeCache extentIfAbsentPut: [ shape maxChainedExtentFor: self ].</body><body package="Roassal-Core">extent: aPoint 	"Set the extent of myself. Do nothing if the new extent is the same that the one I have"	self extent = aPoint ifTrue: [ ^ self ].	self shapeCache extent: aPoint.	shape elementExtent: aPoint.	self announce: ROElementResized.	self callback element: self resizedTo: aPoint</body><body package="Roassal-Core">height	^ self extent y</body><body package="Roassal-Core">height: h	"h is a numerical value"	(h = self height) ifTrue: [ ^ self ].	self announce: ROElementResized.	self shapeCache height: h</body><body package="Roassal-Core">leftCenter	^ self bounds leftCenter</body><body package="Roassal-Core">position	"Return the position of the element. Return a point of floats"		^ position</body><body package="Roassal-Core">positionAsInteger	"Return the position as integer"		^ self position asIntegerPoint </body><body package="Roassal-Core">positionRelativeTo: anElement	"Return the position of myself against the position of one of my parent, anElement. The returned position is relative to it."	"This method is useful to draw edges that are nested"	(anElement == self)		ifTrue: [ ^ 0 @ 0 ].		^ self topLeft + (parent positionRelativeTo: anElement)</body><body package="Roassal-Core">radius	^ self extent r / 2	</body><body package="Roassal-Core">radius: d	^ self center: self position radius: d</body><body package="Roassal-Core">rightCenter	^ self bounds rightCenter</body><body package="Roassal-Core">size: d	self extent: d @ d</body><body package="Roassal-Core">topCenter	^ self bounds topCenter</body><body package="Roassal-Core">topLeft	^ self bounds topLeft </body><body package="Roassal-Core">topRight	^ self bounds topRight</body><body package="Roassal-Core">view: aView	"Set the view in which I am defined. All my elements should also belong to the same view"	super view: aView.	self elementsDo: [ :el | el view: aView ]	</body><body package="Roassal-Core">width	"Return a numerical value"	^ self extent x</body><body package="Roassal-Core">width: w	"w is a numerical value"		(w = self width) ifTrue: [ ^ self ].	self announce: ROElementResized.	self shapeCache with: w.</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>testing</category><body package="Roassal-Core">contains: aPoint	"Return true if aPoint is within the bounds of myself. Note that aPoint is relative to the owner of the element"	^ (aPoint &lt; (self extent + self absolutePosition)) and: [ aPoint &gt;= (self absolutePosition) ]"	^ shape element: self containsPoint: aPoint "</body><body package="Roassal-Core">isEdge	^ false</body><body package="Roassal-Core">isVisibleIn: rectangle	"Return true if the element is completely or partially visible in the rectangle given in parameter"		^ self bounds intersects: rectangle</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>actions</category><body package="Roassal-Core">add: el	self assert: [ el isKindOf: ROAbstractComponent ].	self addChild: el.	self view addElementRecursivelyToRender: el</body><body package="Roassal-Core">addChild: el	el addedInAnElement: self.</body><body package="Roassal-Core">addedInAnElement: el	"self translateBy: el topLeft negated."	self translateBy: el resizeStrategy padding.	self parent: el; view: el view.	el addElement: self.		el adjustSizeIfNecessary</body><body package="Roassal-Core">adjustSizeIfNecessary	resizeStrategy on: self</body><body package="Roassal-Core">elementsFromModels: objects	^ self elementsSuchThat: [ :el | objects includes: el model ]</body><body package="Roassal-Core">removeAllEdgesFrom	self view allElementsDo: 	[ 	:edge | 		edge isEdge ifTrue: 		[ 	(edge from == self) ifTrue: 			[ 	edge remove			] 		] 	].</body><body package="Roassal-Core">removeAllEdgesTo	self view allElementsDo: 	[ 	:edge | 		edge isEdge ifTrue: 		[ 	(edge to == self) ifTrue: 			[ 	edge remove			] 		] 	].</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>accessing-computed</category><body package="Roassal-Core">collectPathToRootIn: aCollection	"Return the path from this graph to the root graph"	aCollection addLast: self.	self parent ifNotNil: [self parent collectPathToRootIn: aCollection]</body><body package="Roassal-Core">mostSpecificParentCommonWith: anotherElement	"Search the smallest possible element that is parent of self and of anotherNode"	|  anotherPathToRoot | 	anotherPathToRoot := anotherElement pathToRoot.	self pathToRoot do: [ :eachElement | 		(anotherPathToRoot includes: eachElement)			ifTrue: [ ^ eachElement ] ]</body><body package="Roassal-Core">pathToRoot	"Return the path from this graph to the root graph"	| path |	path := OrderedCollection new.	self parent ifNotNil: [self parent collectPathToRootIn: path].	^path</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>printing</category><body package="Roassal-Core">printOn: stream	"A textual representation of myself.	ROElement new printString =&gt; 'a ROElement' 	(ROElement on: 10) printString =&gt;  'a ROElement&lt;10&gt;'	"	super printOn: stream.	model ifNotNil: [ 		stream nextPutAll: '&lt;'.		model printOn: stream.		stream nextPutAll: '&gt;' ]</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>public</category><body package="Roassal-Core">addAll: els	els do: [:el | self add: el ]</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>initialization</category><body package="Roassal-Core">initialize 	super initialize.	position := 0 @ 0.</body><body package="Roassal-Core">initializeBare 	super initialize.	position := 0 @ 0.	shape := RONullShape new.</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>visiting</category><body package="Roassal-Core">accept: aVisitor	aVisitor visitElement: self</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>copying</category><body package="Roassal-Core">copy	"Return a copy of myself, shapes and interactions are not copied"	| answer |	answer := self class new.	answer 			translateTo: self position;			extent: self extent.	self shapesDo: [ :d | answer + d ].	self interactionsDo: [ :i | answer @ i ].	^ answer			</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>tree layout utility</category><body package="Roassal-Core">father	^ self attributes at: #father ifAbsent: [ ^ nil ]</body><body package="Roassal-Core">father: aNode	self attributeAt: #father put: aNode</body><body package="Roassal-Core">layer	 ^ self attributes at: #layer ifAbsent: [ ^nil ]</body><body package="Roassal-Core">layer: anInteger	self attributeAt: #layer put: anInteger</body><body package="Roassal-Core">leftContour	^ self attributes at: #left ifAbsent: [ ^ nil ]</body><body package="Roassal-Core">leftContour: aNode	self attributeAt: #left put: aNode</body><body package="Roassal-Core">mod		^ self attributes at: #mod ifAbsent: [ ^ 0 ]</body><body package="Roassal-Core">mod: aFloat			self attributeAt: #mod put: aFloat</body><body package="Roassal-Core">pointer	^ self attributes at: #pointer ifAbsent: [ ^ nil ]</body><body package="Roassal-Core">pointer: aNode	self attributeAt: #pointer put: aNode</body><body package="Roassal-Core">r		^ self attributes at: #r ifAbsent: [ ^ 0 ]</body><body package="Roassal-Core">r: aFloat			self attributeAt: #r put: aFloat</body><body package="Roassal-Core">rightContour	^ self attributes at: #right ifAbsent: [ ^ nil ]</body><body package="Roassal-Core">rightContour: aNode	self attributeAt: #right put: aNode</body><body package="Roassal-Core">theta		^ self attributes at: #theta ifAbsent: [ ^ 0 ]</body><body package="Roassal-Core">theta: aFloat			self attributeAt: #theta put: aFloat</body><body package="Roassal-Core">top			^ self attributes at: #top ifAbsent: [ ^ false ]</body><body package="Roassal-Core">top: aBoolean			self attributeAt: #top put: aBoolean</body><body package="Roassal-Core">x		^ self attributes at: #x ifAbsent: [ ^ 0 ]</body><body package="Roassal-Core">x: aFloat			self attributeAt: #x put: aFloat</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>shapes</category><body package="Roassal-Core">addShape: aShapeOrShapeClass	| e1 e2 |	"The super call set the shape to have in the 'shape' variable"	e1 := self extent.	super addShape: aShapeOrShapeClass.	e2 := shape extentFor: self.	self extent: (e2 max: e1)</body></methods><methods><class-id>Roassal.ROElement</class-id> <category>cache system</category><body package="Roassal-Core">shapeCache		^ self attributeAt: #shapeCache ifAbsentPut: [ ROShapeCache new ]</body></methods><methods><class-id>Roassal.ROElement class</class-id> <category>public</category><body package="Roassal-Core">bare	"Only has a nullshape, no children shape"	^ self basicNew initializeBare</body><body package="Roassal-Core">forCollection: aCollection 	^ (aCollection collect: [ :v | self on: v ]) asArray</body><body package="Roassal-Core">label	^ self new + ROLabel</body><body package="Roassal-Core">labelsOn: collection	^ (self forCollection: collection) collect: [ :v | v + ROLabel ]</body><body package="Roassal-Core">sprite	^ self new			extent: 50 @ 50;			addInteraction: RODraggable;			addShape: (ROBorder new color: Color red);			yourself</body><body package="Roassal-Core">spriteOn: value	^ self sprite on: value</body><body package="Roassal-Core">spritesOn: values	^ values collect: [:v | self sprite on: v ]</body></methods><methods><class-id>Roassal.ROElement class</class-id> <category>defaults</category><body package="Roassal-Core">defaultBounds	^ (0 @ 0 corner: ROShape defaultExtent)</body></methods><methods><class-id>Roassal.ROButtonElement</class-id> <category>public</category><body package="Roassal-Core">initializeWithName: aName Callback: callbackAsOneArgBlock	super initialize.	self + (ROLabel text: aName).	self @ ROLightlyHighlightable.	self on: ROMouseClick do: callbackAsOneArgBlock.	</body></methods><methods><class-id>Roassal.ROButtonElement class</class-id> <category>instance creation</category><body package="Roassal-Core">named: aName do: aOneArgBlockAsCallback	^ self basicNew initializeWithName: aName Callback: aOneArgBlockAsCallback</body></methods><methods><class-id>Roassal.ROAbstractRegularTreeLayout</class-id> <category>accessing</category><body package="Roassal-Core">isLayered	"Is the layout layered"		^ isLayered</body><body package="Roassal-Core">isLayered: boolean	"Is the layout layered"		isLayered := boolean</body><body package="Roassal-Core">layered	self isLayered: true</body><body package="Roassal-Core">leftGap	^ leftGap</body><body package="Roassal-Core">leftGap: anInteger	leftGap := anInteger</body><body package="Roassal-Core">topGap	^ topGap</body><body package="Roassal-Core">topGap: anInteger	topGap := anInteger</body></methods><methods><class-id>Roassal.ROAbstractRegularTreeLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	topGap := 5.	leftGap := 5.	isLayered := false</body></methods><methods><class-id>Roassal.ROAbstractRegularTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">layout: aNodeCollection atPoint: aPoint atLayer: anObject	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractRegularTreeLayout</class-id> <category>private</category><body package="Roassal-Core">atLayer: aNumber add: aNodeCollection	| collection |	collection := nodesByLayer at: aNumber ifAbsentPut: [OrderedCollection new].	collection addAll: aNodeCollection</body><body package="Roassal-Core">rearrangeByLayers: aGraph	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractRegularTreeLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements	| rootNodes |	alreadyLayoutedNodes := OrderedCollection new.	rootNodes := self rootNodesFor: elements.	nodesByLayer := OrderedCollection new.	self		layout: rootNodes		atPoint: self leftGap @ self topGap		atLayer: 1.	self isLayered ifTrue: [		self rearrangeByLayers: elements ]</body></methods><methods><class-id>Roassal.ROAbstractRegularTreeLayout class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractRegularTreeLayout</body></methods><methods><class-id>Roassal.ROAbstractVerticalTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">computeChildrenFor: aNode	self subclassResponsibility</body><body package="Roassal-Core">layout: aNodeCollection atPoint: aPoint atLayer: aNumber	| treeSize childrenPosition x y middleOfTree |	aNodeCollection isEmpty ifTrue: [ ^ 0 ].	x := aPoint x.	y := aPoint y.	alreadyLayoutedNodes addAll: aNodeCollection.	self atLayer: aNumber add: aNodeCollection.	aNodeCollection do: [ :each | 		childrenPosition := y + each height + self verticalGap.		treeSize := each width			max: (self layout: (self computeChildrenFor: each) atPoint: x @ childrenPosition atLayer: aNumber + 1).		middleOfTree := x + (treeSize / 2.0) - (each width / 2.0).		translator translate: each to: middleOfTree @ y.		x := x + treeSize + self horizontalGap.		self step ].	^ x - aPoint x - self horizontalGap</body></methods><methods><class-id>Roassal.ROAbstractVerticalTreeLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	verticalGap := 20.	horizontalGap := 3</body></methods><methods><class-id>Roassal.ROAbstractVerticalTreeLayout</class-id> <category>private</category><body package="Roassal-Core">rearrangeByLayers: aGraph	| cursor layerDepthSize |	cursor := self topGap.	nodesByLayer do: [:eachSetOfNodes |		layerDepthSize := eachSetOfNodes inject: 0 into: [:max :eachNode | 			eachNode translateTo: (eachNode bounds left @ cursor ).			max max: eachNode height ].		cursor := cursor + layerDepthSize + self verticalGap ]</body></methods><methods><class-id>Roassal.ROAbstractVerticalTreeLayout class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractVerticalTreeLayout</body></methods><methods><class-id>Roassal.ROGridLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	ROGridLayout on: elements.		result := ((Array new: 20) at: 1 put: ((5@5)); at: 2 put: ((65@5)); at: 3 put: ((125@5)); at: 4 put: ((185@5)); at: 5 put: ((245@5)); at: 6 put: ((5@65)); at: 7 put: ((65@65)); at: 8 put: ((125@65)); at: 9 put: ((185@65)); at: 10 put: ((245@65)); at: 11 put: ((5@125)); at: 12 put: ((65@125)); at: 13 put: ((125@125)); at: 14 put: ((185@125)); at: 15 put: ((245@125)); at: 16 put: ((5@185)); at: 17 put: ((65@185)); at: 18 put: ((125@185)); at: 19 put: ((185@185)); at: 20 put: ((245@185)); yourself).		self assert: (elements collect: #position) = result</body><body package="Roassal-Core">testLayoutLineItemCount	| result |	ROGridLayout on: elements withLineItemsCount: 5.		result := ((Array new: 20) at: 1 put: ((5@5)); at: 2 put: ((65@5)); at: 3 put: ((125@5)); at: 4 put: ((185@5)); at: 5 put: ((245@5)); at: 6 put: ((5@65)); at: 7 put: ((65@65)); at: 8 put: ((125@65)); at: 9 put: ((185@65)); at: 10 put: ((245@65)); at: 11 put: ((5@125)); at: 12 put: ((65@125)); at: 13 put: ((125@125)); at: 14 put: ((185@125)); at: 15 put: ((245@125)); at: 16 put: ((5@185)); at: 17 put: ((65@185)); at: 18 put: ((125@185)); at: 19 put: ((185@185)); at: 20 put: ((245@185)); yourself).		self assert: (elements collect: #position) = result</body><body package="Roassal-Core">testLayoutLineItemCount2	| result |	ROGridLayout on: elements withLineItemsCount: 3.		result := (((Array new: 20) at: 1 put: ((5@5)); at: 2 put: ((65@5)); at: 3 put: ((125@5)); at: 4 put: ((5@65)); at: 5 put: ((65@65)); at: 6 put: ((125@65)); at: 7 put: ((5@125)); at: 8 put: ((65@125)); at: 9 put: ((125@125)); at: 10 put: ((5@185)); at: 11 put: ((65@185)); at: 12 put: ((125@185)); at: 13 put: ((5@245)); at: 14 put: ((65@245)); at: 15 put: ((125@245)); at: 16 put: ((5@305)); at: 17 put: ((65@305)); at: 18 put: ((125@305)); at: 19 put: ((5@365)); at: 20 put: ((65@365)); yourself)).		self assert: (elements collect: #position) = result</body><body package="Roassal-Core">testLayoutOnEmptyList	self shouldnt: [ ROGridLayout on: #() ] raise: Error</body><body package="Roassal-Core">testLayoutWithMargin	| element result |	element := ROBox blue element.	element resizeStrategy: (ROExtensibleParent new paddingGap: 25).	element addAll: elements.	ROGridLayout on: elements.		view := ROView new.	view add: element.		result := ((Array new: 20) at: 1 put: ((25@25)); at: 2 put: ((85@25)); at: 3 put: ((145@25)); at: 4 put: ((205@25)); at: 5 put: ((265@25)); at: 6 put: ((25@85)); at: 7 put: ((85@85)); at: 8 put: ((145@85)); at: 9 put: ((205@85)); at: 10 put: ((265@85)); at: 11 put: ((25@145)); at: 12 put: ((85@145)); at: 13 put: ((145@145)); at: 14 put: ((205@145)); at: 15 put: ((265@145)); at: 16 put: ((25@205)); at: 17 put: ((85@205)); at: 18 put: ((145@205)); at: 19 put: ((205@205)); at: 20 put: ((265@205)); yourself).		self assert: (elements collect: #position) = result</body></methods><methods><class-id>Roassal.ROPlatform</class-id> <category>configuration</category><body package="Roassal-Core">canvasClass	^ canvasClass</body><body package="Roassal-Core">fontOrganizerClass	^ fontOrganizerClass</body><body package="Roassal-Core">hostVisualElement	^ hostVisualElement</body><body package="Roassal-Core">htmlExporterClass 	^ htmlExporterClass</body><body package="Roassal-Core">imageExporterClass 	^ imageExporterClass</body><body package="Roassal-Core">name	^ name</body><body package="Roassal-Core">newLine	^newLine	</body><body package="Roassal-Core">randomClass	^ randomClass</body><body package="Roassal-Core">serializerClass	^serializerClass </body><body package="Roassal-Core">svgExporterClass 	^ svgExporterClass</body><body package="Roassal-Core">timeOrganizerClass	^ timeOrganizerClass</body><body package="Roassal-Core">widgetFactory	^ widgetFactory</body></methods><methods><class-id>Roassal.ROPlatform</class-id> <category>mutators</category><body package="Roassal-Core">canvasClass: aClass	canvasClass := aClass </body><body package="Roassal-Core">fontOrganizerClass: aClass	^ fontOrganizerClass := aClass</body><body package="Roassal-Core">hostVisualElement: visualElement	"Typically a morph (Pharo) or a visual (VW)"		hostVisualElement := visualElement</body><body package="Roassal-Core">htmlExporterClass: aClass	htmlExporterClass := aClass </body><body package="Roassal-Core">imageExporterClass: aClass		imageExporterClass := aClass </body><body package="Roassal-Core">name: aString	name := aString</body><body package="Roassal-Core">newLine: aString	newLine := aString</body><body package="Roassal-Core">randomClass: aClass	^ randomClass := aClass</body><body package="Roassal-Core">serializerClass: aClass		serializerClass := aClass </body><body package="Roassal-Core">svgExporterClass: aClass		svgExporterClass := aClass </body><body package="Roassal-Core">timeOrganizerClass: aClass	^ timeOrganizerClass := aClass</body><body package="Roassal-Core">widgetFactory: aClass	^ widgetFactory := aClass</body></methods><methods><class-id>Roassal.ROPlatform</class-id> <category>util</category><body package="Roassal-Core">check	self assert: [ self name class == 'abc' class ] description: 'A platform name should be a string'.	self assert: [ self canvasClass superclass ==  ROAbstractCanvas ] description: 'A platform canvas should be a subclass of ROAbstractCanvas'.	self assert: [ self fontOrganizerClass superclass ==  ROFontOrganizer ] description: 'A platform font organizer should be a subclass of ROFontOrganizerMorphic'.	self assert: [ self widgetFactory superclass ==  RONativeWidgetFactory  ] description: 'A platform widget organizer should be a subclass of ROFontOrganizerMorphic'.	self assert: [ self timeOrganizerClass superclass ==  ROTimeOrganizer  ] description: 'A platform time organizer should be a subclass of ROTimeOrganizer'.	self assert: [ self hostVisualElement notNil ] description: 'You need to provide a host visual element (a Morph or a Visual)'.</body><body package="Roassal-Core">remove	ROPlatform removeNamed: self name ifAbsent: []</body></methods><methods><class-id>Roassal.ROPlatform class</class-id> <category>adding</category><body package="Roassal-Core">add: aPlatform	aPlatform check.		self platforms at: aPlatform name put: aPlatform </body></methods><methods><class-id>Roassal.ROPlatform class</class-id> <category>public</category><body package="Roassal-Core">current	current ifNil: [current := self subclasses first new].	^ current</body><body package="Roassal-Core">names	^ nil</body><body package="Roassal-Core">numberOfPlatforms	^ self  platforms size </body><body package="Roassal-Core">platforms	^ platforms ifNil: [ platforms := Dictionary new ]</body><body package="Roassal-Core">removeNamed: aName	self platforms removeKey: aName</body><body package="Roassal-Core">removeNamed: aName ifAbsent: aBlock	self platforms removeKey: aName ifAbsent: aBlock</body><body package="Roassal-Core">setCurrent: aPlatformName	"aPlatformName is a string. Evaluate to get the possible value of aPlatformName: 		ROPlatform platforms keys"	current := self platforms at: aPlatformName</body></methods><methods><class-id>Roassal.ROMouseClick</class-id> <category>accessing</category><body package="Roassal-Core">commandKeyPressed	^ commandKeyPressed</body><body package="Roassal-Core">commandKeyPressed: anObject	commandKeyPressed := anObject</body><body package="Roassal-Core">controlKeyPressed	^ controlKeyPressed</body><body package="Roassal-Core">controlKeyPressed: anObject	controlKeyPressed := anObject</body><body package="Roassal-Core">initialize 	super initialize.	commandKeyPressed := false.	controlKeyPressed := false.	shiftKeyPressed := false.</body><body package="Roassal-Core">shiftKeyPressed	^ shiftKeyPressed</body><body package="Roassal-Core">shiftKeyPressed: anObject	shiftKeyPressed := anObject</body></methods><methods><class-id>Roassal.RORectanglePackingLayout</class-id> <category>as yet unclassified</category><body package="Roassal-Core">cornerFor: r and: c	| w h |			w := 0.	h := 0.		(1 to: c - 1) do: [ :e | w := w + (columns at: e) ].	(1 to: r - 1) do: [ :e | h := h + (rows at: e) ].		^ (w @ h)</body><body package="Roassal-Core">findSpaceFor: extent	| r c bool space |		bool := false.	r := 1.	c := 1.		[ bool ] whileFalse: [ 				[ matrix at: r at: c ] whileFalse: [ r &lt; matrix rowCount ifTrue: [ r := r + 1 ]														ifFalse: [ c &lt; matrix columnCount ifTrue: [ r := 1. c := c + 1 ] 																					ifFalse: [ ^ false ] ] ].																					space := self spaceFrom: r and: c.				(space x &gt;= extent x and: [ space y &gt;= extent y ]) ifTrue: [ ^ c@r ].				 r &lt; matrix rowCount ifTrue: [ r := r + 1 ]							ifFalse: [ c &lt; matrix columnCount ifTrue: [ r := 1. c := c + 1 ] 															ifFalse: [ ^ false ] ] 			]</body><body package="Roassal-Core">heightLog: nodeElements 	nodeElements do: [ :e | e height &gt; heightStone ifTrue: [ e height: (e height log * heightScale ) ceiling ]]</body><body package="Roassal-Core">logHeightIfMoreThan: anInt "if height of a renctangle is bigger than anInt, we change it with his log"	logHeight := true.	heightStone := anInt.	heightScale := 5</body><body package="Roassal-Core">logHeightIfMoreThan: anInt scale: anOther"if height of a renctangle is bigger than anInt, we change it with his log"	logHeight := true.	heightStone := anInt.	heightScale := anOther</body><body package="Roassal-Core">logIfMoreThan: anInt scale: anOther"if height and/or width of a renctangle is bigger than anInt, we change it with his log"	logWidth := true.	widthStone := anInt.	widthScale := anOther.			logHeight := true.	heightStone := anInt.	heightScale := anOther</body><body package="Roassal-Core">logWidthIfMoreThan: anInt "if width of a renctangle is bigger than anInt, we change it with its log"	logWidth := true.	widthStone := anInt.	widthScale := 5</body><body package="Roassal-Core">logWidthIfMoreThan: anInt scale: anOther"if width of a renctangle is bigger than anInt, we change it with its log"	logWidth := true.	widthStone := anInt.	widthScale := anOther</body><body package="Roassal-Core">nodesLinearResize: nodeElements	|min max k |		min := (nodeElements collect: [ :e | e width ]) min.	max := (nodeElements collect: [ :e | e width ]) max.	Transcript show: max; cr; show: min;cr;cr.	(max * (1 - (scale / 100)) &gt; min) ifTrue: [ k := max * (1 - (scale / 100)) - min / (max - min).		nodeElements do: [ :e | e width: ( min + (k * ( e width - min))) ceiling ] ].		min := (nodeElements collect: [ :e | e width ]) min.	max := (nodeElements collect: [ :e | e width ]) max.	Transcript show: max; cr; show: min;cr;cr.			min := (nodeElements collect: [ :e | e height ]) min.	max := (nodeElements collect: [ :e | e height ]) max.		(max * (1 - (scale / 100)) &gt; min) ifTrue: [ k := max * (1 - (scale / 100)) - min / (max - min).		nodeElements do: [ :e | e height: ( min + (k * ( e height - min))) ceiling ] ].</body><body package="Roassal-Core">place: nodes 	| bool i |		i := 1.	bool := true.		[bool and: [ i &lt;= nodes size ]] whileTrue: [ bool := self insert: (nodes at: i).												i := i + 1. ].												^ bool</body><body package="Roassal-Core">ratioWidth: anInt height: anOther "this is the desired ratio of the shape where are stored rectangles, and the number of pixel added to the shape when doing 'resize', but it may not be really respected, it will depends of the number and the size of the rectangles and of the padding "	ratioWidth := anInt.	ratioHeight := anOther</body><body package="Roassal-Core">spaceFrom: r and: c	| w h i j |		w := 0.	h := 0.		i := c.	j := r.		[matrix at: j at: i ifInvalid: false ] whileTrue: [ w := (w + (columns at: i)).												  i := i + 1 ].											i := c.																						[matrix at: j at: i ifInvalid: false ] whileTrue: [ h := (h + (rows at: j)).												  j := j + 1 ].												^ (w @ h)</body><body package="Roassal-Core">updateMatrixWith: extent at: r and: c	| new x y newC newR i j |	x := extent x.	y := extent y.		i := r.	j := c.		newC := 1.	newR := 1.		[ x &gt; 0 ] whileTrue: [ x := x - (columns at: j).							x = 0 ifTrue: [ newC := 0 ].							j := j+1].	j := j-1.	x := x + (columns at: j).											[ y &gt; 0 ] whileTrue: [ y := y - (rows at: i).							y = 0 ifTrue: [ newR := 0 ].							i := i+1].	i := i-1.	y := y + (rows at: i).							new := Matrix rows: matrix rowCount + newR columns: matrix columnCount + newC.		new atRows: 1 to: i columns: 1 to: j put: (matrix atRows: 1 to: i columns: 1 to: j ).	new atRows: 1 to: i columns: j+newC to: new columnCount put: (matrix atRows: 1 to: i columns: j to: matrix columnCount ).	new atRows: i+newR to: new rowCount columns: 1 to: j put: (matrix atRows: i to: matrix rowCount columns: 1 to: j ).	new atRows: i+newR to: new rowCount columns: j+newC to: new columnCount put: (matrix atRows: i to: matrix rowCount columns: j to: matrix columnCount ).		( r to: i ) do: [ :e | (c to: j) do: [ :ea | new at: e at: ea put: false ] ].		newC = 1 ifTrue: [ columns add: (columns at: j) - x afterIndex: j.						columns at: j put: x. ].	newR = 1 ifTrue: [ rows add: (rows at: i) - y afterIndex: i.						rows at: i put: y. ].						matrix := new.</body><body package="Roassal-Core">widthLog: nodeElements 	nodeElements do: [ :e | e width &gt; widthStone ifTrue: [ e width: (e width log * widthScale ) ceiling ]]</body></methods><methods><class-id>Roassal.RORectanglePackingLayout</class-id> <category>updating</category><body package="Roassal-Core">resize"when resizing the big container we also clear the matrix and so on"	width := width + ratioWidth .	height := height + ratioHeight .	columns := OrderedCollection new.	rows := OrderedCollection new.	rows add: height.	columns add: width.	matrix := Matrix rows: 1 columns: 1.	matrix at: 1 at: 1 put: true.</body></methods><methods><class-id>Roassal.RORectanglePackingLayout</class-id> <category>accessing</category><body package="Roassal-Core">insert: aNode	| corner cell |	cell := self findSpaceFor: (aNode extent + ( padding @ padding )).		cell = false ifTrue: [ ^ false ] .		corner := self cornerFor: cell y and: cell x. 		aNode translateTo: corner.	self updateMatrixWith: (aNode extent + ( padding @ padding )) at: cell y and: cell x.							^ true</body><body package="Roassal-Core">padding: anInt "sets the number of white pixels between two rectangles"	padding := anInt</body></methods><methods><class-id>Roassal.RORectanglePackingLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	super initialize.	ratioWidth := 2.	ratioHeight := 3.	padding := 4.		matrix := Matrix rows: 1 columns: 1.	matrix at: 1 at: 1 put: true.		rows := OrderedCollection new.	columns := OrderedCollection new.		logWidth := false.	logHeight := false</body></methods><methods><class-id>Roassal.RORectanglePackingLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeElements	| surface t |		resizeStrategy isNil ifFalse: [ self nodeResize: nodeElements ].		nodeElements sort: [ :first :second | (first perform: #height) &lt; (second perform: #height) ].	nodeElements sort: [ :first :second | first width &gt; second width ].		surface := (nodeElements inject: 0 into: [ :sum : e | sum + (e width + padding * (e height + padding)) ] ).		t := (surface / ratioWidth / ratioHeight ) sqrt ceiling.		width := ratioWidth * t.	height := ratioHeight * t.		[ nodeElements first width &gt; width ] whileTrue: [ self resize ].	rows add: height.	columns add: width.	[ self place: nodeElements ] whileFalse: [ self resize ]."the following indicates the proportion of filling in per cent in the Transcript	 |w h eff| Transcript open.	w := (nodeElements collect: [ :e | e position x + e width + padding ]) max. 	h := (nodeElements collect: [ :e | e position y + e height + padding ]) max.	eff := surface / h / w * 100.	Transcript show: eff asFloat ; show: '%'; cr; cr ].						"</body></methods><methods><class-id>Roassal.RORectanglePackingLayout</class-id> <category>Nodes-Resizing</category><body package="Roassal-Core">linearReduceBiggestOf: anInt	resizeStrategy := #linear.	scale := anInt</body></methods><methods><class-id>Roassal.RONarrowTreeLayout</class-id> <category>private</category><body package="Roassal-Core">atLayer: aLayer add: aFigure	"Associates the figure aFigure with the layer aLayer"		| layer |	layer := layers		at: aLayer		ifAbsent:			[layers				at: aLayer				put: ROTreeLayerWrapper new.			layers at: aLayer].	layer add: aFigure</body><body package="Roassal-Core">buildLayers: aRoot	layers := Dictionary new.	self buildLayers: aRoot layer: 0</body><body package="Roassal-Core">buildLayers: aRoot layer: aLayer	self atLayer: aLayer add: aRoot.	(self childrenFor: aRoot) do: [:aChild | 		self			buildLayers: aChild			layer: aLayer + 1 ]</body><body package="Roassal-Core">currentTreeSize	| maximum |	maximum := 0.	layers values do: [:aLayer | 		maximum := maximum max: (aLayer width: self horizontalGap)].	^maximum</body><body package="Roassal-Core">shapeTree: aRoot position: xOffset	self subclassResponsibility</body></methods><methods><class-id>Roassal.RONarrowTreeLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements 	| roots offset treeWidth |	roots := self rootNodesFor: elements.	offset := self horizontalGap.	roots do: 		[ :aRoot | 		treeWidth := self 			shapeTree: aRoot			position: offset.		offset := offset + treeWidth + (2 * self horizontalGap).		self step]</body></methods><methods><class-id>Roassal.RONarrowTreeLayout class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract 	^ self name =  #RONarrowTreeLayout</body></methods><methods><class-id>Roassal.ROVerticalNarrowTreeLayout</class-id> <category>private</category><body package="Roassal-Core">shapeTree: aRoot position: xOffset		| treeWidth layerKeys layer layerWidth horizontalPosition verticalPosition |	self buildLayers: aRoot.	treeWidth := self currentTreeSize.	verticalPosition := self horizontalGap.	"For visual reasons NOT: self class verticalGap"	layerKeys := layers keys asSortedCollection.	layerKeys do: [:aKey | 		layer := layers at: aKey.		layerWidth := layer width: self horizontalGap.		horizontalPosition := treeWidth / 2.0 + xOffset - (layerWidth / 2.0).		layer do: [:aFigure | 			aFigure translateTo: horizontalPosition @ verticalPosition.			horizontalPosition := horizontalPosition + aFigure width + self horizontalGap].		verticalPosition := verticalPosition + layer height + self verticalGap].	^treeWidth</body></methods><methods><class-id>Roassal.ROParentElementResizeStrategyTest</class-id> <category>tests</category><body package="Roassal-Core">testFixedSized	| el1 el2 |	el1 := ROBox element.	el1 resizeStrategy: ROFixedSizedParent instance.	el1 addAll: (ROGridLayout on: ((1 to: 5) collect: [ :i | ROElement new ])).		el2 := ROBox element.	el2 resizeStrategy: ROExtensibleParent instance.	el2 addAll: (ROGridLayout on: ((1 to: 5) collect: [ :i | ROBox element ])).		self assert: el1 bounds = ( (0@0) corner: (5 @ 5)).	self assert: el2 bounds = ( (0@0) corner: (50 @ 35)).</body></methods><methods><class-id>Roassal.ROParentElementResizeStrategyTest</class-id> <category>padding</category><body package="Roassal-Core">testNoPadding	| view bundle el1 el2 canvas |	view := ROView new.	bundle := ROBox elementOn: 'bundle'.	el1 := ROBox green elementOn: 'el1'.	el2 := ROBox blue elementOn: 'el2'.		bundle resizeStrategy: (ROExtensibleParent new padding: 0 @ 0).	bundle add: el1; add: el2.	view add: bundle.	ROVerticalLineLayout on: (Array with: el1 with: el2).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(0@0) corner: (5@20)' 'Color veryLightGray' 0 'Color black') #(#frameAndFillRectangle: '(0@0) corner: (5@5)' 'Color green' 0 'Color black') #(#frameAndFillRectangle: '(0@15) corner: (5@20)' 'Color blue' 0 'Color black'))</body><body package="Roassal-Core">testNoPadding2	| view bundle el1 el2 canvas |	view := ROView new.	bundle := ROBox gray elementOn: 'bundle'.	el1 := (ROBox green extent: 30 @ 20) elementOn: 'el1'.	el2 := ROBox blue elementOn: 'el2'.		bundle resizeStrategy: (ROExtensibleParent new padding: 0 @ 0).	bundle add: el1; add: el2.	view add: bundle.	ROVerticalLineLayout on: (Array with: el1 with: el2).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(0@0) corner: (30@35)' 'Color gray' 0 'Color black') #(#frameAndFillRectangle: '(0@0) corner: (30@20)' 'Color green' 0 'Color black') #(#frameAndFillRectangle: '(0@30) corner: (5@35)' 'Color blue' 0 'Color black'))</body><body package="Roassal-Core">testNoPadding3	| view bundle el1 el2 canvas |	view := ROView new.	bundle := ROBox gray elementOn: 'bundle'.	el1 := (ROBox green extent: 30 @ 20) elementOn: 'el1'.	el2 := ROBox blue elementOn: 'el2'.		bundle resizeStrategy: (ROExtensibleParent new padding: 0 @ 0).	bundle add: el1; add: el2.	view add: bundle.		ROVerticalLineLayout new		gapSize: 0;		on: (Array with: el1 with: el2).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(0@0) corner: (30@25)' 'Color gray' 0 'Color black') #(#frameAndFillRectangle: '(0@0) corner: (30@20)' 'Color green' 0 'Color black') #(#frameAndFillRectangle: '(0@20) corner: (5@25)' 'Color blue' 0 'Color black'))</body><body package="Roassal-Core">testNoPadding4	| view bundle el1 el2 canvas |	view := ROView new.	bundle := ROBox gray elementOn: 'bundle'.	el1 := (ROBox green extent: 30 @ 20) elementOn: 'el1'.	el2 := ROBox blue elementOn: 'el2'.		bundle resizeStrategy: (ROExtensibleParent new padding: 0 @ 0).	bundle add: el1; add: el2.	view add: bundle.		ROVerticalLineLayout new		gapSize: 0;		stretchHorizontally;		on: (Array with: el1 with: el2).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(0@0) corner: (30@25)' 'Color gray' 0 'Color black') #(#frameAndFillRectangle: '(0@0) corner: (30@20)' 'Color green' 0 'Color black') #(#frameAndFillRectangle: '(0@20) corner: (30@25)' 'Color blue' 0 'Color black'))</body><body package="Roassal-Core">testNoPadding5	| view bundle el1 el2 canvas |	view := ROView new.	bundle := ROBox gray elementOn: 'bundle'.	el1 := (ROBox green extent: 30 @ 20) elementOn: 'el1'.	el2 := ROBox blue elementOn: 'el2'.		bundle resizeStrategy: (ROExtensibleParent new padding: 0 @ 0).	bundle add: el1; add: el2.	view add: bundle.		ROVerticalLineLayout new		gapSize: 0;		stretchHorizontally;		alignCenter;		on: (Array with: el1 with: el2).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(0@0) corner: (30@25)' 'Color gray' 0 'Color black') #(#frameAndFillRectangle: '(0@0) corner: (30@20)' 'Color green' 0 'Color black') #(#frameAndFillRectangle: '(0.0@20) corner: (30.0@25)' 'Color blue' 0 'Color black'))</body><body package="Roassal-Core">testPadding	| view bundle el1 el2 canvas |	view := ROView new.	bundle := ROBox elementOn: 'bundle'.	el1 := ROBox green elementOn: 'el1'.	el2 := ROBox blue elementOn: 'el1'.		bundle add: el1; add: el2.	view add: bundle.	ROVerticalLineLayout on: (Array with: el1 with: el2).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace =  #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#frameAndFillRectangle: '(0@0) corner: (15@30)' 'Color veryLightGray' 0 'Color black') #(#frameAndFillRectangle: '(5@5) corner: (10@10)' 'Color green' 0 'Color black') #(#frameAndFillRectangle: '(5@20) corner: (10@25)' 'Color blue' 0 'Color black'))</body></methods><methods><class-id>Roassal.ROWiggle</class-id> <category>hooks</category><body package="Roassal-Core">doStep	remainingCycles odd 		ifTrue: [ element translateBy: (3 @ 0) ]		ifFalse: [ element translateBy: (-3 @ 0) ].	element signalUpdate.</body></methods><methods><class-id>Roassal.ROWiggle</class-id> <category>public</category><body package="Roassal-Core">on: anElement	element := anElement.		anElement view addAnimation: self</body></methods><methods><class-id>Roassal.ROWiggle class</class-id> <category>public</category><body package="Roassal-Core">on: element	^ self new on: element</body><body package="Roassal-Core">onAll: anArray 	anArray do: [ :el | self on: el ]</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>orthoVertical</category><body package="Roassal-Core">testOrthoVerticalLineContainsPoint	| lineShape segments |	edge change: ROLine for: (lineShape := ROOrthoVerticalLineShape new).	node2 translateBy: 50@100.		segments := lineShape lineSegmentsFor: edge.	self assert: (edge contains: (21 @ 52)).	self assert: (edge contains: (111 @ 88)).	self assert: (edge contains: (64 @ 70)).</body><body package="Roassal-Core">testOrthoVerticalLineSegmentWithTranslation	| lineShape segments |	node2 translateBy: 50@100.	edge + (lineShape := ROOrthoVerticalLineShape new).		segments := lineShape lineSegmentsFor: edge.	self assert: segments size = 4.	self assert: segments = (Array 								with: node1 bottomCenter								with: node1 bottomCenter x @ ((node2 topCenter y - node1 bottomCenter y) / 2 + node1 bottomCenter y)								with: node2 bottomCenter x @ ((node2 topCenter y - node1 bottomCenter y) / 2 + node1 bottomCenter y)								with: node2 topCenter) </body><body package="Roassal-Core">testOrthoVerticalSamePosition	|  el1 el2  |	view := ROView new.	el1 := ROElement sprite.	el2 := ROElement sprite.	edge := ROEdge from: el1 to: el2.	edge + ROOrthoVerticalLineShape new.	view addAll: (Array with: el1 with: el2 with: edge).		self shouldnt: [ edge contains: 40 @ 30 ] raise: Error.</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>lookup</category><body package="Roassal-Core">testElementFromModel	edge model: 42.	self assert: (edge elementFromModel: 42) isNil.	self assert: (edge edgeFromModel: 42) == edge.	self assert: (edge edgeFromModel: 43) isNil</body><body package="Roassal-Core">testGetFromView	| roView |	roView := view raw.	self assert: (roView elementAtRealPosition: edge bounds center) == edge</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>popup</category><body package="Roassal-Core">doesNOTWORKtestPopup	"Apparently this test run into concurency problems"	| t |	edge @ ROPopup.	edge announce: ROMouseEnter.		t := 0.	10 timesRepeat: [ 		(Delay forMilliseconds: 2) wait.		t := t max: view raw elements size.	].	self assert: t = 4.</body><body package="Roassal-Core">testInteraction	self assert: edge numberOfInteractions = 1.	edge @ ROPopup.	self assert: edge numberOfInteractions = 2.</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>tests</category><body package="Roassal-Core">testArrowedEdge	| n1 n2 line |	n1 := ROElement new.	n2 := ROElement new.	edge := ROEdge arrowedLineFrom: n1 to: n2.	self assert: edge from == n1.	self assert: edge to == n2.		line := edge getShape: ROLine.	self assert: line numberOfArrows = 1</body><body package="Roassal-Core">testContains	self deny: ((ROEdge from: ROElement new to: ROElement new) contains: 10@40)</body><body package="Roassal-Core">testCreation	self should: [ ROEdge from: Object new to: Object new ] raise: Exception</body><body package="Roassal-Core">testEdgeBounds	self assert: edge bounds = ( (5@5) corner: (75@35) ).		</body><body package="Roassal-Core">testIsVisibleIn	| e1 e2 |		e1 := (ROBox size: 20) element.	e2 := (ROBox size: 20) element.	edge := ROLine elementFrom: e1 to: e2.		self assert: (edge isVisibleIn: (0 @ 0 corner: 50 @ 50)).		e2 translateTo: 100 @ 100.	self assert: (edge isVisibleIn: (0 @ 0 corner: 50 @ 50)).		e1 translateTo: 110 @ 110.	self deny: (edge isVisibleIn: (0 @ 0 corner: 50 @ 50)).</body><body package="Roassal-Core">testPopupFixture	self assert: view raw elements size = 3.</body><body package="Roassal-Core">testTopLeftAndContaint	edge := ROEdge from: ROElement new to: ROElement new.	self assert: edge topLeft = (0 @ 0).	self deny: (edge contains: 5 @ 5)</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>line segment</category><body package="Roassal-Core">testLineSegment	| shape segments |	shape := edge getShape: ROShape.	segments := shape lineSegmentsFor: edge.	self assert: segments size = 2. 	self assert: segments first = node1 rightCenter.	self assert: segments second = node2 leftCenter</body><body package="Roassal-Core">testLineSegment2	| shape segments |	node2 translateBy: 80 @ 60.	shape := edge getShape: ROShape.	segments := shape lineSegmentsFor: edge.	self assert: segments size = 2. 	self assert: segments first = node1 rightCenter.	self assert: segments second = node2 leftCenter</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROMondrianViewBuilder new.	view shape rectangle size: 30.	view nodes: (1 to: 2).	node1 := view raw elements first.	node2 := view raw elements second.	view interaction popupText: 'FooZork'.	edge := view edgeFromAssociation: 1 -&gt; 2.	view applyLayout</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>orthoHorizontal</category><body package="Roassal-Core">testOrthoHorizontalLineSegmentWithTranslation	| lineShape segments |	node2 translateBy: 50@80.	edge + (lineShape := ROOrthoHorizontalLineShape new).		segments := lineShape lineSegmentsFor: edge.	self assert: segments size = 4.	self assert: segments = (Array 								with: node1 topRight + (0 @ (node1 height / 2))								with: (node2 topLeft x - node1 topRight x) / 2 + node1 topRight x @ (node1 position y + (node1 height / 2))								with: (node2 topLeft x - node1 topRight x) / 2 + node1 topRight x @ (node2 position y + (node2 height / 2))								with: node2 topLeft + (0 @ (node2 height / 2)) )</body><body package="Roassal-Core">testOrthoHorizontalSamePosition	|  el1 el2  |	view := ROView new.	el1 := ROElement sprite.	el2 := ROElement sprite.	edge := ROEdge from: el1 to: el2.	edge + ROOrthoHorizontalLineShape new.	view addAll: (Array with: el1 with: el2 with: edge).		self shouldnt: [ edge contains: 40 @ 30 ] raise: Error.</body></methods><methods><class-id>Roassal.ROEdgeTest</class-id> <category>building edges</category><body package="Roassal-Core">testBuildingEdges	| elements |	view := ROView new.	view addAll: (elements := ROBox green elementsOn: (1 to: 10)).	elements do: [ :el | el @ ROPopup ].		view addAll: (ROLine buildEdgesFromElements: view elements from: [ :n | n // 2 ] to: #yourself).	ROTreeLayout on: view elementsNotEdge edges: view elementsAsEdge.	self assert: view elementsNotEdge size = 10.	self assert: view elementsAsEdge size = 9.</body><body package="Roassal-Core">testBuildingEdgesToAll	| elements |	view := ROView new.	view addAll: (elements := ROBox green elementsOn: (1 to: 3)).	elements do: [ :el | el @ ROPopup ].		view addAll: (ROLine 						buildEdgesFromElement: view elements first						from: #yourself 						toAll: [ :v | (Array with: v + 1 with: v + 2) ]).	ROTreeLayout on: view elementsNotEdge edges: view elementsAsEdge.	self assert: view elementsNotEdge size = 3.	self assert: view elementsAsEdge size = 2.</body><body package="Roassal-Core">testBuildingEdgesWithEmptyElements	self shouldnt: [ ROView new addAll: (ROLine buildEdgesFromElements: #() from: nil to: nil) ]  raise: Error.</body><body package="Roassal-Core">testBuildingEdgesWithNilModel	view := ROView new.	view add: (ROElement new).	view add: (ROElement on: 1).	view add: (ROElement on: 2).	self assert: view numberOfElements = 3.	ROEdge buildEdgesFromElements: view elements from: #yourself to: [ :v | v + 1 ].	self assert: view numberOfElements = 4.</body></methods><methods><class-id>Roassal.ROExpandChildrenOnClickTest</class-id> <category>tests</category><body package="Roassal-Core">testChildrenForModel	| expandChildren children elements |	expandChildren := ROExpandChildrenOnClick childrenForModel: [ :v | Array with: v with: v + 1 with: v + 2 ].	elements := expandChildren computeChildrenFor: (ROElement on: 10).		self assert: elements size = 3.	self assert: elements first numberOfShapes = 3.	self assert: (elements first shapes collect: #class) asArray =  					((Array with: ROBox with: ROLabel with: RONullShape))</body><body package="Roassal-Core">testClickOnAddedNode	| view el elements |	view := ROView new.	el := (ROElement on: 'hello') + ROLabel.	el @ (ROExpandChildrenOnClick childrenBlock: [ :element | 		Array with: ((ROElement on: (element model, ' world')) + ROBox) ]).	view add: el. 		el announce: ROMouseClick.	elements := view elementsSuchThat: [ :e | e model = 'hello world' ].	self assert: elements notEmpty.	elements first announce: ROMouseClick.	self assert: view numberOfElements = 3.</body><body package="Roassal-Core">testClickOnRecursiveAddedNode	| view el elements |	view := ROView new.	el := (ROElement on: 'hello') + ROLabel.	el @ (RORecursiveExpandOnClick childrenBlock: [ :element | 		Array with: ((ROElement on: (element model, ' world')) + ROBox) ]).	view add: el. 		el announce: ROMouseClick.	elements := view elementsSuchThat: [ :e | e model = 'hello world' ].	self assert: elements notEmpty.	elements first announce: ROMouseClick.	self assert: view numberOfElements = 5.</body><body package="Roassal-Core">testClickOnRoot	| view el |	view := ROView new.	el := (ROElement on: 'world') + ROLabel.	el @ (ROExpandChildrenOnClick childrenBlock: [ :element | 		Array with: (ROElement on: (element model, ' World')) ]).	view add: el. 		self assert: view numberOfElements = 1.	el announce: ROMouseClick.	self assert: view numberOfElements = 3.	el announce: ROMouseClick.	self assert: view numberOfElements = 5.</body></methods><methods><class-id>Roassal.ROCircleLayoutTest</class-id> <category>test initial angle</category><body package="Roassal-Core">testInitialAngleInitialization	self assert: ROCircleLayout new initialAngle = 0.	self assert: ROCircleLayout new initialAngleInDegree = 0.</body><body package="Roassal-Core">testInitialAngleInitialization2	| layout |	layout := ROCircleLayout new.	layout initialAngle: (Float pi / 2).	self assert:  (layout initialAngleInDegree - 90) abs &lt;= 0.1</body><body package="Roassal-Core">testInitialAngleInitialization3	| layout |	layout := ROCircleLayout new.	layout initialAngleInDegree: 90.	self assert:  (layout initialAngleInDegree - 90) abs &lt;= 0.1.	self assert:  (layout initialAngle - (Float pi / 2)) abs &lt;= 0.1. </body><body package="Roassal-Core">testLayoutWithInitialAngle	| result computedArray |	ROCircleLayout new		initialAngle: Float pi;		on: elements.		computedArray := elements collect: #positionAsInteger.	result := ((Array new: 20) at: 1 put: ((0@220)); at: 2 put: ((10@152)); at: 3 put: ((42@90)); at: 4 put: ((90@42)); at: 5 put: ((152@10)); at: 6 put: ((219@0)); at: 7 put: ((287@10)); at: 8 put: ((349@42)); at: 9 put: ((397@90)); at: 10 put: ((429@152)); at: 11 put: ((440@219)); at: 12 put: ((429@287)); at: 13 put: ((397@349)); at: 14 put: ((349@397)); at: 15 put: ((287@429)); at: 16 put: ((220@440)); at: 17 put: ((152@429)); at: 18 put: ((90@397)); at: 19 put: ((42@349)); at: 20 put: ((10@287)); yourself).		self assertArrayOfPoint: computedArray isCloseTo: result.</body><body package="Roassal-Core">testLayoutWithInitialAngleInDegree	| result computedArray |	ROCircleLayout new		initialAngleInDegree: 90;		on: elements.		computedArray := elements collect: #positionAsInteger.	result :=  ((Array new: 20) at: 1 put: ((220@440)); at: 2 put: ((152@429)); at: 3 put: ((90@397)); at: 4 put: ((42@349)); at: 5 put: ((10@287)); at: 6 put: ((0@220)); at: 7 put: ((10@152)); at: 8 put: ((42@90)); at: 9 put: ((90@42)); at: 10 put: ((152@10)); at: 11 put: ((219@0)); at: 12 put: ((287@10)); at: 13 put: ((349@42)); at: 14 put: ((397@90)); at: 15 put: ((429@152)); at: 16 put: ((440@219)); at: 17 put: ((429@287)); at: 18 put: ((397@349)); at: 19 put: ((349@397)); at: 20 put: ((287@429)); yourself).		self assertArrayOfPoint: computedArray isCloseTo: result."view openInWindow" </body></methods><methods><class-id>Roassal.ROCircleLayoutTest</class-id> <category>test radius</category><body package="Roassal-Core">testComputeRadius	self assert: (ROCircleLayout new computeRadiusFor: (Array new: 10)) = (10 * ROCircleLayout new scaleFactor).</body><body package="Roassal-Core">testComputeRadius2	self assert: (ROCircleLayout new initialRadius: 45; computeRadiusFor: (Array new: 10)) = 45</body><body package="Roassal-Core">testInitialRadius	self assert: (ROCircleLayout new initialRadius = 0)</body><body package="Roassal-Core">testInitialRadiusSet	self assert: (ROCircleLayout new computeRadiusFor: (Array new: 10)) = (10 * ROCircleLayout new scaleFactor).</body></methods><methods><class-id>Roassal.ROCircleLayoutTest</class-id> <category>test incremental angle</category><body package="Roassal-Core">testInitialIncrementalAngle	self assert: ((ROCircleLayout new computeIncrementalAngleFor: elements) - (2 * Float pi / elements size)) abs &lt;= 0.2</body></methods><methods><class-id>Roassal.ROCircleLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">assertArrayOfPoint: computedArray isCloseTo: result	"utility method useful to compare two set of points that are close to each other."		self assert: computedArray size = result size.	self assert: (computedArray allSatisfy: [ :p | p class = Point ]).	computedArray with: result do: [ :e1 :e2 | 		self assert: ((e1 x - e2 x) abs &lt;= 1 and: [ (e1 y - e2 y) abs &lt;= 1 ]) ]	</body><body package="Roassal-Core">testAssertArrayOfPoint	self assertArrayOfPoint: (Array with: 2@3) isCloseTo: (Array with: 2@3).	self assertArrayOfPoint: (Array with: 2@3) isCloseTo: (Array with: 1@3).	self assertArrayOfPoint: (Array with: 2@3) isCloseTo: (Array with: 1@2).	self assertArrayOfPoint: (Array with: 2@3) isCloseTo: (Array with: 3@2).</body><body package="Roassal-Core">testLayout	| result computedArray |	ROCircleLayout on: elements.		computedArray := elements collect: #positionAsInteger.	result := ((Array new: 20) at: 1 put: ((440@220)); at: 2 put: ((429@287)); at: 3 put: ((397@349)); at: 4 put: ((349@397)); at: 5 put: ((287@429)); at: 6 put: ((220@440)); at: 7 put: ((152@429)); at: 8 put: ((90@397)); at: 9 put: ((42@349)); at: 10 put: ((10@287)); at: 11 put: ((0@220)); at: 12 put: ((10@152)); at: 13 put: ((42@90)); at: 14 put: ((90@42)); at: 15 put: ((152@10)); at: 16 put: ((219@0)); at: 17 put: ((287@10)); at: 18 put: ((349@42)); at: 19 put: ((397@90)); at: 20 put: ((429@152)); yourself).		self assertArrayOfPoint: computedArray isCloseTo: result."view openInWindow" </body></methods><methods><class-id>Roassal.ROPunchcardBuilder</class-id> <category>rendering</category><body package="Roassal-Core">renderOn: aView	|  layout |		metrics do: [ :metric |		| m name normalizer | 		m := metric first.		name := metric second.		"thresholds :=  self thresholdsFor: metric."		normalizer := RONColorLinearNormalizer inContext: (models collect: [:obj | m roValue: obj]) lowColor: minColor highColor: maxColor.		models do: [ :obj |			| circle metricValue |			metricValue := m roValue: obj.			circle := ((ROEllipse new size: metricValue ) color: (normalizer roValue: metricValue)) elementOn: obj  .			circle @ (ROPopup text: [ :roElement | (popupText value: obj  value: name value: metricValue) asString ]).			aView add: circle.			 ].			 		aView add: (ROLabel new elementOn: name) 	].		models do: [ :obj | aView add: (ROLabel new elementOn: obj) ].		layout := ROCellLayout withLineItemsCount: (self numberOfModels + 1).	layout on: aView elements</body></methods><methods><class-id>Roassal.ROPunchcardBuilder</class-id> <category>instance creation</category><body package="Roassal-Core">open	|  aView |	aView := ROView new.	self renderOn: aView.	aView open</body></methods><methods><class-id>Roassal.ROPunchcardBuilder</class-id> <category>accessing</category><body package="Roassal-Core">maxColor: aColor	maxColor := aColor</body><body package="Roassal-Core">minColor: aColor	minColor := aColor</body><body package="Roassal-Core">popupText: aTreeArgBlock	"Block has to match the pattern [ :object :metricName :value |  ... ]."	popupText :=  aTreeArgBlock</body></methods><methods><class-id>Roassal.ROPunchcardBuilder</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	metrics := OrderedCollection new.	models := OrderedCollection new.	minColor := maxColor := Color lightGray.	popupText := [ :object :metricName :value | value ]</body></methods><methods><class-id>Roassal.ROPunchcardBuilder</class-id> <category>adding</category><body package="Roassal-Core">addMetric: aBlock namedAs: metricName	metrics add: (Array with: aBlock with: metricName).</body><body package="Roassal-Core">addModels: aCollection	models addAll: aCollection.</body></methods><methods><class-id>Roassal.ROPunchcardBuilder</class-id> <category>metrics</category><body package="Roassal-Core">numberOfMetrics	^ metrics size</body><body package="Roassal-Core">numberOfModels	^ models size</body></methods><methods><class-id>Roassal.RONAbstractNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">command		^command</body><body package="Roassal-Core">command: aBlock		command := aBlock</body><body package="Roassal-Core">roValue: anEntity		self subclassResponsibility</body></methods><methods><class-id>Roassal.RONLinearNormalizer</class-id> <category>private</category><body package="Roassal-Core">maximumValue: anEntity	"Returns the largest value that the color metric provides"		maximumValue isNil		ifTrue:			[maximumValue := (self context roValue: anEntity)				inject: 1				into:					[:maximum :entity | maximum max: (self command roValue: entity)]].	^maximumValue</body><body package="Roassal-Core">minimumValue: anEntity	"Returns the smallest value that the color metric provides"		minimumValue isNil		ifTrue:			[minimumValue := (self context roValue: anEntity)				inject: 100000000000 				into:					[:minimum :entity | minimum min: (self command roValue: entity)]].	^minimumValue</body></methods><methods><class-id>Roassal.RONLinearNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">command: aBlock		super command: aBlock.	self flushCache</body><body package="Roassal-Core">context		^context</body><body package="Roassal-Core">context: aContext		context := aContext.	self flushCache</body><body package="Roassal-Core">flushCache		maximumValue := nil</body></methods><methods><class-id>Roassal.RONLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	"Initialize a newly created instance. This method must answer the receiver."		super initialize.	maximumValue := nil</body></methods><methods><class-id>Roassal.RONLinearNormalizer class</class-id> <category>instance creation</category><body package="Roassal-Core">inContext: aCollection		^self inContext: aCollection withCommand: #yourself</body><body package="Roassal-Core">inContext: aCollection withCommand: aBlock		^(self new)		context: aCollection;		command: aBlock;		yourself</body></methods><methods><class-id>Roassal.ROValueLinearNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">maxScale	^maxScale.</body><body package="Roassal-Core">maxScale: aValue	^maxScale := aValue.</body><body package="Roassal-Core">minScale	^minScale.</body><body package="Roassal-Core">minScale: aValue	minScale := aValue.</body><body package="Roassal-Core">roValue: anEntity		"Normalize value based on minimum and maximum value."	| value slope |	value := self command roValue: anEntity.	slope := self slope: anEntity.	^ ((value abs * slope) + self maxScale - ((self maximumValue: anEntity) asFloat * slope)) asInteger</body></methods><methods><class-id>Roassal.ROValueLinearNormalizer</class-id> <category>as yet unclassified</category><body package="Roassal-Core">slope: anEntity		^ (maxScale - minScale) / ((self maximumValue: anEntity) asFloat - (self minimumValue: anEntity )asFloat).</body></methods><methods><class-id>Roassal.ROValueLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	minScale := 0.	maxScale := 1.</body></methods><methods><class-id>Roassal.RONFontLinearNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">roValue: anEntity	"Calculates the color of the entity based on the context."		| value |	value := self command roValue: anEntity.	^5 + (38 * (value abs / (self maximumValue: anEntity))) asInteger</body></methods><methods><class-id>Roassal.RODynamicEdgeTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROView new.	view add: (el1 := ROBox element).	view add: (el2 := ROBox element).	view add: (el3 := ROBox element).	ROHorizontalLineLayout on: (Array with: el1 with: el2 with: el3).		el1 @ (RODynamicEdge toAll: (Array with: el2 with: el3) using: (ROLine arrowed color: Color red))</body></methods><methods><class-id>Roassal.RODynamicEdgeTest</class-id> <category>tests</category><body package="Roassal-Core">testDefining	el2 @ (RODynamicEdge 			toAll: [ :el | (Array with: el1 with: el2 with: el3) copyWithout: el ] 			using: (ROLine arrowed color: Color red)).				el2 announce: ROMouseEnter.	self assert: view numberOfElements = 5.</body><body package="Roassal-Core">testDefiningFromAll	| edges |	el2 @ (RODynamicEdge 			fromAll: [ :el | (Array with: el1 with: el2 with: el3) copyWithout: el ] 			using: (ROLine arrowed color: Color red)).				el2 announce: ROMouseEnter.	self assert: view numberOfElements = 5.		edges := view elementsSuchThat:#isEdge.	self assert: (edges allSatisfy: [ :edge | edge to == el2])</body><body package="Roassal-Core">testDefiningMultiple	el2 @ (RODynamicEdge 			toAll: [ :el | ((Array with: el1 with: el2 with: el3) copyWithout: el) copyFrom: 2 to: 2 ] 			using: (ROLine arrowed color: Color red))		@ (RODynamicEdge 			toAll: [ :el | ((Array with: el1 with: el2 with: el3) copyWithout: el) copyFrom: 2 to: 2 ] 			using: (ROLine arrowed color: Color blue)).				el2 announce: ROMouseEnter.	self assert: view numberOfElements = 5.</body><body package="Roassal-Core">testEnteringAndExitingElement	el1 announce: ROMouseEnter.	el1 announce: ROMouseLeave.	self assert: view numberOfElements = 3.	self assert: (view elementsSuchThat: #isEdge) isEmpty</body><body package="Roassal-Core">testEnteringElement	el1 announce: ROMouseEnter.	self assert: view numberOfElements = 5.	self assert: (view elementsSuchThat: #isEdge) size = 2.	self assert: (view elementsSuchThat: #isEdge) first from == el1.	self assert: (view elementsSuchThat: #isEdge) first to == el2.		self assert: (view elementsSuchThat: #isEdge) second from == el1.	self assert: (view elementsSuchThat: #isEdge) second to == el3.		self assert: (view elementsSuchThat: #isEdge) first shapes first color == Color red</body><body package="Roassal-Core">testNoEdge	self assert: view elements size = 3.</body><body package="Roassal-Core">testTo	el3 @ (RODynamicEdge to: el2).		self assert: view numberOfElements = 3.					el3 announce: ROMouseEnter.	self assert: view numberOfElements = 4.		el3 announce: ROMouseLeave.	self assert: view numberOfElements = 3.</body></methods><methods><class-id>Roassal.ROVisitorTest</class-id> <category>running</category><body package="Roassal-Core">setUp	| elements |	view := ROView new.	elements := ROElement forCollection: (1 to: 5).	elements do: [ :el | el + ROBox ].	view addAll: elements.	view addAll: (ROEdge linesFor: 		(Array with: elements first -&gt; elements second with: elements second -&gt; elements fifth with: elements second -&gt; elements third ))</body></methods><methods><class-id>Roassal.ROVisitorTest</class-id> <category>tests</category><body package="Roassal-Core">test	| visitor |	visitor := ROVisitor new.		visitor runOn: view.</body></methods><methods><class-id>Roassal.ROVisitorTest class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">isAbstract	^ self name == #ROVisitorTest</body></methods><methods><class-id>Roassal.ROCountingVisitorTest</class-id> <category>tests</category><body package="Roassal-Core">test	| visitor |	visitor := ROCountingVisitor new.	self assert: visitor nbOfEdges isZero.	self assert: visitor nbOfNodes isZero.		visitor runOn: view.		self assert: visitor nbOfEdges = 3.	self assert: visitor nbOfNodes = 5.</body></methods><methods><class-id>Roassal.RoassalUI</class-id> <category>interface opening</category><body package="Roassal-VWSpecific">postBuildWith: aBuilder        super postBuildWith: aBuilder.        aBuilder window keyboardProcessor keyboardHook: [:kbEvent :c | self drawing getController processKeyboardEvent: kbEvent].</body><body package="Roassal-VWSpecific">postOpenWith: aBuilder 	"This message is sent by the builder after it has opened a completed 	window."	self mainWindow moveTo:  self mainWindow globalOrigin resize: position.	self mainWindow label: self drawing view title.	self mainWindow when: #bounds evaluate: [		self builder wrapper  bounds: (0@0 corner: self mainWindow bounds extent).		self drawing view canvasForRealSize: (self builder wrapper  bounds extent).		self drawing view windowSize: self mainWindow bounds extent.		].	"To remove the flickering"	builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new.	self mainWindow when: #resize evaluate: [ self drawing announce: ROViewChanged ].</body></methods><methods><class-id>Roassal.RoassalUI</class-id> <category>aspects</category><body package="Roassal-VWSpecific">drawing	^drawing ifNil: [drawing := ROPlatform current hostVisualElement new].</body><body package="Roassal-VWSpecific">drawingWrapper	^drawingWrapper ifNil: [drawingWrapper := Wrapper on: self drawing]</body><body package="Roassal-VWSpecific">setOpenIn: aPoint	position := aPoint.</body></methods><methods><class-id>Roassal.RoassalUI</class-id> <category>accessing</category><body package="Roassal-VWSpecific">extent	^self mainWindow extent.</body><body package="Roassal-VWSpecific">labelString	^self mainWindow label</body></methods><methods><class-id>Roassal.RoassalUI</class-id> <category>interface closing</category><body package="Roassal-VWSpecific">delete	self closeRequest</body></methods><methods><class-id>Roassal.ROController</class-id> <category>events</category><body package="Roassal-VWSpecific">blueButtonPressedEvent: evt		evt anyButtonPressed ifTrue: ["		self roMouseDragBegin: evt."		self roMouseClick: evt.	].	"evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">blueButtonReleasedEvent: evt			evt anyButtonPressed ifFalse: [		eventBeginingDragging ifNotNil: [self roMouseDragEnd: evt].		self roMouseLeave: evt.	]."	evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">doubleClickEvent: event		| figure |	figure := self figureAt: event.	self roMouseClick: event.</body><body package="Roassal-VWSpecific">elementAtRealPosition: position	"evt contains a real position, since this is where the user click on the screen"		^ view elementAtRealPosition: position"	^ view elementAt: (view camera realToVirtualPoint: position)"		"| r |	view viewDo: [ :v | 		r := v localElementAt: (v camera realToVirtualPoint: position).		(r ~~ v) ifTrue: [ ^ r ]].	^ view"</body><body package="Roassal-VWSpecific">elementForEvent: evt	"evt contains a real position, since this is where the user click on the screen"	"	^ view elementForRealPosition: (self relativePositionFor: evt)"	^ view elementForRealPosition: (self eventPosition: evt)</body><body package="Roassal-VWSpecific">elementForRealPosition: position	"evt contains a real position, since this is where the user click on the screen"		^ view elementForRealPosition: position</body><body package="Roassal-VWSpecific">enterEvent: evt"mouseEnter: evt"	super enterEvent: evt.	"Transcript show: 'mouseEnter ', evt printString; cr.""	"evt anyButtonPressed ifFalse: [		self roMouseEnter: evt.	]."	evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">eventPosition: evt	^(view globalPointToLocal: evt point)</body><body package="Roassal-VWSpecific">exitEvent: evt	super exitEvent: evt.	evt anyButtonPressed ifFalse: [		self roMouseLeave: evt.	]."	evt wasHandled: true."	^nil</body><body package="Roassal-VWSpecific">exposeEvent: evt"	evt anyButtonPressed ifFalse: [		self roMouseEnter: evt.]."</body><body package="Roassal-VWSpecific">mouseEnter: evt"	Transcript show: 'mouseEnter ', evt printString; cr."	evt anyButtonPressed ifFalse: [		self roMouseEnter: evt.	]."	evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">mouseExit: evt	evt anyButtonPressed ifFalse: [		self roMouseLeave: evt.	]."	evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">mouseMovedEvent: anEvent 	| currentElement |	anEvent anyButtonPressed 		ifTrue: [ self roMouseDragging: anEvent. ]		ifFalse: [ 			self isDragging ifTrue: [ ^ self ].			elementBeingPointed ifNil: [ 				elementBeingPointed := self elementForEvent: anEvent. 				self roMouseEnter: anEvent].				currentElement := self elementForEvent: anEvent.			(currentElement ~~ elementBeingPointed)			ifTrue: [ 				elementBeingPointed announce: ROMouseLeave.				self roMouseLeave: anEvent. 				elementBeingPointed := currentElement.				self roMouseEnter: anEvent. ]			ifFalse:[ "self roMouseEnter: anEvent"].			self roMouseMoving: anEvent.		].</body><body package="Roassal-VWSpecific">processKeyboardEvent: event	self roKeyStroke: event.	^ event</body><body package="Roassal-VWSpecific">realToVirtualPoint: aPoint	"^ (view canvasForRealSize: self extent) realToVirtualPoint: aPoint"	(roview camera extent = (0 @ 0))		ifTrue: [ ^ 1 @ 1 ].	^ roview camera realToVirtualPoint: aPoint</body><body package="Roassal-VWSpecific">redButtonPressedEvent: evt	|tracker el|"	el := self figureAt: evt."	"eventBeginingDragging ifNil: [		evt hand 					waitForClicksOrDrag: self 					event: evt 					selectors: { #roMouseClick:. nil. nil. #roMouseDragBegin: }					threshold: 5.		^ self ].""	self select: el."	"tracker := self moveTracker.	tracker position: (view globalPointToLocal: evt point).	tracker handleEvent: evt."		evt anyButtonPressed ifTrue: [		self roMouseDragBegin: evt.		self roMouseClick: evt.	].	"evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">redButtonReleasedEvent: evt			evt anyButtonPressed ifFalse: [		eventBeginingDragging ifNotNil: [self roMouseDragEnd: evt].		self roMouseLeave: evt.	]."	evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">relativePositionFor: evt	^ (self eventPosition: evt) - (self view bounds origin)</body><body package="Roassal-VWSpecific">resizeEvent: event	self halt.</body><body package="Roassal-VWSpecific">roKeyStroke: evt	roview announce: (ROKeyDown new keyValue: evt keyValue).</body><body package="Roassal-VWSpecific">roMouseClick: evt	| relativePosition ev virtualPosition |	relativePosition := self relativePositionFor: evt.		evt yellowButtonPressed		ifTrue: [ ev := ROMouseRightClick new ].	evt redButtonPressed		ifTrue: [ ev := ROMouseLeftClick new ].	evt blueButtonPressed		ifTrue: [ ev := ROMouseClick new ].			virtualPosition := self realToVirtualPoint: relativePosition.	ev position: virtualPosition.	"Transcript show: (self elementForRealPosition: relativePosition) printString, '     ', relativePosition printString; cr."	(self elementAtRealPosition: relativePosition) announce: ev.	"	(self elementForRealPosition: relativePosition) inspect."		"Transcript show: 'click: ', virtualPosition printString; cr"</body><body package="Roassal-VWSpecific">roMouseDragBegin: evt"	Transcript show: 'drag begin: ', evt printString; cr."	| relativePosition |	eventBeginingDragging := evt copy.		relativePosition := self relativePositionFor: evt.	elementBeingPointed := self elementAtRealPosition: relativePosition.	"elementBeingDragged := (view elementAt: (self realToVirtualPoint: relativePosition))"</body><body package="Roassal-VWSpecific">roMouseDragEnd: evt	"Transcript show: 'drag end: ', evt printString; cr."	| relativePosition step event |	relativePosition := self relativePositionFor: evt.	step := (self realToVirtualPoint: (self eventPosition: evt)) - (self realToVirtualPoint: (self eventPosition: eventBeginingDragging)).	event := ROMouseDragged new 				step: step; 				yourself.		event position: (self realToVirtualPoint: relativePosition).	elementBeingPointed announce: event.	eventBeginingDragging := nil.	elementBeingPointed := nil</body><body package="Roassal-VWSpecific">roMouseDragging: evt	| step relativePosition event |"	Transcript show: 'drag dragging: ', evt printString; cr."	eventBeginingDragging ifNil: [ ^ self ].	relativePosition := self relativePositionFor: evt.	step := (view globalPointToLocal: evt point) - (view globalPointToLocal:eventBeginingDragging point).	"step := (self realToVirtualPoint: (self eventPosition: evt)) - (self realToVirtualPoint: (self eventPosition: eventBeginingDragging))."	elementBeingPointed ifNil: 		[ elementBeingPointed := self elementAtRealPosition: relativePosition ].	"	virtualStep := (elementBeingPointed view canvasForRealSize: self extent) realToVirtualPoint: step.	Transcript show: 'drag: ', elementBeingPointed printString, '   ', step printString, '  ', virtualStep printString; cr."		event := ROMouseDragging new 				step: step; 				yourself.					"Transcript show: 'dragging real step = ', step printString; cr."	event position: relativePosition.	elementBeingPointed announce: event.	eventBeginingDragging := evt copy.</body><body package="Roassal-VWSpecific">roMouseEnter: evt	| relativePosition ev virtualPosition element |		relativePosition := self relativePositionFor: evt.	"Transcript show: 'leave: ', (self elementForRealPosition: relativePosition) printString; cr."	element := self elementForRealPosition: relativePosition.	virtualPosition := element view camera realToVirtualPoint: relativePosition.	ev := ROMouseEnter new.	ev position: virtualPosition.	ev realPosition: relativePosition.	ev element: element.	element announce: ev.</body><body package="Roassal-VWSpecific">roMouseLeave: evt	| relativePosition ev virtualPosition |		relativePosition := self relativePositionFor: evt.	"Transcript show: 'leave: ', (self elementForRealPosition: relativePosition) printString; cr."	virtualPosition := self realToVirtualPoint: relativePosition.	ev := ROMouseLeave new.	ev position: virtualPosition.	(self elementAtRealPosition: relativePosition) announce: ev</body><body package="Roassal-VWSpecific">roMouseMoving: evt	| relativePosition ev |	relativePosition := self relativePositionFor: evt.		ev := ROMouseMove new.	ev position: (view view camera realToVirtualPoint: relativePosition).	"Transcript show: 'moving: '; cr."	(self elementAtRealPosition: relativePosition) announce: ev.</body><body package="Roassal-VWSpecific">select: anElement"	aFigure fixedSelect."	selection add: anElement.</body><body package="Roassal-VWSpecific">virtualToRealPoint: aPoint 	"^ (view canvasForRealSize: self extent) realToVirtualPoint: aPoint"	^ roview camera virtualToRealPoint: aPoint</body><body package="Roassal-VWSpecific">yellowButtonPressedEvent: evt		evt anyButtonPressed ifTrue: ["		self roMouseDragBegin: evt."		self roMouseClick: evt.	].	"evt wasHandled: true."	^ true</body><body package="Roassal-VWSpecific">yellowButtonReleasedEvent: evt			evt anyButtonPressed ifFalse: [		eventBeginingDragging ifNotNil: [self roMouseDragEnd: evt].		self roMouseLeave: evt.	]."	evt wasHandled: true."	^ true</body></methods><methods><class-id>Roassal.ROController</class-id> <category>initialize-release</category><body package="Roassal-VWSpecific">initialize	super initialize.	selection := OrderedCollection new.</body><body package="Roassal-VWSpecific">setRoassalView: anROView	roview := anROView.	"Maybe something smarter with #invalidRect: can be done here. Need to check."	roview on: RORefreshNeeded do: [ :event | self changed. (Delay forMilliseconds: 5) wait. ].	roview on: ROViewChanged do: [ :event |   		event newView on: RORefreshNeeded do: [ :e | self changed ].		 self changed ].	canvas := roview camera canvas.	canvas extent: view extent.	"backGC := (canvas paintBasis retainedMediumWithExtent: ext) graphicsContext."	"roview on: ROBeginingAnimation do: [:event | view follow: event while: [] on: roview camera canvas]."	"roview on: ROBeginingAnimation do: [:event | view moveTo: 0@0 on: canvas restoring: backGC]."</body></methods><methods><class-id>Roassal.ROController</class-id> <category>animation</category><body package="Roassal-VWSpecific">startStepping	[self wantsSteps] whileTrue:[		self step.			(Delay forMilliseconds: self stepTime) wait.	]</body><body package="Roassal-VWSpecific">stepTime	"Answer the desired time between steps in milliseconds. This default implementation requests that the 'step' method be called once every second."	^ 1</body><body package="Roassal-VWSpecific">stopStepping	[self wantsSteps] whileTrue:[		self step.	]</body><body package="Roassal-VWSpecific">wantsSteps	^ animationBlock notNil</body></methods><methods><class-id>Roassal.ROController</class-id> <category>private</category><body package="Roassal-VWSpecific">figureAt: event	^(view view) elementAtRealPosition: (view globalPointToLocal: event point)</body><body package="Roassal-VWSpecific">moveSelectionBy: delta	selection do: [:figure | [figure translateBy: delta] on: Error do: [:ex | "Nothing"]].</body></methods><methods><class-id>Roassal.ROController</class-id> <category>testing</category><body package="Roassal-VWSpecific">isDragging	^ eventBeginingDragging notNil</body></methods><methods><class-id>Roassal.ROController</class-id> <category>ui</category><body package="Roassal-VWSpecific">figureDescription	^figureDescription</body><body package="Roassal-VWSpecific">figureDescription: aString	figureDescription := aString."	self changed: #changed."</body></methods><methods><class-id>Roassal.ROController</class-id> <category>changing</category><body package="Roassal-VWSpecific">changed	"Report that the area occupied by this morph should be redrawn.	Fixed to include submorphs outside the outerBounds."	"	^fullBounds 		ifNil: [self invalidRect: self privateFullBounds]		ifNotNil: [self invalidRect: fullBounds]"	view changedContainer.	view changed.</body></methods><methods><class-id>Roassal.ROController class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">new	self error: 'Use view:visual: instead to create a controller'</body><body package="Roassal-VWSpecific">view: aRoassalView visual: visual	"A controller can be created from a roassal view and a visual"	| instance |	instance := super new.	instance view: visual.	instance setRoassalView: aRoassalView.	^ instance</body></methods><methods><class-id>Roassal.ROFontOrganizer class</class-id> <category>public</category><body package="Roassal-Core">current	^ self subclasses first</body><body package="Roassal-Core">defaultFont	self subclassResponsibility </body><body package="Roassal-Core">defaultFontForSize: aNumber	self subclassResponsibility </body><body package="Roassal-Core">defaultFontSize	self subclassResponsibility </body><body package="Roassal-Core">height	self subclassResponsibility</body><body package="Roassal-Core">offsetWhenDrawing	^ 0 @ 0</body><body package="Roassal-Core">widthOfString: string	self subclassResponsibility</body><body package="Roassal-Core">widthOfString: string font: font	"Return the length of a string"		self subclassResponsibility</body></methods><methods><class-id>Roassal.ROVWFontOrganizer class</class-id> <category>public</category><body package="Roassal-VWSpecific">defaultFont	^ Screen default defaultFontPolicy defaultFont</body><body package="Roassal-VWSpecific">defaultFontForSize: aNumber	^ Screen default defaultFontPolicy findFont: (FontDescription default copy pixelSize: aNumber)</body><body package="Roassal-VWSpecific">defaultFontSize	^ self defaultFont height.</body><body package="Roassal-VWSpecific">displacement	^(0@(self height))</body><body package="Roassal-VWSpecific">height	|font |	font := Screen default defaultFontPolicy defaultFont.	^font height</body><body package="Roassal-VWSpecific">widthOfString: string	| font width |	width := 0.	font := Screen default defaultFontPolicy defaultFont.	(string isKindOf: String) ifTrue: [ string do:[ :c | 		width := width + (font widthOf: c)	] ].	^width</body><body package="Roassal-VWSpecific">widthOfString: string font: font	"Return the length of a string"		| width |	width := 0.	(string isKindOf: String) ifTrue: [ string do:[ :c | 		width := width + (font widthOf: c)	] ].	^width</body></methods><methods><class-id>Roassal.ROSugiyamaLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	ROSugiyamaLayout on: elements.		result := ((Array new: 20) at: 1 put: ((497.0@3.0)); at: 2 put: ((974.0@73.0)); at: 3 put: ((921.0@73.0)); at: 4 put: ((868.0@73.0)); at: 5 put: ((815.0@73.0)); at: 6 put: ((762.0@73.0)); at: 7 put: ((709.0@73.0)); at: 8 put: ((656.0@73.0)); at: 9 put: ((603.0@73.0)); at: 10 put: ((550.0@73.0)); at: 11 put: ((497.0@73.0)); at: 12 put: ((444.0@73.0)); at: 13 put: ((391.0@73.0)); at: 14 put: ((338.0@73.0)); at: 15 put: ((285.0@73.0)); at: 16 put: ((232.0@73.0)); at: 17 put: ((179.0@73.0)); at: 18 put: ((126.0@73.0)); at: 19 put: ((73.0@73.0)); at: 20 put: ((20.0@73.0)); yourself).	self assert: (result includesAll: (elements collect: #position))</body></methods><methods><class-id>Roassal.ROSVGExporter</class-id> <category>html file</category><body package="Roassal-Core">exportOnStream: fileStream	| canvas oldWindowSize |	view makeAllElementAsRendered.	canvas := ROSVGCanvas onCamera: view camera onStream: fileStream.	oldWindowSize := canvas camera windowSize.		"We make the window size big to not activate the optimization"	canvas camera windowSize: view encompassingRectangle extent.	canvas view: view.	canvas addStart.	view drawOn: canvas.	canvas addEnd.		"Put back the old window size"	canvas camera windowSize: oldWindowSize</body></methods><methods><class-id>Roassal.ROSVGExporter class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">exportViewAsSVG: aROView 	self subclassResponsibility </body></methods><methods><class-id>Roassal.RORectanglePackLayout</class-id> <category>space-calculation</category><body package="Roassal-Core">bestSpaceFor: anElement	| elementsPadedBox suitableSpaces |		elementsPadedBox := anElement bounds extendBy: padding * 2.		suitableSpaces := freeSpace select: [ :space |		elementsPadedBox width &lt;= space width and:			[ elementsPadedBox height &lt;= space height ] ].		^ suitableSpaces		fold: [ :best :current |			| bestExt currentExt | 			((currentExt := self extentByInserting: elementsPadedBox into: current) &lt;			(bestExt := self extentByInserting: elementsPadedBox  into: best) or: [ 				currentExt = bestExt and: [					current halfPerimeter &lt; best halfPerimeter ] ])						ifTrue: [ current ]						ifFalse: [ best ] ]</body><body package="Roassal-Core">extentByInserting: aRectangle into: aSpace	| futureCorner |	futureCorner := aSpace origin + aRectangle extent.		^	((futureCorner x - bounds x) max: 0) +		((futureCorner y - bounds y) max: 0)</body><body package="Roassal-Core">recalculateFreeSpacesWith: anElement	freeSpace := freeSpace inject: Set new into: [ :set :space |		 set			addAll: (space areasOverlapingOutside:				(anElement bounds expandBy: padding)); 			yourself ].			"remove subspaces"	freeSpace := freeSpace reject: [ :subspace | 		freeSpace anySatisfy: [ :space |			space ~~ subspace and: [ 				space containsRect: subspace ] ] ]</body></methods><methods><class-id>Roassal.RORectanglePackLayout</class-id> <category>accessing</category><body package="Roassal-Core">boundingBox	^ bounds</body><body package="Roassal-Core">padding	"padding around each element. Paddings do not overlap"	^ padding</body><body package="Roassal-Core">padding: anObject	padding := anObject</body></methods><methods><class-id>Roassal.RORectanglePackLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements	| sortedElements |	bounds := 0@0.			freeSpace := Set new.	freeSpace add: (0@0 corner: 		(elements inject: 0@0 into: [ :sum :el |			sum + el extent + (padding * 2) ])).		sortedElements := SortedCollection sortBlock:  [ :larger :smaller |		larger bounds halfPerimeter &gt;		smaller bounds halfPerimeter ].	sortedElements addAll: elements.		sortedElements do: [ :element |		self packIn: element ]</body></methods><methods><class-id>Roassal.RORectanglePackLayout</class-id> <category>execution</category><body package="Roassal-Core">packIn: anElement	anElement translateTo: (self bestSpaceFor: anElement) origin + padding.	bounds := bounds max: anElement bottomRight + padding.		self recalculateFreeSpacesWith: anElement</body></methods><methods><class-id>Roassal.RORectanglePackLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	padding := 0</body></methods><methods><class-id>Roassal.ROFixedSizedParentTest</class-id> <category>tests</category><body package="Roassal-Core">testMoveInner	| outter inner rawView |	rawView := ROView new.	outter := ROBox element extent: 100 @ 80.	inner := (ROEllipse color: Color gray) element size: 20. 	outter resizeStrategy: (ROFixedSizedParent new paddingGap: 0).	outter add: inner.	self assert: (inner position = (0 @ 0)).	rawView add: outter.	"rawView add: inner."		outter translateTo: 80 @ 20.	ROConstraint constraintInItsParent: inner.		self assert: (inner position = (0 @ 0)).		inner translateTo: (-20 @ -5).		self assert: (outter extent = (100 @ 80)).	self assert: (inner position = (0 @ 0)).</body></methods><methods><class-id>Roassal.ROMultipleColorLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	command := #yourself</body><body package="Roassal-Core">valueRange: anArrayOfNumbers colorRange: anArrayOfColors	" {1. 2. 3} {Color red. Color yellow. Color green}"		| size start end |	normalizers := Dictionary new.	self assert: anArrayOfNumbers size = anArrayOfColors size.	size := anArrayOfNumbers size.	1 to: size - 1 do: [ :i |		start := anArrayOfNumbers at: i.		end :=  anArrayOfNumbers at: i + 1.		normalizers			at: (start to: end)			put: (RONColorLinearNormalizer						inContext: (Array with: start with: end)						lowColor: (anArrayOfColors at: i)						highColor: (anArrayOfColors at: i + 1))	].</body></methods><methods><class-id>Roassal.ROMultipleColorLinearNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">roValue: anEntity	| value |	value := self command roValue: anEntity.	"detect range for the value, retrieve and call corresponding normalizers"	^ (self detectNormalizerFor: value) roValue: value</body></methods><methods><class-id>Roassal.ROMultipleColorLinearNormalizer</class-id> <category>private-accessing</category><body package="Roassal-Core">detectNormalizerFor: aValue	normalizers keysAndValuesDo: [:range :norm |		(range rangeIncludes: aValue)			ifTrue: [^ norm] ].	self error: aValue asString, ' not in declared ranges'</body></methods><methods><class-id>Roassal.ROMultipleColorLinearNormalizer class</class-id> <category>instance creation</category><body package="Roassal-Core">valueRange: anArrayOfNumbers colorRange: anArrayOfColors	^ self new valueRange: anArrayOfNumbers colorRange: anArrayOfColors</body></methods><methods><class-id>Roassal.ROAbstractLineLayout</class-id> <category>accessing</category><body package="Roassal-Core">alignBottom		alignment := #bottom</body><body package="Roassal-Core">alignCenter		alignment := #center</body><body package="Roassal-Core">alignLeft		alignment := #left</body><body package="Roassal-Core">alignRight		alignment := #right</body><body package="Roassal-Core">alignTop		alignment := #top</body><body package="Roassal-Core">alignment		^alignment</body><body package="Roassal-Core">alignment: anObject		alignment := anObject</body><body package="Roassal-Core">gapSize		^gapSize</body><body package="Roassal-Core">gapSize: aNumber	gapSize := aNumber. " This value is never used actually "		verticalGap := 2 * aNumber.	horizontalGap := 2 * aNumber</body><body package="Roassal-Core">horizontalGap		^horizontalGap</body><body package="Roassal-Core">horizontalGap: anObject		horizontalGap := anObject</body><body package="Roassal-Core">verticalGap		^verticalGap</body><body package="Roassal-Core">verticalGap: anObject		verticalGap := anObject</body></methods><methods><class-id>Roassal.ROAbstractLineLayout</class-id> <category>hook</category><body package="Roassal-Core">deltaFor: aNodeFigure		^self subclassResponsibility</body><body package="Roassal-Core">doCenter: aGraph	self subclassResponsibility </body><body package="Roassal-Core">doExecute: elements 	| pointer delta |	horizontallyStretchable ifTrue: 		[ self doStretchHorizontal: elements ].	verticallyStretchable ifTrue: 		[ self doStretchVertical: elements ].	pointer := self positionOriginalPointer: elements.	elements do: 		[ :element |		delta := self deltaFor: element.		translator translate: element to: pointer - delta.		pointer := self 					movePointer: pointer					accordingToFigure: element.		self step ].</body><body package="Roassal-Core">doStretchHorizontal: aCollectionOfElements 	self subclassResponsibility</body><body package="Roassal-Core">doStretchVertical: aCollectionOfElements 	self subclassResponsibility</body><body package="Roassal-Core">movePointer: pointer accordingToFigure: aNodeFigure		self subclassResponsibility</body><body package="Roassal-Core">positionOriginalPointer: aGraph		^self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractLineLayout</class-id> <category>testing</category><body package="Roassal-Core">horizontallyStretchable	^ horizontallyStretchable</body><body package="Roassal-Core">isLineLayout	^ true</body><body package="Roassal-Core">verticallyStretchable	^ verticallyStretchable</body></methods><methods><class-id>Roassal.ROAbstractLineLayout</class-id> <category>configuration</category><body package="Roassal-Core">center	self alignment: #center</body><body package="Roassal-Core">stretch	horizontallyStretchable := verticallyStretchable := true</body><body package="Roassal-Core">stretchHorizontally	horizontallyStretchable := true</body><body package="Roassal-Core">stretchVertically	verticallyStretchable := true</body></methods><methods><class-id>Roassal.ROAbstractLineLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		super initialize.	verticalGap := 10.	horizontalGap := 10.	horizontallyStretchable := false.	verticallyStretchable := false</body></methods><methods><class-id>Roassal.ROAbstractLineLayout class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name =  #ROAbstractLineLayout</body></methods><methods><class-id>Roassal.ROAbstractLineLayout class</class-id> <category>instance creation</category><body package="Roassal-Core">withGap: anInteger		^(self new)		gapSize: anInteger;		yourself</body></methods><methods><class-id>Roassal.ROHorizontalLineLayout</class-id> <category>hook</category><body package="Roassal-Core">deltaFor: aNodeFigure		| delta |	delta := 0.	self alignment == #bottom ifTrue: [delta := aNodeFigure height].	self alignment == #center ifTrue: [delta := aNodeFigure height / 2.0].	^0 @ delta</body><body package="Roassal-Core">doCenter: elements  	| midTallest step |	midTallest := 0.	midTallest := elements nodes 		inject: 0		into: [ :m :el | m max: (el bounds height )].	midTallest := midTallest / 2.	elements nodes do: [ :node | 		step := 0 @ (midTallest - (node bounds height / 2)) asInteger.		node bounds origin: (node bounds origin + step).		node bounds corner: (node bounds corner + step).	] </body><body package="Roassal-Core">doStretchHorizontal: aCollectionOfElements  	| parent parentBounds addedWidth parentBoundsWidth runningIndex newWidth |	aCollectionOfElements isEmpty ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	addedWidth := aCollectionOfElements		inject: 0		into: [ :m :el | m + el width ].	parentBoundsWidth := parentBounds width."	parentBoundsWidth := parentBoundsWidth - ((aCollectionOfElements size - 1) * horizontalGap) - (2 * horizontalOutGap)."			runningIndex := 0.	parentBounds width &gt; addedWidth		ifTrue: [ aCollectionOfElements do: [ :element | 						newWidth := (element width * parentBoundsWidth / addedWidth) asInteger.						element width: newWidth.						runningIndex := runningIndex + newWidth + horizontalGap ] ]</body><body package="Roassal-Core">doStretchVertical: aCollectionOfElements  	| parent parentBounds |	aCollectionOfElements isEmpty ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	aCollectionOfElements do: [ :element | 		element height: (parentBounds height) ]</body><body package="Roassal-Core">movePointer: pointer accordingToFigure: element		^ (pointer x + element width + self horizontalGap) @ pointer y</body><body package="Roassal-Core">positionOriginalPointer: elements 	| maxHeight delta |	delta := 0.	self alignment == #bottom ifTrue: 		[ maxHeight := elements maxValue: #height.		delta := maxHeight ].	self alignment == #center ifTrue: 		[ maxHeight := elements maxValue: #height.		delta := maxHeight / 2.0 ].	^ (self paddingLeftFor: elements) @ ((self paddingTopFor: elements) + delta)</body></methods><methods><class-id>Roassal.ROHorizontalLineLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		super initialize.	self alignTop</body></methods><methods><class-id>Roassal.ROExportHTMLCommand</class-id> <category>execute</category><body package="Roassal-Core">exportView: view	ROPlatform current htmlExporterClass exportViewAsHTML: view</body></methods><methods><class-id>Roassal.ROExportHTMLCommand</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	name := 'Export as HTML'</body></methods><methods><class-id>Roassal.ROCircleTest</class-id> <category>running</category><body package="Roassal-Core">setUp	node := ROElement on: 'hello'.	node extent: 40 @ 30.	node		addShape: (ROEllipse new color: Color green)	</body></methods><methods><class-id>Roassal.ROCircleTest</class-id> <category>tests</category><body package="Roassal-Core">testInitialization	self assert: (ROEllipse new color = ROEllipse defaultColor)</body></methods><methods><class-id>Roassal.ROForceBasedLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeElements		self start: nodeElements.		[ alpha := alpha * 0.99 .  alpha &gt; 0.005 ] whileTrue: [ self step ].		alpha := 0.		nodes do: [ :e | e translateTo: e position ].</body><body package="Roassal-Core">initialPositionOfNodes: nodeElements	layoutInitial new executeOnElements: nodeElements</body><body package="Roassal-Core">on: elements edges: edgesCol	nodes := elements.	self applyOn: elements</body></methods><methods><class-id>Roassal.ROForceBasedLayout</class-id> <category>accessing</category><body package="Roassal-Core">charge: aFloat	charge := aFloat</body><body package="Roassal-Core">iterationsToSendEvent: anInteger	currentIteraction := anInteger</body><body package="Roassal-Core">length: aFloat	length := aFloat</body><body package="Roassal-Core">start: nodeElements 	self initialPositionOfNodes: nodeElements.	weights := Dictionary new.	oldPositions := Dictionary new.		nodes := nodeElements.		nodes do: [ :e | weights add: (Association key: e value: 0).					oldPositions add:(Association key: e value: e position) ].		edges do: [ :e | | from to | 				from := e from.				to := e to.				weights at: from put: ((weights at: from) + 1).				weights at: to put: ((weights at: to) + 1)].		alpha := 0.1.</body><body package="Roassal-Core">strength: aFloat	strength := aFloat</body></methods><methods><class-id>Roassal.ROForceBasedLayout</class-id> <category>algorithm</category><body package="Roassal-Core">accumulate: aQuad 	| cx cy k random |		cx := 0.	cy := 0.		aQuad charge: 0; cx: 0; cy: 0.		random := Random new.		aQuad leaf ifFalse: [ aQuad nodes do: [ :e | e isNil ifFalse: [ self accumulate: e.																aQuad charge: aQuad charge + e charge.																cx := cx + (e charge * e cx).																cy := cy + (e charge * e cy) ] ] ].													aQuad node isNil ifFalse: [ aQuad leaf ifFalse: [ aQuad node position: aQuad node position + (random next - 0.5 @ ( random next - 0.5)) ].								k := alpha * (self chargeOf: aQuad node).								aQuad charge: aQuad charge + k.								cx := cx + (k * aQuad node position x). 								cy := cy + (k * aQuad node position y).].								aQuad charge = 0 ifTrue: [ ^ self ].					aQuad cx: cx / aQuad charge.	aQuad cy: cy / aQuad charge.</body><body package="Roassal-Core">chargeOf: aNode 	^ charges at: aNode ifAbsent: [ ^ charge ]</body><body package="Roassal-Core">fix: aNode at: aPoint	fixedNodes at: aNode put: aPoint</body><body package="Roassal-Core">gravityAt: aPoint	center := aPoint</body><body package="Roassal-Core">lengthOf: anEdge	^ lengths at: anEdge ifAbsent: [ ^ length ]</body><body package="Roassal-Core">repulse: aNode from: aQuad	| dx dy dn k p |		dx := aQuad cx - aNode position x.	dy := aQuad cy - aNode position y.		((dx closeTo: 0) and: [ dy closeTo: 0 ] ) ifFalse: [ 		dn := 1 / ((dx * dx) + (dy * dy)) sqrt.		p := oldPositions at: aNode.	aQuad node ~= aNode ifTrue: [ aQuad corner x - aQuad origin x * dn &lt; theta ifTrue: [ k := aQuad charge * dn * dn.																							oldPositions at: aNode put: p x - (dx * k) @ (p y - (dy * k) ).																							^ self].																					(aQuad node isNil not and: [ dn &lt; 1e9 ]) ifTrue: [ k := (self chargeOf: aQuad node) * dn * dn * alpha.																					  oldPositions at: aNode put: p x - (dx * k) @ (p y - (dy * k) ) ] ]. ].																				(aQuad charge closeTo: 0) not ifTrue: [ aQuad nodes do: [ :e | e isNil ifFalse: [ self repulse: aNode from: e ] ] ]</body><body package="Roassal-Core">set: aNode charge: aFloat 	charges at: aNode put: aFloat</body><body package="Roassal-Core">set: anEdge length: aFloat 	lengths at: anEdge put: aFloat</body><body package="Roassal-Core">set: anEdge length: aFloat strength: another	lengths at: anEdge put: aFloat.	strengths at: anEdge put: another</body><body package="Roassal-Core">set: anEdge strength: aFloat 	strengths at: anEdge put: aFloat</body><body package="Roassal-Core">strengthOf: anEdge	^ strengths at: anEdge ifAbsent: [ ^ strength ]</body></methods><methods><class-id>Roassal.ROForceBasedLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		super initialize.	layoutInitial := ROGridLayout.		fixedNodes := Dictionary new.		strengths := Dictionary new.	lengths := Dictionary new.	charges := Dictionary new.		strength := 1.	length := 20.	charge := -30.			gravity := 0.1.	friction := 0.9.	theta := 0.8.		center := 200@200.</body></methods><methods><class-id>Roassal.ROForceBasedLayout</class-id> <category>testing</category><body package="Roassal-Core">isFixed: aNode	^ fixedNodes includesKey: aNode</body></methods><methods><class-id>Roassal.ROForceBasedLayout</class-id> <category>events</category><body package="Roassal-Core">step 	"run a step of the force layout algorithm"	| from to fp tp x y len k quad old |		super step.	edges do: [ :e | 					from := e from. fp := from position.					to := e to. tp := to position.					x := tp x - fp x.					y := tp y - fp y.					len := ((x * x) + (y * y)) sqrt.					((len closeTo: 0) not) ifTrue: [ len :=  alpha * (self strengthOf: e) * ( len - (self lengthOf: e) ) / len.										x := x * len.										y := y * len.										k := (weights at: from) / (( weights at: from) +( weights at: to )).										to translateTo: ( tp x - (x * k) )@( tp y - (y * k) ).										k := 1 -  k.										from translateTo: ( fp x + (x * k) )@( fp y + (y * k) ) ] ].					k := alpha * gravity.		((k closeTo: 0) not) ifTrue: [ x := center x.							y := center y.							nodes do: [ :ea | |pos|										pos := ea position.										ea translateTo: (pos x + (( x - pos x )* k ) )@(pos y + (( y - pos y )* k ) ) ] ].							quad := ROQuadTree withAll: nodes.		self accumulate: quad.		nodes do: [ :e | (self isFixed: e) ifFalse: [ self repulse: e from: quad ]										 ifTrue: [ e translateTo: (fixedNodes at: e) ] ].		nodes do: [ :e | old := e position .						e translateTo: (old x - (( (oldPositions at: e) x - old x ) * friction)) @ (old y - (( (oldPositions at: e) y - old y ) * friction)).						oldPositions at: e put: old.].</body></methods><methods><class-id>Roassal.ROHorizontalTreeLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result edges firstEdge shape |	ROHorizontalTreeLayout on: elements.		result := (((Array new: 20) at: 1 put: ((5@482.0)); at: 2 put: ((75@747.0)); at: 3 put: ((75@800.0)); at: 4 put: ((75@429.0)); at: 5 put: ((75@482.0)); at: 6 put: ((75@111.0)); at: 7 put: ((75@164.0)); at: 8 put: ((75@853.0)); at: 9 put: ((75@906.0)); at: 10 put: ((75@535.0)); at: 11 put: ((75@588.0)); at: 12 put: ((75@217.0)); at: 13 put: ((75@270.0)); at: 14 put: ((75@959.0)); at: 15 put: ((75@5.0)); at: 16 put: ((75@641.0)); at: 17 put: ((75@694.0)); at: 18 put: ((75@323.0)); at: 19 put: ((75@376.0)); at: 20 put: ((75@58.0)); yourself)).	self assert: ((elements collect: #position) includesAll: result).		edges := view elements select: #isEdge.	edges do: [ :e | (e getShape: ROLine) attachPoint: ROHorizontalAttachPoint new ].		firstEdge := edges first.	shape := firstEdge getShape: ROLine.	self assert: (shape startingPointOf: firstEdge) = (firstEdge from bounds topRight + (0 @ (firstEdge from bounds height / 2))).	self assert: (shape endingPointOf: firstEdge) = (firstEdge to bounds topLeft + (0 @ (firstEdge to bounds height / 2))).</body></methods><methods><class-id>Roassal.ROCamera</class-id> <category>accessing</category><body package="Roassal-Core">altitude	^ (self extent x / 2) / (self angleInRadian / 2 ) tan</body><body package="Roassal-Core">altitude: h	"Adjust the extent variable to reflect what we are seeing"	| nx ny oldExtent | 	nx := 2 * h * (self angleInRadian / 2) tan.	ny := self extent x * nx / self extent y.		oldExtent := extent.	extent := nx asInteger @ ny asInteger.	self translateBy: ((extent - oldExtent ) / 2) asIntegerPoint</body><body package="Roassal-Core">angle	^ angle</body><body package="Roassal-Core">angleInRadian	^ angle asFloat / 180 * 3.1415</body><body package="Roassal-Core">bounds	"bounds "	^ position extent: extent	"	| ra v p |	ra := self angleInRadian.	v := height * ra sin.	p := position.	^ ((p x - v) @ (p y - v)) asIntegerPoint corner: ((p x + v) @ (p y + v)) asIntegerPoint"</body><body package="Roassal-Core">bounds: rec	|aNumber max ext|	"Should be removed!"	aNumber := self extent.	position := rec topLeft.	ext := rec extent.	max := ext x max: ext y.	self extent: max@max.	aNumber := aNumber / self extent.	scale := scale * aNumber.</body><body package="Roassal-Core">centerPosition	^ self bounds center</body><body package="Roassal-Core">extent	^ extent</body><body package="Roassal-Core">extent: anExtent	extent := anExtent</body><body package="Roassal-Core">height	^ self extent y</body><body package="Roassal-Core">height: h	self extent: (self width @ h)</body><body package="Roassal-Core">position	^ position</body><body package="Roassal-Core">realBounds	^ position extent: realExtent</body><body package="Roassal-Core">realBounds: rec	"Should be removed!"	position := rec topLeft.	self realExtent: rec extent.</body><body package="Roassal-Core">realExtent	^ realExtent</body><body package="Roassal-Core">realExtent: anObject	realExtent := anObject</body><body package="Roassal-Core">scale	^ scale</body><body package="Roassal-Core">width	^ self extent x</body><body package="Roassal-Core">width: w	self extent: (w @ self height)</body><body package="Roassal-Core">windowSize	"Size of the window, as a point"	^ windowSize</body><body package="Roassal-Core">windowSize: anExtent	"called when the window is resized"	windowSize := anExtent </body></methods><methods><class-id>Roassal.ROCamera</class-id> <category>public</category><body package="Roassal-Core">moveDown	self altitude: self altitude - 10</body><body package="Roassal-Core">moveToSee: aRectangle	| t |	t := aRectangle extent x min: aRectangle extent y.	position := t @ t.	"height := (t / 2 / (self angleInRadian / 2) tan) asInteger"	"height := ((aRectangle extent x) / 2 / (self angleInRadian / 2) tan) asInteger"</body><body package="Roassal-Core">moveUp	self altitude: self altitude +10</body><body package="Roassal-Core">translateBy: pos	position := position + pos</body><body package="Roassal-Core">translateBy: aPoint during: aBlock	self translateBy: aPoint.	aBlock value.	self translateBy: aPoint negated.</body><body package="Roassal-Core">translateByRealStep: aStep	"aStep represents the step in pixel on what the user see the visu"		self translateBy: (self realToVirtualPoint: aStep)</body><body package="Roassal-Core">translateTo: pos	position := pos</body></methods><methods><class-id>Roassal.ROCamera</class-id> <category>util</category><body package="Roassal-Core">realToVirtualPoint: aPoint	"Return a real point from a one expressed in the virtual coordinates"	| r |	r := self realToVirtualPointNoTrunc: aPoint.	^ r x asInteger @ r y asInteger</body><body package="Roassal-Core">realToVirtualPointNoTrunc: aPoint	"Return a real point from a one expressed in the virtual coordinates"		| visibleBounds offset |	(realExtent = (0 @ 0)) ifTrue: [ ^ 1 @ 1 ].	visibleBounds := self bounds.	offset := self position.	^ ((aPoint x asFloat / realExtent x * visibleBounds width + offset x) asFloat) @	   ((aPoint y asFloat / realExtent y * visibleBounds height + offset y) asFloat)</body><body package="Roassal-Core">realToVirtualRectangle: aRectangle	"Return a rectangle with virtual coordinates from one expressed in the real coordinates"		^ (self realToVirtualPoint: aRectangle origin) corner: (self realToVirtualPoint: aRectangle corner)</body><body package="Roassal-Core">virtualToRealPoint: aPoint 	"Return a virtual point from a one expressed in the real coordinates"		^ (self virtualToRealPointNoTrunc: aPoint) asIntegerPoint </body><body package="Roassal-Core">virtualToRealPointNoTrunc: aPoint 	"Return a virtual point from a one expressed in the real coordinates"		| visibleBounds offset |	visibleBounds := self bounds.	offset := self position.	^ ((aPoint x asFloat - offset x  * realExtent x / visibleBounds width) asFloat) @	   ((aPoint y asFloat - offset y * realExtent y / visibleBounds height) asFloat)</body><body package="Roassal-Core">virtualToRealRectangle: aRectangle	"Return a rectangle with real coordinates from one expressed in the virtual coordinates"		^ (self virtualToRealPoint: aRectangle origin) corner: (self virtualToRealPoint: aRectangle corner)</body></methods><methods><class-id>Roassal.ROCamera</class-id> <category>initialize</category><body package="Roassal-Core">initialize	super initialize.	angle := self class defaultAngle.	position := self class defaultPosition.	realExtent := self class defaultExtent.	extent := self class defaultExtent.	windowSize := self class defaultExtent.	"NOT sure of scale"	scale := 1@1.</body></methods><methods><class-id>Roassal.ROCamera</class-id> <category>rendering</category><body package="Roassal-Core">canvas	^ ROPlatform current canvasClass onCamera: self</body></methods><methods><class-id>Roassal.ROCamera class</class-id> <category>defaults</category><body package="Roassal-Core">defaultAngle	^ 95</body><body package="Roassal-Core">defaultExtent	"Maybe this has to be replaced by defaultAngle and default Height"	^ 500 @ 500</body><body package="Roassal-Core">defaultHeight	^ 200</body><body package="Roassal-Core">defaultPosition	^ 0 @ 0</body></methods><methods><class-id>Roassal.ROCamera class</class-id> <category>public</category><body package="Roassal-Core">realExtent: aPoint	^ self new realExtent: aPoint</body></methods><methods><class-id>Roassal.ROCenterViewTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view element1 element2 |	view := ROView new.	view camera windowSize: 500 @ 500.	view @ RODraggable.		view add: (element1 := ROBox element).	element1 extent: 50 @ 50.	element1 translateBy: -100 @ -100.	view add: (element2 := ROBox element).	element2 extent: 50 @ 50.	element2 translateBy: 100 @ 100.	self assert: view position = (0 @ 0).	self assert: element1 position = (-100 @ -100).	self assert: element2 position = (100 @ 100).	ROFocusView centerView: view.	view completeAllAnimations.		self assert: view camera position =  (-225@ -225).	self assert: element1 position = (-100 @ -100).	self assert: element2 position = (100 @ 100).</body></methods><methods><class-id>Roassal.RoassalExporterSVGTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	|view edges n1 n2 n3 canvas|	view := ROView new.	n1 := ROElement spriteOn: 1.	n2 := ROElement spriteOn: 2.	n3 := ROElement spriteOn: 3.	edges := ROEdge linesFor: (Array with: (n1 -&gt; n2) with: (n1 -&gt; n3)).	edges do: [:e | (e getShape: ROLine) color: Color blue].	view add: n1; add: n2; add: n3; addAll: edges.	ROTreeLayout on: view elements.		canvas := ROSVGCanvas onCamera: view camera.	canvas view: view.	canvas addStart.	view drawOn: canvas.	canvas addEnd.		self assert:  canvas stream contents = '&lt;svg  xmlns="http://www.w3.org/2000/svg" width="110px" height="127px" 	xmlns:xlink="http://www.w3.org/1999/xlink"&gt;&lt;rect x="5" y="5" height="120" width="103" style="fill:rgb(256,256,256)"/&gt;&lt;line x1="31" y1="5" x2="81" y2="5" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="81" y1="5" x2="81" y2="55" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="81" y1="55" x2="31" y2="55" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="31" y1="55" x2="31" y2="5" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="5" y1="75" x2="55" y2="75" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="55" y1="75" x2="55" y2="125" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="55" y1="125" x2="5" y2="125" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="5" y1="125" x2="5" y2="75" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="58" y1="75" x2="108" y2="75" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="108" y1="75" x2="108" y2="125" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="108" y1="125" x2="58" y2="125" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="58" y1="125" x2="58" y2="75" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="55" y1="100" x2="56" y2="55" style="stroke:rgb(0,0,256);stroke-width:1"/&gt;&lt;line x1="83" y1="75" x2="56" y2="55" style="stroke:rgb(0,0,256);stroke-width:1"/&gt;&lt;/svg&gt;'</body><body package="Roassal-Core">testLine	|view n1 n2 canvas edge|	view := ROView new.	n1 := (ROElement on: 'n1') + (ROBox new color: Color red).	n2 := (ROElement on: 'n2') + (ROBox new color: Color red).	n2 translateBy: 100@100.	edge := ROEdge from: n1 to: n2.	edge + (ROLine red).	view add: n1; add: n2; add: edge.		canvas := ROSVGCanvas onCamera: view camera.	canvas view: view.	canvas addStart.	view drawOn: canvas.	canvas addEnd.		self assert: canvas stream contents = '&lt;svg  xmlns="http://www.w3.org/2000/svg" width="107px" height="107px" 	xmlns:xlink="http://www.w3.org/1999/xlink"&gt;&lt;rect x="0" y="0" height="105" width="105" style="fill:rgb(256,256,256)"/&gt;&lt;rect x="0" y="0" height="5" width="5" style="fill:rgb(256,0,0)"/&gt;&lt;rect x="100" y="100" height="5" width="5" style="fill:rgb(256,0,0)"/&gt;&lt;line x1="100" y1="102" x2="2" y2="5" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;/svg&gt;'</body><body package="Roassal-Core">testNesting	|view node ch1 ch2 ch3 canvas|	view := ROView new.	node := ROElement spriteOn: 'node'.	ch1 := (ROElement on: 'ch1') + (ROBox new color: Color green).	ch2 := (ROElement on: 'ch2') + (ROBox new color: Color green).	ch3 := (ROElement on: 'ch3') + (ROBox new color: Color green).	node add: ch1; add: ch2; add: ch3.	ROGridLayout on: node elements.	view add: node.	canvas := ROSVGCanvas onCamera: view camera.	canvas view: view.	canvas addStart.	view drawOn: canvas.	canvas addEnd.		self assert: canvas stream contents = '&lt;svg  xmlns="http://www.w3.org/2000/svg" width="52px" height="52px" 	xmlns:xlink="http://www.w3.org/1999/xlink"&gt;&lt;rect x="0" y="0" height="50" width="50" style="fill:rgb(256,256,256)"/&gt;&lt;line x1="0" y1="0" x2="50" y2="0" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="50" y1="0" x2="50" y2="50" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="50" y1="50" x2="0" y2="50" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;line x1="0" y1="50" x2="0" y2="0" style="stroke:rgb(256,0,0);stroke-width:1"/&gt;&lt;rect x="5" y="5" height="5" width="5" style="fill:rgb(0,256,0)"/&gt;&lt;rect x="20" y="5" height="5" width="5" style="fill:rgb(0,256,0)"/&gt;&lt;rect x="5" y="20" height="5" width="5" style="fill:rgb(0,256,0)"/&gt;&lt;/svg&gt;'</body><body package="Roassal-Core">testOval	|view n1 canvas |	view := ROView new.	n1 := (ROElement on: 1) + (ROEllipse new color: (Color r: 0 g: 0.5 b: 0.5)); yourself .	n1 size: 200.	view add: n1.		canvas := ROSVGCanvas onCamera: view camera.	canvas view: view.	canvas addStart.	view drawOn: canvas.	canvas addEnd.	self assert: canvas stream contents = '&lt;svg  xmlns="http://www.w3.org/2000/svg" width="202px" height="202px" 	xmlns:xlink="http://www.w3.org/1999/xlink"&gt;&lt;rect x="0" y="0" height="200" width="200" style="fill:rgb(256,256,256)"/&gt;&lt;ellipse cx= "100" cy="100" rx="100" ry="100" style="fill:rgb(0,128,128);stroke: rgb(0,0,0);stroke-width: 0"/&gt;&lt;/svg&gt;'</body><body package="Roassal-Core">testView	| view n1 canvas |	view := ROView new.	n1 := (ROElement on: 1) + (ROEllipse new color: (Color r: 0 g: 0.5 b: 0.5)); yourself .	n1 size: 200.	view add: n1.		view translateBy: 100 @ 100.		canvas := ROSVGCanvas onCamera: view camera.	canvas view: view.	canvas addStart.	view drawOn: canvas.	canvas addEnd.	self assert: canvas stream contents = '&lt;svg  xmlns="http://www.w3.org/2000/svg" width="302px" height="302px" 	xmlns:xlink="http://www.w3.org/1999/xlink"&gt;&lt;rect x="100" y="100" height="200" width="200" style="fill:rgb(256,256,256)"/&gt;&lt;ellipse cx= "200" cy="200" rx="100" ry="100" style="fill:rgb(0,128,128);stroke: rgb(0,0,0);stroke-width: 0"/&gt;&lt;/svg&gt;'</body></methods><methods><class-id>Roassal.ROPunchcardBuilderTest</class-id> <category>running</category><body package="Roassal-Core">setUp	builder := ROPunchcardBuilder new.	builder addModels: #( 'hello' 'world' 'hello world' ).	builder addMetric: [:word | word size] namedAs: 'length'.	emptyBuilder := ROPunchcardBuilder new.</body></methods><methods><class-id>Roassal.ROPunchcardBuilderTest</class-id> <category>tests</category><body package="Roassal-Core">testCreation	self assert: emptyBuilder numberOfModels = 0.	self assert: emptyBuilder numberOfMetrics = 0.</body><body package="Roassal-Core">testRendering	view := ROView new.	builder renderOn: view.	self assert: view numberOfElements = 7</body><body package="Roassal-Core">testSimpleScenario	self assert: builder numberOfModels = 3.	self assert: builder numberOfMetrics = 1.</body><body package="Roassal-Core">testTwoMetricsScenario	builder addMetric: [:word | word size * 2] namedAs: 'double lenght'.		self assert: builder numberOfModels = 3.	self assert: builder numberOfMetrics = 2.</body></methods><methods><class-id>Roassal.ROPlatformTest</class-id> <category>tests</category><body package="Roassal-Core">testAddingAPlatform	| platform s |	platform := ROPlatform new.	platform name: 'test'.	platform canvasClass: ROAbstractCanvas subclasses anyOne.	platform fontOrganizerClass: ROFontOrganizer subclasses anyOne.	platform widgetFactory: RONativeWidgetFactory subclasses anyOne.	platform timeOrganizerClass: ROTimeOrganizer subclasses anyOne.	platform hostVisualElement: Object. "We pick any class"	ROPlatform removeNamed: 'test' ifAbsent: [].	s := ROPlatform numberOfPlatforms.	ROPlatform add: platform.	self assert: (s + 1) = ROPlatform numberOfPlatforms.	platform remove.	self assert: s = ROPlatform numberOfPlatforms.</body><body package="Roassal-Core">testCurrent	self assert: ROPlatform current notNil.	self assert: (ROPlatform current isKindOf: ROPlatform).</body></methods><methods><class-id>Roassal.ROAnimatedResizingTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view el |	view := ROView new.	el := ROBox element.		view add: el.		self assert: el extent = (5 @ 5).	self assert: el position = (0 @ 0).		self deny: view hasAnimation.	ROAnimatedResizing for: el resize: (10 @ 10).	self assert: view hasAnimation.		view completeAllAnimations.	self assert: el extent = (10 @ 10).	self assert: el position = (0 @ 0).</body><body package="Roassal-Core">testResizeAndFixBottomLeft	| view el |	view := ROView new.	el := ROBox element.		view add: el.		self assert: el extent = (5 @ 5).	self assert: el position = (0 @ 0).		self deny: view hasAnimation.	ROAnimatedResizing for: el resizeAndFixBottomLeft: (10 @ 10).	self assert: view hasAnimation.		view completeAllAnimations.	self assert: el extent = (10 @ 10).	self assert: el position = (0 @ -5).</body></methods><methods><class-id>Roassal.ROViewChanged</class-id> <category>accessing</category><body package="Roassal-Core">newView 	^ newView</body><body package="Roassal-Core">newView: aView	newView := aView</body></methods><methods><class-id>Roassal.ROAnimationTest</class-id> <category>tests</category><body package="Roassal-Core">testAnimation		view := ROView new.	self deny: view hasAnimation.	view addAnimation: animation1.	self assert: view hasAnimation.</body><body package="Roassal-Core">testDoAnimationCycle	view addAnimation: animation1.	view addAnimation: animation2.	self deny: animation1 hasCompleted.	self deny: animation2 hasCompleted.		self assert: element1 position = (0 @ 0).	self assert: element2 position = (0 @ 0).		animation1 nbCycles timesRepeat: [ view doAnimationCycle ].		self assert: animation1 hasCompleted.	self assert: animation2 hasCompleted.	  	self assert: element1 position = (50 @ 40).	self assert: element2 position = (150 @ 10).</body><body package="Roassal-Core">testForBy	| element |	element := ROElement sprite.	element translateTo: 50 @ 40.	view add: element.		ROLinearMove for: element by: 10 @ 5.	view doAllAnimationCycles.	self assert: element position = (60 @ 45)</body><body package="Roassal-Core">testHasAnimationAfterDoAllAnimationCycles	view addAnimation: animation1.	view addAnimation: animation2.		self assert: view hasAnimation.	view doAllAnimationCycles.		self deny: view hasAnimation.</body><body package="Roassal-Core">testHasAnimationAfterDoAnimationCycle	self assert: view hasAnimation.	animation1 nbCycles timesRepeat: [ 		self assert: view hasAnimation.		view doAnimationCycle ].		self assert: animation1 elapsedCycles = animation1 nbCycles.	self deny: view hasAnimation.</body><body package="Roassal-Core">testInitialize	self assert: animation1 element == element1.	self assert: animation1 elapsedCycles = 0</body><body package="Roassal-Core">testNoAnimation	self deny: ROView new hasAnimation.</body></methods><methods><class-id>Roassal.ROAnimationTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROView new.	element1 := ROElement sprite.	element2 := ROElement sprite.	view add: element1.	view add: element2.			animation1 := ROLinearMove new.	animation1 for: element1 to: (50 @ 40).		animation2 := ROLinearMove new.	animation2 for: element2 to: (150 @ 10).</body></methods><methods><class-id>Roassal.ROAnimationTest</class-id> <category>strategy</category><body package="Roassal-Core">testDefaultStrategy	self assert: (ROMotionMove new strategy isAppend)</body><body package="Roassal-Core">testSettingStrategy	| animation mergingStrategy |	animation := ROMotionMove new.	mergingStrategy := ROAnimationExclusive instance.	animation strategy: mergingStrategy.	self assert: (animation strategy == mergingStrategy)</body></methods><methods><class-id>Roassal.ROResizeTest</class-id> <category>tests</category><body package="Roassal-Core">testResizeHorizontally	| view container1 container2 |	view := ROView new.	container1 := ROBorder elementOn: 'container1'.	container2 := ROBorder elementOn: 'container2'.	view add: container1.	view add: container2.	container1 extent: 20 @ 20.	ROVerticalLineLayout new			gapSize: 0;			on: view elements.	self assert: container1 bounds = ((5@5) corner: (25@25)).	self assert: container2 bounds = ((5@25) corner: (10@30)).		ROResize stretchHorizontally: view elements.	self assert: container1 bounds = ((5@5) corner: (25@25)).	self assert: container2 bounds = ((5@25) corner: (25@30)).</body><body package="Roassal-Core">testResizeVertically	| view container1 container2 |	view := ROView new.	container1 := ROBorder elementOn: 'container1'.	container2 := ROBorder elementOn: 'container2'.	view add: container1.	view add: container2.	container1 extent: 20 @ 20.	ROHorizontalLineLayout new			gapSize: 0;			on: view elements.	self assert: container1 bounds = ((5@5) corner: (25@25)).	self assert: container2 bounds = ((25@5) corner: (30@10)).		ROResize stretchVertically: view elements.	self assert: container1 bounds = ((5@5) corner: (25@25)).	self assert: container2 bounds = ((25@5) corner: (30@25)).</body></methods><methods><class-id>Roassal.RONarrowRadialTreeLayout</class-id> <category>private</category><body package="Roassal-Core">gap		^self verticalGap</body><body package="Roassal-Core">layoutLayer: aCollection radius: oldRadius from: aFromAngle to: aToAngle		| delta childRadius maximumRadius myRadius fromAngle toAngle |	"Initialize with default value"	maximumRadius := oldRadius.	aCollection isEmpty		ifFalse:			[myRadius := oldRadius + self gap + (self maximumRadius: aCollection).			childRadius := oldRadius + self gap + (self maximumDiameter: aCollection).	"This is a purely optical tweak"			(aCollection size = 1 and: [aToAngle - aFromAngle = (2 * Float pi)])				ifTrue:					[delta := 0.4 * Float pi.					fromAngle := 0.8 * Float pi.					toAngle := fromAngle + delta]				ifFalse:					[delta := (aToAngle - aFromAngle) / aCollection size.					fromAngle := aFromAngle.					toAngle := aFromAngle + delta].			aCollection				do:					[:child | 					child						translateTo:							(Point								radius: myRadius								theta: toAngle - (delta / 2.0)).					maximumRadius := maximumRadius						max:							(self								layoutLayer: (self childrenFor: child)								radius: childRadius								from: fromAngle								to: toAngle).					fromAngle := toAngle.					toAngle := toAngle + delta]].	^maximumRadius</body></methods><methods><class-id>Roassal.RONarrowRadialTreeLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeElements 	| rootNodes maximumRadius xOffset   |	self executeWithoutResizeStrategy: nodeElements block: [		rootNodes := self rootNodesFor: nodeElements.		xOffset := 0.		rootNodes do: 			[ :node | 			node translateTo: 0 @ 0.	"Move the node to the origin of the coordinate system"			maximumRadius := self 				layoutLayer: (self childrenFor: node)				radius: node radius				from: 0				to: 2 * Float pi.			self 				shiftTree: node				by: (maximumRadius + xOffset) @ maximumRadius.			xOffset := xOffset + (2 * maximumRadius) ].		].</body></methods><methods><class-id>Roassal.ROImageExporter</class-id> <category>accessing</category><body package="Roassal-Core">view: aROView	view := aROView </body></methods><methods><class-id>Roassal.ROImageExporter class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">exportViewAsPNG: aROView 	^ self new view: aROView; interactiveExportWith: PNGReadWriter extension: '.png'</body></methods><methods><class-id>Roassal.ROArrowTest</class-id> <category>tests</category><body package="Roassal-Core">testInitialization	self assert: arrow offset = 0</body><body package="Roassal-Core">testLine	| line |	line := ROLine new.	self assert: line numberOfArrows = 0.	self deny: line hasArrow.	line add: arrow.	self assert: line numberOfArrows = 1.	self assert: line hasArrow.</body></methods><methods><class-id>Roassal.ROArrowTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	arrow := ROArrow new.</body></methods><methods><class-id>Roassal.ROKeyDownTest</class-id> <category>tests</category><body package="Roassal-Core">testOnMondrianBuilder	| pool raw view |	pool := OrderedCollection new.	view := ROMondrianViewBuilder new.	view raw on: ROKeyDown do: [ :event | pool add: event ].		self assert: pool size = 0.	view raw announce: (ROKeyDown new).	self assert: pool size = 1.		view raw announce: (ROKeyDown new).	self assert: pool size = 2.</body><body package="Roassal-Core">testOnMondrianBuilder2	| rawView view t |	t := 0.	rawView := ROView new.	view := ROMondrianViewBuilder view: rawView.	rawView on: ROKeyDown do: [ :event | t := t + 1 ].	self assert: t = 0.	rawView announce: ROKeyDown.	self assert: t = 1.	rawView announce: ROKeyDown.	self assert: t = 2.</body><body package="Roassal-Core">testOnView	| pool raw view |	pool := OrderedCollection new.	view := ROView new.	view on: ROKeyDown do: [ :event | pool add: event ].		self assert: pool size = 0.	view announce: (ROKeyDown new).	self assert: pool size = 1.		view announce: (ROKeyDown new).	self assert: pool size = 2.</body></methods><methods><class-id>Roassal.RODummyNode</class-id> <category>accessing</category><body package="Roassal-Core">edge		^edge</body><body package="Roassal-Core">edge: anEdge		edge := anEdge</body><body package="Roassal-Core">height		^0</body><body package="Roassal-Core">position	^ 0 @ 0</body><body package="Roassal-Core">signalUpdate	"do nothing"</body><body package="Roassal-Core">slot: anIndex	</body><body package="Roassal-Core">translateBy: apoint	"do nothing"</body><body package="Roassal-Core">translateTo: aPoint		"edge index: index point: aPoint"</body><body package="Roassal-Core">view	^ ROView new</body><body package="Roassal-Core">width		^0</body></methods><methods><class-id>Roassal.RODummyNode class</class-id> <category>instance creation</category><body package="Roassal-Core">on: anEdge slot: anIndex		^(self new)		edge: anEdge;		slot: anIndex;		yourself</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>size</category><body package="Roassal-Core">testBounds	| el |	el := ROLabel elementOn: 'hello world'.	self assert: el bounds ~= ( 0@0 corner: 5@5).	self assert: el extent = (self classToTest new preferedExtentFor: el).</body><body package="Roassal-Core">testDynamicBounds	| el extent shape extentFromShape bounds |	el := ROElement on: 'hello'.	el + self classToTest.		shape := el getShape: self classToTest.	bounds := el bounds.		el model: 'hello world'.		self assert: (shape preferedExtentFor: el) = el extent.		self assert: el bounds origin = bounds origin.		self assert: el bounds extent x &gt; bounds extent x.	self assert: el bounds extent y = bounds extent y.</body><body package="Roassal-Core">testDynamicExtent	| el extent shape extentFromShape |	el := ROElement on: 'hello'.	el + self classToTest.		shape := el getShape: self classToTest.	extent := el extent.	extentFromShape := shape preferedExtentFor: el.		self assert: extent = extentFromShape.		el model: 'hello world'.		self assert: (shape preferedExtentFor: el) x &gt; extentFromShape x.	self assert: (shape preferedExtentFor: el) y = extentFromShape y.		self assert: (shape preferedExtentFor: el) = el extent.		self assert: el extent x &gt; extent x.	self assert: el extent y = extent y.	</body><body package="Roassal-Core">testHeightFor	| label element1 element2 |	label := self classToTest new.	element1 := ROElement on: 'abcdefhhijk'.	element2 := ROElement on: 'abcdefghijkabcdef'.		self assert: (label heightFor: element1) = ((label fontFor: element1) height + (2 * label textVerticalPadding)).	label := self classToTest new.	self assert: (label heightFor: element2) = ((label fontFor: element2) height * 3 					+ (2 * label interlineSpace) + (2 * label textVerticalPadding)).</body><body package="Roassal-Core">testSize	| el1 el2 |	el1 := ROElement on: 'hello'.	el2 := ROElement on: 'h'.		self assert: el1 bounds = el2 bounds.	self assert: el1 bounds = ( 0 @ 0 corner: 5 @ 5).		el1 + self classToTest.	el2 + self classToTest.		self assert: el1 extent = (self classToTest new preferedExtentFor: el1).	self assert: el2 extent = (self classToTest new preferedExtentFor: el2).		self assert: el1 bounds ~= el2 bounds.	self assert: el1 bounds height = el2 bounds height.	self assert: el1 bounds width &gt; el2 bounds width.</body><body package="Roassal-Core">testSize2	| el1 el2 label1 |	el1 := ROElement on: 'hello'.	el2 := ROElement on: 'hello'.	label1 :=  self classToTest new fontSize: 50.	el1 + label1.	el2 + self classToTest.	self assert: el1 extent = (label1 preferedExtentFor: el1).	self assert: el2 extent = (self classToTest new preferedExtentFor: el2).		self assert: el1 bounds ~= el2 bounds.	self assert: el1 bounds height &gt; el2 bounds height.	self assert: el1 bounds width &gt; el2 bounds width.</body><body package="Roassal-Core">testSize3	| el1 el2 el3 text1 text2 text3 tmpFont |	text1 := 'iiiiiiiiii'.	text2 := 'WWWWW'.	text3 := text1, ROPlatform current newLine, text2.	el1 := ROElement on: text1.	el2 := ROElement on: text2.	el3 := ROElement on: text3.		el1 + self classToTest.	el2 + self classToTest.	el3 + self classToTest.	self assert: el1 extent = (self classToTest new preferedExtentFor: el1).	self assert: el2 extent = (self classToTest new preferedExtentFor: el2).	self assert: el3 extent = (self classToTest new preferedExtentFor: el3).		self assert: el1 bounds ~= el2 bounds.	self assert: el1 bounds height = el2 bounds height.		"We can't have that. This depends on the used font"	"self assert: el1 bounds width &lt; el2 bounds width."		self assert: el1 bounds ~= el3 bounds.	tmpFont := self classToTest new fontFor: el1 with: el1 view camera.	self assert: el1 bounds height + self classToTest new interlineSpace 				+ tmpFont height 				= el3 bounds height.					"We can't have that. This depends on the used font"	"self assert: el1 bounds width &lt; el3 bounds width."	self assert: el2 bounds ~= el3 bounds.	tmpFont := self classToTest new fontFor: el2 with: el2 view camera.	self assert: el2 bounds height + self classToTest new interlineSpace 				+ tmpFont height 				= el3 bounds height.			"We can't have that. This depends on the used font"	"self assert: el2 bounds width = el3 bounds width."</body><body package="Roassal-Core">testWidthFor	| label element1 element2 |	label := self classToTest new.	element1 := ROElement on: 'abcdefghijkabcdef'.	element2 := ROElement on: 'abcdefghijk'.		self assert: (label widthFor: element1) = (label widthFor: element2).</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>hooks</category><body package="Roassal-Core">classToTest	self subclassResponsibility </body><body package="Roassal-Core">drawOnMultilineForTrace	self subclassResponsibility</body><body package="Roassal-Core">drawOnMultilineForTraceVW	self subclassResponsibility</body><body package="Roassal-Core">drawOnMultilineWithTextPaddingForTrace	self subclassResponsibility</body><body package="Roassal-Core">drawOnMultilineWithTextPaddingForTraceVW	self subclassResponsibility</body><body package="Roassal-Core">drawOnWithTextPaddingForTrace	self subclassResponsibility</body><body package="Roassal-Core">drawOnZeroPaddingForTrace	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>white char</category><body package="Roassal-Core">testReplaingWhiteCharacter	| label element str |	label := self classToTest new.	element := ROElement on: (str := '	abc	def').	self assert: (label textFor: element) = str.	self assert: (label textAdaptedFor: element) =  '      abc      def'</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>lines</category><body package="Roassal-Core">testMultilines	"	self debug: #testMultilines	"	| view elementWith2Lines elementWith1Line |	view := ROView new.	view add: (elementWith2Lines := ROLabel elementOn: 'hello world').	view add: (elementWith1Line := ROShape elementOn: 'bonjour le monde!').	"view openInWindow."		self assert: (elementWith2Lines height &gt;= (elementWith1Line height * 2))</body><body package="Roassal-Core">testRawLinesOf	| label |	label := self classToTest new.	self assert: (label rawLinesOf: 'helloworld	bravo') = #('hello' 'world' '	bravo')</body><body package="Roassal-Core">testRawLinesOfEmptyString	| label |	label := self classToTest new.	self assert: (label rawLinesOf: '') = #()</body><body package="Roassal-Core">testRawLinesOfWithTrailingCR	| label |	label := self classToTest new.	self assert: (label rawLinesOf: 'helloworld	bravo') = #('hello' 'world' '	bravo')</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>colors</category><body package="Roassal-Core">testColorFor	 | rawView el1 shape |	  rawView := ROView new.	  el1 := ROElement on: 1.	  el1 extent: 50@50.	  el1 + (shape := self classToTest new color: [ :element | element model odd ifTrue: [ Color red ] ifFalse: [ Color blue ] ]). 	  rawView add: el1.		self assert: (shape colorFor: el1) = Color red.</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>size minimum</category><body package="Roassal-Core">testMinimumSize	| el |	el := ROElement on: 'hello'.	el extent: (900 @ 450).	self assert: el extent = (900 @ 450).		"When we add a new shape, its size should not change"	el + self classToTest.	self assert: el extent = (900 @ 450).</body><body package="Roassal-Core">testMinimumSize2	| el |	el := ROElement on: 'hello'.	el extent: (3 @ 3).	self assert: el extent = (3 @ 3).		el + self classToTest.	self assert: el extent &gt; (3 @ 3).</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>text cache</category><body package="Roassal-Core">testAdaptedTextCache	| label el trigger |	label := self classToTest new.	trigger := 0.	label text: [ :e | trigger := trigger + 1. e model ].	el := ROElement on: '2	2'.	self deny: label textCache hasAdaptedText.	self assert: (label textAdaptedFor: el) = '2      2'.	self assert: label textCache hasAdaptedText.	self assert: label textCache adaptedText = '2      2'.	self assert: trigger = 1.	self assert: (label textAdaptedFor: el) = '2      2'.	self assert: trigger = 1.</body><body package="Roassal-Core">testCache	| shape |	shape := self classToTest new.	shape text: 'hello'.	self assert: (shape textFor: ROElement new) = 'hello'.	shape text: 'world'.	self assert: (shape textFor: ROElement new) = 'world'.</body><body package="Roassal-Core">testTextCache	| label el trigger |	label := self classToTest new.	trigger := 0.	label text: [ :e | trigger := trigger + 1. e model + 1 ].	el := ROElement on: 2.	self deny: label textCache hasText.	self assert: (label textFor: el) = '3'.	self assert: label textCache hasText.	self assert: label textCache text = '3'.	self assert: trigger = 1.	self assert: (label textFor: el) = '3'.	self assert: trigger = 1.</body><body package="Roassal-Core">testTextCache2	| label el trigger |	label := self classToTest new.	trigger := 0.	label text: [ :e | trigger := trigger + 1. e model + 1 ].	el := ROElement on: 2.	el + label.	self assert: (label textFor: el) = '3'.	self assert: trigger = 1.	el model: 4.	self deny: label textCache hasText.	self assert: (label textFor: el) = '5'.	self assert: label textCache hasText.	self assert: trigger = 2.	self assert: (label textFor: el) = '5'.	self assert: trigger = 2.</body><body package="Roassal-Core">testTextFor	| label el |	label := self classToTest new.	label text: [ :e | e model + 1 ].	el := ROElement on: 2.	self assert: (label textFor: el) = '3'</body></methods><methods><class-id>Roassal.ROAbstractLabelTest</class-id> <category>ui</category><body package="Roassal-Core">drawOnZeroPaddingForTraceVW	^  #(#(#drawStringColor '3' '(-1@-4)' 14 'Color black'))</body><body package="Roassal-Core">testDrawOnFor	| label el canvas trigger |	label := self classToTest new.	canvas := ROTracingCanvas new.	trigger := 0.	label text: [ :e | trigger := trigger + 1. e model + 1 ].	el := ROElement on: 2.	label drawOn: canvas for: el.	self assert: trigger = 1.	"self assert: ((canvas trace = self drawOnForTracePharo) or: [ canvas trace = self drawOnForTraceVW ])."	label drawOn: canvas for: el.	self assert: trigger = 1.</body><body package="Roassal-Core">testTextPadding	| label el canvas extent1 extent2 |	el := ROElement on: 2.	label := self classToTest new.	label text: [ :e | e model + 1 ].	canvas := ROTracingCanvas new.	label textPadding: 0.	label drawOn: canvas for: el.	extent1 := label extentFor: el. 	"self assert: ((canvas trace = self drawOnZeroPaddingForTrace) or: [ canvas trace = self drawOnZeroPaddingForTraceVW ])."	canvas := ROTracingCanvas new.	label textPadding: 10.	label drawOn: canvas for: el.	extent2 := label extentFor: el.	self deny: extent1 = extent2.	self assert: extent2 = (extent1 + 20).	"self assert: ((canvas trace = self drawOnWithTextPaddingForTrace) or: [ canvas trace = self drawOnZeroPaddingForTraceVW ])."</body><body package="Roassal-Core">testTextPaddingMultiline	| label el canvas extent1 extent2 text |	text := 'First lineSecond lineThird lineFourth lineFifth lineSixth line'.	el := ROElement on: text.	label := self classToTest new.	label text: [ :e | e model ].	canvas := ROTracingCanvas new.	label textPadding: 0.	label drawOn: canvas for: el.	extent1 := label extentFor: el. 	"self assert: (canvas trace = self drawOnMultilineForTrace or: [ canvas trace = self drawOnMultilineForTraceVW ])."	canvas := ROTracingCanvas new.	label textPadding: 10.	label drawOn: canvas for: el.	extent2 := label extentFor: el.	self deny: extent1 = extent2.	self assert: extent2 = (extent1 + 20).	"self assert: (canvas trace = self drawOnMultilineWithTextPaddingForTrace or: [ canvas trace = self drawOnMultilineWithTextPaddingForTraceVW ])."</body></methods><methods><class-id>Roassal.ROAbstractLabelTest class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract 	^ self name == #ROAbstractLabelTest</body></methods><methods><class-id>Roassal.ROLabelTest</class-id> <category>hooks</category><body package="Roassal-Core">classToTest	^ ROLabel</body><body package="Roassal-Core">drawOnMultilineForTrace	^ #(#(#drawStringColor 'First line' '(0@0)' 14 'Color black') 		#(#drawStringColor 'Second line' '(0@17)' 14 'Color black') 		#(#drawStringColor 'Third line' '(0@34)' 14 'Color black') 		#(#drawStringColor 'Fourth line' '(0@51)' 14 'Color black') 		#(#drawStringColor 'Fifth line' '(0@68)' 14 'Color black') 		#(#drawStringColor 'Sixth line' '(0@85)' 14 'Color black'))</body><body package="Roassal-Core">drawOnMultilineWithTextPaddingForTrace	^ #(#(#drawStringColor 'First line' '(10@10)' 14 'Color black') 		#(#drawStringColor 'Second line' '(10@27)' 14 'Color black') 		#(#drawStringColor 'Third line' '(10@44)' 14 'Color black') 		#(#drawStringColor 'Fourth line' '(10@61)' 14 'Color black') 		#(#drawStringColor 'Fifth line' '(10@78)' 14 'Color black') 		#(#drawStringColor 'Sixth line' '(10@95)' 14 'Color black'))</body><body package="Roassal-Core">drawOnWithTextPaddingForTrace	^ #(#(#drawStringColor '3' '(10@10)' 14 'Color black'))</body><body package="Roassal-Core">drawOnZeroPaddingForTrace	^ #(#(#drawStringColor '3' '(0@0)' 14 'Color black'))</body></methods><methods><class-id>Roassal.ROLabelTest</class-id> <category>size</category><body package="Roassal-Core">testSize	| label border |	border := ROBorder gray.	label := ROLabel elementOn: 'Hello World'.	label + border.	self assert: label extent = ((label getShape: ROLabel) extentFor: label).	self assert: (border extentFor: label) = border defaultExtent.	self assert: label extent &gt;= (50 @ 20).</body></methods><methods><class-id>Roassal.ROCameraResized</class-id> <category>accessing</category><body package="Roassal-Core">newBounds	^ newBounds</body><body package="Roassal-Core">newBounds: anObject	newBounds := anObject</body><body package="Roassal-Core">oldBounds	^ oldBounds</body><body package="Roassal-Core">oldBounds: anObject	oldBounds := anObject</body></methods><methods><class-id>Roassal.ROOrthoHorizontalLineShapeTest</class-id> <category>tests</category><body package="Roassal-Core">testDrawOnFor	| view el1 el2 edge |	view := ROView new.	el1 := ROBox element.	el2 := ROBox element.	edge := ROEdge from: el1 to: el2.	edge + (ROOrthoHorizontalLineShape new color: [:e | Color red ]).	view add: el1; add: el2; add: edge.	ROGridLayout on: (Array with: el1 with: el2).	self shouldnt: [ view drawOn: ROTracingCanvas new ] raise: Error.</body></methods><methods><class-id>Roassal.ROSerializerExporter</class-id> <category>exporting</category><body package="Roassal-Core">exportView: view	self subclassResponsibility </body><body package="Roassal-Core">exportView: view onFileNamed: filename	self subclassResponsibility </body><body package="Roassal-Core">interactiveExportView: aROView	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROSerializerExporter</class-id> <category>importing</category><body package="Roassal-Core">importView: fileName	self subclassResponsibility </body><body package="Roassal-Core">interactiveImportView	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROBlinkTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| el |	el := ROBox element.	self assert: (el getShape: ROBox) color = ROBox defaultColor.	ROBlink on: el.	self assert: (el getShape: ROBox) color ~= ROBox defaultColor.	self assert: (el getShape: ROBox) color = ROBlink defaultColor.</body><body package="Roassal-Core">testIncomingEdgesOf	| view el1 el2 line |	view := ROView new.	el1 := ROBox elementOn: 'start'. 	el2 := ROBox elementOn: 'end'.	view add: el1; add: el2.	line := ROLine elementFrom: el1 to: el2.	view add: line.	ROBlink highlightIncomingEdgesOf: el2.	self assert: (line getShape: ROLine) color = Color red.</body><body package="Roassal-Core">testOutgoingEdgesOf	| view el1 el2 line |	view := ROView new.	el1 := ROBox elementOn: 'start'. 	el2 := ROBox elementOn: 'end'.	view add: el1; add: el2.	line := ROLine elementFrom: el1 to: el2.	view add: line.	ROBlink highlightOutgoingEdgesOf: el1.	self assert: (line getShape: ROLine) color = Color red.</body></methods><methods><class-id>Roassal.ROAbstractExpandChildrenOnClick</class-id> <category>hooks</category><body package="Roassal-Core">adjustNode: node	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROAbstractExpandChildrenOnClick</class-id> <category>initialization</category><body package="Roassal-Core">addChildren: newNode to: element	| edge line |	self adjustNode: newNode.	element view add: newNode.		line := ROLine new.	edge := (ROEdge from: element to: newNode) + line.	line attachPoint: ROVerticalAttachPoint new.	element view add: edge.	^ newNode</body><body package="Roassal-Core">addChildrenFromModel: model to: element	| newNode edge line |	newNode := ROElement spriteOn: model.	newNode + ROLabel @ (ROExpandChildrenOnClick childrenBlock: childrenBlock).	element view add: newNode.		line := ROLine new.	edge := (ROEdge from: element to: newNode) + line.	line attachPoint: ROVerticalAttachPoint new.	element view add: edge.	^ newNode</body><body package="Roassal-Core">initializeElement: element	element on: ROMouseClick do: [:event |		| elements newElements roElements |				newElements := childrenBlock value: element.		roElements := newElements collect: [:children | 			self addChildren: children to: element ].		roElements do: [ :el | el translateTo: element position].		elements := element view elementsSuchThat: #notNil.		ROTreeLayout new			translator: ROSmoothLayoutTranslator new;			applyOn: elements.					element signalUpdate. ].</body></methods><methods><class-id>Roassal.ROAbstractExpandChildrenOnClick</class-id> <category>accessing</category><body package="Roassal-Core">childrenBlock	^ childrenBlock</body><body package="Roassal-Core">childrenBlock: anObject	childrenBlock := anObject</body><body package="Roassal-Core">computeChildrenFor: element	^ childrenBlock value: element</body></methods><methods><class-id>Roassal.ROAbstractExpandChildrenOnClick class</class-id> <category>instance creation</category><body package="Roassal-Core">childrenBlock: aBlock	^self new		childrenBlock: aBlock;		yourself.</body><body package="Roassal-Core">childrenForModel: aBlock	^ self childrenBlock: [ :el | 		| children |		children := aBlock value: el model.		children collect: [:c | (ROElement on: c) + ROLabel + ROBox] ]</body></methods><methods><class-id>Roassal.RORecursiveExpandOnClick</class-id> <category>hooks</category><body package="Roassal-Core">adjustNode: node	node @ (ROExpandChildrenOnClick childrenBlock: childrenBlock).</body></methods><methods><class-id>Roassal.ROMiniMapTest</class-id> <category>lupa</category><body package="Roassal-Core">testCameraTranslation	| view miniMap |	view := ROView new.	view addAll: ((ROBox new size: 50) elementsOn: (1 to: 100)).	ROGridLayout on: view elements.		view @ ROMiniMap.		miniMap := (view attributes at: #miniMap).	self assert: (miniMap lupa position = (0 @ 0)).		self assert: (view camera position = (0 @ 0)).	self assert: (miniMap miniMapDisplayer camera realExtent) = (3 @ 3).	view camera translateBy: 100 @ 100.	view announce: (ROCameraTranslated new step: 100 @ 100).	self assert: (miniMap miniMapDisplayer camera realExtent) = (3 @ 3).	self assert: (view camera position = (100 @ 100)).		self assert: (miniMap lupa position = (0 @ 0))</body><body package="Roassal-Core">testLupaCreation	|view miniMap|	view := ROView new.	view @ROMiniMap.	view windowSize: (300@300).		miniMap := (view attributes at: #miniMap).	self assert: (miniMap lupa extent =   (1500@1500)).	</body><body package="Roassal-Core">testLupaTranslation	|view miniMap|	view := ROView new.	view add: ROElement sprite.	view @ROMiniMap.		miniMap := (view attributes at: #miniMap).	self assert: (miniMap lupa position = (0@0)).		self assert: (view camera position = (0@0)).	miniMap lupa announce: (ROMouseDragging new step: 10@10).	self assert: (miniMap lupa position = (10@10)).	self assert: (view camera position =  (100@100)).</body><body package="Roassal-Core">testMiniMapOnClik	|view miniMap|	view := ROView new.	view add: ROElement sprite.	view @ROMiniMap.		miniMap := (view attributes at: #miniMap).	self assert: (miniMap lupa position = (0@0)).		self assert: (view camera position = (0@0)).	miniMap container announce: (ROMouseLeftClick new position: 10@10).	self assert: (miniMap lupa position = (10@10)).	self assert: (view camera position =  (100@100)).</body><body package="Roassal-Core">testViewZoomIn	| view miniMap |	view := ROView new.	view @ ROMiniMap.		view windowSize: 500 @ 500.		miniMap := (view attributeAt: #miniMap).		self assert: (miniMap lupa position = (0 @ 0)).	self assert: (miniMap lupa extent =  (2500 @ 2500)).		ROZoomInMove new on: view.	view doAllAnimationCycles.		self assert: (miniMap lupa position = (347 @ 347)).	self assert: (miniMap lupa extent = (2000 @ 2000)).</body><body package="Roassal-Core">testViewZoomOut	| view miniMap |	view := ROView new.	view @ ROMiniMap.		view windowSize: 500 @ 500.		miniMap := (view attributes at: #miniMap).		self assert: (miniMap lupa position = (0 @ 0)).	self assert: (miniMap lupa extent =  (2500 @ 2500) ).	ROZoomOutMove new on: view.	view doAllAnimationCycles.		self assert: (miniMap lupa position =   (-213@ -213)).	self assert: (miniMap lupa extent =   (3120@3120)).</body><body package="Roassal-Core">testWindowResize	| view miniMap |	view := ROView new.	view @ ROMiniMap.		miniMap := (view attributes at: #miniMap).		self assert: (miniMap miniMap extent = (5 @ 5)).	view windowSize: 1000 @ 1000.	self assert: (miniMap miniMap extent = (1000 @ 1000)).</body></methods><methods><class-id>Roassal.ROMiniMapTest</class-id> <category>creation</category><body package="Roassal-Core">testCreation	| view miniMap |	view := ROView new.	self deny: (view hasAttribute: #miniMap).	view @ ROMiniMap.	self assert: (view hasAttribute: #miniMap).		miniMap := (view attributeAt: #miniMap).	self assert: miniMap notNil.		self assert: (miniMap lupa position = (0 @ 0)).	self assert: (miniMap lupa extent = (5 @ 5)).	self assert: (miniMap camera position = (0 @ 0)).	"self assert: (miniMap miniMap extent = (200 @ 200))"</body><body package="Roassal-Core">testGetsizeOfView	| view map |	view := ROView new.	self assert: view encompassingRectangle extent = (1 @ 1).		map := ROMiniMap new.	self assert: (map getEncompassingRectangleOfView: view) = map minimumViewRectangle</body></methods><methods><class-id>Roassal.ROMiniMapTest</class-id> <category>minimap</category><body package="Roassal-Core">testMiniMapCameraAfterContainerResize	|view miniMap|	view := ROView new.	view add: ROElement sprite.	view @ROMiniMap.	miniMap := (view attributes at: #miniMap).	self assert: miniMap isNil not.	self assert: (miniMap miniMap extent = (200@200)).	self assert: (miniMap camera realExtent =  (50@50)).	miniMap container windowSize: (300@300).	self assert: (miniMap miniMap extent = (300@300)).	self assert: (miniMap camera realExtent = (3000@3000)).</body><body package="Roassal-Core">testMiniMapContainerResize	|view miniMap|	view := ROView new.	view add: ROElement sprite.	view @ROMiniMap.	miniMap := (view attributes at: #miniMap).	self assert: miniMap isNil not.	self assert: (miniMap containerSize = (200@200)).	self assert: (miniMap miniMap extent = (200@200)).	miniMap container windowSize: (300@300).	self assert: (miniMap containerSize = (300@300)).	self assert: (miniMap miniMap extent = (300@300)).	</body><body package="Roassal-Core">testMiniMapPosition	| view miniMap |	view := ROView new.	view add: ROElement sprite.	view add: ROElement sprite.	ROVerticalLineLayout new on: view elements.	view @ ROMiniMap.	miniMap := (view attributes at: #miniMap).	self assert: miniMap isNil not.		self assert: (miniMap miniMap extent = (100@200)).	self assert: (miniMap miniMap position = (50@0)).</body><body package="Roassal-Core">testMiniMapPositionAfterContainerResize	| view miniMap |	view := ROView new.	view add: ROElement sprite.	view add: ROElement sprite.	ROVerticalLineLayout new on: view elements.	view @ ROMiniMap.	miniMap := (view attributes at: #miniMap).	self assert: miniMap isNil not.	self assert: (miniMap miniMap extent = (100 @ 200)).	self assert: (miniMap miniMap position = (50 @ 0)).	miniMap container windowSize: (300 @ 300).	self assert: (miniMap miniMap extent = (150 @ 300)).	self assert: (miniMap miniMap position = (75 @ 0)).</body><body package="Roassal-Core">testMiniMapSizeAdjustment	|view miniMap|	view := ROView new.	view add: ROElement sprite.	view @ROMiniMap.	miniMap := (view attributes at: #miniMap).	self assert: miniMap isNil not.		self assert: (miniMap containerSize = (200@200)).	self assert: (miniMap miniMap extent = (200@200)).	self assert: (miniMap miniMap position = (0@0) ).	self assert: (miniMap camera realExtent =  (50@50)).		</body></methods><methods><class-id>Roassal.ROAbstractResizeStrategy</class-id> <category>action</category><body package="Roassal-Core">on: childElement	self subclassResponsibility </body><body package="Roassal-Core">translate: innerElement by: aPoint	innerElement translateWithoutUpdatingContainedElementsBy: aPoint.</body></methods><methods><class-id>Roassal.ROAbstractResizeStrategy</class-id> <category>accessing</category><body package="Roassal-Core">padding	^ padding</body><body package="Roassal-Core">padding: aPoint	self assert: [ aPoint class == Point ].	padding := aPoint</body><body package="Roassal-Core">paddingBottom	^ self paddingTop</body><body package="Roassal-Core">paddingGap: aSmallInteger	self padding: aSmallInteger @ aSmallInteger</body><body package="Roassal-Core">paddingLeft	^ self padding x</body><body package="Roassal-Core">paddingRight	^ self paddingLeft</body><body package="Roassal-Core">paddingTop	^ self padding y</body></methods><methods><class-id>Roassal.ROAbstractResizeStrategy</class-id> <category>configuration</category><body package="Roassal-Core">defaultPadding	^ 5 @ 5</body></methods><methods><class-id>Roassal.ROAbstractResizeStrategy</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	padding := self defaultPadding</body></methods><methods><class-id>Roassal.ROAbstractResizeStrategy</class-id> <category>testing</category><body package="Roassal-Core">isExtensible	^ false</body><body package="Roassal-Core">isFixed	^ false</body><body package="Roassal-Core">isPermissive	^ false</body><body package="Roassal-Core">isShrinking	^ false</body></methods><methods><class-id>Roassal.ROAbstractResizeStrategy class</class-id> <category>public</category><body package="Roassal-Core">instance	instance ifNil: [ instance := self new ].	^ instance</body><body package="Roassal-Core">reset	instance := nil</body><body package="Roassal-Core">resetAll	self allSubclasses do: #reset</body></methods><methods><class-id>Roassal.ROPermissiveParent</class-id> <category>testing</category><body package="Roassal-Core">isPermissive	^ true</body></methods><methods><class-id>Roassal.ROPermissiveParent</class-id> <category>action</category><body package="Roassal-Core">on: element	"We do nothing"</body></methods><methods><class-id>Roassal.ROWiggleTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view el wiggle |	view := ROView new.	el := ROBox element.	view add: el.		self assert: el position = (0 @ 0).	wiggle := ROWiggle on: el.	self assert: el position = (0 @ 0).	self assert: wiggle elapsedCycles = 0.		view doAnimationCycle.	self assert: el position = (3 @ 0).	self assert: wiggle elapsedCycles = 1.	view doAnimationCycle.	self assert: el position = (0 @ 0).	self assert: wiggle elapsedCycles = 2.</body><body package="Roassal-Core">testToAll	| view el1 el2 |	view := ROView new.	el1 := ROBox element.	el2 := ROBox element.	view add: el1; add: el2.		ROWiggle onAll: (Array with: el1 with: el2).	view doAnimationCycle.		self assert: el1 position = (3 @ 0).	self assert: el2 position = (3 @ 0).</body></methods><methods><class-id>Roassal.ROPopup</class-id> <category>accessing</category><body package="Roassal-Core">box	^ box</body><body package="Roassal-Core">box: aROBox	 box := aROBox.</body><body package="Roassal-Core">text	^ text</body><body package="Roassal-Core">text: anObject	text := anObject</body><body package="Roassal-Core">textColor	^ textColor</body><body package="Roassal-Core">textColor: anObject	textColor := anObject</body></methods><methods><class-id>Roassal.ROPopup</class-id> <category>initialization</category><body package="Roassal-Core">initialize 	super initialize.	text := #yourself.	textColor := Color white.	box := ROBox new.</body></methods><methods><class-id>Roassal.ROPopup</class-id> <category>creation</category><body package="Roassal-Core">createElementFor: element	^ ROElement new			add: (ROElement new 					+ ((ROLabel 						text: (text roValue: element model)) color: textColor))					+ box copy;			yourself</body></methods><methods><class-id>Roassal.ROPopup class</class-id> <category>public</category><body package="Roassal-Core">text: txtBlock	^ self new text: txtBlock; yourself</body></methods><methods><class-id>Roassal.ROClusterLayout</class-id> <category>as yet unclassified</category><body package="Roassal-Core">computePosition: aNode	|children previous|		children := self childrenFor: aNode.		children do: [ :e | self computePosition: e ].													children isEmpty ifTrue: [ externalLayer first = aNode ifFalse: [ previous := externalLayer at: ( externalLayer indexOf: aNode) - 1.																											(previous father = aNode father) ifTrue: [ aNode x: previous x + (horizontalGap / 2) ] 																																			ifFalse: [ aNode x: previous x + horizontalGap] ] ]																																																ifFalse: [ aNode x: aNode leftContour x + aNode rightContour x / 2 ]</body><body package="Roassal-Core">doExecute: nodeElements 	| root gap |		root := self rootNodesFor: nodeElements .	root do: [ :e | self initializeNode: e ].	root do: [ :e | self computePosition: e ].		maxLayer := (root collect: [ :e | e layer ]) max.		(root size &gt; 1) ifTrue: [ maxLayer := maxLayer + 1 ].		maxAbcissa := externalLayer last x + horizontalGap .		gap := maxAbcissa "+ horizontalGap "/ 2 / Float pi / maxLayer.		verticalGap := verticalGap max: gap.		root do: [ :e | self draw: e. self step ].</body><body package="Roassal-Core">draw: aNode	(self childrenFor: aNode) do: [ :e | self draw: e ].		aNode translateTo: (Point radius: maxLayer - aNode layer * verticalGap theta: (maxAbcissa - aNode x / maxAbcissa) * 2 * Float pi )</body><body package="Roassal-Core">initialize 	super initialize.	verticalGap := 30.	horizontalGap := 20.	externalLayer := OrderedCollection new</body><body package="Roassal-Core">initializeNode: aNode	|children|		children := self childrenFor: aNode.		children do: [ :e | self initializeNode: e.						e father: aNode ].		children isEmpty ifTrue: [ aNode layer: 0.							externalLayer add: aNode ] 					ifFalse: [ aNode layer: ((children collect: [ :e | e layer ]) max + 1).							aNode leftContour: children first;									rightContour: children last ].</body></methods><methods><class-id>Roassal.ROAbstractCompactTree</class-id> <category>algorithm</category><body package="Roassal-Core">compareContourOf: aNode with: another	"return the number of radians the subtree induced by aNode must be displaced to be separated by a predefined distance (horizontalGap) from the one induced by anotherNode"	| difference max nodeA nodeB |	nodeB := aNode.	"the right one"	nodeA := another.	"the left one"	max := aNode = another		ifTrue: [ 0 ]		ifFalse: [ horizontalGap / 2 - (nodeB x - (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)) ].	nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.	nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1.	[ nodeB isNil not &amp; nodeA isNil not ]		whileTrue: [ 			difference := horizontalGap				-					((self getAbcissaOf: nodeB inSubtreeFromLayer: aNode layer - 1)						- (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)).			max := max max: difference.			nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.			nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1 ].	^ max</body><body package="Roassal-Core">computePosition: aNode"compute the position of the given node and of his sons recursively"	| children neighbor nodeA |		children := self childrenFor: aNode.	neighbor := self leftSiblingOf: aNode.		children isEmpty ifTrue: [ neighbor isNil ifTrue: [ aNode x: 0; mod: 0.]  											 ifFalse: [ aNode x: (neighbor x + (horizontalGap /2)); mod: (neighbor mod);													  pointer: (self followRightContour: neighbor toLayer: (aNode layer + 1)) ] ]					 					 ifFalse: [aNode leftContour: children first;									rightContour: children last.							  children do: [:e | self computePosition: e ].							      aNode x: (aNode leftContour x + aNode rightContour x + aNode rightContour mod ) /2;										mod: 0. 								neighbor isNil ifFalse: [ aNode mod: (self compareContourOf: aNode with: neighbor).																						  nodeA := (self followLeftContour: (aNode father) toLayer: (aNode layer)).													  [(self followLeftContour: nodeA toLayer: (nodeA layer + 1)) isNil ] whileFalse: [ nodeA := self followLeftContour: nodeA toLayer: (nodeA layer + 1) ].													 nodeA pointer: (self followLeftContour: aNode toLayer: (nodeA layer + 1)).																										 nodeA := self followRightContour: aNode toLayer: (aNode layer + 1).													 [(self followRightContour: nodeA toLayer: (nodeA layer +1)) isNil ] whileFalse: [ nodeA := self followRightContour: nodeA toLayer: (nodeA layer +1) ].													nodeA pointer: (self followRightContour: neighbor toLayer: (nodeA layer +1) ) ] ]</body><body package="Roassal-Core">followLeftContour: aNode toLayer: anInteger	"return the last node in the left contour begining at anode"		(aNode layer = anInteger ) ifTrue: [^ aNode  ].	(aNode layer &gt; anInteger ) ifTrue: [^ nil  ].		aNode leftContour isNil ifTrue: [ aNode pointer isNil ifTrue: [ ^ nil ] 														 ifFalse: [ ^ ( self followLeftContour: aNode pointer toLayer: anInteger ) ] ]				  				ifFalse: [ ^ (self followLeftContour: aNode leftContour toLayer: anInteger ) ]</body><body package="Roassal-Core">followRightContour: aNode toLayer: anInteger	"return the node in the right contour begining at anode in layer anInteger"	(aNode layer = anInteger ) ifTrue: [^ aNode  ].	(aNode layer &gt; anInteger ) ifTrue: [^ nil  ].	aNode rightContour isNil ifTrue: [ aNode pointer isNil ifTrue: [ ^ nil ] 														 ifFalse: [ ^ ( self followRightContour: aNode pointer toLayer: anInteger ) ] ]				  				ifFalse: [ ^ (self followRightContour: aNode rightContour toLayer: anInteger ) ]</body><body package="Roassal-Core">getAbcissaOf: aNode inSubtreeFromLayer: anInteger	| node x |		(anInteger &lt; 0) ifTrue: [^ self getAbcissaOf: aNode inSubtreeFromLayer: 0 ].		(aNode layer = anInteger ) ifTrue: [ ^ aNode x ].	(aNode layer &lt; anInteger ) ifTrue: [ ^ nil ].		x := aNode x + aNode mod.		node := aNode father.		[node layer = anInteger  ] whileFalse: [ x := x + node mod.									node := node father].									^ x</body><body package="Roassal-Core">leftSiblingOf: aNode"return the left sibling of the given node "	| children |	aNode father isNil ifTrue: ["has no sibling" ^ nil]					    ifFalse: [ children := self childrenFor: aNode father.								(children first) = aNode ifTrue: ["as no left sibling" ^ nil ]																    ifFalse: [^ children at: ((children indexOf: aNode)-1) ] ]</body><body package="Roassal-Core">nodeAbcissaWithNeighbor: aNode	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractCompactTree</class-id> <category>initialize-release</category><body package="Roassal-Core">greedyCycleRemoval: aGraph</body><body package="Roassal-Core">initialLayout: aLayout	initialLayout := aLayout</body><body package="Roassal-Core">initialize 	super initialize.	verticalGap := 20.	horizontalGap := 30.	margin := 40. 	sonsDictionary := Dictionary new</body><body package="Roassal-Core">initialize: aNode whoseFatherIs: another 	aNode father: another.		another isNil ifTrue: [ aNode layer: 0 ] ifFalse: [ aNode layer: another layer + 1 ] .		( self childrenFor: aNode ) do: [ :e | self initialize: e whoseFatherIs: aNode ]</body><body package="Roassal-Core">root: aNode 	root := aNode</body></methods><methods><class-id>Roassal.ROAbstractCompactTree</class-id> <category>hook</category><body package="Roassal-Core">coordinate: aNode withMod: aFloat	self subclassResponsibility</body><body package="Roassal-Core">doExecute: nodeElements 	| rootNodes |		initialLayout isNil  ifFalse: [ initialLayout new executeOnElements: nodeElements. ].		rootNodes := self rootNodesFor: nodeElements."	root isNil ifTrue: [ rootNodes := self rootNodesFor: nodeElements. ]			 ifFalse: [ rootNodes := Array with: root.						self coveringTreeFor: nodeElements from: root ]."		rootNodes do: [:e | self initialize: e whoseFatherIs: nil ];		do: [:e | self computePosition:e].		rootNodes  do: [:e |					self draw:e withMod: 0  ]</body><body package="Roassal-Core">draw: aNode withMod: aFloat	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractCompactTree</class-id> <category>private</category><body package="Roassal-Core">childrenFor: aNode 	sonsDictionary isEmpty ifTrue: [ ^ super childrenFor: aNode ] 							ifFalse: [ ^sonsDictionary at: aNode ifAbsent: [ ^ OrderedCollection new ] ]</body></methods><methods><class-id>Roassal.ROAbstractCompactTree class</class-id> <category>testing</category><body package="Roassal-Core">horizontalGap: anInt	| new |		new := self new.	new horizontalGap: anInt.		^ new</body><body package="Roassal-Core">horizontalGap: anInt verticalGap: another	| new |		new := self new.	new horizontalGap: anInt.	new verticalGap: another.			^ new</body><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractCompactTree</body><body package="Roassal-Core">verticalGap: anInt	| new |		new := self new.	new verticalGap: anInt.		^ new</body></methods><methods><class-id>Roassal.RORadialTreeLayout</class-id> <category>hook</category><body package="Roassal-Core">computeGap: aNode	" compute the vertical gap needed for drawing the radial tree "	| gap maxAbcissa i abc nodeL nodeR layer |		gap := 0.	maxAbcissa := 0.	layer := 1.		i := 1.	[ nodeL :=(self followLeftContour: aNode toLayer: i).	nodeR := (self followRightContour: aNode toLayer: i).	nodeL isNil not &amp; nodeR isNil not ] whileTrue: [ abc := (((self getAbcissaOf: nodeR inSubtreeFromLayer: 0) - (self getAbcissaOf: nodeL inSubtreeFromLayer: 0 ) + (horizontalGap / layer/2)) / layer).																	(abc &gt; maxAbcissa) ifTrue: [ maxAbcissa := abc. 																								layer := layer ].																	i := i + 1 ].		gap:= (maxAbcissa / 2 /Float pi ) floor +1.		((verticalGap isNil) or: [gap &gt; verticalGap])  ifTrue: [ self verticalGap: gap ]</body><body package="Roassal-Core">doExecute: nodeElements| rootNodes xOffset maximumRadius |	self executeWithoutResizeStrategy: nodeElements block: [ 		initialLayout isNil			ifFalse: [ initialLayout new executeOnElements: nodeElements ].		rootNodes := self rootNodesFor: nodeElements.		rootNodes			do: [ :e | self initialize: e whoseFatherIs: nil ];			do: [ :e | self computePosition: e. self step];			do: [ :e | self computeGap: e ];			do: [ :e | self toRadialTree: e withMod: 0 ].		xOffset := 0.		rootNodes			do: [ :e | 				maximumRadius := self radialDraw: e.				"Shifting all the subgroups"				self shiftTree: e by:  (maximumRadius+xOffset)@maximumRadius.				xOffset := xOffset + (2 * maximumRadius) + 10.  ].	].</body><body package="Roassal-Core">rotateSubtreeFrom: aNode by: aFloat		aNode theta: aNode theta + aFloat.		(self childrenFor: aNode) do: [ :e | self rotateSubtreeFrom: e by: aFloat ]</body><body package="Roassal-Core">spreadNodes: nodeElements around: aNode	|nodeL nodeR i angle beta lay1 |		i := 1.	angle := 0.		[ nodeL :=(self followLeftContour: aNode toLayer: i).	nodeR := (self followRightContour: aNode toLayer: i).	nodeL isNil not &amp; nodeR isNil not ] whileTrue: [ angle := angle max: ((nodeR theta - nodeL theta) + ((self halfDiameterOf: nodeR) + (self halfDiameterOf: nodeL) + horizontalGap  /i /verticalGap )).													i := i+1. ].	lay1 := nodeElements select: [ :e | e layer = 1 ].	beta := Float pi * 2 - angle / lay1 size.		lay1 do: [ :e | self rotateSubtreeFrom: e by: (lay1 indexOf: e) - 1 * beta ].</body></methods><methods><class-id>Roassal.RORadialTreeLayout</class-id> <category>private</category><body package="Roassal-Core">gap		^ self verticalGap</body><body package="Roassal-Core">layoutLayer: aCollection radius: oldRadius from: aFromAngle to: aToAngle		| delta childRadius maximumRadius myRadius fromAngle toAngle |	"Initialize with default value"	maximumRadius := oldRadius.	aCollection isEmpty		ifFalse:			[myRadius := oldRadius + self gap + (self maximumRadius: aCollection).			childRadius := oldRadius + self gap + (self maximumDiameter: aCollection).	"This is a purely optical tweak"			(aCollection size = 1 and: [aToAngle - aFromAngle = (2 * Float pi)])				ifTrue:					[delta := 0.4 * Float pi.					fromAngle := 0.8 * Float pi.					toAngle := fromAngle + delta]				ifFalse:					[delta := (aToAngle - aFromAngle) / aCollection size.					fromAngle := aFromAngle.					toAngle := aFromAngle + delta].			aCollection				do:					[:child | 					translator translate: child to: (Point								radius: myRadius								theta: toAngle - (delta / 2.0)).					"child						translateTo:							(Point								radius: myRadius								theta: toAngle - (delta / 2.0))."					maximumRadius := maximumRadius						max:							(self								layoutLayer: (self childrenFor: child)								radius: childRadius								from: fromAngle								to: toAngle).					fromAngle := toAngle.					toAngle := toAngle + delta]].	^maximumRadius</body><body package="Roassal-Core">moveAllElementsToTopLeft: elements	| pos min |	pos := elements collect: #position.	min := pos inject: 0 @ 0 into: [ :minimum :p | minimum min: p ].	elements do: [ :e | e translateBy: min negated ]</body></methods><methods><class-id>Roassal.RORadialTreeLayout</class-id> <category>algorithm</category><body package="Roassal-Core">compareContourOf: aNode with: another	"return the number of radians the subtree induced by aNode must be displaced to be separated by a predefined distance (horizontalGap) from the one induced by anotherNode"	| difference max nodeA nodeB |	nodeB := aNode.	"the right one"	nodeA := another.	"the left one"	max := aNode = another		ifTrue: [ 0 ]		ifFalse: [ horizontalGap / nodeB layer / 2 - (nodeB x - (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)) ].	nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.	nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1.	[ nodeB isNil not &amp; nodeA isNil not ]		whileTrue: [ 			difference := horizontalGap / nodeA layer				-					((self getAbcissaOf: nodeB inSubtreeFromLayer: aNode layer - 1)						- (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)).			max := max max: difference.			nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.			nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1 ].	^ max</body><body package="Roassal-Core">computePosition: aNode"compute the position of the given node and of his sons recursively"	| children neighbor nodeA |		children :=self childrenFor: aNode.	neighbor := self leftSiblingOf: aNode.		children isEmpty ifTrue: [ neighbor isNil ifTrue: [ aNode x: 0; mod: 0. ]  											 ifFalse: [ aNode x: (neighbor x + (horizontalGap /aNode layer /2)); mod: (neighbor mod);													  pointer: (self followRightContour: neighbor toLayer: (aNode layer + 1)) ] ]					 					 ifFalse: [aNode leftContour: children first;									rightContour: children last.							  children do: [:e | self computePosition: e ].							      aNode x: (aNode leftContour x + aNode rightContour x + aNode rightContour mod ) /2;										mod: 0. 								neighbor isNil ifFalse: [ aNode mod: (self compareContourOf: aNode with: neighbor).																						  nodeA := (self followLeftContour: (aNode father) toLayer: (aNode layer)).													  [(self followLeftContour: nodeA toLayer: (nodeA layer + 1)) isNil ] whileFalse: [ nodeA := self followLeftContour: nodeA toLayer: (nodeA layer + 1) ].													 nodeA pointer: (self followLeftContour: aNode toLayer: (nodeA layer + 1)).																										 nodeA := self followRightContour: aNode toLayer: (aNode layer + 1).													 [(self followRightContour: nodeA toLayer: (nodeA layer +1)) isNil ] whileFalse: [ nodeA := self followRightContour: nodeA toLayer: (nodeA layer +1) ].													nodeA pointer: (self followRightContour: neighbor toLayer: (nodeA layer +1) ) ] ].</body><body package="Roassal-Core">diameterOf: aNode	|diam|		(aNode shapes first isKindOf: ROEllipse) ifTrue: [ diam := aNode width max: aNode height ]										ifFalse: [ diam := (aNode width * aNode width + (aNode height * aNode height)) sqrt floor ].		^ diam</body><body package="Roassal-Core">halfDiameterOf: aNode	|diam|		(aNode shapes first isKindOf: ROEllipse) ifTrue: [ diam := aNode width max: aNode height ]										ifFalse: [ diam := (aNode width * aNode width + (aNode height * aNode height)) sqrt floor ].		^ diam / 2</body><body package="Roassal-Core">nodeAbcissaWithNeighbor: aNode	^ aNode x + (horizontalGap / aNode layer /2) + ((self halfDiameterOf: aNode) / aNode layer)</body><body package="Roassal-Core">radialDraw: aNode	"draw the subtree induced by the given node"	| children r max |	r := aNode r.	translator translate: aNode to: (Point radius: r theta: (aNode theta)).	"aNode translateTo: (Point radius: (aNode r) theta: (aNode theta))."	children := self childrenFor: aNode.	max := 0.	children do: [ :e | max := max max: (self radialDraw: e) ].	^ r + max.</body><body package="Roassal-Core">toRadialTree: aNode withMod: aFloat	"compute polar coordinates of the subtree induced by anode from its cartesian coordinates "	| children |	aNode r: (aNode layer * verticalGap ).	(aNode r = 0) ifTrue: [ aNode theta: 0 ] 					ifFalse: [aNode theta: (aNode x + aFloat + aNode mod) / verticalGap ].		children := self childrenFor: aNode.		children do: [ :e | self toRadialTree: e withMod: ( aNode mod + aFloat) ]</body></methods><methods><class-id>Roassal.ROTranslationTest</class-id> <category>tests</category><body package="Roassal-Core">testDraggingOnTheTopLeftCorner	| view outterNode innerNode1 innerNode2 |	view := ROView new.	view @ RODraggable.		outterNode := ROElement new.	outterNode + (ROBox new extent: 50 @ 50).		innerNode1 := ROElement new.	innerNode1 + (ROBox blue extent: 10 @ 10).		innerNode2 := ROElement new.	innerNode2 + (ROBox green extent: 10 @ 10).	outterNode add: innerNode1.	outterNode add: innerNode2.		view add: outterNode.	" view open "		"Witout dragging"	self assert: innerNode1 position = (5 @ 5).	self assert: innerNode2 position = (5 @ 5).	"Dragging innerNode"	innerNode1 translateBy: -10 @ -10.	self assert: innerNode1 position = (0 @ 0).	self assert: innerNode2 position = (10 @ 10).</body></methods><methods><class-id>Roassal.ROAbsorbLayoutTranslatorTest</class-id> <category>tests</category><body package="Roassal-Core">testLayout	layout translator: ROAbsorbLayoutTranslator new.	layout applyOn: elements.	self assert: ((elements collect: #position) asSet asArray first = (0@0))</body></methods><methods><class-id>Roassal.ROContainerCallbackTest</class-id> <category>tests</category><body package="Roassal-Core">testGridLayout	| view c1 c2 el1 el2 |	view := ROView new.	view callback: (ROContainerCallbackLayout new layout: ROGridLayout new).	c1 := ROBorder element.	c1 callback: (ROContainerCallbackLayout new layout: ROGridLayout new).	view add: c1.	c1 add: (el1 := ((ROBox gray extent: (20 @ 20)) element)).	c1 add: (ROBox gray extent: (20 @ 20)) element.		c2 := ROBorder element.	c2 callback: (ROContainerCallbackLayout new layout: ROGridLayout new).	view add: c2.	c2 add: (el2 := (ROBox red extent: (20 @ 20)) element).	c2 add: (ROBox red extent: (20 @ 20)) element.	"	view open."	 	self assert: c1 bounds =  ((5@5) corner: (65@35)).	self assert: el2 absolutePosition = (80 @ 10).		el1 extent: 40 @ 40.  	self assert: el2 absolutePosition =  (100 @ 10).	self assert: c1 bounds = ( (5@5) corner: (85@55))</body><body package="Roassal-Core">testResize	| container element |	container := ROElement on: 'container'.	container callback: (ROContainerCallbackLayout new layout: ROHorizontalLineLayout new). 	element := ROElement on: 'child'.	element callback: (ROContainerCallbackLayout new layout: ROHorizontalLineLayout new). 	element extent: (5 @ 5).	container add: element.		self assert: container extent = (15 @ 15). 	self assert: element extent = (5 @ 5).	element extent: (10 @ 10).	self assert: container extent = (20 @ 20). 	self assert: element extent = (10 @ 10).</body></methods><methods><class-id>Roassal.ROExtensibleParent</class-id> <category>action</category><body package="Roassal-Core">on: element	ROAdjustSizeOfNesting on: element</body></methods><methods><class-id>Roassal.ROExtensibleParent</class-id> <category>testing</category><body package="Roassal-Core">isExtensible	^ true</body></methods><methods><class-id>Roassal.ROCanvasWrapper</class-id> <category>accesing</category><body package="Roassal-Core">camera		^canvas camera</body><body package="Roassal-Core">camera: aROCamera	canvas camera: aROCamera </body><body package="Roassal-Core">canvas	^canvas</body><body package="Roassal-Core">canvas: aROCanvas	canvas := aROCanvas</body></methods><methods><class-id>Roassal.ROCanvasWrapper</class-id> <category>rendering</category><body package="Roassal-Core">drawString: aByteString at: aPoint 		canvas drawString: aByteString at: aPoint </body><body package="Roassal-Core">drawString: aByteString at: aPoint color: color		canvas drawString: aByteString at: aPoint color: color</body><body package="Roassal-Core">drawString: aByteString at:  p font: f color: color		canvas drawString: aByteString at:  p font: f color: color</body><body package="Roassal-Core">fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 		canvas fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 </body><body package="Roassal-Core">fillRectangle: aRectangle color: fillColor 		canvas fillRectangle: aRectangle color: fillColor </body><body package="Roassal-Core">form		^canvas form</body><body package="Roassal-Core">frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor 		canvas frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor </body><body package="Roassal-Core">line: aPoint to: aPoint2 width: aSmallInteger color: aColor 		canvas line: aPoint to: aPoint2 width: aSmallInteger color: aColor </body><body package="Roassal-Core">paintBackground: backgroundColor	canvas paintBackground: backgroundColor</body><body package="Roassal-Core">paintImage: aForm at: aPoint		canvas paintImage: aForm at: aPoint</body></methods><methods><class-id>Roassal.ROCanvasWrapper class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">onCanvas: aROCanvas 	^self new canvas: aROCanvas</body></methods><methods><class-id>Roassal.ROHTMLElementShapeVisitor</class-id> <category>accesing</category><body package="Roassal-Core">node		^aNode</body><body package="Roassal-Core">node: node	aNode := node</body><body package="Roassal-Core">nodeID: aNumber	nodeID := aNumber	</body><body package="Roassal-Core">nodeParentID: aNumber	nodeParentID := aNumber	</body></methods><methods><class-id>Roassal.ROHTMLElementShapeVisitor</class-id> <category>stream</category><body package="Roassal-Core">addBorderColorToStream: aShape	| nodeBorderColor |		nodeBorderColor := attributes at: #borderColor.		nodeBorderColor ifNotNil: [		stream 			nextPutAll: ', ';			nextPutAll: ('nodeBorderColor: "&lt;1s&gt;"' expandMacrosWith: nodeBorderColor)]. 	</body><body package="Roassal-Core">addBorderWidthToStream: aShape		|borderWidth|		borderWidth := attributes at: #borderWidth.		borderWidth ifNotNil: [		stream 			nextPutAll: ', ';			nextPutAll: ('nodeBorderWidth: "&lt;1p&gt;"' expandMacrosWith: borderWidth)].</body><body package="Roassal-Core">addBoundsToStream: aShape	| nodeWidth nodeHeight |		nodeWidth := aNode width.	nodeHeight := aNode height.		stream		nextPutAll: ('nodeWidth: &lt;1p&gt;' expandMacrosWith: nodeWidth); 		nextPutAll: ', ';		nextPutAll: ('nodeHeight: &lt;1p&gt;' expandMacrosWith: nodeHeight).</body><body package="Roassal-Core">addEndToStream	stream 		nextPutAll: '},'.</body><body package="Roassal-Core">addFillColorToStream: aShape	| nodeFillColor |		nodeFillColor := attributes at: #fillColor.	nodeFillColor ifNotNil: [		stream 			nextPutAll: ', ';			nextPutAll: ('nodeFillColor: "&lt;1s&gt;"' expandMacrosWith: nodeFillColor)] .</body><body package="Roassal-Core">addInteractionToStream: aShape		| draggable |		draggable := aNode is: RODraggable.		stream 		nextPutAll: ', ';		nextPutAll: ('draggable: "&lt;1p&gt;"' expandMacrosWith: draggable).</body><body package="Roassal-Core">addNodeInfoToStream: aShape	| nodeModel |		nodeModel := attributes at: #text.	stream 		nextPutAll: ('nodeID: &lt;1p&gt;' expandMacrosWith: nodeID); 		nextPutAll: ', ';		nextPutAll: ('nodeParentID: &lt;1s&gt;' expandMacrosWith: nodeParentID).			nodeModel ifNotNil: [		stream 			nextPutAll: ', ';			nextPutAll: ('nodeModel: "&lt;1s&gt;"' expandMacrosWith: nodeModel)] . </body><body package="Roassal-Core">addPositionToStream: aShape	| position |		position := attributes at: #position.	stream		nextPutAll: ('x: &lt;1p&gt;' expandMacrosWith: position x); 		nextPutAll: ', ';		nextPutAll: ('y: &lt;1p&gt;' expandMacrosWith: position y).		</body><body package="Roassal-Core">addSeparationToStream	stream		nextPutAll: ', '.</body><body package="Roassal-Core">addShapeNameToStream: aShape	|nodeShape|		nodeShape := aShape class name asString.	stream		nextPutAll: ('nodeShape: "&lt;1s&gt;"' expandMacrosWith: nodeShape).</body><body package="Roassal-Core">addStartToStream	stream 		nextPutAll: '{ '.</body><body package="Roassal-Core">addToStream: aShape	self addStartToStream.	self addNodeInfoToStream: aShape.	self addSeparationToStream.	self addShapeNameToStream: aShape.	self addSeparationToStream.	self addBoundsToStream: aShape.	self addSeparationToStream.	self addPositionToStream: aShape.	self addFillColorToStream: aShape.	self addBorderColorToStream: aShape.	self addBorderWidthToStream: aShape.	self addInteractionToStream: aShape.	self addEndToStream.		</body></methods><methods><class-id>Roassal.ROHTMLElementShapeVisitor</class-id> <category>util</category><body package="Roassal-Core">labelOffset	^0@10</body><body package="Roassal-Core">setLabelPositionFor: aShape	attributes 		at: #position 		put: ((aNode view camera virtualToRealPoint: aNode topLeft) + self labelOffset).</body><body package="Roassal-Core">setPositionFor: aShape	attributes 		at: #position 		put: (aNode view camera virtualToRealPoint: aNode topLeft).</body></methods><methods><class-id>Roassal.ROHTMLElementShapeVisitor</class-id> <category>visit</category><body package="Roassal-Core">visitAbstractLabel: aShape	attributes at: #borderColor put: (aShape color roValue: aNode) asHTMLColor.	attributes at: #borderWidth put: nil.	attributes at: #fillColor put: 'none'.	attributes at: #text put: (aShape textAdaptedFor: aNode).	self setLabelPositionFor: aShape.	self addToStream: aShape.</body><body package="Roassal-Core">visitBorder: aShape	attributes at: #borderColor put: (aShape color roValue: aNode) asHTMLColor.	attributes at: #borderWidth put: nil.	attributes at: #fillColor put: 'none'.	attributes at: #text put: nil.	self setPositionFor: aShape.	self addToStream: aShape.</body><body package="Roassal-Core">visitBox: aShape	attributes at: #borderColor put: (aShape borderColor roValue: aNode)  asHTMLColor.	attributes at: #borderWidth put: (aShape borderWidth roValue: aNode).	attributes at: #fillColor put: (aShape colorFor: aNode)  asHTMLColor.	attributes at: #text put: nil.	self setPositionFor: aShape.	self addToStream: aShape.</body><body package="Roassal-Core">visitCircle: aShape	attributes at: #borderColor put: (aShape borderColor roValue: aNode)  asHTMLColor.	attributes at: #borderWidth put: (aShape borderWidth roValue: aNode).	attributes at: #fillColor put: (aShape colorFor: aNode)  asHTMLColor.	attributes at: #text put: nil.	self setPositionFor: aShape.	self addToStream: aShape.</body><body package="Roassal-Core">visitNullShape: aShape</body></methods><methods><class-id>Roassal.ROAbstractPopupTest</class-id> <category>tests</category><body package="Roassal-Core">testDefaultReceivingView	| el |	view := ROView new.	el := ROElement on: 123.	el @ self classToTest.	view add: el.		self assert: view numberOfElements = 1.	el announce: ROMouseEnter.	self assert: view numberOfElements = 2.	el announce: ROMouseLeave.	self assert: view numberOfElements = 1.</body><body package="Roassal-Core">testReceivingView	| el view2 |	view := ROView new.	view2 := ROView new.	el := ROElement on: 123.	el @ (ROPopup new receivingView: view2).	view add: el.		self assert: view numberOfElements = 1.	self assert: view2 numberOfElements = 0.	el announce: ROMouseEnter.	self assert: view numberOfElements = 1.	self assert: view2 numberOfElements = 1.	el announce: ROMouseLeave.	self assert: view numberOfElements = 1.	self assert: view2 numberOfElements = 0.</body><body package="Roassal-Core">testReceivingViewWithStack	| el stack |	view := ROView new.	stack := ROViewStack new.	el := ROElement on: 123.	el @ (ROPopup new receivingView: stack).	view add: el.	stack addView: view.			self assert: view numberOfElements = 1.	self assert: stack numberOfElements = 0.	el announce: ROMouseEnter.	self assert: view numberOfElements = 1.	self assert: stack numberOfElements = 1.	el announce: ROMouseLeave.	self assert: view numberOfElements = 1.	self assert: stack numberOfElements = 0.</body></methods><methods><class-id>Roassal.ROAbstractPopupTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	view := ROView new.</body></methods><methods><class-id>Roassal.ROAbstractPopupTest</class-id> <category>hooks</category><body package="Roassal-Core">classToTest	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractPopupTest class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractPopupTest</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>receiving view</category><body package="Roassal-Core">testPositionWithReceivingView	| el receivingView |	receivingView := ROView new.	view := ROView new.	el := ROElement sprite.	el translateTo: 50@25.	el @ (ROPopup new receivingView: receivingView).	view add: el.	view camera windowSize: 500 @ 500.	receivingView camera windowSize: 500 @ 500.	el announce: ROMouseEnter.	popup := receivingView elements first.	self assert: popup position =  (10@10).</body><body package="Roassal-Core">testWithReceivingView	| el receivingView |	receivingView := ROView new.	view := ROView new.	el := ROElement sprite.	el @ (ROPopup new receivingView: receivingView).	view add: el.		self assert: view elements size = 1.	self assert: receivingView elements isEmpty.		el announce: ROMouseEnter.	self assert: view elements size = 1.	self assert: receivingView elements size = 1.		el announce: ROMouseLeave.	self assert: view elements size = 1.	self assert: receivingView elements isEmpty.		el announce: ROMouseLeave.	self assert: view elements size = 1.	self assert: receivingView elements isEmpty.</body><body package="Roassal-Core">testWithoutReceivingView	| el |	view := ROView new.	el := ROElement sprite.	el @ ROPopup.	view add: el.		self assert: view elements size = 1.	el announce: ROMouseEnter.	self assert: view elements size = 2.	el announce: ROMouseLeave.	self assert: view elements size = 1.	el announce: ROMouseLeave.	self assert: view elements size = 1.</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>position in a stack</category><body package="Roassal-Core">testPositionInAStack	| stack element |	element := (ROElement on: 'an element').	element + (ROLabel new color: Color gray) @ ROPopup.	view := ROView new.	view add: element.	view @ RODraggable.		view @ RODraggable.		stack := ROViewStack new.	stack addView: view."	stack open"	stack camera windowSize: 500 @ 500.	view camera windowSize: 500 @ 500.		self assert: (view numberOfElements = 1).		element announce: ROMouseEnter.		self assert: (view numberOfElements = 2).	popup := (view elementsSuchThat: [ :el | el ~~ element ]) first.	self assert: popup position = (element position + ROPopup defaultPopupOffset).	"The popup is not displayed anymore"	element announce: ROMouseLeave.		self assert: (view numberOfElements = 1).		element translateBy: 40@60.	element announce: (ROMouseEnter new realPosition: 40 @ 60).	popup := (view elementsSuchThat: [ :el | el ~~ element ]) first.	self assert: popup position = ((40 @ 60) + ROPopup defaultPopupOffset).</body><body package="Roassal-Core">testPositionInAStack2	| stack element |	element := (ROElement on: 'an element').	element + (ROLabel new color: Color gray) @ ROPopup.	view := ROView new.	view add: element.	view @ RODraggable.		view @ RODraggable.		stack := ROViewStack new.	stack addView: view."	stack open"	stack camera windowSize: 500 @ 500.	view camera windowSize: 500 @ 500.	self assert: (view numberOfElements = 1).		element announce: ROMouseEnter.		self assert: (view numberOfElements = 2).	popup := (view elementsSuchThat: [ :el | el ~~ element ]) first.	self assert: popup position = (element position + ROPopup defaultPopupOffset).	"The popup is not displayed anymore"	element announce: ROMouseLeave.		self assert: (view numberOfElements = 1).		view translateBy: 40@60.	element announce: (ROMouseEnter new realPosition: 40@60).	popup := (view elementsSuchThat: [ :el | el ~~ element ]) first.	self assert: popup position = (element position + ROPopup defaultPopupOffset).</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>subview</category><body package="Roassal-Core">testSubview	| canvas oldCamera viewDisplayerShape element |	view := ROMondrianViewBuilder new.		canvas := RONullCanvas new.	oldCamera := canvas camera.	viewDisplayerShape := ROViewDisplayer new view: view raw; yourself.	element := ROElement new.	element + viewDisplayerShape.		element drawOn: canvas.		self assert: canvas camera == view raw camera.			</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>running</category><body package="Roassal-Core">setUp	| el |	super setUp.	popupView := ROView new.	el := (ROElement new extent: 50@60)+ (ROBox new color: Color blue).	popupView add: el.	</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>size</category><body package="Roassal-Core">testSize	| v2 raw el |	v2 := ROView new.	v2 add: ((ROElement new extent: 90@20) + ROBox green).	raw := ROView new.	el := ROElement new extent: 150@ 60.	el + (ROBox new).	el @ RODraggable.	el @ (ROPopupView view: v2). 	raw add: el.		self assert: v2 encompassingRectangle = ( (0@0) corner: (90@20))</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>hooks</category><body package="Roassal-Core">classToTest	^ ROPopupView</body></methods><methods><class-id>Roassal.ROPopupViewTest</class-id> <category>animation</category><body package="Roassal-Core">notWorkingTestAnimation	| element |	view := ROMondrianViewBuilder new.	view interaction popupView: [ :e :v |  		v shape rectangle size: 80; fillColor: Color black.  		ROColorAlphaFading new for: (v node: 123) nbCycles: 200. ].	view shape label.	element := view node: 'Hello'.	self assert: view raw numberOfElements = 1.		self assert: view stack numberOfElements = 0.	self assert: view stack numberOfAnimations = 0.	element announce: ROMouseEnter.	self assert: view stack numberOfElements = 1.	self assert: view stack numberOfAnimations = 1.</body><body package="Roassal-Core">testAnimation	| element |	view := ROMondrianViewBuilder new.	view interaction popupView: [ :e :v |  		v shape rectangle size: 80; fillColor: Color black.  		ROColorAlphaFading new for: (v node: 123) nbCycles: 200. ].	view shape label.	element := view node: 'Hello'.	self assert: view raw numberOfElements = 1.		self assert: view stack numberOfElements = 0.	self assert: view stack numberOfAnimations = 0.	element announce: ROMouseEnter.	self assert: view stack numberOfElements = 1."	self assert: view stack numberOfAnimations = 1."</body></methods><methods><class-id>Roassal.ROAnnouncer</class-id> <category>forwarding</category><body package="Roassal-Core">forward	self forward: ROEvent</body><body package="Roassal-Core">forward: anEventClass	forwarding ifNil: [ forwarding := IdentitySet new ].	forwarding add: anEventClass</body></methods><methods><class-id>Roassal.ROAnnouncer</class-id> <category>testing</category><body package="Roassal-Core">isForwarded: anEventClass	anEventClass isBehavior ifFalse: [ ^ self isForwarded: anEventClass class ].	 	forwarding ifNil: [ ^ false ].	^ forwarding anySatisfy: [ :c | (c == anEventClass) or: [ anEventClass inheritsFrom: c ] ] </body><body package="Roassal-Core">isForwarder	^ forwarding notNil and: [ forwarding notEmpty ]</body></methods><methods><class-id>Roassal.ROAnnouncer</class-id> <category>announce</category><body package="Roassal-Core">announce: event	(self isForwarded: event) 		ifTrue: [ self sendToParent: event ]		ifFalse: [ super announce: event ]</body><body package="Roassal-Core">sendToParent: event	"Do nothing if an event class"	event isBehavior ifTrue: [ ^ self ].		event hasElement ifTrue: [ event element parentAnnounce: event ]</body><body package="Roassal-VWSpecific">unsubscribeForEvent: aEventClass	| subscription |	subscriptionRegistry isNil ifTrue:[^self].	subscription := subscriptionRegistry subscriptionsFor: aEventClass.	subscriptionRegistry removeSubscriptions: subscription</body></methods><methods><class-id>Roassal.ROAnnouncer</class-id> <category>announcements-configuring</category><body package="Roassal-VWSpecific">when: anAnnouncementOrSymbol do: aBlock	"One difference between Pharo and Visualworks, is that in VW a block does not  know about from which object it comes from. This is somehow incompatible with the fact that subscribing using when:do: the receiver has to be know.	We assume that ROAnnouncer&gt;&gt;when:do: is only called by ROElement&gt;&gt;on:do:, itself called by the object that subscribe to the event. In Pharo, there is no such a need since 'aBlock receiver ' works."	| v |	v := thisContext.	^ self when: anAnnouncementOrSymbol do: aBlock for: v sender sender receiver "aBlock receiver"</body></methods><methods><class-id>Roassal.ROCircleLayout</class-id> <category>hook</category><body package="Roassal-Core">computeIncrementalAngleFor: elements	"Return the value _in radian_ of the incremental angle"		^ initialIncrementalAngle = 0		ifTrue: [ 2 * Float pi / elements size ]		ifFalse: [ initialIncrementalAngle ]</body><body package="Roassal-Core">computeRadiusFor: elements	"Return the radius of the circle. If none has been set (i.e., initialRadius = 0), then it is computed as the scale factor times the number of elements"	^ initialRadius = 0 		ifTrue: [ elements size * self scaleFactor ]		ifFalse: [ initialRadius ]</body><body package="Roassal-Core">doExecute: elements	| angleIncrement angle rad center |	rad := self computeRadiusFor: elements.	center := Point x: rad y: rad.	angleIncrement := self computeIncrementalAngleFor: elements.	angle := self initialAngle.	elements		do: [ :each | 			| point |			point := center + (Point radius: rad theta: angle).			angle := angle + angleIncrement.			translator translate: each to: point.			self step ]</body></methods><methods><class-id>Roassal.ROCircleLayout class</class-id> <category>instance creation</category><body package="Roassal-Core">scaleBy: aNumber		^self new scaleBy: aNumber</body></methods><methods><class-id>Roassal.ROContainerCallback</class-id> <category>calling</category><body package="Roassal-Core">addElement: element in: parentElement	self subclassResponsibility</body><body package="Roassal-Core">childrenHasBeenResized: container	"One of my children has been resized"	self subclassResponsibility</body><body package="Roassal-Core">element: element resizedTo: aPoint	self subclassResponsibility</body><body package="Roassal-Core">removeAllElementsFrom: anElement	self subclassResponsibility</body><body package="Roassal-Core">removeElement: element in: parentElement	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROContainerCallback class</class-id> <category>instance creation</category><body package="Roassal-Core">instance	^ self new</body></methods><methods><class-id>Roassal.ROContainerCallbackNull</class-id> <category>calling</category><body package="Roassal-Core">addElement: element in: parentElement	"do nothing"</body><body package="Roassal-Core">childrenHasBeenResized: container	"One of my children has been resized"	"do nothing"</body><body package="Roassal-Core">element: anElement resizedTo: aPoint	"do nothing"</body><body package="Roassal-Core">removeAllElementsFrom: anElement	"do nothing"</body><body package="Roassal-Core">removeElement: element in: parentElement	"do nothing"</body></methods><methods><class-id>Roassal.ROContainerCallbackNull class</class-id> <category>instance creation</category><body package="Roassal-Core">instance	"Singleton pattern"	instance ifNil: [ instance := self new ].	^ instance</body></methods><methods><class-id>Roassal.ROHTMLExporter</class-id> <category>html file</category><body package="Roassal-Core">addDataSet: fileStream	visitor :=ROHTMLVisitor new runOn: view.	fileStream 		nextPutAll: 'var dataset = {		';		nextPutAll: visitor nodesStream contents ;		nextPutAll: visitor linksStream contents ;		nextPutAll: '	};';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addEndBody: fileStream	fileStream 		nextPutAll: '    &lt;/script&gt;  &lt;/body&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addEndHTML: fileStream	fileStream 		nextPutAll: '&lt;/html&gt;'</body><body package="Roassal-Core">addHeader: fileStream	fileStream 		nextPutAll: '  &lt;head&gt;    &lt;script type="text/javascript" src="d3.v2.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="jquery-1.4.2.min.js"&gt;&lt;/script&gt;     &lt;script type="text/javascript" src="jquery.tipsy.js"&gt;&lt;/script&gt;    &lt;script type="text/javascript" src="RODraggingAndUtil.js"&gt;&lt;/script&gt;    &lt;link href="tipsy.css" rel="stylesheet" type="text/css" /&gt;  &lt;/head&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addRenderingEdges: fileStream	fileStream 		nextPutAll: '/***** RENDERING LINKS*****/	var links = dataset.links;	var path = vis.selectAll("path")		  .data(links);	path.enter().append("path")		.attr("d", elbow)		.attr("stroke", function(d) {return d.edgeColor});';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addRenderingNodes: fileStream	self addSelectNodesDeclaration: fileStream.	self addROElementDeclaration: fileStream.	self addRectangleDeclaration: fileStream.	self addEllipseDeclaration: fileStream.	self addTextDeclaration: fileStream.	fileStream		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addRenderingPopup: fileStream	fileStream 		nextPutAll: '/*****POPUP*****/    $("svg g").tipsy({         gravity: "w",         html: true,         title: function() {          var d = this.__data__;          return d.nodeModel + "&lt;/span&gt;";         }	});';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addSVGInitialization: fileStream	|extent|	extent := view encompassingRectangle extent + view camera extent .	fileStream 		nextPutAll: '/*****INITIALIZATION*****/		var drag = d3.behavior.drag()		.origin(Object)		.on("dragstart", dragstart)        .on("drag", dragmove)        .on("dragend", dragend);';		nextPutAll: ('var w = &lt;1p&gt;, h = &lt;2p&gt;;' expandMacrosWith: extent x with: extent y);  	     nextPutAll: 'var vis = d3.select("#chart").append("svg:svg")          .attr("width", w)          .attr("height", h);';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addStartBody: fileStream	fileStream 		nextPutAll: '    &lt;body&gt;    &lt;div id="chart"&gt;&lt;/div&gt;    &lt;script type="text/javascript"&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addStartHTML: fileStream	fileStream 		nextPutAll: '  &lt;!DOCTYPE html&gt;&lt;html&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">exportOnStream: stream	|  rect oldPosition|	rect := view encompassingRectangle.	oldPosition := view camera position.	view translateTo: rect origin negated.		self addStartHTML: stream.	self addHeader: stream.	self addStartBody: stream.	self addDataSet: stream.	self addSVGInitialization: stream.	self addRenderingNodes: stream.	self addRenderingEdges: stream.	self addRenderingPopup: stream.	self addEndBody: stream.	self addEndHTML: stream.		view translateTo: oldPosition negated .</body></methods><methods><class-id>Roassal.ROHTMLExporter</class-id> <category>declarations</category><body package="Roassal-Core">addEllipseDeclaration: fileStream	fileStream 		nextPutAll: '	var nodes = roElements.selectAll("ellipse")         .data(function(d) { return getChildrenNodesByParentIDAndShape(d.nodeID, "ROEllipse")})       .enter().append("svg:ellipse")         .attr("id", function(d) { return d.nodeID; } )         .attr("stroke", function(d) { return d.nodeBorderColor; } )         .attr("stroke-width", function(d) { return d.nodeBorderWidth; } )         .attr("fill", function(d) { return d.nodeFillColor; } )         .attr("draggable", function(d) { return d.draggable; } )         .attr("cx", function(d) { return d.x + d.nodeWidth/2; })         .attr("cy", function(d) { return d.y + d.nodeHeight/2; })		 .attr("rx", function(d) { return d.nodeWidth/2; } )         .attr("ry", function(d) { return d.nodeHeight/2; } )         .attr("nodeParentID", function(d) { return d.nodeParentID } )		.call(drag);';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addROElementDeclaration: fileStream	fileStream 		nextPutAll: '	var roElements = vis.selectAll("g").data(dataROElement);	roElements.enter().append("g")		 .attr("id", function(d) { return d.nodeID; } )		 .attr("draggable", function(d) { return d.draggable; } )		 .attr("x", function(d) { return d.x; })         .attr("y", function(d) { return d.y; })		 .attr("width", function(d) { return d.nodeWidth; } )         .attr("height", function(d) { return d.nodeHeight; } )		 .attr("nodeParentID", function(d) { return d.nodeParentID } );';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addRectangleDeclaration: fileStream	fileStream 		nextPutAll: '	var roBorders = roElements.selectAll("rect")         .data(function(d) { return (getChildrenNodesByParentIDAndShape(d.nodeID, "ROBorder")).concat(getChildrenNodesByParentIDAndShape(d.nodeID, "ROBox")) })       .enter().append("svg:rect")		 .attr("id", function(d) { return d.nodeID; } )         .attr("stroke", function(d) { return d.nodeBorderColor; } )         .attr("stroke-width", function(d) { return d.nodeBorderWidth; } )	   .attr("fill", function(d) { return d.nodeFillColor; } )         .attr("draggable", function(d) { return d.draggable; } )         .attr("x", function(d) { return d.x; })         .attr("y", function(d) { return d.y; })		 .attr("width", function(d) { return d.nodeWidth; } )         .attr("height", function(d) { return d.nodeHeight; } )         .attr("nodeParentID", function(d) { return d.nodeParentID } )		.call(drag);';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addSelectNodesDeclaration: fileStream	fileStream 		nextPutAll: '/***** RENDERING NODES*****/	var dataROBox = getNodesByShape("ROBorder");	var dataROCircle = getNodesByShape("ROCircle");	var dataROLabel = getNodesByShape("ROLabel");	var dataROElement = getNodesByShape("ROElement");';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">addTextDeclaration: fileStream	fileStream 		nextPutAll: '	var roLabel = roElements.selectAll("text")         .data(function(d) { return getChildrenNodesByParentIDAndShape(d.nodeID, "ROLabel")})       .enter().append("svg:text")         .attr("stroke", "black")         .attr("draggable", function(d) { return d.draggable; } )         .attr("id", function(d) { return d.nodeID; } )         .attr("x", function(d, id) { return d.x; })         .attr("y", function(d, id) { return d.y; })         .text(function(d) { return d.nodeModel; })         .attr("nodeParentID", function(d) { return d.nodeParentID } )	   .attr("font-size", 10)		.call(drag);'.</body></methods><methods><class-id>Roassal.ROHTMLExporter</class-id> <category>accessing</category><body package="Roassal-Core">view: aROView	view := aROView 	</body></methods><methods><class-id>Roassal.ROHTMLExporter class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">exportViewAsHTML: view	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROEventTest</class-id> <category>tests</category><body package="Roassal-Core">testEmitToParent	| t spr sprInner |	t := 0.	spr := ROElement new.	spr on: ROMouseEnter do: [ :evt | t := t + 10 ].		sprInner := ROElement new.	sprInner on: ROMouseEnter do: [ :evt | t := t + 1. evt emitToParent ].	spr add: sprInner.		sprInner announce: ROMouseEnter.	self assert: t = 11.		</body><body package="Roassal-Core">testNoSentToParent	| t spr sprInner |	t := 0.	spr := ROElement new.	spr on: ROMouseEnter do: [ :evt | t := t + 10 ].		sprInner := ROElement new.	sprInner on: ROMouseEnter do: [ :evt | t := t + 1.  ].	spr add: sprInner.		sprInner announce: ROMouseEnter.	self assert: t = 1.		</body><body package="Roassal-Core">testPositionNotNil	| event |	ROComponentEvent withAllSubclasses do: [ :cls | 		event := cls new.		self assert: event position = (0@0)		 ]</body><body package="Roassal-Core">testProperlyInitialized 	| event |	ROEvent withAllSubclasses do: [ :cls | 		event := cls new.		self shouldnt: 				[ (event class selectors select: [ :k | k ~= #= and: [(k includes: ':' first) not ] ]) do: [ :k | event perform: k ] ] 				raise: Error ]</body></methods><methods><class-id>Roassal.ROEventTest</class-id> <category>layout</category><body package="Roassal-Core">assertLayout: layout	| element1 element2 view events |	element1 := ROElement sprite.	element2 := ROElement sprite.		view := ROView new.	view add: element1; add: element2.		self assert: view elements size = 2.	events := OrderedCollection new.	layout on: ROLayoutBegin do: [ :event | events add: event ].	layout on: ROLayoutEnd do: [ :event | events add: event ].		self assert: events isEmpty.		"------- We do the layout"	layout on: view elements.		self assert: events size = 2.	self assert: events first class == ROLayoutBegin.	self assert: events second class == ROLayoutEnd.</body><body package="Roassal-Core">testLayoutEvent	| classesToExclude |	classesToExclude := OrderedCollection new.	classesToExclude add: ROTreeMapLayout.		(ROLayout withAllSubclasses reject: [ :cls | classesToExclude includes: cls ] ) do: [ :cls | 		cls isNotAbstract ifTrue: [ self assertLayout: cls new ] ]</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>computing attach point</category><body package="Roassal-Core">endingPointOf: anEdge	 ^ attachPoint endingPointOf: anEdge</body><body package="Roassal-Core">startingPointOf: anEdge	^ attachPoint startingPointOf: anEdge</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge 	| maxArrowSize unit startingPoint endingPoint rawStartingPoint rawEndingPoint |						rawEndingPoint  := (self startingPointOf: anEdge).	rawStartingPoint := (self endingPointOf: anEdge).	(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ self ].		"We draw a line before each arrow"	arrows do: [ :arrow | 		| arr |		arr := arrow drawOn: aCanvas for: anEdge line: self.		aCanvas 			line: rawStartingPoint 			to: arr first 			width: (self widthFor: anEdge) 			color: (self colorFor: anEdge).		rawStartingPoint := arr second.		 ].		"We draw a line after the arrow"	aCanvas line: rawStartingPoint to: rawEndingPoint width: (self widthFor: anEdge) color: (self colorFor: anEdge).</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>visitor</category><body package="Roassal-Core">accept: visitor	visitor visitAbstractLine: self</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>public</category><body package="Roassal-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock	^ ROEdge buildEdgesFromElements: elements from: fromBlock to: toBlock using: self</body><body package="Roassal-Core">elementFrom: fromElement to: toElement	"Easy way to create element from a shape"		^ (ROEdge from: fromElement to: toElement) + self</body><body package="Roassal-Core">elementOn: object	"Easy way to create element from a shape"		^ (ROEdge on: object) + self</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>hooks</category><body package="Roassal-Core">defaultShape 	^ RONullShape new</body><body package="Roassal-Core">lineSegmentsFor: anEdge	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>accessing</category><body package="Roassal-Core">add: aROArrow 	arrows add: aROArrow</body><body package="Roassal-Core">attachPoint		^ attachPoint</body><body package="Roassal-Core">attachPoint: attach	"attach is an object, instance of a subclass of ROAttachPoint"	attachPoint := attach</body><body package="Roassal-Core">width	^ strokeWidth</body><body package="Roassal-Core">width: aNumber	strokeWidth := aNumber</body><body package="Roassal-Core">widthFor: anEdge	^ self width roValue: anEdge</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>testing</category><body package="Roassal-Core">contains: aPoint for: anEdge	"Return true if aPoint is contained in at least one of the line segments"	| segments index | 	segments := self lineSegmentsFor: anEdge.	segments isEmpty ifTrue: [ ^ false ].	index := segments first.	segments allButFirst do: [ :p |		(aPoint onLineFrom: index to: p within: 2) 			ifTrue: [ ^ true].		index := p.	 ].		^ false</body><body package="Roassal-Core">hasArrow	"True if some arrows have been added"		^ arrows isNil or: [ arrows notEmpty ]</body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>arrowing</category><body package="Roassal-Core">add: aROArrow offset: aNumber 	aROArrow offset: aNumber.	self add: aROArrow</body><body package="Roassal-Core">addBegining: aROArrow 	self add: aROArrow offset: 0</body><body package="Roassal-Core">numberOfArrows	"Answer the number of arrows the edge contains"		^ arrows size </body></methods><methods><class-id>Roassal.ROAbstractLine</class-id> <category>initialize</category><body package="Roassal-Core">defaultWidth	^ 1</body><body package="Roassal-Core">initialize	super initialize.	attachPoint := ROShorterDistanceAttachPoint instance.	strokeWidth := self defaultWidth.	arrows := OrderedCollection new</body></methods><methods><class-id>Roassal.ROAbstractLine class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractLine </body><body package="Roassal-Core">isEdgeShape	^ true</body></methods><methods><class-id>Roassal.ROAbstractLine class</class-id> <category>public</category><body package="Roassal-Core">buildEdgesFromAssociations: associations inContainer: container	^ ROEdge buildEdgesFromAssociations: associations using: self inView: container</body><body package="Roassal-Core">buildEdgesFromAssociations: associations inView: container	^ ROEdge buildEdgesFromAssociations: associations using: self inView: container</body><body package="Roassal-Core">buildEdgesFromElement: element from: fromBlock toAll: toBlock	^ ROEdge buildEdgesFromElements: (Array with: element) from: fromBlock toAll: toBlock using: self</body><body package="Roassal-Core">buildEdgesFromElements: elements from: fromBlock to: toBlock	^ ROEdge buildEdgesFromElements: elements from: fromBlock to: toBlock using: self</body><body package="Roassal-Core">buildEdgesFromElements: elements from: fromBlock toAll: toBlock	^ ROEdge buildEdgesFromElements: elements from: fromBlock toAll: toBlock using: self</body><body package="Roassal-Core">elementFrom: fromElement to: toElement	^ self new elementFrom: fromElement to: toElement</body></methods><methods><class-id>Roassal.ROOrthoVerticalLineShape</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge 	| rawStartingPoint rawEndingPoint edgeBound midy w c rawEndingPointOriginal rawStartingPointOriginal |						rawEndingPoint  := attachPoint startingPointOf: anEdge.	rawEndingPointOriginal := rawEndingPoint.		rawStartingPoint := attachPoint endingPointOf: anEdge.	rawStartingPointOriginal := rawStartingPoint.		(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ self ].		"We draw a line before each arrow"	arrows do: [ :arrow | 		| arr |		arr := arrow drawOn: aCanvas for: anEdge line: self.		"aCanvas line: rawStartingPoint to: arr first width: (width roValue: anEdge) color: color."		(arrow offset = 0) 			ifTrue: [ rawStartingPoint := arr second ] 			ifFalse: [ rawEndingPoint := arr first ].		 ].		"We draw a line after the arrow""	aCanvas line: rawStartingPoint  to:  rawEndingPoint width: (width roValue: anEdge) color: (color roValue: anEdge)."	"-------- "	edgeBound := rawStartingPointOriginal corner: rawEndingPointOriginal.		midy := ((edgeBound corner y - edgeBound origin y) / 2) asInteger + edgeBound origin y.	w := strokeWidth roValue: anEdge.	c := color roValue: anEdge.	aCanvas line: rawStartingPoint to: (edgeBound origin x @ midy) width: w color: c.	aCanvas line: (edgeBound origin x @ midy) to: (edgeBound corner x @ midy) width: w color: c.	aCanvas line: (edgeBound corner x @ midy) to: rawEndingPoint width: w color: c.</body><body package="Roassal-Core">lineSegmentsFor: anEdge 			| rawEndingPoint rawStartingPoint edgeBound midy |	rawStartingPoint  := attachPoint startingPointOf: anEdge.	rawEndingPoint := attachPoint endingPointOf: anEdge.	(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ #() ].		edgeBound := rawStartingPoint corner: rawEndingPoint.		midy := ((edgeBound corner y - edgeBound origin y) / 2) asInteger + edgeBound origin y.	^ Array 		with: rawStartingPoint 		with: (edgeBound origin x @ midy) 		with: (edgeBound corner x @ midy) 		with: rawEndingPoint </body></methods><methods><class-id>Roassal.ROCollectionTest</class-id> <category>interaction</category><body package="Roassal-Core">testAddInteraction	| elements |	elements := ROElement forCollection: (1 to: 20).	self assert: (elements allSatisfy: [ :e | (e is: RODraggable) not ]).		elements @ RODraggable.	self assert: (elements allSatisfy: [ :e | e is: RODraggable ]).</body></methods><methods><class-id>Roassal.ROMenuActivable</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: element	^ (element is: self class)		ifTrue: [ self installOnExistingInteractionOn: element ]		ifFalse: [ self installHandlerOn: element]</body><body package="Roassal-Core">installHandlerOn: element	element on: ROMouseRightClick do: [ :event |		ROPlatform current widgetFactory menuForAssociations: actions on: element	]</body><body package="Roassal-Core">installOnExistingInteractionOn: element	| el |	el := (element getInteraction: ROMenuActivable).	el addActions: actions.	^ el</body></methods><methods><class-id>Roassal.ROMenuActivable</class-id> <category>public</category><body package="Roassal-Core">item: titleAsString action: aBlockOrSymbol	actions add: (titleAsString -&gt; aBlockOrSymbol)</body></methods><methods><class-id>Roassal.ROMenuActivable</class-id> <category>accessing</category><body package="Roassal-Core">actionNamed: aName	"Return the block corresponding to the action name"		^ actions detect: [ :assoc | assoc key = aName ]</body><body package="Roassal-Core">addActions: someActions	actions addAll: someActions</body><body package="Roassal-Core">numberOfEntries	^ actions size</body></methods><methods><class-id>Roassal.ROMenuActivable</class-id> <category>initialization</category><body package="Roassal-Core">initialize 	super initialize.	actions := OrderedCollection new.	</body></methods><methods><class-id>Roassal.ROMenuActivable class</class-id> <category>public</category><body package="Roassal-Core">item: titleAsString action: aBlockOrSymbol	^ self new item: titleAsString action: aBlockOrSymbol</body></methods><methods><class-id>Roassal.ROBox</class-id> <category>initialize</category><body package="Roassal-Core">defaultBorderColor	^ Color black</body><body package="Roassal-Core">initialize	super initialize.	borderColor := self defaultBorderColor.	borderWidth := 0</body></methods><methods><class-id>Roassal.ROBox</class-id> <category>rendering</category><body package="Roassal-Core">borderColor	"Color of a box is set by setting a color, a block or a symbol, which is evaluated against the model of the element"	"Return a color, a block or a symbol"	^ borderColor</body><body package="Roassal-Core">borderColor: aBlockOrSymbolOrObject	"Color of a box is set by setting a color, a block or a symbol, which is evaluated against the model of the element"	borderColor := aBlockOrSymbolOrObject</body><body package="Roassal-Core">borderColorFor: element	^ borderColor roValue: element</body><body package="Roassal-Core">borderWidth	^ borderWidth</body><body package="Roassal-Core">borderWidth: aBlockOrSymbolOrObject	borderWidth := aBlockOrSymbolOrObject.</body><body package="Roassal-Core">borderWidthFor: element	^ borderWidth roValue: element</body><body package="Roassal-Core">drawOn: aCanvas for: aROElement	aCanvas		frameAndFillRectangle: (self absoluteBoundsFor: aROElement)		fillColor: (self colorFor: aROElement)		borderWidth: (self borderWidthFor: aROElement)		borderColor: (self borderColorFor: aROElement)</body></methods><methods><class-id>Roassal.ROBox</class-id> <category>visitor</category><body package="Roassal-Core">accept: visitor	visitor visitBox: self</body></methods><methods><class-id>Roassal.ROBox class</class-id> <category>defaults</category><body package="Roassal-Core">defaultColor 	^ Color veryLightGray</body></methods><methods><class-id>Roassal.ROTextCache</class-id> <category>testing</category><body package="Roassal-Core">hasAdaptedText		^ adaptedText notNil</body><body package="Roassal-Core">hasLines		^ lines notNil</body><body package="Roassal-Core">hasText		^ text notNil</body></methods><methods><class-id>Roassal.ROTextCache</class-id> <category>accessing</category><body package="Roassal-Core">adaptedText	^ adaptedText</body><body package="Roassal-Core">adaptedText: aByteString 	adaptedText := aByteString</body><body package="Roassal-Core">lines	^ lines</body><body package="Roassal-Core">lines: anArray 	lines := anArray</body><body package="Roassal-Core">text	^ text</body><body package="Roassal-Core">text: aByteString 	text := aByteString</body></methods><methods><class-id>Roassal.ROFocusViewTest</class-id> <category>corner</category><body package="Roassal-Core">testBottomLeft	self assert: view camera position = (0 @ 0).	view windowSize: 500 @ 500.	ROFocusView bottomLeftOn: el2.	view completeAllAnimations.	self assert: view camera position =  (200@ -430)</body><body package="Roassal-Core">testBottomRight	self assert: view camera position = (0 @ 0).	view windowSize: 500 @ 500.	ROFocusView bottomRightOn: el2.	view completeAllAnimations.	self assert: view camera position = (-250@ -430)</body><body package="Roassal-Core">testTwice	view windowSize: 500 @ 500.	ROFocusView bottomLeftOn: el2.	view completeAllAnimations.	self assert: view camera position =  (200@ -430).	ROFocusView bottomLeftOn: el2.	view completeAllAnimations.	self assert: view camera position =  (200@ -430)</body></methods><methods><class-id>Roassal.ROFocusViewTest</class-id> <category>test</category><body package="Roassal-Core">testCamera	self assert: camera position = (0 @ 0).</body><body package="Roassal-Core">testOnView	"	self debug: #testOnView	"	view windowSize: 500 @ 500.	ROFocusView on: el2.	view completeAllAnimations.	"el2 is now in the center of the screen"	self assert: camera centerPosition =  (el2 position).</body><body package="Roassal-Core">testOnViewWithInitialTranslation	"	self debug: #testOnView	"	| focus |	view windowSize: 500 @ 500.	camera translateTo: 10@30.		focus := ROFocusView new.	focus on: el2.	view completeAllAnimations.	"el2 is now in the center of the screen"	self assert: camera centerPosition =  (el2 position).</body><body package="Roassal-Core">testOnViewWithoutProcess	"	self debug: #testOnView	"	| focus |	view windowSize: 500 @ 500.	focus := ROFocusView new.	focus on: el2.	view completeAllAnimations.		"el2 is now in the center of the screen"	self assert: camera centerPosition =  (el2 position).</body><body package="Roassal-Core">testPosition	view windowSize: 500 @ 500.	el1 translateTo:  (1650.5@134.0).		camera translateTo:  (-14656.5@ -72.0).	self assert: (camera position = (-14656.5@ -72.0)).		self assert: camera == el1 view camera.		ROFocusView new on: el1.	view completeAllAnimations.		self assert: (camera centerPosition - (1651@134)) abs &lt;= (2 @ 2)</body><body package="Roassal-Core">testToPositionView	"	self debug: #testToPositionView	"	view windowSize: 500 @ 500.	self assert: camera position =  (0@ 0).	ROFocusView new view: view toPosition: 500@20.	view completeAllAnimations.	"el2 is now in the center of the screen"	self assert: camera position =  (250@ -230).		ROFocusView new view: view toPosition: 500@250.	view completeAllAnimations.	"el2 is now in the center of the screen"	self assert: camera position =  (250@ 0).</body></methods><methods><class-id>Roassal.ROFocusViewTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROView new.	camera := view camera.	view add: (el1 := ROElement sprite).	view add: (el2 := ROElement sprite translateBy: 200 @ 20).		view @ RODraggable </body></methods><methods><class-id>Roassal.ROTracingCanvasTest</class-id> <category>tests</category><body package="Roassal-Core">testColToString	self assert: (canvas colToStr: Color white) = 'Color white'.	self assert: (canvas colToStr: Color red) = 'Color red'</body><body package="Roassal-Core">testRecToString	self assert: (canvas recToStr: ((3 @ 6) corner: (10 @ 30))) = '(3@6) corner: (10@30)'</body></methods><methods><class-id>Roassal.ROTracingCanvasTest</class-id> <category>running</category><body package="Roassal-Core">setUp	canvas := ROTracingCanvas new.</body></methods><methods><class-id>Roassal.ROHorizontalNarrowTreeLayout</class-id> <category>private</category><body package="Roassal-Core">shapeTree: aRoot position: xOffset		| treeHeight layerKeys layer layerHeight horizontalPosition verticalPosition |	self buildLayers: aRoot.	treeHeight := self currentTreeSize.	horizontalPosition := self horizontalGap.	"For visual reasons NOT: self class verticalGap"	layerKeys := layers keys asSortedCollection.	layerKeys do: [:aKey | 		layer := layers at: aKey.		layerHeight := layer width: self horizontalGap.		verticalPosition := treeHeight / 2.0 + xOffset - (layerHeight / 2.0).		layer do: [:aFigure | 			aFigure translateTo: horizontalPosition @ verticalPosition.			verticalPosition := verticalPosition + aFigure width + self horizontalGap].		horizontalPosition := horizontalPosition + layer height + self verticalGap].	^treeHeight</body></methods><methods><class-id>Roassal.ROHorizontalNarrowTreeLayout</class-id> <category>default values</category><body package="Roassal-Core">defaultFromPositions		^#(#rightCenter)</body><body package="Roassal-Core">defaultToPositions		^#(#leftCenter)</body></methods><methods><class-id>Roassal.ROMotionMove</class-id> <category>testing</category><body package="Roassal-Core">hasCompleted	^ (speedPoint / increment) r &lt;= 2 or: [ self isTakingTooLong ]</body><body package="Roassal-Core">isTakingTooLong	^ (Time millisecondClockValue - initialTime) &gt; 80</body></methods><methods><class-id>Roassal.ROMotionMove</class-id> <category>public</category><body package="Roassal-Core">for: anElement initialSpeed: aSpeedPoint	"Apparently problem may occur"	aSpeedPoint isNil ifTrue: [ ^self].		element := anElement.	speedPoint := aSpeedPoint.	increment := 1.	anElement view addAnimation: self.</body></methods><methods><class-id>Roassal.ROMotionMove</class-id> <category>hooks</category><body package="Roassal-Core">doStep	element translateBy: (speedPoint / increment) asIntegerPoint.	increment := increment + 1.</body></methods><methods><class-id>Roassal.ROMotionMove</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	initialTime := Time millisecondClockValue</body></methods><methods><class-id>Roassal.ROConstraintTest</class-id> <category>event generations</category><body package="Roassal-Core">testEvent	| v outer inner innerLabel innerElement t |	v := ROView new.    	outer := ROElement spriteOn: 'outter'.	inner := ROElement spriteOn: 'inner'.	innerLabel := ROLabel elementOn: 'My sprite'.	innerElement := ROElement spriteOn: 'Inner element'.	outer add: inner; add: innerLabel.	inner add: innerElement.	"We layout the things"	ROGridLayout on: inner elements.	ROVerticalLineLayout on: outer elements.	ROConstraint stick: innerLabel below: inner.	v add: outer. 	"-------"	t := 0.	inner on: ROElementTranslated do: [ :event | t := t + 1 ].	self assert: t = 0.	innerElement translateBy: -1 @ 0.	self assert: t = 0.</body><body package="Roassal-Core">testEvent2	| v outer inner innerLabel innerElement t |	v := ROView new.	outer := ROElement spriteOn: 'outter'.	inner := ROElement spriteOn: 'inner'.	innerLabel := ROLabel elementOn: 'My sprite'.	innerElement := ROElement spriteOn: 'Inner element'.	outer add: inner; add: innerLabel.	inner add: innerElement.	"We layout the things"	ROGridLayout on: inner elements.	ROVerticalLineLayout on: outer elements.	ROConstraint stick: innerLabel below: inner.	v add: outer.	"-------"	t := 0.	inner on: ROElementEvent do: [ :event | t := t + 1 ].	self assert: t = 0.	innerElement translateBy: 5 @ 0.	self assert: t = 1.</body><body package="Roassal-Core">testEventIfNoMoved	| el t |	el := ROElement new.	t := 0.	el on: ROElementTranslated do: [ :event | t := t + 1 ].		el translateBy: 0 @ 0.	self assert: t = 0.</body><body package="Roassal-Core">testEventIfResized	| el t |	el := ROElement new.	t := 0.	el on: ROElementEvent do: [ :event | t := t + 1 ].		el extent: 10 @ 10.	self assert: t = 1.</body></methods><methods><class-id>Roassal.ROConstraintTest</class-id> <category>sticking</category><body package="Roassal-Core">testStickAbove	ROConstraint 		stick: element1 above: element2.			self assert: (element2 position - (0 @ element1 height)) = element1 position.		element2 translateTo: 60 @ 30.	self assert: (element2 position - (0 @ element1 height)) = element1 position.</body><body package="Roassal-Core">testStickBelow	ROConstraint 		stick: element1 below: element2.			self assert: (element2 position + (0 @ element2 height)) = element1 position.		element2 translateTo: 60 @ 30.	self assert: (element2 position + (0 @ element2 height)) = element1 position.</body><body package="Roassal-Core">testStickToBottomLeft	ROConstraint 		stickToBottomLeft: element1 offset: 0.			element1 translateTo: 60 @ 30.	self assert: element1 position = (60 @ 30).		element1 view windowSize: 100 @ 80. 	self assert: element1 position = (0 @ (80 - element1 height)).</body><body package="Roassal-Core">testStickToTheCenter	ROConstraint 		stick: element1 onTheCenterOf: element2.			self assert: (element1 position - (((element2 width - element1 width) / 2) @ ((element2 height - element1 height) / 2))) = element2 position.		element2 translateTo: 60 @ 30.	self assert: (element1 position - (((element2 width - element1 width) / 2) @ ((element2 height - element1 height) / 2))) = element2 position.</body><body package="Roassal-Core">testStickToTheLeft	ROConstraint 		stick: element1 onTheLeftOf: element2.			self assert: (element1 position + (element1 width @ 0)) = element2 position.		element2 translateTo: 60 @ 30.	self assert: (element1 position + (element1 width @ 0)) = element2 position.</body><body package="Roassal-Core">testStickToTheRight	ROConstraint 		stick: element1 onTheRightOf: element2.			self assert: (element2 position + (element2 width @ 0)) = element1 position.		element2 translateTo: 60 @ 30.	self assert: (element2 position + (element2 width @ 0)) = element1 position.</body><body package="Roassal-Core">testStickToTopRight	ROConstraint 		stickToTopRight: element1 offset: 0.			element1 translateTo: 60 @ 30.	self assert: element1 position = (60 @ 30).		element1 view windowSize: 100 @ 80. 	self assert: element1 position =  (50@0)</body></methods><methods><class-id>Roassal.ROConstraintTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	view := ROView new.	element1 := ROElement sprite.	element1 extent: 50 @ 50.		element2 := ROElement sprite.	view add: element1.	view add: element2.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderLayoutTest</class-id> <category>user defined edges</category><body package="Roassal-Core">testUserDefinedEdges	" to address: http://code.google.com/p/moose-technology/issues/detail?id=834 "	| edges layout |	view nodes: #(1 2 3).	edges := view edgesFrom: [ :each  | each - 1 ].	view shape line color: Color red.	view edges: #(3) from: [ :each | each - 2 ] to: #yourself.	layout := view treeLayout userDefinedEdges: edges; yourself.		"We check the user defined edges before doing the layout"	self assert: (layout userDefinedEdges = edges).		"We do the layout"	view applyLayout.	"We first check whether the edges have been well defined."	self assert: edges size = 2.	self assert: (edges last from model = 2).	self assert: (edges last to model = 3).		self assert: (edges first from model = 1).	self assert: (edges first to model = 2).	"We then checked if the edges are defined in the layout"	self assert: (layout userDefinedEdges = edges).	self assert: (layout edges = edges).	 </body></methods><methods><class-id>Roassal.ROMondrianViewBuilderLayoutTest</class-id> <category>edgesDefinedFromOutside</category><body package="Roassal-Core">buildScenario	view := ROMondrianViewBuilder new.	view nodes: #(1 2) forEach: [ :each |		view nodes: (Array with: each * 10 with: (each * 100)). 		view treeLayout.	].	view edgesFromAssociations: (Array with: 10 -&gt; 100 with: 20 -&gt; 200).	view applyLayout.	</body><body package="Roassal-Core">testEdgesDefinedOutside	| firstNode secondNode |	self buildScenario.		firstNode := view raw elements first.	secondNode := view raw elements second.		"We check who has the edge"	self assert: (firstNode elements size = 3).	self assert: (secondNode elements size = 3).	self assert: view raw elements size = 2.</body><body package="Roassal-Core">testEdgesDefinedOutsideLayout	| firstNode secondNode |	self buildScenario.		firstNode := view raw elements first.	secondNode := view raw elements second.		"We check the layout" 	self assert: (firstNode elementsNotEdge collect: #position) asArray reverse = (Array with: 5 @ 30 with: 5 @ 5).	self assert: (secondNode elementsNotEdge collect: #position) asArray reverse = (Array with: 5 @ 30 with: 5 @ 5).	</body><body package="Roassal-Core">testEdgesDefinedOutsideLayoutStructure	| firstInnerFrame secondInnerFrame |	self buildScenario.		self assert: view numberOfFrames = 3.		"Outter frame"	self assert: view structureTree elements size = 2.	self assert: view structureTree nodes size = 2.		"First inner frame"	firstInnerFrame := view structureTree children first.	self assert: firstInnerFrame elements size = 3. 	self assert: firstInnerFrame nodes size = 2.	self assert: firstInnerFrame edges size = 1.		"Second inner frame"	secondInnerFrame := view structureTree children second.	self assert: secondInnerFrame elements size = 3. 	self assert: secondInnerFrame nodes size = 2.	self assert: secondInnerFrame edges size = 1.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderLayoutTest</class-id> <category>tests</category><body package="Roassal-Core">testEdgesFrom	| outterFrame firstInnerFrame secondInnerFrame |	view nodes: #(1 10) forEach: [ :v |		view nodes: (Array with: v +1 with: v + 2 with: v + 3).		view shape line.		view edgesFrom: [ :el | v + 1 ].		view treeLayout ].	view horizontalLineLayout.	view applyLayout.		self assert: view structureTree numberOfFrames = 3.	outterFrame := view structureTree .	firstInnerFrame := outterFrame children first.	secondInnerFrame := outterFrame children second.		self assert: (outterFrame nodes size = 2).	self assert: (outterFrame edges size = 0).		self assert: (firstInnerFrame nodes size = 3).	self assert: (firstInnerFrame edges size = 2).		self assert: (secondInnerFrame nodes size = 3).	self assert: (secondInnerFrame edges size = 2).</body><body package="Roassal-Core">testLayouts	| l |	l := OrderedCollection new.	l add: #treeLayout.	l add: #gridLayout.	l add: #forceBasedLayout.	l add: #circleLayout.	l add: #verticalLineLayout.	l add: #horizontalLineLayout.	l add: #sugiyamaLayout.	l add: #bottomFlowLayout.	l add: #flowLayout.	l add: #radialTreeLayout.	l add: #scatterPlotLayout.	l add: #noLayout.	view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.	l do: [ :sel | 		self shouldnt:  [ view perform: sel. view applyLayout ] raise: Error ]</body><body package="Roassal-Core">testTreeLayoutAndColor	"Strange bug http://code.google.com/p/objectprofile/issues/detail?id=86&amp;thanks=86&amp;ts=1341240917"	| edges |		view shape rectangle size: 50.	view nodes: (1 to: 5).	view shape line color: Color blue.	edges := view edgesFromAssociations: (Array with: 1 -&gt; 5 with: 1 -&gt; 2 with: 3 -&gt; 4).	self assert: (edges allSatisfy: [ :edge | ((edge getShape: ROLine) colorFor: edge) = Color blue ]).		view treeLayout .	 	"view open"</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderLayoutTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROMondrianViewBuilder new.</body><body package="Roassal-Core">tearDown 	window ifNotNil: [ window delete ]</body></methods><methods><class-id>Roassal.ROLineTest</class-id> <category>tests creation</category><body package="Roassal-Core">testCreation	| shape |	shape := ROLine arrowed color: Color blue.	self assert: (shape elementOn: 123) model = 123.	self assert: (shape elementOn: 123) class == ROEdge.	</body><body package="Roassal-Core">testCreation2	| el1 el2 edge shape |	shape := ROLine arrowed color: Color blue.	el1 := ROBox element.	el2 := ROBox element.	edge := shape elementFrom: el1 to: el2.	self assert: edge class == ROEdge.	self assert: edge from == el1.	self assert: edge to == el2.</body></methods><methods><class-id>Roassal.ROLineTest</class-id> <category>tests</category><body package="Roassal-Core">testColorBlockTakesTheElement	| edge line |	line := ROLine new 		color: #model.	edge := ROEdge on: 42.	self assert: (line colorFor: edge) = 42</body><body package="Roassal-Core">testWidthBlockTakesTheElement	| edge line |	line := ROLine new 		width: #model.	edge := ROEdge on: 42.	self assert: (line widthFor: edge) = 42</body></methods><methods><class-id>Roassal.ROExportSVGCommand</class-id> <category>execute</category><body package="Roassal-Core">exportView: view	ROPlatform current svgExporterClass exportViewAsSVG: view</body></methods><methods><class-id>Roassal.ROExportSVGCommand</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	name := 'Export as SVG'</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>default values</category><body package="Roassal-Core">defaultBounds	^ Rectangle origin: 5@5 corner: 225@225.</body><body package="Roassal-Core">defaultInset	"This is the default value for insets we use for intetendation inside containment nodes to their children."	^ 5</body><body package="Roassal-Core">defaultMinArea 	"We assume we need a 20x20 rectangle for a treemap at least."	^ 400</body><body package="Roassal-Core">defaultMinAreaPerNode	"The smallest node we want to draw has a size of roughly 5x5."	^ 10</body><body package="Roassal-Core">defaultMinInset	"This is the default minimal value for insets in containment nodes we use."	^ 3</body><body package="Roassal-Core">defaultSplitPercentages	"These percentage say what the min (x) and max (y) percentage value are when splitting available drawing space.	E.g A node has weight 0 and another weight 100, the visual weight gets capped to 0.01 and 0.99, 	so the small node is still visible."	^ 0.01@0.99</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>layouting</category><body package="Roassal-Core">layout: nodes rectangle: rectangle level: level	"Main method that lays out given nodes in given rectangle"		"Nothing to draw..."	(nodes isNil) ifTrue: [ ^ self. ].	"If we have only one node we can lay it out directly."	nodes size == 1 ifTrue: [		self layoutNode: (nodes first) rectangle: rectangle level: level.	]	"If we have more then one node, we need to split them up."	ifFalse: [		"Make sure nodes are sorted by weight block."		| sortedNodes | 		nodes class ~= SortedCollection ifTrue: [			sortedNodes := SortedCollection sortBlock: [ :e1 :e2 | 				(self weightBlock value: e1) &lt;= (self weightBlock value: e2) ].			sortedNodes addAll: nodes.		]		ifFalse: [ sortedNodes := nodes. ].			"Layout multiple nodes."		self layoutNodes: sortedNodes rectangle: rectangle level: level.	].</body><body package="Roassal-Core">layoutNode: node rectangle: rectangle level: level	"Lays out a single node"	| children insetToUse innerRectangle |		"Set bounds of the node."	self defineNodeShape: node rectangle: rectangle level: level.		"Set zIndex of node, depending on level."	node zIndex: baseZIndex + level + 1.	"Get children of given node."	children := self childrenFor: node.		"Layouting one node at a time..."	self step.	"Are we rendering a leaf node?"	(children isNil or: children isEmpty) ifTrue: [		self styleLeafNode: node level: level.		self addLeafBlock: node.	]	"Else it is a containment node, style accordingly"	 ifFalse: [		"Style as containment node"		self styleContainmentNode: node level: level.					"Making insets a little bit thinner the more nested in the graph we are,		but cap at min inset pixels."		insetToUse := (inset - (level * 0.2)) ceiling .		insetToUse &lt; minInset  ifTrue: [			insetToUse := minInset.			].				"Creating a containment border for the children."		innerRectangle := rectangle insetBy: insetToUse.					"In Roassal nested nodes are defined with relative bounds."		innerRectangle := Rectangle origin: (insetToUse@insetToUse) extent: innerRectangle extent.				"Need the children sorted if we draw them."		children := self childrenSortedFor: node.					"Layout children"		self layout: children rectangle: innerRectangle level: level + 1.	].	"Apply node block last, to allow for overwriting of all standard stylings etc."	self addNodeBlock: node.</body><body package="Roassal-Core">layoutNodes: nodes rectangle: rectangle level: level	"Split up given nodes by weightBlock."	| firstHalf secondHalf firstRectangle secondRectangle weight |			"Split up nodes"	firstHalf := self splitCollection: nodes.	secondHalf := nodes copy reject: [ :element |			firstHalf includes: element.	].		"Calculate weights of the halves"	weight := self calculateWeight: firstHalf secondHalf: secondHalf.			"Prepare and split up rectangles for the children..."	firstRectangle := Rectangle new.	secondRectangle := Rectangle new.			"Either vertically or..."	(rectangle width &gt; rectangle height) ifTrue: [		self splitRectangleVertically: rectangle first: firstRectangle second: secondRectangle weight: weight.	]	"....horizontally"	ifFalse: [		self splitRectangleHorizontally: rectangle first: firstRectangle second: secondRectangle weight: weight.	].		"Recurse to draw nodes (if we have enough space)"	firstRectangle area &gt; minAreaPerNode ifTrue: [ 		self layout: firstHalf rectangle: firstRectangle level: level. "recurse..."	]	ifFalse: [ 		firstHalf do: [ :n | n remove. ] "Remove these nodes from the view."		].	secondRectangle area &gt; minAreaPerNode ifTrue: [ 		self layout: secondHalf rectangle: secondRectangle level: level. "recurse..."	]	ifFalse: [ 		secondHalf do: [ :n | n remove. ] "Remove these nodes from the view."		].</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>utility</category><body package="Roassal-Core">calculateWeight: firstHalf secondHalf: secondHalf	| weight sumFirstHalf sumSecondHalf sum |		"Initializing values"	sumFirstHalf := 0.	sumSecondHalf := 0.	sum := 0.		firstHalf do: [ :e |		sumFirstHalf := sumFirstHalf + (self weightBlock value: e)	].	secondHalf do: [ :e |		sumSecondHalf := sumSecondHalf + (self weightBlock value: e)	].		"Make sure its always at least one."	sumFirstHalf &lt; 1 ifTrue: [		sumFirstHalf := 1.	].	sumSecondHalf &lt; 1 ifTrue: [		sumSecondHalf := 1.	].		sum := sumFirstHalf + sumSecondHalf.		weight := sumFirstHalf / sum.		"Should never be less or more than specified split percentages, 	so it looks okay graphically and nodes are not disapearing."	weight &gt; splitPercentages y ifTrue: [		weight := splitPercentages y.	].	weight &lt; splitPercentages x ifTrue: [		weight := splitPercentages x.	].		 ^ weight asFloat.</body><body package="Roassal-Core">removeMarginFor: elements	"Assume that elements is not nil, and that all the elements have the same parent"		elements do: [ :e | e allElementsDo: [ :ee | ee resizeStrategy: (e resizeStrategy paddingGap: 0) ] ]</body><body package="Roassal-Core">splitCollection: aSortedCollection	"Returns the first half of a SortedCollection"	"TODO: this does not belong here and can surely be solved more elegant."	| indexOfSplitElement n firstHalf |	indexOfSplitElement := (aSortedCollection size / 2) floor.		n := 1.		firstHalf := SortedCollection sortBlock: aSortedCollection sortBlock.		[ n &lt;= indexOfSplitElement ] whileTrue: [ 		| element |		element := aSortedCollection at: n.		firstHalf add: element.		n := n+1.	].		^ firstHalf.</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>accessing</category><body package="Roassal-Core">baseZIndex	^ baseZIndex</body><body package="Roassal-Core">baseZIndex: anObject	baseZIndex := anObject</body><body package="Roassal-Core">childrenFor: aNode	^ aNode elements.</body><body package="Roassal-Core">childrenSortedFor: aNode	"Returns all children of given node sorted by weight block."	| children |	"Sort children by layouts weight block."	children isNil ifTrue: [		children := SortedCollection sortBlock: [ :e1 :e2 | 			| w1 w2 |			w1 := self weights at: e1 ifAbsentPut: [self weightBlock value: e1].			w2 := self weights at: e2 ifAbsentPut: [self weightBlock value: e2].			w1 &lt;= w2		].		children addAll: (self childrenFor: aNode).	]. 	^ children.</body><body package="Roassal-Core">inset	^ inset.</body><body package="Roassal-Core">inset: aNumber	inset := aNumber.</body><body package="Roassal-Core">interactionBlock	^ interactionBlock.</body><body package="Roassal-Core">interactionBlock: aBlock	"Sets an interaction block which will be set to every individual node."	interactionBlock := aBlock.</body><body package="Roassal-Core">leafBlock	^ leafBlock</body><body package="Roassal-Core">leafBlock: aBlock	"Sets the leaf block: it will be called on all leaf nodes, can be used to style them in a certain way."	leafBlock := aBlock.</body><body package="Roassal-Core">minAreaPerNode	^ minAreaPerNode.</body><body package="Roassal-Core">minAreaPerNode: aNumber	minAreaPerNode := aNumber.</body><body package="Roassal-Core">minInset	^ minInset.</body><body package="Roassal-Core">minInset: aNumber	minInset := aNumber.</body><body package="Roassal-Core">nodeBlock	^ nodeBlock</body><body package="Roassal-Core">nodeBlock: aBlock	"Sets the node block: it will be called on all node nodes, can be used to style them in a certain way."	nodeBlock := aBlock.</body><body package="Roassal-Core">recursiveChildrenFor: aNode	"Returns all children, childrens children etc. of given node in a Set"	| allChildren myChildren |     	allChildren := Set new.	myChildren := Set new.		myChildren addAll: (self childrenFor: aNode).	allChildren addAll: myChildren.	myChildren do: [ :each | allChildren addAll: (self recursiveChildrenFor: each) ].	^ allChildren.</body><body package="Roassal-Core">recursiveChildrenSortedFor: aNode	"Returns all children, childrens children etc. of given node in a SortedCollection sorted by weight block."	| allChildren myChildren |     	allChildren := SortedCollection sortBlock: [ :e1 :e2 | 		(self weightBlock value: e1) &lt;= (self weightBlock value: e2) ].		myChildren := Set new.		myChildren addAll: (self childrenFor: aNode).	allChildren addAll: myChildren.	myChildren do: [ :each | allChildren addAll: (self recursiveChildrenFor: each) ].	^ allChildren.</body><body package="Roassal-Core">splitPercentages	^ splitPercentages</body><body package="Roassal-Core">splitPercentages: aPoint	splitPercentages := aPoint.</body><body package="Roassal-Core">weightBlock	^ weightBlock </body><body package="Roassal-Core">weightBlock: aWeightBlock	weightBlock := aWeightBlock.</body><body package="Roassal-Core">weightFor: aNode	"Returns weight for given node based on weightBlock"	self assert: weightBlock notNil description: 'weightBlock has to be set!'.	^ weightBlock value: aNode.</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeCollection	"Create the treemap layout."	self layout: rootNodes rectangle: canvas level: 0.</body><body package="Roassal-Core">doInitialize: nodeCollection	"Let's make sure that everything is set up correctly to draw a treemap layout."	| givenBounds |	"If there is nothing to draw, then we simply exit"	(nodeCollection isEmpty) ifTrue: [ ^ self ]. 	"We remove the margin of nodeCollection to"	self removeMarginFor: nodeCollection.	"Can't draw a treemap without a weight definition."	self assert: weightBlock notNil description: 'weightBlock has to be set!'.		super doInitialize: nodeCollection.		"Getting the view we are in."	view := nodeCollection first view.	"Before we do anything else, we tell the nodes that they have a fixed size in a treemap."	nodeCollection do: [ :node | 		node resizeStrategy: ROPermissiveParent instance.	].		"Setting up canvas we draw the treemap in based on given nodes."	givenBounds := self prepareGraph: nodeCollection.	self setupCanvas: givenBounds.</body><body package="Roassal-Core">doPost: aNodeCollection	"Doing things after the layout has been generated."		aNodeCollection notEmpty ifTrue: [		"The treemap has to be draggable as a whole, 		so we forward drag events from all nodes except the rootNodes."		rootNodes size &gt; 1 ifTrue: [			aNodeCollection do: [ :node | node forward: ROMouseDragging ].		]		ifFalse: [			(aNodeCollection reject: [ :node | node = rootNodes first ]) 				do: [ :node | node forward: ROMouseDragging ].		].	].	"Releasing temporary vars"	weightsCache := nil.		super doPost: aNodeCollection.</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>layouting-utility</category><body package="Roassal-Core">addLeafBlock: aNode	"Applies leaf block to given node."	leafBlock notNil ifTrue: [		leafBlock value: aNode.	].</body><body package="Roassal-Core">addNodeBlock: aNode	"Applies node block to given node."	nodeBlock notNil ifTrue: [		nodeBlock value: aNode.	].</body><body package="Roassal-Core">defineNodeShape: node rectangle: rectangle level: level	"Sets a nodes shape and does other necessary stuff."	node setBounds: rectangle.	"Add specific interaction to node, if interactionBlock is set"	self addInteraction: node.</body><body package="Roassal-Core">minAreaNeededFor: nodesChildren	^ (((minAreaPerNode * (nodesChildren size)) sqrt) + (2 * inset)) squared.</body><body package="Roassal-Core">minAreaNeededForNode: node	^ (((minAreaPerNode * (node size)) sqrt) + (2 * inset)) squared.</body><body package="Roassal-Core">removeChildrenFromRendering: children	"Recursive method that removes given children (and if applicable their grand children) from the view to render."		(children notNil and: children notEmpty) ifTrue: [		children do: [ :child |			view removeElementToRender: child. 			self removeChildrenFromRendering: child elements 		].	].		</body><body package="Roassal-Core">splitRectangleHorizontally: rectangle first: firstRectangle second: secondRectangle weight: weight	"Splits given rectangle to given rectangles by given weight on the y axis"	| y |	"This is where we are going to split on the y-axis"	y := ((((rectangle bottomLeft y) - (rectangle topLeft y)) * weight) floor + rectangle topLeft y).	"HACKY: Subtract 1 of the seconds rectangles origin y value, 	so the borders between the rectangles are overlaying eachother, so we dont have thick borders"	firstRectangle roOrigin: (rectangle origin); roCorner: (rectangle corner x)@y.	secondRectangle roOrigin: (rectangle origin x)@(y-1); roCorner: (rectangle corner).</body><body package="Roassal-Core">splitRectangleVertically: rectangle first: firstRectangle second: secondRectangle weight: weight	"Splits given rectangle to given rectangles by given weight on the x axis"	| x |		"This is where we are going to split on the x-axis"	x := ((((rectangle topRight x) - (rectangle topLeft x)) * weight) floor + rectangle topLeft x).		"HACKY: Subtract 1 of the seconds rectangles origin x value, 	so the borders between the rectangles are overlaying eachother, so we dont have thick borders"	firstRectangle roOrigin: (rectangle origin); roCorner: x@(rectangle corner y).	secondRectangle roOrigin: (x-1)@(rectangle origin y); roCorner: (rectangle corner).	</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>styling</category><body package="Roassal-Core">styleContainmentNode: node level: level	| shape |	shape := (node getShape: ROBox).	shape color:  ((Color r: 0.934 g: 0.934 b: 0.934) adjustBrightness: -0.03 * level).	shape borderColor: ((Color r: 0.2 g: 0.2 b: 0.2) adjustBrightness: -0.008 * level).	</body><body package="Roassal-Core">styleContainmentNodeWithOmittedChildren: node level: level	| shape |	shape := (node getShape: ROBox).	shape color:  ((Color r: 0.884 g: 0.884 b: 0.884) adjustBrightness: -0.03 * level).	shape borderColor: ((Color r: 0.2 g: 0.2 b: 0.2) adjustBrightness: -0.008 * level).	</body><body package="Roassal-Core">styleLeafNode: node level: level	| shape |	shape := node getShape: ROBox.		shape color: Color white.	shape borderColor: Color gray.</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.		"Canvas is the Rectangle where we draw the 	treemap in."	canvas := Rectangle origin: (5@5) corner: (150@150).		"Inset is the indentation we use for containment nodes (to their children)."	inset := self defaultInset.		"This inset will never get smaller than the minimum though."	minInset := self defaultMinInset.		"This is the minimum area a node should have to be drawn."	minAreaPerNode := self defaultMinAreaPerNode.		"Where to cap split percentages as a point (x is min, y is max)"	splitPercentages := self defaultSplitPercentages.		"Base z-index is 0."	baseZIndex := 0.</body><body package="Roassal-Core">prepareGraph: nodeCollection	"Checks if the given nodeColection and the (implicit contained) graph are in the expected format	 and tries to transform it automatically if not. Returns bounds that were given from the outside.		TODO: The automatic transformation of graphs needs to be much more generic, 	so far we only capture single possible configurations..."	| givenBounds |	"In most cases we expect exactly one node, which is the root node."	"Here we have more than one root node."	nodeCollection size &gt; 1 ifTrue: [		| edges parent roots |		parent := nodeCollection first parent.		edges := parent elements select: [ :e | e isEdge ].				"But if we have more than one node in the collection, maybe we got an edge driven definition of a graph. 		Let's try to transform it to a node-nested graph."		(edges notEmpty) ifTrue: [ 					roots := ROGraphTransformation new fromEdgesToNesting: nodeCollection edges: edges.			(roots isKindOf: Collection) ifFalse: [				roots := OrderedCollection with: roots.				].			parent class = ROElement ifTrue: [				parent removeAllElements.				parent addAll: roots.								"TODO: HACK HACK: this if-else is used to distinguish between setting size of shape				 externally of the treemap layout or on the nodes inside of it via an heuristic."				roots first extent = (5@5) ifTrue: [					givenBounds :=  parent bounds insetBy: inset.				] 				ifFalse: [					givenBounds := roots first bounds.				]							].					parent class = ROView ifTrue: [				"Dont need edges anymore, all nodes are now nested."				edges do:  [ :edge | edge remove ].				givenBounds := nodeCollection first bounds			].			rootNodes := OrderedCollection withAll: roots.		]			"If we have no edges, we have multiple root nodes (alone or with nested children)."		ifFalse: [					rootNodes := nodeCollection.						parent class = ROView ifTrue: [				givenBounds := rootNodes first bounds.			]			ifFalse: [				givenBounds := parent bounds insetBy: inset.			]		].	]	"...as expected: only one root node."	ifFalse: [		| edges nodes roots |		rootNodes := nodeCollection.		givenBounds := rootNodes first bounds.				"TODO: HACK HACK: we have two seperate configurations here. 		If givenBounds of first rootNode are only 5@5, we can assume, that the bounds given from the outside, were actually given to its parent."		givenBounds extent = (5@5) ifTrue: [			rootNodes first parent class ~= ROView ifTrue: [ 				givenBounds := rootNodes first parent bounds insetBy: inset.				].		].				"Another possibility is that only the first level is nested, but then we have a graph driven defintion, 		so lets try to transform it to a nested graph."		nodes := nodeCollection first elements.		edges := nodeCollection first elements select: [ :e | e isEdge ].		(edges notEmpty) ifTrue: [ 					roots := (ROGraphTransformation new fromEdgesToNesting: nodes edges: edges) select: [ :e | e isNotEdge].			rootNodes first removeAllElements.			rootNodes first addAll: roots.		].	].	^ givenBounds.</body><body package="Roassal-Core">setupCanvas: givenBounds	"Setting up the dimensions and position of the canvas we draw the treemap on."		"If bounds are specified from the outside (e.g. view shape width: 400; height: 400) we have to apply	these bounds only to the canvas of the treemap, not all the nodes."	"Leave some space to possible parent."	canvas := Rectangle origin: (inset@inset) extent: givenBounds extent.   </body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>interaction</category><body package="Roassal-Core">addInteraction: aNode	"Adds interactions defined in interactionBlock to given node."	interactionBlock notNil ifTrue: [		interactionBlock value: aNode.	].</body></methods><methods><class-id>Roassal.ROTreeMapLayout</class-id> <category>caching</category><body package="Roassal-Core">weights	weightsCache isNil ifTrue: [		weightsCache := Dictionary new.	].	^ weightsCache .</body></methods><methods><class-id>Roassal.ROTreeMapLayout class</class-id> <category>instance creation</category><body package="Roassal-Core">withWeightBlock: aWeightBlock	| layout |	layout := self new.	layout weightBlock: aWeightBlock.	^ layout.</body></methods><methods><class-id>Roassal.ROOrthoHorizontalLineShape</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge 	| rawStartingPoint rawEndingPoint edgeBound midx w c rawEndingPointOriginal rawStartingPointOriginal |						rawEndingPoint  := attachPoint startingPointOf: anEdge.	rawEndingPointOriginal := rawEndingPoint.		rawStartingPoint := attachPoint endingPointOf: anEdge.	rawStartingPointOriginal := rawStartingPoint.		(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ self ].		"We draw a line before each arrow"	arrows do: [ :arrow | 		| arr |		arr := arrow drawOn: aCanvas for: anEdge line: self.		"aCanvas line: rawStartingPoint to: arr first width: (width roValue: anEdge) color: color."		(arrow offset = 0) 			ifTrue: [ rawStartingPoint := arr second ] 			ifFalse: [ rawEndingPoint := arr first ].		 ].	"-------- "	edgeBound := rawStartingPointOriginal corner: rawEndingPointOriginal.		midx := ((edgeBound corner x - edgeBound origin x) / 2) asInteger + edgeBound origin x.	w := strokeWidth roValue: anEdge.	c := color roValue: anEdge.	aCanvas line: rawStartingPoint to: (midx @ edgeBound origin y) width: w color: c.	aCanvas line: (midx @ edgeBound origin y) to: (midx @ edgeBound corner y) width: w color: c.	aCanvas line: (midx @ edgeBound corner y) to: rawEndingPoint width: w color: c.</body><body package="Roassal-Core">lineSegmentsFor: anEdge 			| rawEndingPoint rawStartingPoint edgeBound midx |	rawStartingPoint  := attachPoint startingPointOf: anEdge.	rawEndingPoint := attachPoint endingPointOf: anEdge.	(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ #() ].		edgeBound := rawStartingPoint corner: rawEndingPoint.		midx := ((edgeBound corner x - edgeBound origin x) / 2) asInteger + edgeBound origin x.	^ Array 		with: rawStartingPoint 		with: (midx @ edgeBound origin y) 		with: (midx @ edgeBound corner y) 		with: rawEndingPoint </body></methods><methods><class-id>Roassal.ROExpandChildrenOnClick</class-id> <category>hooks</category><body package="Roassal-Core">adjustNode: node	</body></methods><methods><class-id>Roassal.ROElementTranslated</class-id> <category>as yet unclassified</category><body package="Roassal-Core">step	"Return the step in pixel of the translation"	^ step</body><body package="Roassal-Core">step: amountOfPixels	"Set the amount of pixels for the translation"	step := amountOfPixels</body></methods><methods><class-id>Roassal.ROElementTranslated class</class-id> <category>public</category><body package="Roassal-Core">step: amountOfPixels	^ self new step: amountOfPixels; yourself</body></methods><methods><class-id>Roassal.ROAllConnectedNodeDraggable</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: element	element on: ROElementTranslated do: [ :event |		event element allEdgesFrom do: [ :edge | edge to translateBy: event step ] ]</body></methods><methods><class-id>Roassal.ROCell</class-id> <category>accessing</category><body package="Roassal-Core">column	^((number - 1) rem: columns) + 1</body><body package="Roassal-Core">columnWidthAt: index	"private"	^ columnWidths at: index</body><body package="Roassal-Core">columns	^ columns</body><body package="Roassal-Core">columns: anObject	columns := anObject</body><body package="Roassal-Core">computeColumnWidths	columnWidths := Array new: elements columnCount.	1 to: elements columnCount do: [ :columnIndex |		columnWidths at: columnIndex put: ((elements atColumn: columnIndex) select: #notNil thenCollect: #width) max	 ].</body><body package="Roassal-Core">computeRowHeights	rowHeights := Array new: elements rowCount.	1 to: elements rowCount do: [ :rowIndex |		rowHeights at: rowIndex put: ((elements atRow: rowIndex) select: #notNil thenCollect: #height) max	 ].</body><body package="Roassal-Core">element	^ element</body><body package="Roassal-Core">element: anObject	element := anObject</body><body package="Roassal-Core">elements: aCollection 	| rows  col |	rows := (aCollection size / columns) ceiling rounded.	col := Array new: rows * columns.	1 to: aCollection size do: [ :i | col at: i put: (aCollection at: i)].	elements := ROCellMatrix 					rows: rows					columns: columns 					contents: col.	self computeColumnWidths.	self computeRowHeights.</body><body package="Roassal-Core">extent	^ self width @ self height</body><body package="Roassal-Core">height	^ self rowHeightAt: self row</body><body package="Roassal-Core">number	^ number</body><body package="Roassal-Core">number: anObject	number := anObject</body><body package="Roassal-Core">row	^((number - 1) quo: columns) + 1</body><body package="Roassal-Core">rowHeightAt: index	"private"	^ rowHeights at: index</body><body package="Roassal-Core">width	^ self columnWidthAt: self column</body></methods><methods><class-id>Roassal.ROCell class</class-id> <category>instance creation</category><body package="Roassal-Core">elements: aCollection columns: anInteger 		^ self new columns: anInteger; elements: aCollection; yourself</body></methods><methods><class-id>Roassal.ROImageTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view el elInner canvas |	view := ROView new.	el := ROElement new.	elInner := ROElement new + (ROImage new form: ((4 @ 6) extent: (10 @ 30))).	el add: elInner.	view add: el.	el translateTo: 50 @ 40.	elInner translateBy: 5 @ 4.		canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace =  #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#paintImage '(60@49)'))</body></methods><methods><class-id>Roassal.ROVWSVGExporter</class-id> <category>accessing</category><body package="Roassal-VWSpecific">exportOnStream: stream	| canvas rectangle oldPosition |	(canvas := ROSVGCanvas onCamera: view camera onStream: stream) view: view.	canvas addStart.	rectangle := view encompassingRectangle.	oldPosition := view camera position.	view translateTo: rectangle origin negated.		view drawOn: canvas.	view camera translateTo: oldPosition .	canvas addEnd.</body><body package="Roassal-VWSpecific">interactiveExportWithExtension: t1 	"	***This is decompiled code.*** 	The source was unavailable because the source pointer appears to point to 	an incorrect position in the file. The file may have been modified after this 	method was updated."	| t2 t3 t4 t5 |	t3 := 'ROView'.	(t2 := SaveFileDialog new) addFileFilter: 'Smalltalk source (*.' , t1 , ')' pattern: '*.,aFileExtension,'; fileCondition: #new; defaultDirectory: '.'; defaultFilename: (Filename filterFilename: ('&lt;1s&gt;.' , t1 expandMacrosWith: t3)) asFilename.	(t4 := t2 select) ifNil: [^self].	t5 := t4 newReadWriteStream.	[self exportOnStream: t5]		ensure: [t5 notNil				ifTrue: [t5 close]				ifFalse: [nil]].	^self</body><body package="Roassal-VWSpecific">view: t1 	"	***This is decompiled code.*** 	The source was unavailable because the source pointer appears to point to 	an incorrect position in the file. The file may have been modified after this 	method was updated."	view := t1.	^self</body></methods><methods><class-id>Roassal.ROVWSVGExporter class</class-id> <category>exporter</category><body package="Roassal-VWSpecific">exportViewAsSVG: t1 	"	***This is decompiled code.*** 	The source was unavailable because the source pointer appears to point to 	an incorrect position in the file. The file may have been modified after this 	method was updated."	^(self new) view: t1; interactiveExportWithExtension: 'svg'</body></methods><methods><class-id>Roassal.ROVWHTMLExporter</class-id> <category>extra files</category><body package="Roassal-VWSpecific">extractExtraFilesOnDirectory: aDirectory	(Zip.Archive on: (ROHTMLAssets ROHTMLExporterLibraries readStream)) extractTo: aDirectory.</body></methods><methods><class-id>Roassal.ROVWHTMLExporter</class-id> <category>accessing</category><body package="Roassal-VWSpecific">interactiveExportWithExtension: aFileExtention	| dialog defaultFilename file fileStream |	defaultFilename := 'ROView.html'.	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'HTML (*.html)' pattern: '*.html';		defaultDirectory: '.';		defaultFilename: defaultFilename.	 file := dialog select.	file isNil ifTrue: [^self ].	fileStream := file newReadWriteStream.	self extractExtraFilesOnDirectory: file directory.		[self exportOnStream: fileStream]		ensure: [fileStream notNil	ifTrue: [fileStream close]].</body></methods><methods><class-id>Roassal.ROVWHTMLExporter class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">exportViewAsHTML: view	^(self new) view: view; interactiveExportWithExtension: 'html'</body></methods><methods><class-id>Roassal.ROVWEaselTest</class-id> <category>tests</category><body package="Roassal-VWSpecific">testChoosingAnExample	| stack firstView |	builder := easel open.	"The example is 'view nodes: Collection withAllSubclasses.'"	easel selectExampleNamed: #step1CreatingNodesOn:.	stack := easel view.	firstView := stack firstView.	self assert: (firstView elements size = Collection withAllSubclasses size).	self assert: ((firstView elements collect: #model) includesAll: Collection withAllSubclasses)</body><body package="Roassal-VWSpecific">testChoosingAnExampleAndModifyingIt	| stack firstView source |	builder := easel open.	easel selectExampleNamed: #step1CreatingNodesOn:.	source :=  'view nodes: #(1 2 3). 20 + 30'.	easel sourceCode: source.	easel show.	self assert: source = easel code value.	stack := easel view.	firstView := stack firstView.	self assert: (firstView elements size = 3).	self assert: (firstView elements collect: #model) asArray = #(1 2 3).</body><body package="Roassal-VWSpecific">testDefaultSourceCode	self assert: easel sourceCode = easel defaultSourceCode</body><body package="Roassal-VWSpecific">testGeneratingANewVisualization	| block |	easel sourceCode: ' 20 + 30'.	block := easel getCompiledBlockFromSource.	self assert: block class = [] class.	self assert: (block value: nil) = 50.</body><body package="Roassal-VWSpecific">testPopulatingMenu	| view |	view :=  ROMondrianViewBuilder new.	ROVWEasel new populateMenuOn: view.	"Make sure no error happens"</body></methods><methods><class-id>Roassal.ROVWEaselTest</class-id> <category>initialize-release</category><body package="Roassal-VWSpecific">tearDown	super tearDown.	builder isNil ifFalse: [ builder window close ]</body></methods><methods><class-id>Roassal.ROVWEaselTest</class-id> <category>running</category><body package="Roassal-VWSpecific">setUp	super setUp.	easel := ROVWEasel new.</body></methods><methods><class-id>Roassal.RONativeExampleUtility class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">current	^self allSubclasses first </body><body package="Roassal-Core">getMethodsForClass: aClass	^self subclassResponsibility </body><body package="Roassal-Core">substringsFor: aString	^self subclassResponsibility </body></methods><methods><class-id>Roassal.ROVWExampleUtility class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">getMethodsForClass: aClass	^aClass methodDictionary</body><body package="Roassal-VWSpecific">substringsFor: aString	^aString roSubstrings</body></methods><methods><class-id>Roassal.ROControllerTest</class-id> <category>tests</category><body package="Roassal-VWSpecific">testInstantiation	self should: [ ROController new ] raise: Error</body><body package="Roassal-VWSpecific">testSteppingAnimation	| controller |	controller := ROController view: ROView new visual: ROVWVisual new.	self deny: controller wantsSteps.	controller startStepping.</body></methods><methods><class-id>Roassal.RONativeWidgetFactory class</class-id> <category>public</category><body package="Roassal-Core">current	^ self subclasses first</body><body package="Roassal-Core">forView: aView	"Return an instance of ROMorph of ROVWVisual without opening the window. "		self subclassResponsibility</body><body package="Roassal-Core">forView: aView windowSized: aPoint	"Return an instance of ROMorph of ROVWVisual and open the window. This depends on which platform it is run"		self subclassResponsibility</body><body package="Roassal-Core">menuForAssociations: associations on: element	"associations is a list of association following: #aSymbol -&gt; [ :model | ... ]	The block contains in the association is evaluated with the model provided by the element."		self subclassResponsibility</body></methods><methods><class-id>Roassal.ROVWWidgetFactory class</class-id> <category>public</category><body package="Roassal-VWSpecific">forView: aView	"Return an instance of ROMorph of ROVWVisual without opening the window. "		^ ROPlatform current hostVisualElement on: aView</body></methods><methods><class-id>Roassal.ROVWWidgetFactory class</class-id> <category>as yet unclassified</category><body package="Roassal-VWSpecific">forView: aView windowSized: aPoint	"Return an instance of ROMorph of ROVWVisual and open the window. This depends on which platform it is run"	|ui drawing |	ui := RoassalUI new.	ui setOpenIn: aPoint.	drawing := ui drawing.	drawing setView: aView.	ui setOpenIn: aPoint.	ui open.	^ui</body><body package="Roassal-VWSpecific">menuForAssociations: associations on: element	"associations is a list of association following: #aSymbol -&gt; [ :model | ... ]	The block contains in the association is evaluated with the model provided by the element."		"		| v |		v := MenuMorph new.		associations do: [ :assoc | 			v 				add: assoc key				target: assoc value				selector: #roValue:				argument: element model		].				v popUpInWorld."		| v |		v := Menu new.		associations do: [ :assoc | 			v addItemLabel: assoc key  value: [(assoc value) value: element].		].		^(v startUp) evaluate.</body><body package="Roassal-VWSpecific">openRoassalEasel"	self  openRoassalEasel"		|ui drawing |	ui := ROVWEasel new.	drawing := ui drawing.	ui open.	^ui</body></methods><methods><class-id>Roassal.ROLayoutEvent</class-id> <category>accessing</category><body package="Roassal-Core">elements	^ elements</body><body package="Roassal-Core">elements: anObject	elements := anObject</body><body package="Roassal-Core">layout	^ layout</body><body package="Roassal-Core">layout: anObject	layout := anObject</body></methods><methods><class-id>Roassal.ROLayoutStep</class-id> <category>accessing</category><body package="Roassal-Core">currentIteration	^ currentIteration</body><body package="Roassal-Core">currentIteration: number	currentIteration := number</body><body package="Roassal-Core">maxInterations	^ maxInterations</body><body package="Roassal-Core">maxInterations: anObject	maxInterations := anObject</body></methods><methods><class-id>Roassal.ROLayoutStep</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	currentIteration := 0.	maxInterations := 0.</body></methods><methods><class-id>Roassal.ROAbstractLayout</class-id> <category>as yet unclassified</category><body package="Roassal-Core">testAbstract	ROLayout withAllSubclasses do: [ :cls | 		cls subclasses notEmpty ifTrue: [ 			self assert: cls isAbstract ] ]</body><body package="Roassal-Core">testNotAbstract	ROLayout withAllSubclasses do: [ :cls | 		cls subclasses isNil ifTrue: [ 			self deny: cls isAbstract ] ]</body></methods><methods><class-id>Roassal.ROPaint</class-id> <category>accessing</category><body package="Roassal-VWSpecific">color	^color</body><body package="Roassal-VWSpecific">color: anObject	color := anObject</body></methods><methods><class-id>Roassal.ROPaint</class-id> <category>drawing</category><body package="Roassal-VWSpecific">drawOn: aCairoContext	aCairoContext sourceColorValue: color alpha: color alpha;	fill.</body></methods><methods><class-id>Roassal.ROPaint</class-id> <category>initialize-release</category><body package="Roassal-VWSpecific">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	color := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Roassal.ROPaint class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">color: aColorValue	^ self new color: aColorValue.</body><body package="Roassal-VWSpecific">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal.ROGrowable</class-id> <category>initialization</category><body package="Roassal-Core">initializeElement: element	 element on: ROMouseClick do: [ :event | 		ROGrow on: element by: 10.		element signalUpdate ].</body></methods><methods><class-id>Roassal.ROHorizontalAttachPoint</class-id> <category>public - hooks</category><body package="Roassal-Core">endingPointOf: anEdge	^ anEdge to absolutePosition + (0 @ (anEdge to bounds height / 2) asInteger)</body><body package="Roassal-Core">startingPointOf: anEdge	^ anEdge from absolutePosition + (anEdge from bounds width @ (anEdge from bounds height / 2) asInteger)	</body></methods><methods><class-id>Roassal.RODynamicEdge</class-id> <category>hooks</category><body package="Roassal-Core">processCreatedEdge: element	"Do nothing"</body></methods><methods><class-id>Roassal.ROTreeLayerWrapper</class-id> <category>accessing</category><body package="Roassal-Core">add: aFigure		elements add: aFigure</body><body package="Roassal-Core">do: aBlock		elements do: aBlock</body><body package="Roassal-Core">height		cachedHeight isNil		ifTrue:			[cachedHeight := 0.			elements do: [:aFigure | cachedHeight := cachedHeight max: aFigure height]].	^cachedHeight</body><body package="Roassal-Core">width: gapSize		^ cachedWidth ifNil: [		cachedWidth := 0.		elements do: [ :aFigure | cachedWidth := cachedWidth + aFigure width].		cachedWidth := cachedWidth + ((elements size - 1) * gapSize) ].</body></methods><methods><class-id>Roassal.ROTreeLayerWrapper</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	elements := OrderedCollection new.	cachedWidth := nil.	cachedHeight := nil</body></methods><methods><class-id>Roassal.ROAbstractAdjustSize class</class-id> <category>public</category><body package="Roassal-Core">getNewRectangleFor: element	self subclassResponsibility </body><body package="Roassal-Core">on: element	| rec topLeft border |	self assert: [ element isKindOf: ROElement ].	topLeft := element bounds topLeft.	rec := self getNewRectangleFor: element.	element extent: rec extent.	element translateTo: (rec topLeft).	"Check if I was extended on the topLeft corner"	element elementsNotEdge do: [ :el | el translateWithoutUpdatingContainedElementsBy: topLeft - rec topLeft ]</body></methods><methods><class-id>Roassal.ROAdjustSizeOfNesting class</class-id> <category>public</category><body package="Roassal-Core">getNewRectangleFor: element	^ element encompassingRectangle</body></methods><methods><class-id>Roassal.ROAbstractHorizontalTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">computeChildrenFor: aNode	self subclassResponsibility</body><body package="Roassal-Core">defaultFromPositions		^#(#rightCenter)	"BTC-2012-08-05 Not sure what effect this has or if this is a valid symbol - its just pattern matching."</body><body package="Roassal-Core">defaultToPositions	^#(#leftCenter)	"BTC-2012-08-05 Not sure what effect this has or if this is a valid symbol - its just pattern matching."</body><body package="Roassal-Core">layout: aNodeCollection atPoint: aPoint atLayer: aNumber	| treeSize childrenPosition x y middleOfTree |	aNodeCollection isEmpty ifTrue: [ ^ 0 ].	x := aPoint x.	y := aPoint y.	alreadyLayoutedNodes addAll: aNodeCollection.	self atLayer: aNumber add: aNodeCollection.	aNodeCollection do: [ :each | 		childrenPosition := x + each width + self horizontalGap.		treeSize := each height			max: (self layout: (self computeChildrenFor: each) atPoint: childrenPosition @ y atLayer: aNumber + 1).		middleOfTree := y + (treeSize / 2.0) - (each height / 2.0).		translator translate: each to: (x @ middleOfTree).		y := y + treeSize + self verticalGap.		self step ].	^ y - aPoint y - self verticalGap</body></methods><methods><class-id>Roassal.ROAbstractHorizontalTreeLayout</class-id> <category>private</category><body package="Roassal-Core">rearrangeByLayers: aGraph	| cursor layerDepthSize |	cursor := self leftGap.	nodesByLayer do: [:eachSetOfNodes |		layerDepthSize := eachSetOfNodes inject: 0 into: [:max :eachNode | 			translator translate: eachNode to: (cursor @ eachNode bounds top).			max max: eachNode width ].		cursor := cursor + layerDepthSize + self horizontalGap ]</body></methods><methods><class-id>Roassal.ROAbstractHorizontalTreeLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	verticalGap := 3.	horizontalGap := 20</body></methods><methods><class-id>Roassal.ROAbstractHorizontalTreeLayout class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractHorizontalTreeLayout</body></methods><methods><class-id>Roassal.ROHorizontalTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">computeChildrenFor: aNode	^ self childrenFor: aNode except: alreadyLayoutedNodes</body></methods><methods><class-id>Roassal.ROReversedRadialTreeLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeElements 	| root gap min |		root := self rootNodesFor: nodeElements .	root do: [ :e | self initializeNode: e ].	root do: [ :e | self computePosition: e ].		maxLayer := (root collect: [ :e | e layer ]) max.		(root size &gt; 1) ifTrue: [ maxLayer := maxLayer + 1 ].		maxAbcissa := externalLayer last x + (self halfDiameterOf: externalLayer last) + horizontalGap +  (self halfDiameterOf: externalLayer first) .		gap := maxAbcissa / 2 / Float pi / maxLayer.	gap := gap max: ( nodeElements collect: [ :e | self halfDiameterOf: e ] ) max * 2 .			verticalGap := verticalGap max: gap.		root do: [ :e | self draw: e. self step ].		min := (nodeElements collect: [ :e | e position x] ) min @ (nodeElements collect: [ :e | e position y]) min. 		nodeElements do: [ :e | e translateBy: min negated ]</body></methods><methods><class-id>Roassal.ROReversedRadialTreeLayout</class-id> <category>algorithm</category><body package="Roassal-Core">computePosition: aNode	|children previous|		children := self childrenFor: aNode.		children do: [ :e | self computePosition: e ].													children isEmpty ifTrue: [ externalLayer first = aNode ifFalse: [ previous := externalLayer at: ( externalLayer indexOf: aNode) - 1.																											(previous father = aNode father) ifTrue: [ aNode x: previous x + (self halfDiameterOf: previous) + (self halfDiameterOf: aNode) + (horizontalGap / 2) ] 																																			ifFalse: [ aNode x: previous x + (self halfDiameterOf: previous) + (self halfDiameterOf: aNode) + horizontalGap] ] ]																																																ifFalse: [ aNode x: aNode leftContour x + aNode rightContour x / 2 ]</body><body package="Roassal-Core">halfDiameterOf: aNode	|diam|		(aNode shapes first isKindOf: ROEllipse) ifTrue: [ diam := aNode width max: aNode height ]										ifFalse: [ diam := (aNode width * aNode width + (aNode height * aNode height)) sqrtFloor ].		^ diam / 2</body></methods><methods><class-id>Roassal.ROReversedRadialTreeLayout</class-id> <category>drawing-general</category><body package="Roassal-Core">draw: aNode	| a |	(self childrenFor: aNode) do: [ :e | self draw: e ].		aNode translateTo: (Point radius: maxLayer - aNode layer * verticalGap theta: (maxAbcissa - aNode x / maxAbcissa) * 2 * Float pi ).	a := (self halfDiameterOf: aNode ) / 2 sqrt negated.	aNode translateBy: ( a @ a ).</body></methods><methods><class-id>Roassal.ROReversedRadialTreeLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	super initialize.	verticalGap := 30.	horizontalGap := 20.	externalLayer := OrderedCollection new</body><body package="Roassal-Core">initializeNode: aNode	|children|		children := self childrenFor: aNode.		children do: [ :e | self initializeNode: e.						e father: aNode ].		children isEmpty ifTrue: [ aNode layer: 0.							externalLayer add: aNode ] 					ifFalse: [ aNode layer: ((children collect: [ :e | e layer ]) max + 1).							aNode leftContour: children first;									rightContour: children last ].</body></methods><methods><class-id>Roassal.ROGraphTransformationTest</class-id> <category>obsolete</category><body package="Roassal-Core">OLDtestCheckCycleNoCycle	| view nodes edges newNode transformation node1 node2 node3 |	view := ROMondrianViewBuilder new.	nodes := view nodes: (Array with: 1 with: 2 with: 3).	edges := view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3 with: 1 -&gt; 3).			transformation := ROGraphTransformation new.	"self assert: (transformation containsCycleIn: nodes with: edges)"	"self deny: (transformation containsCycleIn: nodes first with: edges passedNodes: OrderedCollection new)"	self deny: (transformation hasCycleIn: nodes with: edges)</body></methods><methods><class-id>Roassal.ROGraphTransformationTest</class-id> <category>transforming graph</category><body package="Roassal-Core">testFromEdgesToNesting	| view nodes edges newNode transformation |	view := ROMondrianViewBuilder new.	nodes := view nodes: (Array with: 1 with: 2).	edges := view edgesFromAssociations: (Array with: 1 -&gt; 2).		transformation := ROGraphTransformation new.	"Testing utility methods"	self assert: (transformation getConnectedNodesFrom: nodes first using: edges) = (Array with: nodes second).		"Doing the transformation"	newNode := transformation				fromEdgesToNesting: nodes edges: edges root: nodes first.					self assert: newNode elements size = 1.	self assert: newNode model = 1.	self assert: newNode elements first model = 2.		self assert: newNode == nodes first</body><body package="Roassal-Core">testFromEdgesToNesting2	| view nodes edges newNode transformation |	view := ROMondrianViewBuilder new.	nodes := view nodes: (Array with: 1 with: 2 with: 3).	edges := view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 1 -&gt; 3).		transformation := ROGraphTransformation new.	"Testing utility methods"	self assert: (transformation getConnectedNodesFrom: nodes first using: edges) 				= (Array with: nodes second with: nodes third).		"Doing the transformation"	newNode := transformation				fromEdgesToNesting: nodes edges: edges root: nodes first.					self assert: newNode elements size = 2.	self assert: newNode model = 1.	self assert: newNode elements first model = 2.	self assert: newNode elements second model = 3.			"We make sure that the nodes that have been moved are removed from the view"	self assert: (view raw elements includes: newNode).	self deny: (view raw elements includes: nodes second).	self deny: (view raw elements includes: nodes third).</body><body package="Roassal-Core">testFromEdgesToNesting3	| view nodes edges newNode transformation |	view := ROMondrianViewBuilder new.	nodes := view nodes: (Array with: 1 with: 2 with: 3).	edges := view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3).		transformation := ROGraphTransformation new.	"Testing utility methods"	self assert: (transformation getConnectedNodesFrom: nodes first using: edges) 				= (Array with: nodes second).	"Doing the transformation"	newNode := transformation				fromEdgesToNesting: nodes edges: edges root: nodes first.					self assert: newNode elements size = 1.	self assert: newNode model = 1.	self assert: newNode elements first model = 2.		self assert: newNode elements first numberOfElements = 1.	self assert: newNode elements first elements first model = 3.</body></methods><methods><class-id>Roassal.ROGraphTransformationTest</class-id> <category>removing</category><body package="Roassal-Core">testRemovingIntermediateNodesAndEdges	| view nodes |	view := ROMondrianViewBuilder new.	nodes := view nodes: #('a' 'b' 'c').	view edgesFromAssociations: (Array with: 'a' -&gt; 'b' with: 'b' -&gt; 'c').	self assert: (ROGraphTransformation new hasIncomingEdges: nodes second).	self assert: (ROGraphTransformation new hasIncomingEdges: nodes third).	self deny: (ROGraphTransformation new hasIncomingEdges: nodes first).	ROGraphTransformation new removeIntermediaryNodes: nodes.	self assert: view raw elements size = 3.	self assert: (view raw elementsSuchThat: #isElement) size = 2.	self assert: (view raw elementsSuchThat: #isEdge) size = 1.</body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>accessing</category><body package="Roassal-Core">children	^ children copy</body><body package="Roassal-Core">elements	^ elements copy asArray</body><body package="Roassal-Core">interactionBuilder	^ interactionBuilder</body><body package="Roassal-Core">interactionBuilder: anObject	interactionBuilder := anObject</body><body package="Roassal-Core">layout	^ layout</body><body package="Roassal-Core">layout: aLayoutClass	layout := aLayoutClass </body><body package="Roassal-Core">parent	^ parent</body><body package="Roassal-Core">parent: aFrame	parent := aFrame</body><body package="Roassal-Core">shape	^ shape	</body><body package="Roassal-Core">shape: aShape	shape := aShape</body><body package="Roassal-Core">view	^ view</body><body package="Roassal-Core">view: aView	view := aView</body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>accessing-computed</category><body package="Roassal-Core">edges		^ (elements select: [ :el | el isEdge ]) asArray</body><body package="Roassal-Core">frameOfElement: element	"Return the frame that contains element.	 In case several frames contains the same element, the result is unspecified"	^ self frameOfElement: element ifFound: [ :foundFrame | ^ foundFrame ]</body><body package="Roassal-Core">frameOfElement: element ifFound: aBlock	"aBlock takes an argument, the frame just found"		"Return the frame that contains element.	 In case several frames contains the same element, the result is unspecified"	(elements includes: element) 		ifTrue: [ ^ aBlock value:  self ].			children do: [ :childFrame |		childFrame frameOfElement: element ifFound: aBlock.	].	</body><body package="Roassal-Core">nodes	^ (elements select: [ :el | el class ~~ ROEdge ]) asArray </body><body package="Roassal-Core">numberOfChildren	^ children size</body><body package="Roassal-Core">numberOfElements	^ elements size</body><body package="Roassal-Core">numberOfFrames	^  children inject: 1 into: [ :s :e | s + e numberOfFrames ]</body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>adding</category><body package="Roassal-Core">addChild: aFrame	children add: aFrame</body><body package="Roassal-Core">addEdge: edge	"we need to add the edge in the frame that includes both the from and to"	| frameTo frameFrom |	frameTo := self frameOfElement: edge to.	frameFrom := self frameOfElement: edge from.	(frameTo == frameFrom)		ifTrue: [ frameFrom addElement: edge ]		ifFalse: [ 			"This looks like to be a weir case"			self addElement: edge ]</body><body package="Roassal-Core">addElement: element"self haltIf: [ element class == ROEdge ]."	elements add: element</body><body package="Roassal-Core">addElements: elementss	elementss do: [:e | self addElement: e]	</body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>removing</category><body package="Roassal-Core">removeChild: aFrame	children remove: aFrame ifAbsent: [  ]</body><body package="Roassal-Core">removeEdge: edge 		self removeEdges: (Array with: edge)</body><body package="Roassal-Core">removeEdges: objects 		elements removeAllFoundIn: objects</body><body package="Roassal-Core">removeElement: element	|frame|	element elements do:[:el |			frame := (self frameOfElement: el). 			frame removeElement: el.			frame removeFromParent.		].	elements remove: element ifAbsent: [  ]</body><body package="Roassal-Core">removeElements: objects	objects do:[:ob |		self removeElement: ob					].</body><body package="Roassal-Core">removeFromParent	parent removeChild: self.</body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	super initialize.	elements := OrderedCollection new.	children := OrderedCollection new.</body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>printing</category><body package="Roassal-Core">printOn: stream	super printOn: stream.	self parent == self 		ifTrue: [ stream nextPutAll: '&lt;root&gt;' ]	  </body></methods><methods><class-id>Roassal.ROMondrianFrame</class-id> <category>actions</category><body package="Roassal-Core">applyLayout	children do: [ :frameChild | frameChild applyLayout ].	layout 		on: self nodes edges: self edges.</body></methods><methods><class-id>Roassal.ROMondrianFrame class</class-id> <category>public</category><body package="Roassal-Core">newFrom: aViewBuilder 	"Create a mondrian frame from the mondrian view builder"	| rawView instance |	rawView := aViewBuilder raw.	instance := self new.		instance view: rawView.	instance shape: aViewBuilder getShape.	instance interactionBuilder: aViewBuilder interaction.	^ instance</body></methods><methods><class-id>Roassal.RORemoveEdge class</class-id> <category>public</category><body package="Roassal-Core">edgesFrom: anElement 	anElement view elementsDo: [ :el |		el isEdge ifTrue: [ (el from == anElement) ifTrue: [ el remove ] ] ].	anElement view signalUpdate </body><body package="Roassal-Core">edgesTo: anElement 	anElement view elementsDo: [ :el |		el isEdge ifTrue: [ (el to == anElement) ifTrue: [ el remove ] ] ].	anElement view signalUpdate </body></methods><methods><class-id>Roassal.ROQuadTreeTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	nodes := OrderedCollection new.		(0 to: 10) do: [ :e | nodes add: (ROElement new translateTo: e @ e); 								add: (ROElement new translateTo: e @ (10 - e)) ].		quad := ROQuadTree withAll: nodes.</body></methods><methods><class-id>Roassal.ROQuadTreeTest</class-id> <category>as yet unclassified</category><body package="Roassal-Core">wellCreated: aQuad	aQuad leaf ifTrue: [ aQuad node isNil ifTrue: [ ^ true ]										   ifFalse: [ ^ (Rectangle origin: aQuad origin corner: aQuad corner) contains: aQuad node position ] ] 				ifFalse: [ aQuad node isNil ifTrue: [ ^ aQuad nodes allSatisfy: [ :e | self wellCreated: e ] ] 										    ifFalse: [ ^ ((Rectangle origin: aQuad origin corner: aQuad corner) contains: aQuad node position) &amp; (aQuad nodes allSatisfy: [ :e | self wellCreated: e ]) ] ]</body></methods><methods><class-id>Roassal.ROQuadTreeTest</class-id> <category>tests</category><body package="Roassal-Core">testCreate		| quadrants points |	points :=  Array with: 0@0 with: 0@5 with: 5@0 with: 5@5.		nodes := points collect: [ :pos | ROElement new translateTo: pos ].	quad := ROQuadTree withAll: nodes.		quadrants := quad nodes.		self assert: (quadrants at: 1) node position = (0@0).	self assert: (quadrants at: 2) node position = (5@0).	self assert: (quadrants at: 3) node position = (0@5).	self assert: (quadrants at: 4) node position = (5@5)</body><body package="Roassal-Core">testLeaf	self assert: (quad leaf ifTrue: [quad nodes allSatisfy: [ :e | e isNil ] ]							ifFalse: [ quad nodes anySatisfy: [ :e | self isTrueLeaf: e ] ] )</body><body package="Roassal-Core">testRectangle	| points |	points := Array with:  0@5 with: 5@0 with: 10@5 with: 5@5.	nodes := points collect: [ :e | ROElement new translateTo: e ].	quad := ROQuadTree withAll: nodes.		self assert: quad origin = (0@0).	self assert: quad corner = (10@10)</body><body package="Roassal-Core">testSquare	| points |	points := Array with:  0@5 with: 5@0 with: 10@5 with: 5@5.		nodes := points collect: [ :pos | ROElement new translateTo: pos ].	quad := ROQuadTree withAll: nodes.		self assert: quad origin = (0@0).	self assert: quad corner = (10@10)</body></methods><methods><class-id>Roassal.ROQuadTreeTest</class-id> <category>testing</category><body package="Roassal-Core">isTrueLeaf: aQuad	aQuad isNil ifTrue: [ ^ false ].	aQuad leaf ifTrue: [ ^ aQuad nodes allSatisfy: [ :e | e isNil ] ]				ifFalse: [ ^ aQuad nodes anySatisfy: [ :e | self isTrueLeaf: e ] ]</body></methods><methods><class-id>Roassal.ROHighlightElementTest</class-id> <category>tests</category><body package="Roassal-Core">testColor	"el1 and el2 are the same, except el2 is lightly highlightable"	| el1 el2 view |	el1 := (ROElement on: 1) height: 50; width: 50.	el1 + (ROEllipse color: Color green).	el2 := (ROElement on: 1) height: 50; width: 50.	el2 + (ROEllipse color: Color green) @ ROLightlyHighlightable.	view := ROView new @ RODraggable.	view add: el1.	view add: el2.	ROHorizontalLineLayout on: view elements.	"view open."		self assert: (el1 getShape: ROShape) color = Color green.	self assert: (el2 getShape: ROShape) color = Color green.		el2 announce: ROMouseEnter.	self assert: (el2 getShape: ROShape) color = ROLightlyHighlightable new defaultHighlightColor.	self assert: el2 hasAttributes.	self assert: (el2 attributes at: #oldColor) = Color green.	el2 announce: ROMouseLeave.	self assert: (el2 getShape: ROShape) color = Color green.</body><body package="Roassal-Core">testHighlightAndUnlight	| element shape |	element := ROElement new + ROBorder yellow.	shape := (element getShape: ROShape).	self assert: shape color = Color yellow.	self deny: (ROBlink isHighlighted: element).		ROBlink highlight: element.	self assert: shape color = Color red.	self assert: (ROBlink isHighlighted: element).		ROBlink unhighlight: element.	self assert: shape color = Color yellow.	self deny: (ROBlink isHighlighted: element).</body><body package="Roassal-Core">testHighlightingShape	| shape1 shape2 el |	shape1 := ROBox white.	shape2 := ROBorder new.	el := ROElement new.	el + shape1 + shape2.			el @ ROLightlyHighlightable.		el announce: ROMouseEnter.		self assert: el shapes asArray = (Array with: shape2 with: shape1 with: (el getShape: RONullShape)).	self assert: (shape1 colorFor: el) = Color white.	self assert: (shape2 colorFor: el) = ROLightlyHighlightable highlightedColor.</body><body package="Roassal-Core">testLeavingWithoutEntering	| el shape |	el := ROElement new + (shape := ROBox new).	self assert: (shape colorFor: el) = ROBox defaultColor.		self deny: (ROBlink isHighlighted: el).			ROBlink unhighlight: el.	self assert: (shape colorFor: el) = ROBox defaultColor.	self deny: (ROBlink isHighlighted: el).</body><body package="Roassal-Core">testMultipleHighlight	| el shape |	el := ROElement new + (shape := ROBox new).	self assert: (shape colorFor: el) = ROBox defaultColor.		self deny: (ROBlink isHighlighted: el).		ROBlink highlight: el.	self assert: (shape colorFor: el) = Color red.	self assert: (ROBlink isHighlighted: el).		ROBlink highlight: el.	self assert: (shape colorFor: el) = Color red.	self assert: (ROBlink isHighlighted: el).		ROBlink unhighlight: el.	self assert: (shape colorFor: el) = ROBox defaultColor.	self deny: (ROBlink isHighlighted: el).</body><body package="Roassal-Core">testOnBox	| el |	el := ROElement on: 'hello'.	el + ROBox.		self assert: (el getShape: ROBox) color =  ROBox defaultColor.	ROBlink highlight: el.	self assert: (el getShape: ROBox) color =  Color red.		ROBlink unhighlight: el.	self assert: (el getShape: ROBox) color = ROEllipse defaultColor.</body><body package="Roassal-Core">testOnCircle	| el |	el := ROElement on: 'hello'.	el + ROEllipse.		self assert: (el getShape: ROEllipse) color = ROEllipse defaultColor.	ROBlink highlight: el.	self assert: (el getShape: ROEllipse) color = Color red.	ROBlink unhighlight: el.	self assert: (el getShape: ROEllipse) color = ROEllipse defaultColor.</body><body package="Roassal-Core">testUnhighlightingShape	| shape el |	shape := ROBox white.	el := ROElement new.	el + shape.			el @ ROLightlyHighlightable.		el announce: ROMouseLeave.	self assert: (shape colorFor: el) = Color white.	</body></methods><methods><class-id>Roassal.ROHighlightElementTest</class-id> <category>highlight edges</category><body package="Roassal-Core">testHighlightEdge	| rawView node1 node2 edge lineShape |	rawView := ROView new.	node1 := ROBox elementOn: 'node1'. 	node2 := ROBox elementOn: 'node2'.	edge := ROEdge from: node1 to: node2.	edge + (ROLine red).		edge @ ROLightlyHighlightable.	rawView add: edge; add: node1; add: node2.	node2 translateBy: 100 @ 0.	lineShape := edge getShape: ROLine.	self assert: (lineShape colorFor: edge) = Color red.	self shouldnt: [ edge announce: ROMouseEnter ] raise: Error.	self assert: (lineShape colorFor: edge) = ROLightlyHighlightable highlightedColor.		self shouldnt: [ edge announce: ROMouseLeave ] raise: Error.	self assert: (lineShape colorFor: edge) = Color red.</body></methods><methods><class-id>Roassal.ROVerticalAttachPoint</class-id> <category>public - hooks</category><body package="Roassal-Core">endingPointOf: anEdge	^  (anEdge to absolutePosition) + ((anEdge to bounds width / 2) asInteger @ 0)	</body><body package="Roassal-Core">startingPointOf: anEdge	^ (anEdge from absolutePosition) + ((anEdge from bounds width / 2) asInteger @ (anEdge from bounds height ))	</body></methods><methods><class-id>Roassal.ROZoomOnClickTest</class-id> <category>as yet unclassified</category><body package="Roassal-Core">testZoomOnClick	| view |	view := ROView new.	view add: (ROElement sprite @ ROZoomOnClick ).		view elements first announce: ROMouseClick</body></methods><methods><class-id>Roassal.RODraggableTest</class-id> <category>tests</category><body package="Roassal-Core">testAddition		| bounds |	node := ROElement new.	node addShape: (ROBox new).	node addInteraction: RODraggable.	bounds := node bounds.	node announce: (ROMouseDragging new step: 5 @ 5).	self assert: (bounds translateBy: 5 @ 5) = node bounds </body><body package="Roassal-Core">testAnnouncingDraggingWhileBeingRegistered	| bounds |	bounds := node bounds.	node addInteraction: RODraggable.	node announce: (ROMouseDragging new step: 4@3).	self assert: (bounds translateBy: 4@3) = node bounds.</body><body package="Roassal-Core">testAnnouncingDraggingWithoutBeingRegistered	| bounds |	bounds := node bounds.	node announce: (ROMouseDragging new step: 4@3).	self assert: bounds = node bounds.</body><body package="Roassal-Core">testDraggable	self deny: (node is: RODraggable).	self assert: (node numberOfInteractions isZero).	node addInteraction: RODraggable new.	self assert: (node is: RODraggable).		</body><body package="Roassal-Core">testDraggableByClass	self deny: (node is: RODraggable).	self assert: (node numberOfInteractions isZero).	node addInteraction: RODraggable.	self assert: (node is: RODraggable).		</body><body package="Roassal-Core">testDraggingStep	| view p1 |	view := ROView new.	view add: draggableNode.		"dragging a node increases its position by the dragging step"	p1 := draggableNode position.	self assert: (p1 = (0@0)).	draggableNode announce: (ROMouseDragging step: 10 @ 6).	self assert: (draggableNode position = (10 @ 6)).	draggableNode announce: (ROMouseDragging step: -10 @ -6).	self assert: (draggableNode position = (0 @ 0)).		"take care of real vs virtual steps"	view camera bounds: (0@0 corner: 250@250).	draggableNode announce: (ROMouseDragging step: 10 @ 6).	self assert: (draggableNode position = ( 5@3)).</body><body package="Roassal-Core">testElementToBeAdded	| drag |	self assert: (RODraggable elementToBeAdded class == RODraggable).	drag := RODraggable new.	self assert: (drag elementToBeAdded == drag)</body></methods><methods><class-id>Roassal.RODraggableTest</class-id> <category>running</category><body package="Roassal-Core">setUp	node := ROElement new.	node addShape: (ROBox new).	draggableNode := ROElement new.	draggableNode extent: 50@50.	draggableNode + ROBox.	draggableNode @ RODraggable.</body></methods><methods><class-id>Roassal.RODraggableTest</class-id> <category>nesting</category><body package="Roassal-Core">testNesting	| view node1 b innerNode |	view := ROView new.	node1 := ROElement spriteOn: 'hello'.	node1 add: (innerNode := ROElement spriteOn: 'world').	view add: node1.		node1 translateBy: 10@20.		b := node1 bounds.	ROAdjustSizeOfNesting on: node1.	ROAdjustSizeOfNesting on: node1.	self assert: (b = node1 bounds).	innerNode extent: 10@10.	innerNode translateBy: 1 @ 1.	self assert: (b = node1 bounds).		innerNode translateBy: 5 @ 5.	innerNode translateBy: 5 @ 5.	self assert: (b = node1 bounds).		innerNode announce: (ROMouseDragging step: 5 @ 5).	innerNode announce: (ROMouseDragging step: 5 @ 5).	self assert: (b = node1 bounds).		"	view openInWindow 	"</body></methods><methods><class-id>Roassal.ROMondrianCacheTest</class-id> <category>test cache shapes</category><body package="Roassal-Core">tocheckCacheShapeAndInnerElements	| element canvas |	view := ROMondrianViewBuilder new.	element := view node: 'hello' forIt: [ view nodes: (1 to: 20) ].	element translateBy: -200 @ 0.	view noLayout.	self assert: view raw numberOfElementsToRender = 21.	view raw windowSize: 500 @ 500.		canvas := ROTracingCanvas new.	view raw drawOn: canvas.	self assert: view raw numberOfElementsToRender = 1.	self assert: canvas trace =  #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white'))</body></methods><methods><class-id>Roassal.ROMondrianCacheTest</class-id> <category>tests</category><body package="Roassal-Core">testCache	| t sizeBefore |	t := OrderedCollection new.	view shape rectangle 		height: [ :v | t add: (Array with: v with: #height). 10 ];		width: [ :v | t add: (Array with: v with: #width). 20 ];		fillColor: [ :v | t add: (Array with: v with: #width). Color blue ].	view nodes: #(1 2).	view raw drawOn: RONullCanvas new.		sizeBefore := t size.	view raw drawOn: RONullCanvas new.	view raw drawOn: RONullCanvas new.	self assert: t size = sizeBefore.</body><body package="Roassal-Core">testCacheWithInner	| t sizeBefore |	t := OrderedCollection new.	view node: 'foo' forIt: [		view shape rectangle 			height: [ :v | t add: (Array with: v with: #height). 10 ];			width: [ :v | t add: (Array with: v with: #width). 20 ];			fillColor: [ :v | t add: (Array with: v with: #color). Color blue ].		view nodes: #(1 2) ].	view raw drawOn: RONullCanvas new.		sizeBefore := t size.	view raw drawOn: RONullCanvas new.	view raw drawOn: RONullCanvas new.	self assert: t size = sizeBefore</body></methods><methods><class-id>Roassal.ROMondrianCacheTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	view := ROMondrianViewBuilder new</body></methods><methods><class-id>Roassal.ROFixedSizedParent</class-id> <category>testing</category><body package="Roassal-Core">isFixed	^ true</body></methods><methods><class-id>Roassal.ROFixedSizedParent</class-id> <category>action</category><body package="Roassal-Core">on: element	"We do nothing"</body><body package="Roassal-Core">translate: innerElement by: deltaPoint	| adjustedDelta newPos parent parentExtent innerElementExtent initialPositionInner |	adjustedDelta := deltaPoint.	initialPositionInner := innerElement position.	newPos := initialPositionInner + deltaPoint. 	(newPos x &lt; padding x) ifTrue: [ adjustedDelta := (adjustedDelta x - newPos x + padding x) @ adjustedDelta y  ].		(newPos y &lt; padding y) ifTrue: [ adjustedDelta := adjustedDelta x @ (adjustedDelta y - newPos y + padding y) ].  	parent := innerElement parent.	parentExtent := parent extent.	innerElementExtent := innerElement extent.		(newPos x &gt; (parentExtent x - innerElementExtent x - padding x) )		ifTrue: [ adjustedDelta := (parentExtent x - innerElementExtent x - padding x - initialPositionInner x) @ adjustedDelta y  ].		(newPos y &gt; (parentExtent y - innerElementExtent y - padding y)) 		ifTrue: [ adjustedDelta := adjustedDelta x @ (parentExtent y - innerElementExtent y - padding y - initialPositionInner y) ]. 		innerElement translateWithoutUpdatingContainedElementsBy: adjustedDelta</body></methods><methods><class-id>Roassal.ROAllRecursivelyConnectedNodeDraggable</class-id> <category>utils</category><body package="Roassal-Core">computeAllRecursivelyConnectedNodesOf: element	"Return all the list of connected nodes. Take care to not fall into recursive loops. The element provided as argument is not part of the result"	| t |	t := self computeWithAllRecursivelyConnectedNodesOf: element.	t := t copyWithout: element.	^ t</body><body package="Roassal-Core">computeWithAllRecursivelyConnectedNodesOf: element	"Return all the list of connected nodes. Take care to not fall into recursive loops. The element provided as argument is part of the result"	| res |	res := OrderedCollection new.	self computeWithAllRecursivelyConnectedNodesOf: element visitedNodes: res.	^ res</body><body package="Roassal-Core">computeWithAllRecursivelyConnectedNodesOf: element visitedNodes: visitedNodes	(visitedNodes includes: element)		ifTrue: [ ^ self ].	visitedNodes add: element.	element allEdgesFrom do: [ :edge | 		self computeWithAllRecursivelyConnectedNodesOf: edge to visitedNodes: visitedNodes ]</body></methods><methods><class-id>Roassal.ROAllRecursivelyConnectedNodeDraggable</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: element	element on: ROElementTranslated do: [ :event |				(event element hasAttribute: #allRecursivelyConnectedNodes)			ifFalse: [ 				| t |				t := self computeAllRecursivelyConnectedNodesOf: event element.				t := t copyWithout: event element.				event element 									attributeAt: #allRecursivelyConnectedNodes 									put: t ].		(event element attributeAt: #allRecursivelyConnectedNodes) 				do: [ :ele | ele translateBy: event step ] ]</body></methods><methods><class-id>Roassal.ROScrollable</class-id> <category>hooks</category><body package="Roassal-Core">horizontalScrollbarFor: aStack	| scrollbar view |		view := aStack firstView.		scrollbar := ROElement new.	scrollbar width: 80.	scrollbar height: 15.	scrollbar + ROBox.		scrollbar on: ROMouseDragging do: [ :event | 		scrollbar translateByRealPoint: (event step * (1@0)).		scrollbar translateTo: (scrollbar position max: 0@0).		scrollbar translateTo: (scrollbar position min: (aStack camera width - scrollbar width) @ 0).				(scrollbar position x &gt;= 0 and: [ scrollbar position x  &lt;=  (aStack camera extent x - scrollbar width)])			ifTrue: [ 				| xView |				xView := view encompassingRectangle width * scrollbar position x / view camera width negated.				view translateTo: (xView @ view camera position y negated) asIntegerPoint ].		scrollbar signalUpdate.	]."	view  on: ROMouseDragging do: [ :event | 		| xView |		xScroll := view encompassingRectangle width * scrollbar position x / view camera width negated.		scrollbar translateTo: (xScroll @ 0).		scrollbar translateTo: (scrollbar position max: 0@0).		scrollbar translateTo: (scrollbar position min: (aStack camera extent x - scrollbar width) @ 0).	]." 	^ scrollbar</body><body package="Roassal-Core">initializeElement: aStack	| view horizontalScrollbar verticalScrollbar |	self assert: [ aStack isKindOf: ROViewStack ].	 	view := aStack firstView.		horizontalScrollbar := self horizontalScrollbarFor: aStack.	verticalScrollbar := self verticalScrollbarFor: aStack.		aStack add: horizontalScrollbar.	aStack add: verticalScrollbar.</body><body package="Roassal-Core">verticalScrollbarFor: aStack	| scrollbar view |		view := aStack firstView.		scrollbar := ROElement new.	scrollbar width: 15.	scrollbar height: 80.	scrollbar + ROBox.		scrollbar on: ROMouseDragging do: [ :event | 		scrollbar translateByRealPoint: (event step * (0@1)).		scrollbar translateTo: (scrollbar position max: 0@0).		scrollbar translateTo: (scrollbar position min: 0 @ (aStack camera extent y - scrollbar height)).				(scrollbar position y &gt;= 0 and: [ scrollbar position y  &lt;=  (aStack camera extent y  - scrollbar height)])			ifTrue: [ 				| yView |				yView := view encompassingRectangle height * scrollbar position y / view camera extent y  negated.				view translateTo: (view camera position x negated @ yView) asIntegerPoint ].		scrollbar signalUpdate.	].	view on: ROMouseDragging do: [ :event | 		scrollbar translateBy: (event step negated * (0 @ 1)).		scrollbar translateTo: (scrollbar position max: 0@0).		scrollbar translateTo: (scrollbar position min: 0 @ aStack camera extent y - scrollbar height).	]. 	^ scrollbar</body></methods><methods><class-id>Roassal.ROAbstractCanvas</class-id> <category>util</category><body package="Roassal-Core">virtualToRealPoint: aPoint	"Return a real point from a one expressed in the virtual coordinates"	^ (camera virtualToRealPoint: aPoint) + offset</body><body package="Roassal-Core">virtualToRealRectangle: aRectangle	"Return a rectangle with real coordinates from one expressed in the virtual coordinates"		^ (camera virtualToRealRectangle: aRectangle) translateBy: offset</body></methods><methods><class-id>Roassal.ROAbstractCanvas</class-id> <category>accessing</category><body package="Roassal-Core">camera	^ camera</body><body package="Roassal-Core">camera: aROCamera	camera := aROCamera</body><body package="Roassal-Core">canvas	^ nativeCanvas</body><body package="Roassal-Core">canvas: aNativeCanvas 	nativeCanvas := aNativeCanvas</body><body package="Roassal-Core">extent: aPoint	extent := aPoint</body><body package="Roassal-Core">offset	^ offset</body><body package="Roassal-Core">offset: anOffsetAsPoint	offset := anOffsetAsPoint </body></methods><methods><class-id>Roassal.ROAbstractCanvas</class-id> <category>hooks</category><body package="Roassal-Core">drawPolygon: listOfPoints color: color borderWidth: borderWidthValue borderColor: borderColorValue	"Render a polygon at a given position. 		nativeCanvas 			drawPolygon: (listOfPoints collect: [ :p | self virtualToRealPoint: p ])			color: color			borderWidth: borderWidthValue 			borderColor: borderColorValue.	"	self subclassResponsibility</body><body package="Roassal-Core">drawString: aByteString at: aPoint 	"Render a string at a given position. No specification about the font is given. Use the default then"	"Implementation example:		canvas drawString: aByteString at:  (self virtualToRealPoint: aPoint) font: nil color: Color black	"	self subclassResponsibility </body><body package="Roassal-Core">drawString: aByteString at: aPoint color: color	"Render a colored string at a given position. No specification about the font is given. Use the default then"	"Implementation example:			canvas drawString: aByteString at:  (self virtualToRealPoint: aPoint) font: nil color: color	"	self subclassResponsibility </body><body package="Roassal-Core">drawString: aByteString at:  p font: f color: color	"Render a colored string at a given position using a particular font."	"Implementation example:		canvas drawString: aByteString at:  (self virtualToRealPoint: p) font: f color: color	"	self subclassResponsibility </body><body package="Roassal-Core">fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 	"Render an oval"	"Implementation example		canvas		fillOval: (self virtualToRealRectangle: aRectangle)  color: aColor borderWidth: aSmallInteger borderColor: aColor4 	"	self subclassResponsibility </body><body package="Roassal-Core">fillRectangle: aRectangle color: fillColor 	"Render a rectangle"	"Implementation example			canvas fillRectangle: (self virtualToRealRectangle: aRectangle) color: fillColor	"		self subclassResponsibility </body><body package="Roassal-Core">form	"Return a bitmap"	"Implementation example		^ canvas form	"	self subclassResponsibility </body><body package="Roassal-Core">frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor 	"Render a framed rectangle. Implementation example:	canvas 		frameAndFillRectangle: (self virtualToRealRectangle: aRectangle) fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor.	"		self subclassResponsibility.</body><body package="Roassal-Core">line: aPoint to: aPoint2 width: aSmallInteger color: aColor 	"Draw a line between two points"	"Implementation example		canvas line: (self virtualToRealPoint: aPoint) to: (self virtualToRealPoint: aPoint2) width: aSmallInteger color: aColor.	"	self subclassResponsibility 		</body><body package="Roassal-Core">paintImage: aForm at: aPoint	"Render a bitmap on screen"	"Implementation example		canvas paintImage: aForm at:  (self virtualToRealPoint: aPoint) 	"	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROAbstractCanvas</class-id> <category>convenient</category><body package="Roassal-Core">paintBackground: color	self 		frameAndFillRectangle: (camera realToVirtualRectangle: (0@0 extent: extent)) 		fillColor: color		borderWidth: 0 		borderColor: Color white.</body></methods><methods><class-id>Roassal.ROAbstractCanvas</class-id> <category>initialize</category><body package="Roassal-Core">initialize 	super initialize.		extent := self class defaultExtent.		"Maybe a global camera would be useful. The camera object is never used normally. Since the camera of the view has to be set prior any drawing"	camera := ROCamera new.		offset := 0 @ 0</body><body package="Roassal-Core">realToVirtualPoint: aPoint	"Return a real point from a one expressed in the virtual coordinates"	^ camera realToVirtualPoint: aPoint</body><body package="Roassal-Core">realToVirtualRectangle: aRectangle	"Return a rectangle with virtual coordinates from one expressed in the real coordinates"		^ camera realToVirtualRectangle: aRectangle</body></methods><methods><class-id>Roassal.ROAbstractCanvas class</class-id> <category>hooks</category><body package="Roassal-Core">onCamera: camera	"Return a new canvas with a created canvas"	"Implementation example: 		| form canvas |		form := Form extent: camera realExtent depth: Display depth.		canvas := FormCanvas on: form.		^ self canvas: canvas camera: camera	"	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractCanvas class</class-id> <category>public</category><body package="Roassal-Core">canvas: canvas camera: camera	^ self new canvas: canvas; camera: camera; yourself</body></methods><methods><class-id>Roassal.ROAbstractCanvas class</class-id> <category>configuration</category><body package="Roassal-Core">defaultExtent	^ 40 @ 30</body></methods><methods><class-id>Roassal.ROTracingCanvas</class-id> <category>util</category><body package="Roassal-Core">colToStr: aColor	"This method is useful for VW when Color white printString = 'ColorValue white'"	| str |	str := aColor printString.	^ ((RONativeExampleUtility current substringsFor: str) size = 2)			ifTrue: [ 'Color ', (RONativeExampleUtility current substringsFor: str) second ] 			ifFalse: [ str ]</body><body package="Roassal-Core">fontToStr: f	^ f name, ' ', f pointSize printString	 </body><body package="Roassal-Core">form</body><body package="Roassal-Core">pointToStr: aPoint	^ '(', aPoint x printString, '@', aPoint y printString, ')'</body><body package="Roassal-Core">recToStr: rectangle	"Return a textual description of a rectangle"		^ (self pointToStr: rectangle origin), ' corner: ', (self pointToStr: rectangle corner)</body></methods><methods><class-id>Roassal.ROTracingCanvas</class-id> <category>rendering</category><body package="Roassal-Core">drawPolygon: points color: c  borderWidth: w  borderColor: bc	trace add: (Array with: #drawPolygon with: points printString with: w with: bc)</body><body package="Roassal-Core">drawString: aByteString at: aPoint 	trace add: (Array with: #drawString with: aByteString with: (self pointToStr: aPoint))</body><body package="Roassal-Core">drawString: aByteString at: aPoint color: color	trace add: (Array with: #drawStringColor with: aByteString with: (self pointToStr: aPoint) with: (self colToStr: color))</body><body package="Roassal-Core">drawString: aByteString at:  p font: f color: color	| array |	array := Array new: 4.	array at: 1 put: #drawStringColor;		  at: 2 put: aByteString;		  at: 3 put: (self pointToStr: p);		  at: 4 put: (self colToStr: color).	trace add: array.</body><body package="Roassal-Core">fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 	trace add: (Array with: #fillOval: with: (self recToStr: aRectangle) with: aSmallInteger with: (self colToStr: aColor))</body><body package="Roassal-Core">fillRectangle: aRectangle color: fillColor 	trace add: (Array with: #fillRectangle with: (self recToStr: aRectangle) with: (self colToStr: fillColor))</body><body package="Roassal-Core">frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor 	trace add: ((Array with: #frameAndFillRectangle: with: (self recToStr: aRectangle) with: (self colToStr: fillColor)), (Array with: aSmallInteger with: (self colToStr: aColor)))</body><body package="Roassal-Core">line: aPoint to: aPoint2 width: aSmallInteger color: aColor 	trace add: ((Array with: #line with: (self pointToStr: aPoint) with: (self pointToStr: aPoint2)), (Array with: aSmallInteger with: (self colToStr: aColor)))</body><body package="Roassal-Core">paintImage: aForm at: aPoint	trace add: (Array with: #paintImage with: (self pointToStr: aPoint))</body></methods><methods><class-id>Roassal.ROTracingCanvas</class-id> <category>accessing</category><body package="Roassal-Core">trace	^ trace copy asArray</body></methods><methods><class-id>Roassal.ROTracingCanvas</class-id> <category>initialize</category><body package="Roassal-Core">initialize 	super initialize.	trace := OrderedCollection new</body></methods><methods><class-id>Roassal.ROTracingCanvas class</class-id> <category>public</category><body package="Roassal-Core">onCamera: camera	self error: 'Should not be called'</body></methods><methods><class-id>Roassal.ROAbstractAnimationMergeStrategy</class-id> <category>testing</category><body package="Roassal-Core">isAppend	^ false</body><body package="Roassal-Core">isExclusive	^ false</body></methods><methods><class-id>Roassal.ROAbstractAnimationMergeStrategy</class-id> <category>hooks</category><body package="Roassal-Core">added: animation in: aView	"The animation for which I am associated with has been added in aView"	self subclassResponsibility</body></methods><methods><class-id>Roassal.ROAbstractAnimationMergeStrategy class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">instance	^ instance isNil ifTrue: [  instance := self new ] ifFalse: [ instance ]</body></methods><methods><class-id>Roassal.ROAnimationAppend</class-id> <category>testing</category><body package="Roassal-Core">isAppend	^ true</body></methods><methods><class-id>Roassal.ROAnimationAppend</class-id> <category>hooks</category><body package="Roassal-Core">added: animation in: aView	"The animation for which I am associated with has been added in aView"	"Good, so we do nothing"</body></methods><methods><class-id>Roassal.ROShrikingSize class</class-id> <category>public</category><body package="Roassal-Core">getNewRectangleFor: element	^ element encompassingNestedRectangle</body></methods><methods><class-id>Roassal.RONumberLinearNormalizer</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	scale := 1</body></methods><methods><class-id>Roassal.RONumberLinearNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">roValue: anEntity	"Normalize value based on maximum value."		| value |	value := self command roValue: anEntity.	^ ((value abs / (self maximumValue: anEntity)) asFloat * self scale) asInteger</body><body package="Roassal-Core">scale	^ scale</body><body package="Roassal-Core">scale: anObject	scale := anObject</body></methods><methods><class-id>Roassal.ROFunctionMove</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	blockX := [ :elapsed | elapsed ].	blockY := [ :elapsed | elapsed ].</body></methods><methods><class-id>Roassal.ROFunctionMove</class-id> <category>accessing</category><body package="Roassal-Core">blockX	^ blockX</body><body package="Roassal-Core">blockX: aBlock	blockX := aBlock</body><body package="Roassal-Core">blockY	^ blockY</body><body package="Roassal-Core">blockY: aBlock	blockY := aBlock</body></methods><methods><class-id>Roassal.ROFunctionMove</class-id> <category>hooks</category><body package="Roassal-Core">doStep	element translateTo: ((blockX roValue: self elapsedCycles) @ (blockY roValue: self elapsedCycles))</body></methods><methods><class-id>Roassal.ROFunctionMove</class-id> <category>public</category><body package="Roassal-Core">on: anElement	element := anElement.	element view addAnimation: self.</body></methods><methods><class-id>Roassal.ROView</class-id> <category>animation</category><body package="Roassal-Core">addAnimation: animation	"Add an animation to the view. The animation takes effect as soon as it is added"		animation addedIn: self.	animations add: animation.	self signalUpdate </body><body package="Roassal-Core">animations	"Return a copy of the animations"	^ animations copy</body><body package="Roassal-Core">completeAllAnimations	[ self numberOfAnimations &gt; 0 ]		whileTrue: [ self doAnimationCycle ]</body><body package="Roassal-Core">doAllAnimationCycles	"This methos is useful in testing. It executes all the animation without actually displaying anything"		[ self hasAnimation ] whileTrue: [ self doAnimationCycle ]	</body><body package="Roassal-Core">doAnimationCycle	animations notEmpty ifTrue: [ self signalUpdate ].	animations do: [ :e | e doCycle ].	animations := animations reject: #hasCompleted.</body><body package="Roassal-Core">numberOfAnimations	^ animations size</body><body package="Roassal-Core">removeAnimationSuchThat: aOneArgBlock	"Remove all animations that satisfy the one-arg block passed as parameter"	| animationsToRemove |	animationsToRemove := animations select: aOneArgBlock.	animations := animations copyWithoutAll: animationsToRemove</body></methods><methods><class-id>Roassal.ROView</class-id> <category>rendering elements</category><body package="Roassal-Core">addElementRecursivelyToRender: element	self addElementToRender: element.	element allElementsDo: [ :el | 		self addElementToRender: el ]</body><body package="Roassal-Core">addElementToRender: element	element setZindexFrom: zOrdering.	elementsToRender do: [ :assoc | 		(assoc key = element zIndex) ifTrue: [ assoc value add: element. ^ self ] ].		"We have found the key, so we need to add it"	elementsToRender add: element zIndex -&gt; (OrderedCollection with: element)</body><body package="Roassal-Core">addElementsToRender: els	els do: [ :el | self addElementToRender: el ]</body><body package="Roassal-Core">cleanRenderingElement	"Check if some elements should be removed or added. This method is useful when the rendering queue has to be modified when being iterated."	renderedElementsToBeRemoved size &gt; 0		ifTrue: [ 			renderedElementsToBeRemoved do: [ :element | 				self removeElementToRender: element ].			renderedElementsToBeRemoved := OrderedCollection new ] .	renderedElementsToBeAdded size &gt; 0		ifTrue: [ 			renderedElementsToBeAdded do: [ :element | 				self addElementToRender: element ].			renderedElementsToBeAdded := OrderedCollection new ] .</body><body package="Roassal-Core">makeAllElementAsRendered	"Make all the elements as rendered."	self allElementsDo: [ :el | el isRendered ifFalse: [ el setAsRendered ] ].	self cleanRenderingElement.</body><body package="Roassal-Core">markAsToBeAdded: element	"element will be added to the rendering queue at the next rendering"	renderedElementsToBeAdded add: element.</body><body package="Roassal-Core">markAsToBeRemoved: element	"element will be removed from the rendering queue at the next rendering"	renderedElementsToBeRemoved add: element.</body><body package="Roassal-Core">removeAllElementsToRender	elementsToRender := OrderedCollection new.</body><body package="Roassal-Core">removeElementToRender: element	elementsToRender do: [ :assoc | 		(assoc key = element zIndex) ifTrue: [ assoc value remove: element ifAbsent: [ ] ] ].</body></methods><methods><class-id>Roassal.ROView</class-id> <category>accessing</category><body package="Roassal-Core">absolutePosition	^ 0 @ 0</body><body package="Roassal-Core">add: element 	"Add an element in the view. Do nothing if the element is already in"	(element view ~~ ROView nullView) ifTrue: [ ^ self ].		element parent: self.	element view: self.	self addElementRecursivelyToRender: element.	self addElement: element.</body><body package="Roassal-Core">addAll: els 	"Add a collection of graphical objects in the view"	self assert: [ els isKindOf: Collection ].	els do: [:n | self add: n ]</body><body package="Roassal-Core">addFirst: element 	elements addFirst: element.	element view: self</body><body package="Roassal-Core">adjustSizeIfNecessary	"do nothing"</body><body package="Roassal-Core">backgroundColor	^ backgroundColor </body><body package="Roassal-Core">backgroundColor: aColor		backgroundColor := aColor</body><body package="Roassal-Core">collectPathToRootIn: aCollection	"Return the path from this graph to the root graph"	aCollection addLast: self.</body><body package="Roassal-Core">depth	^ 0</body><body package="Roassal-Core">elementAt: aPoint	"The lookup has to be done in an order reversed from the display" 	self elementsToRenderReverseDo: [ :el | (el contains: aPoint) ifTrue: [ ^ el ] ].	^ self</body><body package="Roassal-Core">elementAtRealPosition: aPoint	"The lookup has to be done in an order reversed from the display" 	^ self elementAt: (self camera realToVirtualPoint: aPoint)</body><body package="Roassal-Core">elementDetect: aBlock	^ elements copy detect: aBlock</body><body package="Roassal-Core">elementsFromModels: objects	^ (objects collect: [ :o | self elementFromModel: o ]) copyWithout:  nil</body><body package="Roassal-Core">elementsToRender	"Return the number of elements that will be rendered"	| answer |	answer := OrderedCollection new.	self elementsToRenderDo: [ :el | answer add: el ].	^ answer asArray.</body><body package="Roassal-Core">encompassingRectangle	"Return the encompassing rectangle of the view. All the elements are contained in this rectangle"	| max maxPoint lowerPoint |	elements isEmpty ifTrue: [ ^ 0@0 corner: 1@1 ].		max := 1000000.	maxPoint := max negated @ max negated.	lowerPoint := max @ max.		self elementsDo: [ :el |		maxPoint := maxPoint max: el bounds bottomRight.		lowerPoint := lowerPoint min: el position ].	^ lowerPoint corner: maxPoint</body><body package="Roassal-Core">localElementAt: aPoint	"The lookup has to be done in an order reversed from the display" 	| el |	el := (elements reverse detect: [ :e | e contains: (aPoint - e topLeft) ] ifNone: [ ^ self ]).	^ el elementAt: (aPoint - el topLeft)	</body><body package="Roassal-Core">localElementAtRealPoint: aPoint	^ self localElementAt: (camera realToVirtualPoint: aPoint)</body><body package="Roassal-Core">model	"To be polymorphic with ROElement"		^ self </body><body package="Roassal-Core">numberOfElementsToRender	"Return the number of elements that will be rendered"	| t |	t := 0.	self elementsToRenderDo: [ :el | t := t + 1 ].	^ t</body><body package="Roassal-Core">position	^ 0 @ 0</body><body package="Roassal-Core">positionRelativeTo: anElement	^ 0 @ 0</body><body package="Roassal-Core">resizeStrategy	^ ROFixedSizedParent instance</body><body package="Roassal-Core">sortElementsWith: aTwoArgBlock	elements sort: aTwoArgBlock	</body><body package="Roassal-Core">title	^ title</body><body package="Roassal-Core">title: aString	"Set the title of the view. Useful when opening up a window"		title := aString</body><body package="Roassal-Core">view	^ self </body><body package="Roassal-Core">windowSize: anExtent	"Tell the camera what is the size of the window that contains me"		| oldExtent |	oldExtent := self camera windowSize.	self camera windowSize: anExtent.	self announce: (ROWindowResized new 							oldExtent: oldExtent;							extent: anExtent)</body><body package="Roassal-Core">zOrdering	^ zOrdering</body><body package="Roassal-Core">zOrdering: aZOrdering	"Dedicated object to assign zIndex to graphical elements"		| oldEls |	zOrdering := aZOrdering.	oldEls := self elementsToRender.	elementsToRender := SortedCollection sortBlock: [ :a :b | a key &lt; b key ].	self addElementsToRender: oldEls		</body></methods><methods><class-id>Roassal.ROView</class-id> <category>testing</category><body package="Roassal-Core">hasAnimation	"Return true if some animations are present in the visualization"	^ animations notEmpty</body><body package="Roassal-Core">is: aClass	"Not sure whether this is important or not"	^ false</body><body package="Roassal-Core">isRendered: anElement	elementsToRender do: [ :assoc | (assoc value includes: anElement) ifTrue: [ ^ true ] ].	^ false</body><body package="Roassal-Core">isView	^ true</body></methods><methods><class-id>Roassal.ROView</class-id> <category>camera</category><body package="Roassal-Core">camera	^ camera</body><body package="Roassal-Core">cameraTranslateBy: point	camera translateBy: point.	self signalUpdate</body><body package="Roassal-Core">cameraTranslateByRealStep: aStep	camera translateByRealStep: aStep.	self signalUpdate</body><body package="Roassal-Core">cameraTranslateTo: point	camera translateTo: point.	self signalUpdate</body><body package="Roassal-Core">translateBy: point	self cameraTranslateBy: point negated.	self announce: (ROCameraTranslated new step: point negated).</body><body package="Roassal-Core">translateByRealPoint: aPoint 	| p1 p2 |	p1 := self camera position.	p2 := self camera realToVirtualPoint: aPoint. 	self translateBy: (p2 - p1).</body><body package="Roassal-Core">translateTo: point	self cameraTranslateTo: point negated</body></methods><methods><class-id>Roassal.ROView</class-id> <category>rendering</category><body package="Roassal-Core">canvasForRealSize: realSize	^ camera extent: realSize; realExtent: realSize; canvas</body><body package="Roassal-Core">drawAllElementsOn: canvas	canvas camera: self camera.	self elementsDo: [ :n | n drawOn: canvas ].	self cleanRenderingElement</body><body package="Roassal-Core">drawElementsOn: canvas	canvas camera: self camera.	self elementsToRenderDo: [ :n | n drawOn: canvas ].	self cleanRenderingElement</body><body package="Roassal-Core">drawFullOn: canvas	canvas paintBackground: backgroundColor.	self drawAllElementsOn: canvas.	self doAnimationCycle.</body><body package="Roassal-Core">drawOn: canvas	canvas paintBackground: backgroundColor.	self drawElementsOn: canvas.	self doAnimationCycle.</body><body package="Roassal-Core">drawWithoutSettingCameraElementsOn: canvas	self elementsDo: [ :n | n drawOn: canvas ].</body><body package="Roassal-Core">updateElementsToRender	| origin corner b |	elementsToRender := SortedCollection new.		origin := camera position.	corner := camera windowSize / camera scale.	b := origin corner: origin + corner.	elements do: [ :e | 		(e isVisibleIn: b)				ifTrue: [ self addElementRecursivelyToRender: e ] ].</body></methods><methods><class-id>Roassal.ROView</class-id> <category>initialize</category><body package="Roassal-Core">initialize 	super initialize.	camera := ROCamera new.	eventHandler := ROAnnouncer new.	title := self class defaultWindowTitle.	backgroundColor := Color white.	animations := OrderedCollection new.	zOrdering := ROZOrdering new.	elementsToRender := OrderedCollection new.		"We need the following two variables essentially because the rendering loop should _not_ be modified while we are drawing"	renderedElementsToBeRemoved := OrderedCollection new.	renderedElementsToBeAdded := OrderedCollection new.		self on: ROWindowResized do: [ :event | self updateElementsToRender ].	self on: ROCameraTranslated do: [ :event | self updateElementsToRender ].	self on: ROCameraResized do: [ :event | self updateElementsToRender ].</body></methods><methods><class-id>Roassal.ROView</class-id> <category>opening</category><body package="Roassal-Core">defaultWindowSize	^ 500 @ 500</body><body package="Roassal-Core">open	^ self openInWindowSized: self defaultWindowSize</body><body package="Roassal-Core">openInWindowSized: aPoint	^ ROPlatform current widgetFactory forView: self windowSized: aPoint	</body></methods><methods><class-id>Roassal.ROView</class-id> <category>enumerating</category><body package="Roassal-Core">elementsToRenderDo: aBlock	elementsToRender do: [ :assoc | assoc value do: aBlock ]</body><body package="Roassal-Core">elementsToRenderReverseDo: aBlock	elementsToRender reverse do: [ :assoc | assoc value reverse do: aBlock ]	 </body></methods><methods><class-id>Roassal.ROView</class-id> <category>events</category><body package="Roassal-Core">announce: event	eventHandler announce: event</body><body package="Roassal-Core">on: event do: aBlock	eventHandler when: event do: aBlock</body><body package="Roassal-Core">on: eventClass doOnce: aBlock	"Register a block as an handler for eventClass. The callback is removed when exected"		"interactions at: eventClass put: aBlock."	eventHandler when: eventClass do: [ :arg | 		aBlock value: arg.		eventHandler unsubscribeForEvent: eventClass.		"self removeInteraction: eventClass "]</body><body package="Roassal-Core">signalUpdate	"self updateElementsToRender."	self announce: RORefreshNeeded instance</body></methods><methods><class-id>Roassal.ROView</class-id> <category>interaction</category><body package="Roassal-Core">@ anInteractionClassOrInstance	anInteractionClassOrInstance initializeElement: self </body></methods><methods><class-id>Roassal.ROView class</class-id> <category>configuration</category><body package="Roassal-Core">defaultWindowTitle	^ 'Roassal visualization'</body></methods><methods><class-id>Roassal.ROView class</class-id> <category>initialize</category><body package="Roassal-Core">initialize	self resetNullView </body></methods><methods><class-id>Roassal.ROView class</class-id> <category>accessing</category><body package="Roassal-Core">nullView	"Used when creating new element. For example, we have the relation:	  ROElement new view == ROView nullView"		^ nullView ifNil: [ nullView := self new ].</body></methods><methods><class-id>Roassal.ROView class</class-id> <category>public</category><body package="Roassal-Core">resetNullView 	nullView := nil</body><body package="Roassal-Core">titled: aTitle	"Create an instance of the view and set a title to it"	^ self new 		title: aTitle; 		yourself</body></methods><methods><class-id>Roassal.ROTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">computeChildrenFor: aNode	^ self childrenFor: aNode except: alreadyLayoutedNodes</body></methods><methods><class-id>Roassal.ROCountingNullCanvas</class-id> <category>initialization</category><body package="Roassal-Core">initialize 	super initialize .	numberOfRectangles := 0.	numberOfLines := 0.	numberOfImages := 0</body></methods><methods><class-id>Roassal.ROCountingNullCanvas</class-id> <category>accessing</category><body package="Roassal-Core">camera	^ ROCamera new</body><body package="Roassal-Core">clipRect	^1@1 extent: 100000@100000</body><body package="Roassal-Core">numberOfImages	^ numberOfImages</body><body package="Roassal-Core">numberOfLines	^ numberOfLines</body><body package="Roassal-Core">numberOfRectangles	^ numberOfRectangles</body></methods><methods><class-id>Roassal.ROCountingNullCanvas</class-id> <category>drawing-rectangles</category><body package="Roassal-Core">frameAndFillRectangle: bounds fillColor: c borderWidth: width borderColor: cc	numberOfRectangles := numberOfRectangles + 1.</body></methods><methods><class-id>Roassal.ROCountingNullCanvas</class-id> <category>drawing</category><body package="Roassal-Core">line: fromPoint to: toPoint width: width color: color	numberOfLines := numberOfLines + 1.</body></methods><methods><class-id>Roassal.ROCountingNullCanvas</class-id> <category>hook</category><body package="Roassal-Core">warpImage: aForm transform: aTransform at: extraOffset sourceRect: sourceRect cellSize: cellSize	"We cancel this method. It is defined as abstract in the Canvas class"</body></methods><methods><class-id>Roassal.ROCountingNullCanvas</class-id> <category>drawing-images</category><body package="Roassal-Core">paintImage: cacheForm at: position	numberOfImages := numberOfImages + 1.</body></methods><methods><class-id>Roassal.ROCountingNullCanvas class</class-id> <category>instance creation</category><body package="Roassal-Core">on: aForm	"we do nothing"	^ self new</body></methods><methods><class-id>Roassal.RONColorLinearNormalizer</class-id> <category>translator protocol</category><body package="Roassal-Core">highColorFor: anEntity		^highColor roValue: anEntity</body><body package="Roassal-Core">lowColorFor: anEntity		^lowColor roValue: anEntity</body><body package="Roassal-Core">maxBrightnessFor: anEntity		^maxBrightness isNil		ifTrue: [1.0]		ifFalse: [maxBrightness roValue: anEntity]</body><body package="Roassal-Core">minBrightnessFor: anEntity		^minBrightness isNil		ifTrue: [0.0]		ifFalse: [minBrightness roValue: anEntity]</body></methods><methods><class-id>Roassal.RONColorLinearNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">highColor: aBlock		highColor := aBlock</body><body package="Roassal-Core">lowColor: aBlock		lowColor := aBlock</body><body package="Roassal-Core">maxBrightness: aBlock		maxBrightness := aBlock</body><body package="Roassal-Core">minBrightness: aBlock		minBrightness := aBlock</body><body package="Roassal-Core">roValue: anEntity	"Calculates the color of the entity based on the context."		| myValue myHighColor myLowColor myMinBrightness myMaxBrightness weight minValue maxValue |	"Get color specific data"	minValue :=  self minimumValue: anEntity.	maxValue :=  self maximumValue: anEntity.	myMinBrightness := self minBrightnessFor: anEntity.	myMaxBrightness := self maxBrightnessFor: anEntity.	myHighColor := self highColorFor: anEntity.	myLowColor := self lowColorFor: anEntity.	"Get data"	weight := minValue = maxValue 		ifTrue: [(myMinBrightness + myMaxBrightness) / 2]		ifFalse: [				myValue := (self command roValue: anEntity) - (self minimumValue: anEntity).			myMinBrightness + (myValue abs / (maxValue - minValue) * (myMaxBrightness - myMinBrightness)) ].	^self blend: myLowColor with: myHighColor weight: weight</body></methods><methods><class-id>Roassal.RONColorLinearNormalizer</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		super initialize.	lowColor := Color white.	highColor := Color black</body></methods><methods><class-id>Roassal.RONColorLinearNormalizer</class-id> <category>private</category><body package="Roassal-Core">blend: aColor with: aColorValue weight: wt	"Answer a new ColorValue which is a weighted blend of the receiver and the	supplied ColorValue."	"Simply interpolates in RGB space."	| rv gv bv invWt |		invWt := 1-wt.	rv := ((aColor red * invWt) + ((aColorValue red)*wt)) "rounded".	gv := ((aColor green  * invWt) + ((aColorValue green)*wt)) "rounded".	bv := ((aColor blue *invWt)+ ((aColorValue blue)*wt)) "rounded".	^Color r: rv g: gv b: bv</body></methods><methods><class-id>Roassal.RONColorLinearNormalizer class</class-id> <category>instance creation</category><body package="Roassal-Core">inContext: aCollection lowColor: lowColor highColor: highColor		| normalizer |	normalizer := self inContext: aCollection.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	^normalizer</body><body package="Roassal-Core">inContext: aCollection lowColor: lowColor lowThreshold: lowThreshold highColor: highColor highThreshold: highThreshold		| normalizer |	normalizer := self inContext: aCollection.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	normalizer minBrightness: lowThreshold.	normalizer maxBrightness: highThreshold.	^normalizer</body><body package="Roassal-Core">inContext: aCollection withCommand: aBlock lowColor: lowColor highColor: highColor		| normalizer |	normalizer := self inContext: aCollection withCommand: aBlock.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	^normalizer</body><body package="Roassal-Core">inContext: aCollection withCommand: aBlock lowColor: lowColor lowThreshold: lowThreshold highColor: highColor highThreshold: highThreshold		| normalizer |	normalizer := self inContext: aCollection withCommand: aBlock.	normalizer lowColor: lowColor.	normalizer highColor: highColor.	normalizer minBrightness: lowThreshold.	normalizer maxBrightness: highThreshold.	^normalizer</body></methods><methods><class-id>Roassal.ROHTMLEdgeShapeVisitor</class-id> <category>stream</category><body package="Roassal-Core">addToStream: aShape	stream 		nextPutAll: '{ ';		nextPutAll: ('sourceID: "&lt;1p&gt;"' expandMacrosWith: idNodeFrom); 		nextPutAll: ', ';		nextPutAll: ('targetID: "&lt;1p&gt;"' expandMacrosWith: idNodeTo); 		nextPutAll: ', ';		nextPutAll: ('edgeColor: "&lt;1s&gt;"' expandMacrosWith: (attributes at: #edgeColor)); 		nextPutAll: ', ';		nextPutAll: ('edgeWidth: "&lt;1p&gt;"' expandMacrosWith: (attributes at: #edgeWidth)); 		nextPutAll: '},'.		</body></methods><methods><class-id>Roassal.ROHTMLEdgeShapeVisitor</class-id> <category>visit</category><body package="Roassal-Core">visitAbstractLine: aShape	attributes at: #edgeColor put: (aShape color roValue: edge) asHTMLColor.	attributes at: #edgeWidth put: (aShape widthFor: edge) .		self addToStream: aShape.</body></methods><methods><class-id>Roassal.ROHTMLEdgeShapeVisitor</class-id> <category>accessing</category><body package="Roassal-Core">edge: anObject	edge := anObject</body><body package="Roassal-Core">idNodeFrom: anObject	idNodeFrom := anObject</body><body package="Roassal-Core">idNodeTo: anObject	idNodeTo := anObject</body></methods><methods><class-id>Roassal.ROKeyDown</class-id> <category>accessing</category><body package="Roassal-Core">character	^ Character value: self keyValue</body><body package="Roassal-Core">keyValue 	^keyValue </body><body package="Roassal-Core">keyValue: aValue			keyValue := aValue </body></methods><methods><class-id>Roassal.ROKeyDown</class-id> <category>comparing</category><body package="Roassal-Core">= anotherKeyDown	(self class == anotherKeyDown) ifFalse: [  ^ false ].	^ self keyValue = anotherKeyDown keyValue</body></methods><methods><class-id>Roassal.ROKeyDown</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	keyValue := 0</body></methods><methods><class-id>Roassal.ROSVGCanvas</class-id> <category>accesing</category><body package="Roassal-Core">camera		^camera</body><body package="Roassal-Core">camera: aCamera 	camera := aCamera </body><body package="Roassal-Core">stream	^stream </body><body package="Roassal-Core">stream: aStream 	stream := aStream </body><body package="Roassal-Core">stringOffset	^stringOffset</body><body package="Roassal-Core">view	^view</body><body package="Roassal-Core">view: aROView 	view := aROView.	bounds := view camera virtualToRealRectangle: view encompassingRectangle</body></methods><methods><class-id>Roassal.ROSVGCanvas</class-id> <category>hooks</category><body package="Roassal-Core">drawString: aByteString at: aPoint 	"Render a string at a given position. No specification about the font is given. Use the default then"	|p|	p := camera virtualToRealPoint: aPoint + self stringOffset .		stream 		nextPutAll: '&lt;text ';		nextPutAll: ('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: p x floor  with:  p y floor);		nextPutAll: 'fill="black"&gt;';		nextPutAll: aByteString ;		nextPutAll: '&lt;/text&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">drawString: aByteString at: aPoint color: color	"Render a colored string at a given position. No specification about the font is given. Use the default then"	|p|	p := camera virtualToRealPoint: aPoint + self stringOffset  .	stream 		nextPutAll: '&lt;text ';		nextPutAll: ('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: p x floor  with:  p y floor);		nextPutAll: ('fill="rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;)"&gt;' expandMacrosWith: (color red * 256) rounded  with: (color green * 256) rounded with: (color blue * 256) rounded);		nextPutAll: aByteString ;		nextPutAll: '&lt;/text&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">drawString: aByteString at:  aPoint font: f color: color	"Render a colored string at a given position using a particular font."		|p|	p := camera virtualToRealPoint: aPoint + self stringOffset  .	stream 		nextPutAll: '&lt;text ';		nextPutAll: ('x="&lt;1p&gt;" y="&lt;2p&gt;" ' expandMacrosWith: p x floor  with:  p y floor);		nextPutAll: ('fill="rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;)"&gt;' expandMacrosWith: (color red * 256) rounded  with: (color green * 256) rounded with: (color blue * 256) rounded);		nextPutAll: aByteString;		nextPutAll: '&lt;/text&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 	"Render an oval"	|center w h extent r2 b|	b := camera virtualToRealRectangle: aRectangle.	center := b center.	w := b width.	h := b height.		stream 		nextPutAll: '&lt;ellipse ';		nextPutAll: ('cx= "&lt;1p&gt;" cy="&lt;2p&gt;" ' expandMacrosWith: center x floor  with: center y floor);		nextPutAll: ('rx="&lt;1p&gt;" ry="&lt;2p&gt;" ' expandMacrosWith: (w/ 2) floor with: (h /2) floor);		nextPutAll: ('style="fill:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;);' expandMacrosWith: (aColor red *256) rounded with: (aColor green * 256) rounded with: (aColor blue * 256) rounded );		nextPutAll: ('stroke: rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;);' expandMacrosWith: (aColor4 red *256) rounded with: (aColor4 green * 256) rounded with: (aColor4 blue * 256) rounded ); 		nextPutAll: ('stroke-width: &lt;1p&gt;"/&gt;' expandMacrosWith: aSmallInteger);				nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">fillRectangle: aRectangle color: fillColor 	"Render a rectangle"	|b|		b := camera virtualToRealRectangle: aRectangle.		stream		nextPutAll: '&lt;rect ';		nextPutAll: ('x="&lt;1p&gt;" y="&lt;2p&gt;"' expandMacrosWith: (b topLeft x floor) with: (b topLeft y floor) );		nextPutAll: (' height="&lt;1p&gt;" width="&lt;2p&gt;" ' expandMacrosWith: b height with: b width);		nextPutAll: 'style="'.	stream		nextPutAll: ('fill:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;)"/&gt;' expandMacrosWith: (fillColor red * 256) rounded with: (fillColor green * 256) rounded with: (fillColor blue * 256) rounded);		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor 	"Render a framed rectangle. Implementation example:	"		|b|		b := camera virtualToRealRectangle: aRectangle.		stream		nextPutAll: '&lt;rect ';		nextPutAll: ('x="&lt;1p&gt;" y="&lt;2p&gt;"' expandMacrosWith: (b topLeft x floor) with: (b topLeft y floor) );		nextPutAll: (' height="&lt;1p&gt;" width="&lt;2p&gt;" ' expandMacrosWith: b height with: b width);		nextPutAll: 'style="';		nextPutAll: ('fill:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;)' expandMacrosWith: (fillColor red * 256) rounded with: (fillColor green * 256) rounded with: (fillColor blue * 256) rounded).		aSmallInteger &gt; 0 			ifTrue: [				stream 					nextPutAll: (';stroke:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;);' expandMacrosWith: (aColor red * 256) rounded with: (aColor green * 256) rounded with: (aColor blue * 256) rounded);					nextPutAll: ('stroke-width:&lt;1p&gt;" ' expandMacrosWith: aSmallInteger)			]			ifFalse: [stream nextPutAll: '"'].		stream 			nextPutAll: '/&gt;';			nextPutAll: ROPlatform current newLine.	</body><body package="Roassal-Core">line: aPoint to: aPoint2 width: aSmallInteger color: aColor 	"Draw a line between two points"	"Implementation example		canvas line: (self virtualToRealPoint: aPoint) to: (self virtualToRealPoint: aPoint2) width: aSmallInteger color: aColor.	"	|p1 p2|		p1 := camera virtualToRealPoint: aPoint.	p2 := camera virtualToRealPoint: aPoint2.		stream 		nextPutAll: '&lt;line ';		nextPutAll: ('x1="&lt;1p&gt;" y1="&lt;2p&gt;" ' expandMacrosWith: p1 x floor  with:  p1 y floor);		nextPutAll: ('x2="&lt;1p&gt;" y2="&lt;2p&gt;" ' expandMacrosWith: p2 x floor with: p2 y floor );		nextPutAll: ('style="stroke:rgb(&lt;1p&gt;,&lt;2p&gt;,&lt;3p&gt;);' expandMacrosWith: (aColor red * 256) rounded with: (aColor green * 256) rounded with: (aColor blue * 256) rounded );		nextPutAll: ('stroke-width:&lt;1p&gt;"/&gt;' expandMacrosWith: aSmallInteger );		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">paintBackground: aColor	self fillRectangle: view encompassingRectangle color: aColor </body><body package="Roassal-Core">paintImage: aForm at: aPoint	"Render a bitmap on screen"	"TODO"</body></methods><methods><class-id>Roassal.ROSVGCanvas</class-id> <category>svg</category><body package="Roassal-Core">addEnd		stream		nextPutAll: '&lt;/svg&gt;'.</body><body package="Roassal-Core">addStart		stream 		nextPutAll: '&lt;svg  xmlns="http://www.w3.org/2000/svg" ';		nextPutAll:  ('width="&lt;1p&gt;px" height="&lt;2p&gt;px" ' expandMacrosWith: (bounds bottomRight x + 2) with: (bounds bottomRight y + 2));		nextPutAll: ROPlatform current newLine;		nextPut: Character tab;		nextPutAll: 'xmlns:xlink="http://www.w3.org/1999/xlink"&gt;';		nextPutAll: ROPlatform current newLine</body><body package="Roassal-Core">endGroup	stream 		nextPutAll: '&lt;/g&gt;';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">startGroup	stream 		nextPutAll: '&lt;g&gt;';		nextPutAll: ROPlatform current newLine.</body></methods><methods><class-id>Roassal.ROSVGCanvas</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	stream := WriteStream on: String new.	stringOffset := 0@10</body></methods><methods><class-id>Roassal.ROSVGCanvas class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">onCamera: camera		^ self new camera: camera</body><body package="Roassal-Core">onCamera: camera onStream: aStream		^ self new camera: camera; stream: aStream </body></methods><methods><class-id>Roassal.ROAbstractBezierCurve</class-id> <category>hooks</category><body package="Roassal-Core">lineSegmentsFor: anEdge	self subclassResponsibility </body></methods><methods><class-id>Roassal.ROAbstractBezierCurve</class-id> <category>initialize</category><body package="Roassal-Core">initialize 	super initialize.		Recursion := 4</body></methods><methods><class-id>Roassal.ROAbstractBezierCurve</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge	| rawStartingPoint rawEndingPoint approx |						rawEndingPoint  := attachPoint startingPointOf: anEdge.	rawStartingPoint := attachPoint endingPointOf: anEdge.	(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ self ].			approx := self lineSegmentsFor: anEdge.		"We draw a line before each arrow"	arrows do: [ :arrow | 		| arr |		arr := arrow drawOn: aCanvas for: anEdge line: self.		 ].		"We draw a line after the arrow"	1 to: approx size -1 do: [ :i | aCanvas line: (approx at: i) to: (approx at: i+1) width: (strokeWidth roValue: anEdge) color: (color roValue: anEdge) ]</body></methods><methods><class-id>Roassal.ROAbstractBezierCurve class</class-id> <category>maths</category><body package="Roassal-Core">approximate: anArray in: anInteger	| bary rightPart leftPart col |	( anInteger &lt;= 0 ) ifTrue: [ ^ anArray ].		bary := self barycentersFor: anArray.	col := (Array with: anArray) , bary.		rightPart :=  col collect: [ :e | e first ].	leftPart := (col collect: [ :e | e last ]) reverse .		^ (self approximate: rightPart in: anInteger-1 ),(self approximate: leftPart in: anInteger-1)</body><body package="Roassal-Core">barycentersFor: anArray	| barycenters bary new |		barycenters := OrderedCollection new.	bary := OrderedCollection new.		(1 to: anArray size - 1) do: [ :i | bary add: ((anArray at: i) + (anArray at: i+1) /2)].	barycenters add: bary.		[ bary size &gt; 1 ] whileTrue: [ new := OrderedCollection new.									1 to: bary size - 1 do: [ :i | new add: ((bary at: i) + (bary at: i+1) /2) ].									 barycenters add: new.									bary := new].									^ barycenters</body></methods><methods><class-id>Roassal.ROAbstractBezierCurve class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractBezierCurve </body></methods><methods><class-id>Roassal.RORemoveEdgeTest</class-id> <category>tests</category><body package="Roassal-Core">testEdges	self assert: (view elements select: [ :el | el isEdge ]) size = 3.</body><body package="Roassal-Core">testRemoveEdge	RORemoveEdge edgesFrom: el1.	self assert: (view elements select: [ :el | el isEdge ]) size = 1.</body><body package="Roassal-Core">testRemoveEdge2	RORemoveEdge edgesFrom: el3.	self assert: (view elements select: [ :el | el isEdge ]) size = 3.</body><body package="Roassal-Core">testRemoveEdgeTo	RORemoveEdge edgesTo: el3.	self assert: (view elements select: [ :el | el isEdge ]) size = 1.</body></methods><methods><class-id>Roassal.RORemoveEdgeTest</class-id> <category>running</category><body package="Roassal-Core">setUp	el1 := ROElement on: 1.	el2 := ROElement on: 2.	el3 := ROElement on: 3.		view := ROView new.	view addAll: (Array with: el1 with: el2 with: el3).	view add: (ROEdge from: el1 to: el2).	view add: (ROEdge from: el1 to: el3).	view add: (ROEdge from: el2 to: el3).</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>linking</category><body package="Roassal-Core">addLast: aShape	^ aShape</body><body package="Roassal-Core">addLast: aShape in: elementToAdd	elementToAdd next: aShape</body><body package="Roassal-Core">change: aShapeClass for: aShape	^ self </body><body package="Roassal-Core">isShapedAs: aShapeClass	^ false</body><body package="Roassal-Core">maxChainedExtentFor: element	^ width @ height</body><body package="Roassal-Core">removeShape: aShapeClass	^ self </body><body package="Roassal-Core">removeShape: aShapeClass previousShape: aShape	^ self </body><body package="Roassal-Core">shapeDetect: aBlock	(aBlock value: self) ifTrue: [ ^ self ].	self error: 'Not found'</body><body package="Roassal-Core">shapesDetect: aBlock	self error: 'Not found'</body><body package="Roassal-Core">shapesDo: aBlock	aBlock value: self</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>hooks</category><body package="Roassal-Core">contains: aPoint for: aROEdge 	^ false</body><body package="Roassal-Core">defaultShape 	^ RONullShape new</body><body package="Roassal-Core">extent: anExtentPoint	width := anExtentPoint x.	height := anExtentPoint y.</body><body package="Roassal-Core">lineSegmentsFor: element	^ Array with: 0 @ 0</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>rendering</category><body package="Roassal-Core">chainedDrawOn: aCanvas for: aROElement 	self drawOn: aCanvas for: aROElement </body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>testing</category><body package="Roassal-Core">element: aROElement containsPoint: aPoint	"Return true if aPoint is contained in the bounds defined by myself for the element"		^ self boundsFor: aROElement containsPoint: aPoint		</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>util</category><body package="Roassal-Core">hasNext	^ false</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>looking up elements</category><body package="Roassal-Core">subElementsAt: aPoint forElement: aROElement	"Return one of the direct children element of aROElement pointed by aPoint. Return null if none"	^ nil</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>accessing</category><body package="Roassal-Core">elementExtent: aPoint 		width := aPoint x.	height := aPoint y</body><body package="Roassal-Core">extentFor: element	^ 0 @ 0</body><body package="Roassal-Core">height: anObject		height := anObject</body><body package="Roassal-Core">width: anObject	width := anObject</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>initialize</category><body package="Roassal-Core">initialize	color := self class defaultColor.	self extent: self defaultExtent.</body></methods><methods><class-id>Roassal.RONullShape</class-id> <category>copying</category><body package="Roassal-Core">chainedCopy	^ self copy</body></methods><methods><class-id>Roassal.ROCountingNullCanvasTest</class-id> <category>test</category><body package="Roassal-Core">testBasic	| rawView view canvas |	rawView := ROView new.	view := ROMondrianViewBuilder view: rawView.	view shape rectangle size: 40.	view nodes: (1 to: 20).	view gridLayout.	canvas := ROCountingNullCanvas new.	view raw drawOn: canvas.	self assert: canvas numberOfRectangles = 21</body></methods><methods><class-id>Roassal.ROElementTranslatedTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| t el |	t := OrderedCollection new.	el := ROElement new.	el on: ROElementTranslated do: [ :event | t add: event step ].		el translateTo: 0 @ 0.	el translateBy: 5 @ 5.	el translateTo: 10 @ 15.		self assert: t size = 2.	self assert: t asArray = (Array with: 5 @ 5 with: 5 @ 10)</body></methods><methods><class-id>Color</class-id> <category>groups of shades</category><body package="Roassal-VWUtil">wheel: thisMany 	"An array of thisMany colors around the color wheel starting at self and ending all the way around the hue space just before self.  Array is of length thisMany.  Very useful for displaying color based on a variable in your program.  "	| sat bri step hue|	sat := self saturation.	bri := self brightness.	hue := self hue.	step := 360.0 / (thisMany max: 1). 	^(1 to: thisMany) collect: 		[ :num | |c | 		c := Color 			hue: (hue /360)			saturation: sat			brightness: bri.	"hue is taken mod 360"		hue := hue + step.		c		].	"(Color wheel: 8) withIndexDo: [:c :i | Display fill: (i*10@20 extent: 10@20) fillColor: c]"</body></methods><methods><class-id>Color</class-id> <category>initialize-release</category><body package="Roassal-VWUtil">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Color</class-id> <category>transformations</category><body package="Roassal-VWUtil">adjustBrightness: brightness	"Adjust the relative brightness of this color. (lowest value is 0.005 so that hue information is not lost)"	^ self class hue: self hue saturation: self saturation brightness: ((self brightness + brightness min: 1.0) max: 0.005)</body><body package="Roassal-VWUtil">alpha: alphaValue 	"Answer a new Color with the given amount of opacity ('alpha')."	"alphaValue = 1.0		ifFalse: [^ TranslucentColor basicNew setRgb: rgb alpha: alphaValue]"	^self blendWith: Color white weight: alphaValue</body></methods><methods><class-id>Color class</class-id> <category>instance creation</category><body package="Roassal-VWUtil">gray: brightness	"Return a gray shade with the given brightness in the range [0.0..1.0]."	^ self brightness: brightness</body><body package="Roassal-VWUtil">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="Roassal-VWUtil">r: r g: g b: b 	^ self red: r green: g blue: b</body></methods><methods><class-id>Color class</class-id> <category>examples</category><body package="Roassal-VWUtil">wheel: thisMany	"Return a collection of thisMany colors evenly spaced around the color wheel."	"Color showColors: (Color wheel: 12)"	^ Color wheel: thisMany saturation: 0.9 brightness: 0.7</body><body package="Roassal-VWUtil">wheel: thisMany saturation: s brightness: v	"Return a collection of thisMany colors evenly spaced around the color wheel, all of the given saturation and brightness."	"Color showColors: (Color wheel: 12 saturation: 0.4 brightness: 1.0)"	"Color showColors: (Color wheel: 12 saturation: 0.8 brightness: 0.5)"	^ (Color hue: 0.0 saturation: s brightness: v) wheel: thisMany</body></methods><methods><class-id>Color class</class-id> <category>constants</category><body package="Roassal-VWUtil">colorNames	^  #(#black #veryVeryDarkGray #veryDarkGray #darkGray #gray #lightGray #veryLightGray #veryVeryLightGray #white #red #yellow #green #cyan #blue #magenta #brown #orange #lightRed #lightYellow #lightGreen #lightCyan #lightBlue #lightMagenta #lightBrown #lightOrange #transparent)</body><body package="Roassal-VWUtil">green	^self r: 0 g: 1 b:0</body><body package="Roassal-VWUtil">lightBlue	^ self r: 0.8  g: 1.0 b: 1.0</body><body package="Roassal-VWUtil">lightBrown	^ self r: 1.0 g: 0.6 b: 0.2</body><body package="Roassal-VWUtil">lightGreen	^ self r: 0.8 g: 1.0 b: 0.6</body><body package="Roassal-VWUtil">lightMagenta	^ self r: 1.0 g: 0.8 b: 1.0</body><body package="Roassal-VWUtil">lightOrange	^ self r: 1.0 g: 0.8 b: 0.4</body><body package="Roassal-VWUtil">lightRed	^self r: 1.0 g: 0.8 b: 0.8</body><body package="Roassal-VWUtil">transparent	^ self r: 0.0 g: 0.0 b: 0.0</body><body package="Roassal-VWUtil">veryVeryDarkGray	^self r: 0.13 g: 0.13 b: 0.13</body><body package="Roassal-VWUtil">veryVeryLightGray	^self r: 0.87 g: 0.87 b: 0.87</body></methods><methods><class-id>Color class</class-id> <category>*roassal-core</category><body package="Roassal-Core">gray256: intensity	"between 0 and 256"	| i |	i := intensity asFloat / 256.	^ self r:  i g: i b: i </body><body package="Roassal-Core">wheel: s alpha: a	^ (Color wheel: 6) collect: [:c | c alpha: a ].</body></methods><methods><class-id>Color class</class-id> <category>class initialization</category><body package="Roassal-VWUtil">initialize	super initialize</body></methods><methods><class-id>Roassal.ROImage</class-id> <category>hooks</category><body package="Roassal-Core">installedOn: element	"This method is meant to be overriden in case a special treatment has to be realized on the element"		| p | 	super installedOn: element.	p := (form roValue: element) extent.	element extent &lt; p		ifTrue: [ element extent: p ].	</body></methods><methods><class-id>Roassal.ROImage</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	aCanvas		paintImage: (form roValue: aROElement) at: (self absoluteBoundsFor: aROElement) topLeft</body></methods><methods><class-id>Roassal.ROImage</class-id> <category>accessing</category><body package="Roassal-Core">form	^ form</body><body package="Roassal-Core">form: aFormBlockOrObject	form := aFormBlockOrObject</body><body package="Roassal-Core">height	self form isNil ifTrue: [ ^ 5 ].	^ self form height</body><body package="Roassal-Core">preferedExtentFor: element	^ (form roValue: element) extent</body><body package="Roassal-Core">width	self form isNil ifTrue: [ ^ 5 ].	^ self form width</body></methods><methods><class-id>Roassal.ROImage</class-id> <category>initialize</category><body package="Roassal-Core">initialize	super initialize.	width := [ :el | self form isNil ifTrue: [ 5 ] ifFalse:  [ self form width ] ].	height := [ :el | self form isNil ifTrue: [ 5 ] ifFalse:  [ self form height ] ].</body></methods><methods><class-id>Roassal.ROVerticalArrow</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Return the begining and ending of the arrow"		| fromPoint toPoint vector u unit arrowMiddle arrowLeft arrowRight w c toPointWithOffset r |	fromPoint := line startingPointOf: anEdge.	toPoint := line endingPointOf: anEdge.	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		u := vector normal.	unit := vector / r."	toPointWithOffset := toPoint - (offset * (vector r - size) * unit)."	(offset = 0)		ifTrue: [ toPointWithOffset := toPoint - (offset * (vector r - size) * unit) ]		ifFalse: [ toPointWithOffset := fromPoint + (unit * (0 @ size))  ].		arrowMiddle := toPointWithOffset - (unit * size). 	arrowLeft :=  arrowMiddle- (u * size).	arrowRight := arrowMiddle + (u * size).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: toPointWithOffset to: arrowLeft width: w color: c.	aCanvas line: arrowLeft to: arrowRight width: w color: c.	aCanvas line: arrowRight to: toPointWithOffset width: w color: c.		^ Array with: toPointWithOffset with: arrowMiddle</body></methods><methods><class-id>Roassal.ROVerticalArrow</class-id> <category>accessing</category><body package="Roassal-Core">getDirectionVectorFrom: fromPoint to: toPoint	^  0 @ (toPoint - fromPoint) y</body></methods><methods><class-id>Roassal.ROReversedVerticalArrow</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Return the begining and ending of the arrow"		| fromPoint toPoint vector u unit arrowMiddle arrowLeft arrowRight w c toPointWithOffset r |	fromPoint := line startingPointOf: anEdge.	toPoint := line endingPointOf: anEdge.	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		u := vector normal.	unit := vector / r.		(offset = 0)		ifTrue: [ toPointWithOffset := toPoint - (offset * (vector r - size) * unit) ]		ifFalse: [ toPointWithOffset := fromPoint + (unit * (0 @ size))  ].		arrowMiddle := toPointWithOffset - (unit * size). 	arrowLeft :=  toPointWithOffset - (u * size).	arrowRight := toPointWithOffset + (u * size).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: arrowMiddle to: arrowLeft width: w color: c.	aCanvas line: arrowLeft to: arrowRight width: w color: c.	aCanvas line: arrowRight to: arrowMiddle width: w color: c.		^ Array with: (fromPoint + (unit * (0 @ size))) with: (toPoint - (unit * (0 @ size)))</body></methods><methods><class-id>Roassal.ROBorderTest</class-id> <category>tests</category><body package="Roassal-Core">testInitialization	| border |	border := ROBorder new.	self assert: border color == ROBorder defaultColor</body><body package="Roassal-Core">testSetting	| border |	border := ROBorder new.	border color: Color green.	self assert: border color = Color green</body></methods><methods><class-id>Roassal.ROResize class</class-id> <category>public</category><body package="Roassal-Core">stretchHorizontally: elements	| maxWidth |	maxWidth := elements inject: 0 into: [ :max :el | max max: el extent x ].	elements do: [ :el | el extent: (maxWidth @ el extent y) ].</body><body package="Roassal-Core">stretchVertically: elements	| maxHeight |	maxHeight := elements inject: 0 into: [ :max :el | max max: el extent y ].	elements do: [ :el | el extent: (el extent x @ maxHeight) ].</body></methods><methods><class-id>Roassal.ROVerticalLineLayout</class-id> <category>hook</category><body package="Roassal-Core">deltaFor: aNodeFigure		| delta |	delta := 0.	self alignment == #right ifTrue: [delta := aNodeFigure width].	self alignment == #center ifTrue: [delta := aNodeFigure width / 2.0].	^delta @ 0</body><body package="Roassal-Core">doCenter: aGraph  	| midWidest step |	midWidest := aGraph nodes 		inject: 0		into: [ :m :el | m max: (el bounds width )].	midWidest := midWidest / 2.	aGraph nodes do: [ :node | 		step := (midWidest - (node bounds width /2)) asInteger @ 0.		node bounds origin: (node bounds origin + step).		node bounds corner: (node bounds corner + step).	] </body><body package="Roassal-Core">doStretchHorizontal: aCollectionOfElements 	 	| parent parentBounds |	aCollectionOfElements isNil ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	aCollectionOfElements do: [ :element | 		element width: parentBounds width ]</body><body package="Roassal-Core">doStretchVertical: aCollectionOfElements  	| parent parentBounds addedHeight parentBoundsHeight runningIndex newHeight |	aCollectionOfElements isEmpty ifTrue: [ ^ self "nothing to do" ].	parent := aCollectionOfElements anyOne parent.	parent isView ifTrue: [ ^ self "ROView does not have bounds" ].	parentBounds := parent bounds.	addedHeight := aCollectionOfElements 		inject: 0		into: [ :m :el | m + el height ].	parentBoundsHeight := parentBounds height.	"parentBoundsHeight := parentBoundsHeight - ((aCollectionOfElements size - 1) * verticalGap) - (2 * verticalOutGap)."		runningIndex := 0.	parentBounds height &gt; addedHeight		ifTrue: [ aCollectionOfElements do: [ :element | 						newHeight := (element height * parentBoundsHeight / addedHeight) asInteger.						element height: newHeight.						runningIndex := runningIndex + newHeight + verticalGap ] ]</body><body package="Roassal-Core">movePointer: pointer accordingToFigure: aNodeFigure		^ pointer setX: pointer x setY: pointer y + aNodeFigure height + self verticalGap</body><body package="Roassal-Core">positionOriginalPointer: elements 	| maxWidth delta |	delta := 0.	self alignment == #right ifTrue: 		[ maxWidth := elements maxValue: #width.		delta := maxWidth ].	self alignment == #center ifTrue: 		[ maxWidth := elements maxValue: #width.		delta := maxWidth / 2.0 ].	^ ((self paddingLeftFor: elements) + delta) @ (self paddingTopFor: elements)</body></methods><methods><class-id>Roassal.ROVerticalLineLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		super initialize.	self alignLeft</body></methods><methods><class-id>Roassal.ROLinearMove</class-id> <category>public</category><body package="Roassal-Core">for: anElement by: aPoint	self for: anElement to: (anElement position + aPoint)</body><body package="Roassal-Core">for: anElement to: aFinalPosition	| p |	element := anElement.	p := aFinalPosition - anElement position.	increment := (p x / nbCycles) @ (p y / nbCycles).	remainingCycles := nbCycles.	finalPosition := aFinalPosition.	anElement view addAnimation: self</body></methods><methods><class-id>Roassal.ROLinearMove</class-id> <category>accessing</category><body package="Roassal-Core">element	^ element</body></methods><methods><class-id>Roassal.ROLinearMove</class-id> <category>hooks</category><body package="Roassal-Core">after	element translateTo: finalPosition.</body><body package="Roassal-Core">doStep	element translateBy: increment.	element signalUpdate.</body></methods><methods><class-id>Roassal.ROLinearMove class</class-id> <category>public</category><body package="Roassal-Core">for: element by: position	^ self new for: element by: position</body><body package="Roassal-Core">for: element to: position	^ self new for: element to: position</body></methods><methods><class-id>Roassal.ROGraphTransformation</class-id> <category>utility</category><body package="Roassal-Core">containsCycleIn: nodes with: edges 	"Broken so far"	^ self containsCycleIn: nodes with: edges alreadyPassedNodes: #() root: nodes first</body><body package="Roassal-Core">containsCycleIn: nodes with: edges alreadyPassedNodes: passedNodes root: rootNode	| newNodes newPassedNode c res |	nodes ifEmpty: [ ^ false ].	(passedNodes includes: rootNode) ifTrue: [ ^ true ].		newNodes := nodes.	newPassedNode := passedNodes.		res := false.	nodes do: [ :node | 		(passedNodes contains: node) ifTrue: [ ^ true ].		newNodes := nodes copyWithout: rootNode.		c := self getConnectedNodesFrom: node using: edges.		newNodes := newNodes copyWithoutAll: c.		newPassedNode := newPassedNode, (Array with: rootNode).				res := res and: [self containsCycleIn: newNodes with: edges alreadyPassedNodes: passedNodes root: node]		].	^ res	</body><body package="Roassal-Core">containsCycleIn: rootNode with: edges passedNodes: passedNodes	| c usedEdges |	edges ifEmpty: [ ^ false ].	(passedNodes includes: rootNode) ifTrue: [ ^ true ].	c := self getConnectedNodesFrom: rootNode using: edges.	usedEdges := edges select: [ :edge | edge from == rootNode ].	passedNodes add: rootNode.	c do: [ :nr | 		(self containsCycleIn: nr with: (edges copyWithoutAll: usedEdges) passedNodes: passedNodes)			ifTrue: [ ^ true ].		passedNodes add: nr. ].	^ false</body><body package="Roassal-Core">getConnectedEdgesFrom: rootNode using: edges	^ (edges select: [ :edge | edge from == rootNode ])</body><body package="Roassal-Core">getConnectedNodesFrom: rootNode using: edges	^ (edges select: [ :edge | edge from == rootNode ]) collect: #to</body><body package="Roassal-Core">hasCycleIn: nodes with: edges		| connectedNodes connectedEdges runningNodes runningEdges |	runningNodes := nodes.	runningEdges := edges.	nodes copy do: [ :n |			runningNodes := runningNodes copyWithout: n.				connectedNodes := self getConnectedNodesFrom: n using: runningEdges.		connectedEdges := self getConnectedEdgesFrom: n using: runningEdges.				(runningNodes includesAll: connectedNodes) ifFalse: [ ^ true ].				runningNodes := runningNodes copyWithoutAll: connectedNodes.		runningEdges := runningEdges copyWithoutAll: connectedEdges.		runningEdges ifEmpty: [ ^ false ].		runningNodes ifEmpty: [ ^ false ].	]</body><body package="Roassal-Core">hasIncomingEdges: node	node view elementsDo: [ :element | (element isEdge and: [ element to == node ]) ifTrue: [ ^ true ] ].	^ false</body><body package="Roassal-Core">hasOutgoingEdges: node	node view elementsDo: [ :element | (element isEdge and: [ element from == node ]) ifTrue: [ ^ true ] ].	^ false</body><body package="Roassal-Core">incomingEdgesOf: node	^ node view elementsSuchThat: [ :element | (element isEdge and: [ element to == node ]) ]</body><body package="Roassal-Core">outgoingEdgesOf: node	^ node view elementsSuchThat: [ :element | (element isEdge and: [ element from == node ]) ]</body><body package="Roassal-Core">parentsFor: aNode edges: edges	| nodes |	nodes := OrderedCollection new.	edges do: [ :edge | edge to == aNode ifTrue: [ nodes add: edge from ] ].	^ nodes.</body><body package="Roassal-Core">rootNodeFor: nodes edges: edges	| rootNodes |	rootNodes := self rootNodesFor: nodes edges: edges.	rootNodes size &gt; 1 ifTrue: [ self error: 'More than one root node found' ].	^ rootNodes first.</body><body package="Roassal-Core">rootNodesFor: aNodeCollection edges: edges	^ aNodeCollection select: [:node | (self parentsFor: node edges: edges) isEmpty ].</body></methods><methods><class-id>Roassal.ROGraphTransformation</class-id> <category>public</category><body package="Roassal-Core">fromEdgesToNesting: nodes edges: edges	^ self fromEdgesToNesting: nodes edges: edges roots: (self rootNodesFor: nodes edges: edges).</body><body package="Roassal-Core">fromEdgesToNesting: nodes edges: edges root: root	| children restOfNodes |	"self assert: [ self containsCycleIn: nodes with: edges ] description: 'Cannot contain cycle'."		children := self getConnectedNodesFrom: root using: edges.		"Remove found children from rest of given nodes."	restOfNodes := nodes copy asOrderedCollection.	children do: [: n | restOfNodes remove: n ifAbsent: []].		"Recurse, do the same for all children."	children := children collect: [ :child | self 										fromEdgesToNesting: restOfNodes 										edges: edges 										root: child ].										"Remove children from any previous parent there might be (?)."	children do: [:e |e removeFromParent].		"Add children to given root, which is their new parent."	children do: [ :child | root addChild: child ].		^ root</body><body package="Roassal-Core">fromEdgesToNesting: nodes edges: edges roots: roots	roots size &gt; 1 ifTrue: [		| result |		result := OrderedCollection new.		roots do: [ :root |			result add: (self fromEdgesToNesting: nodes edges: edges root: root) ].		^ result ].		^ self fromEdgesToNesting: nodes edges: edges root: roots first.</body></methods><methods><class-id>Roassal.ROGraphTransformation</class-id> <category>public - removing</category><body package="Roassal-Core">removeIntermediaryNodes: nodes	"Transform a graph [A] -----&gt; [B] ----&gt; [C] into [A] ----&gt; [C]"	"Only works for a tree"	| incomingEdges outgoingEdges |	nodes do: [ :node |		((self hasIncomingEdges: node) and: [ self hasOutgoingEdges: node ])			ifTrue: [ 				incomingEdges := self incomingEdgesOf: node.				outgoingEdges := self outgoingEdgesOf: node.								self assert: [ incomingEdges size = 1 ].				self assert: [ outgoingEdges size = 1 ].				incomingEdges do: [ :edge | edge from: edge from to: outgoingEdges first to ].				outgoingEdges do: #remove.				node remove ] ]</body></methods><methods><class-id>Roassal.ROAnimatedResizing</class-id> <category>public</category><body package="Roassal-Core">after	element extent: finalSize</body><body package="Roassal-Core">doStep	element extent: (element extent + increment).	element signalUpdate.</body><body package="Roassal-Core">element	^ element</body><body package="Roassal-Core">for: aROElement newSize: finalSizeAsPoint 	| p |	element := aROElement.	p := finalSizeAsPoint - element extent.	increment := (p x / nbCycles) @ (p y / nbCycles).	remainingCycles := nbCycles.	finalSize := finalSizeAsPoint.	aROElement view addAnimation: self</body><body package="Roassal-Core">for: aROElement resize: finalSizeAsPoint 	| p |	element := aROElement.	p := finalSizeAsPoint - element extent.	increment := (p x / nbCycles) @ (p y / nbCycles).	remainingCycles := nbCycles.	finalSize := finalSizeAsPoint.	aROElement view addAnimation: self</body></methods><methods><class-id>Roassal.ROAnimatedResizing class</class-id> <category>public</category><body package="Roassal-Core">for: aROElement resize: aPoint 	^ self for: aROElement resizeAndFixTopLeft: aPoint</body><body package="Roassal-Core">for: aROElement resizeAndFixBottomLeft: aPoint	ROLinearMove for: aROElement to: (aROElement position + (0 @ aROElement extent y)-  (0 @ aPoint y)).	^ self new for: aROElement newSize: aPoint</body><body package="Roassal-Core">for: aROElement resizeAndFixBottomRight: aPoint	ROLinearMove for: aROElement to: (aROElement position + aROElement extent - aPoint).	^ self new for: aROElement newSize: aPoint</body><body package="Roassal-Core">for: aROElement resizeAndFixTopLeft: aPoint 	^ self new for: aROElement resize: aPoint</body><body package="Roassal-Core">for: aROElement resizeAndFixTopRight: aPoint	ROLinearMove for: aROElement to: (aROElement position + (aROElement extent x @ 0) - (aPoint x @ 0)).	^ self new for: aROElement newSize: aPoint</body></methods><methods><class-id>Roassal.ROSmoothLayoutTranslator</class-id> <category>testing</category><body package="Roassal-Core">hasCompleted	"Return true if all the translation has completed"	^ move hasCompleted</body></methods><methods><class-id>Roassal.ROSmoothLayoutTranslator</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	super initialize.		"The amount of view refresh we need to complete the transition"	nbCycles := 180</body></methods><methods><class-id>Roassal.ROSmoothLayoutTranslator</class-id> <category>accessing</category><body package="Roassal-Core">nbCycles: anInteger	"Set the number of cycle we need to complete the transition"	nbCycles := anInteger </body></methods><methods><class-id>Roassal.ROSmoothLayoutTranslator</class-id> <category>hook</category><body package="Roassal-Core">translate: element to: newPosition	move := ROLinearMove new					nbCycles: nbCycles;					for: element to: newPosition</body></methods><methods><class-id>Roassal.ROTranslation</class-id> <category>public</category><body package="Roassal-Core">for: element function: aBlock intervalIni: ini IntervalEnd: end  	| xIncrement yIncrement position |	[	xIncrement := ((end - ini)/ nbCycles) asFloat .	yIncrement := (aBlock value: ini).	 remainingCycles := nbCycles + 1.	  (1 to: nbCycles) do: [ :i |		yIncrement := ((aBlock value: xIncrement * i)) - yIncrement.		element translateBy: xIncrement @ yIncrement.		element signalUpdate.		remainingCycles := remainingCycles - 1.		(Delay forMilliseconds: 30) wait.		].	   remainingCycles := remainingCycles - 1. ] fork</body><body package="Roassal-Core">for: element function: aBlock intervalIni: ini IntervalEnd: end XFactor: factor	|xIncrement yIncrement position|	[	xIncrement := ((end - ini)/ nbCycles) asFloat.	"xIncrement inspect ."	yIncrement := (aBlock value: ini).	 remainingCycles := nbCycles + 1.	  (1 to: nbCycles) do: [ :i |		yIncrement := ((aBlock value: xIncrement * i)) - yIncrement.		element translateBy: (xIncrement * factor)@ yIncrement.		element signalUpdate.		remainingCycles := remainingCycles - 1.		(Delay forMilliseconds: 30) wait.		].	   remainingCycles := remainingCycles - 1. ] fork</body><body package="Roassal-Core">for: element functionX: aXBlock Y: aYBlock intervalIni: ini IntervalEnd: end	|xIncrement yIncrement position increment|	[	increment := ((end - ini)/ nbCycles) asFloat.	yIncrement := (aYBlock value: ini).	xIncrement := (aXBlock value: ini).	 remainingCycles := nbCycles + 1.	  (1 to: nbCycles) do: [ :i |		yIncrement := ((aYBlock value: (increment * i)) - yIncrement) asFloat.		xIncrement := ((aXBlock value: (increment * i)) - xIncrement) asFloat.		element translateBy: (xIncrement@ yIncrement).		element signalUpdate.		remainingCycles := remainingCycles - 1.		(Delay forMilliseconds: 30) wait.		].	   remainingCycles := remainingCycles - 1. ] fork</body><body package="Roassal-Core">for: element functionXY: aBlock intervalIni: ini IntervalEnd: end XFactor: factor	|xIncrement yIncrement position|	[	xIncrement := ((end - ini)/ nbCycles) asFloat.	"xIncrement inspect ."	yIncrement := (aBlock value: ini).	 remainingCycles := nbCycles + 1.	  (1 to: nbCycles) do: [ :i |		yIncrement := ((aBlock value: xIncrement * i)) - yIncrement.		element translateBy: (xIncrement * factor)@ 0.		element signalUpdate.		remainingCycles := remainingCycles - 1.		(Delay forMilliseconds: 30) wait.		].	   remainingCycles := remainingCycles - 1. ] fork</body><body package="Roassal-Core">for: element to: endPosition</body></methods><methods><class-id>Roassal.ROTranslation</class-id> <category>hooks</category><body package="Roassal-Core">defaultNumberOfCycles	^ 100</body></methods><methods><class-id>Roassal.ROPopupTest</class-id> <category>positionning popup</category><body package="Roassal-Core">testBottomLeft		self assert: ((popup closestPositionOf: el from: 4 @ 504 in: view) = 					((4 @ 504) + (popup popupOffset x @ popup popupOffset y negated) - (0 @ el height)))</body><body package="Roassal-Core">testBottomRight		self assert: ((popup closestPositionOf: el from: 504 @ 504 in: view) = 					((504 @ 504) - popup popupOffset - (el width @ el height)))</body><body package="Roassal-Core">testPositionOfPopup		| event center viewForPopup |	view := ROView new.	el := (ROBox new size: 40) element @ RODraggable.	"popup := ROPopup text: (1 to: 10) asArray printString."		viewForPopup := ROView new.	viewForPopup add: (ROBox green extent: 200 @ 20) element.	popup := ROPopupView new view: viewForPopup.	el @ popup.	view add: el.		el translateTo: 63.0 @ 76.0.		"	view open.	"	view camera windowSize: (264 @ 287).		"We simulate the mouse is at the center of the element"	center := el bounds center.	event := ROMouseEnter new realPosition: center.	self assert: (popup closestPositionOf: viewForPopup elements first from: event realPosition in: view) = (center + popup popupOffset).		"	el announce: event.	"</body><body package="Roassal-Core">testPositionOfPopup2		| event center |	view := ROView new.	el := (ROBox new size: 40) element @ RODraggable.	popup := ROPopup text: (1 to: 10) asArray printString.	el @ popup.	view add: el.		el translateTo: 63.0 @ 76.0.	"We simulate the mouse is at the center of the element"	center := el bounds center.	event := ROMouseEnter new realPosition: center.	self assert: (popup closestPositionOf: el from: event realPosition in: view) = (center + popup popupOffset).</body><body package="Roassal-Core">testTopLeft		self assert: ((popup closestPositionOf: el from: 4 @ 4 in: view)= ((4 @ 4) + (popup popupOffset)))</body><body package="Roassal-Core">testTopLeftWithBigPopup	| popupElement |	popup := ROPopupView new view: (ROView new add: ((ROElement new extent: 800 @ 800) + ROBox)).	popupElement := popup createPopupFor: el.	self assert: ((popup closestPositionOf: popupElement from: 4 @ 4 in: view)= ((4 @ 4) + (popup popupOffset)))</body><body package="Roassal-Core">testTopLeftWithEvents	| popupElement |	el announce: (ROMouseEnter new realPosition: 4 @ 4).	popupElement := view elements second.		self assert: (popupElement position = ((4 @ 4) + (popup popupOffset)))</body><body package="Roassal-Core">testTopRight	self assert: ((popup closestPositionOf: el from: 500 @ 4 in: view) = 					((500 @ 4) + (popup popupOffset x negated @ popup popupOffset y) - (el width @ 0)))</body><body package="Roassal-Core">testTopRightWithEvents	| popupElement viewWidth |	viewWidth := view camera windowSize x.	el announce: (ROMouseEnter new realPosition: viewWidth @ 4).	popupElement := view elements second.		self assert: (popupElement position = ((viewWidth @ 4) + (popup popupOffset x negated @ popup popupOffset y) - (popupElement width @ 0)))</body></methods><methods><class-id>Roassal.ROPopupTest</class-id> <category>tests</category><body package="Roassal-Core">testAfterCreationBlock	view := ROView new.	el := ROBox element.	el @ (ROPopup new afterCreationBlock: [:e | e attributes at: #foo put: 'bar' ]).		view add: el.	el announce: ROMouseEnter.	self assert: (view elements last attributes at: #foo) = 'bar'</body><body package="Roassal-Core">testAfterCreationBlock2	view := ROView new.	el := ROBox element.	el @ (ROPopup new afterCreationBlock: [:e | e zIndex: 5 ]).		view add: el.	el announce: ROMouseEnter.	self assert: view elements last zIndex = 5</body><body package="Roassal-Core">testMouseEnteringAndDragNode	| popupElement |	view := ROView new.	el  := ROElement new.	el @ ROPopup.	view add: el.	el announce: ROMouseEnter.	self assert: view elements size = 2.	popupElement := (view elements copyWithout: el) first.		el announce: (ROMouseDragging step: 10 @ 10).	self assert: view elements size = 1.</body><body package="Roassal-Core">testPositionInAStack	| stack element |	element := (ROElement on: 'an element').	element + (ROLabel new color: Color gray) @ ROPopup.	view := ROView new.	view		add: element.	view @ RODraggable.		stack := ROViewStack new.	stack addView: view."	stack open"	stack camera windowSize: 500 @ 500. 	view camera windowSize: 500 @ 500. 		self assert: (view numberOfElements = 1).		element announce: ROMouseEnter.		self assert: (view numberOfElements = 2).	popup := (view elementsSuchThat: [ :ell | ell ~~ element ]) first.	self assert: popup position = (element position + ROPopup defaultPopupOffset).	"The popup is not displayed anymore"	element announce: ROMouseLeave.		self assert: (view numberOfElements = 1).		element translateBy: 40@60.	element announce: (ROMouseEnter new position: 45 @ 65; realPosition: 45 @ 65).	popup := (view elementsSuchThat: [ :ell | ell ~~ element ]) first.	self assert: popup position = ((45 @ 65) + ROPopup defaultPopupOffset).</body><body package="Roassal-Core">testPositionInAStack2	|  stack element |	element := (ROElement on: 'an element').	element + (ROLabel new color: Color gray) @ ROPopup.	view := ROView new.	view add: element.	view @ RODraggable.		stack := ROViewStack new.	stack addView: view."	stack open"	stack camera windowSize: 500 @ 500. 	view camera windowSize: 500 @ 500. 		self assert: (view numberOfElements = 1).		element announce: ROMouseEnter.		self assert: (view numberOfElements = 2).	popup := (view elementsSuchThat: [ :ell | ell ~~ element ]) first.	self assert: popup position = (element position + ROPopup defaultPopupOffset).	"The popup is not displayed anymore"	element announce: ROMouseLeave.		self assert: (view numberOfElements = 1).		view translateBy: 40@60.	element announce: (ROMouseEnter new realPosition: 40@60).	popup := (view elementsSuchThat: [ :ell | ell ~~ element ]) first.	self assert: popup position = (element position + ROPopup defaultPopupOffset).</body></methods><methods><class-id>Roassal.ROPopupTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	el := ROElement new size: 50.	el @ RODraggable.	el @ (popup := ROPopup text: 'balh').	view add: (el +  ROBox).		view camera windowSize: 500 @ 500	</body></methods><methods><class-id>Roassal.ROPopupTest</class-id> <category>hooks</category><body package="Roassal-Core">classToTest	^ ROPopup</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>configuration</category><body package="Roassal-Core">defaultDuration	^ 500</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>accessing</category><body package="Roassal-Core">after: aBlock	"The after block is used to do something after the animation has completed"	afterBlock := aBlock</body><body package="Roassal-Core">duration: milliseconds	"Set the duration of the animation in milliseconds"	duration := milliseconds</body><body package="Roassal-Core">elapsedTime	^ self currentTime - startedTime</body><body package="Roassal-Core">elapsedTimeNormalized	"Return a value between 0 and 1"	^ self elapsedTime / duration</body><body package="Roassal-Core">strategy	"Return the merging strategy associated to this animation"	^ strategy</body><body package="Roassal-Core">strategy: anAnimationStrategy	"Set a new strategy when merging animations"	strategy := anAnimationStrategy</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>action</category><body package="Roassal-Core">addedIn: aView	"I m added in a view"	"After this method, the animation is starting"	strategy added: self in: aView.	startedTime := self currentTime</body><body package="Roassal-Core">doAfter	afterBlock value</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>hooks</category><body package="Roassal-Core">doCycle	self hasCompleted 		ifFalse: [  			self doStep.			self hasCompleted ifTrue: [ self doAfter ] ]</body><body package="Roassal-Core">doStep	"To be overriden"</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	duration := self defaultDuration.	afterBlock := #yourself.	strategy := ROAnimationAppend instance</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>testing</category><body package="Roassal-Core">hasCompleted 	^ duration &lt;= self elapsedTime</body></methods><methods><class-id>Roassal.ROTimelyAnimation</class-id> <category>utility</category><body package="Roassal-Core">currentTime	^ Time millisecondClockValue</body></methods><methods><class-id>Roassal.ROLinearMoveT</class-id> <category>action</category><body package="Roassal-Core">doAfter	element translateTo: finalPosition.	super doAfter.</body></methods><methods><class-id>Roassal.ROLinearMoveT</class-id> <category>public</category><body package="Roassal-Core">for: anElement to: aFinalPosition during: milliseconds	element := anElement.	duration := milliseconds.	initialPosition := element position.	finalPosition := aFinalPosition.	anElement view addAnimation: self</body></methods><methods><class-id>Roassal.ROLinearMoveT</class-id> <category>hooks</category><body package="Roassal-Core">doStep	newPosition := initialPosition + ((finalPosition - initialPosition) * self elapsedTimeNormalized).	element translateTo: newPosition asIntegerPoint.	element signalUpdate.</body></methods><methods><class-id>Roassal.ROIdentityMatrix</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		rows := IdentityDictionary new</body></methods><methods><class-id>Roassal.ROIdentityMatrix</class-id> <category>accessing</category><body package="Roassal-Core">at: u		| row |	row := rows		at: u		ifAbsentPut: [IdentityDictionary new].	^row keys</body><body package="Roassal-Core">at: u at: v		| row |	row := rows		at: u		ifAbsentPut: [IdentityDictionary new].	^row		at: v		ifAbsent: [false]</body><body package="Roassal-Core">at: u at: v put: aBoolean		| row |	"u -&gt; v"	row := rows		at: u		ifAbsentPut: [IdentityDictionary new].	row at: v put: aBoolean.	"v -&gt; u"	row := rows		at: v		ifAbsentPut: [IdentityDictionary new].	row at: u put: aBoolean</body></methods><methods><class-id>Roassal.ROHorizontalLineLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| previous |	ROHorizontalLineLayout on: elements.	previous := nil.	elements do: [ :el |		previous notNil ifTrue: [ self assert: el position x &gt; previous position x ].		previous := el ]</body><body package="Roassal-Core">testLayoutOnEmptyCollection	self shouldnt: [ ROHorizontalLineLayout on: #() ] raise: Error.	self shouldnt: [ ROHorizontalLineLayout on: #() edges: #() ] raise: Error.	self shouldnt: [ ROHorizontalLineLayout new on: #() edges: #() ] raise: Error</body><body package="Roassal-Core">testLayoutWithAlignment	| previous |	ROHorizontalLineLayout new alignment: #bottom; on: elements.	previous := nil.	elements do: [ :el |		previous notNil ifTrue: [ self assert: el position x &gt; previous position x ].		previous := el ].	</body><body package="Roassal-Core">testLayoutWithMargin	| element result |	element := ROBox blue element.	element resizeStrategy: (ROExtensibleParent new paddingGap: 25).	element addAll: elements.	ROHorizontalLineLayout on: elements.		view := ROView new.	view add: element.		result := (((Array new: 20) at: 1 put: ((25@25)); at: 2 put: ((85@25)); at: 3 put: ((145@25)); at: 4 put: ((205@25)); at: 5 put: ((265@25)); at: 6 put: ((325@25)); at: 7 put: ((385@25)); at: 8 put: ((445@25)); at: 9 put: ((505@25)); at: 10 put: ((565@25)); at: 11 put: ((625@25)); at: 12 put: ((685@25)); at: 13 put: ((745@25)); at: 14 put: ((805@25)); at: 15 put: ((865@25)); at: 16 put: ((925@25)); at: 17 put: ((985@25)); at: 18 put: ((1045@25)); at: 19 put: ((1105@25)); at: 20 put: ((1165@25)); yourself)).		self assert: (elements collect: #position) = result</body><body package="Roassal-Core">testStretch	 | previous |	 ROHorizontalLineLayout new stretch; on: elements.	 previous := nil.	 elements do: [ :el |		 previous notNil ifTrue: [ self assert: el position x &gt; previous position x ].		 previous := el ].</body><body package="Roassal-Core">testStretchInsideElement	 | previous random rootElement |		elements := ROElement forCollection: (1 to: 10).	random := #(23 53 60 50).	elements do: [ :n | n 						extent: (random anyOne) @ (random anyOne); 						addShape: (ROBox new); addShape: (ROBorder new) ].	rootElement := ROElement on: 11.	rootElement size: (11 * 55).	rootElement addShape: ROBorder black.	rootElement addAll: elements.	view := ROView new.	view add: rootElement.		 ROHorizontalLineLayout new stretch; on: elements.	 previous := nil.	 elements do: [ :el |		 previous notNil ifTrue: [ 			self assert: el position x &gt; previous position x.			self assert: el height = previous height.			 ].		 previous := el ].</body></methods><methods><class-id>Roassal.ROZoomIntoElementOnClick</class-id> <category>initialization</category><body package="Roassal-Core">initialize	recursive := false.</body><body package="Roassal-Core">initializeElement: element		 element on: ROMouseLeftClick do: [:event | 		| move viewToAdd|		viewToAdd := (self createViewToAddFor: element).		move := ROZoomMove new.		move after: [ stack addFirst: viewToAdd ].		move on: element view to: element bounds ].		</body><body package="Roassal-Core">recursive: aBoolean	recursive := aBoolean.</body><body package="Roassal-Core">view: aROViewOrBlock	view := aROViewOrBlock	</body></methods><methods><class-id>Roassal.ROZoomIntoElementOnClick</class-id> <category>view to add</category><body package="Roassal-Core">addInteractionsToReturnFor: viewToAdd	| oldBounds rect |	oldBounds := (stack firstView camera bounds).		viewToAdd on: ROMouseRightClick do: [:event | 		| move original |		stack removeFirst.		rect := viewToAdd encompassingRectangle.		"stack firstView translateBy: ((0@0 corner: stack camera  windowSize) center - ((rect width / 2) @ (rect height / 2)))."		move := ROZoomMove new.		move nbCycles: 10.		move on: stack firstView to: oldBounds] .</body><body package="Roassal-Core">addRecursivelyOn: aView	recursive 		ifTrue: [aView elementsDo: [:el | el @self ]].	</body><body package="Roassal-Core">createViewToAddFor: element	|viewToAdd rect|	viewToAdd := (view roValue: element ).	self addInteractionsToReturnFor: viewToAdd.	self addRecursivelyOn: viewToAdd.		rect := viewToAdd encompassingRectangle.	viewToAdd translateBy: ((0@0 corner: stack camera  windowSize) center - ((rect width / 2) @ (rect height / 2))) - viewToAdd position .		^viewToAdd </body></methods><methods><class-id>Roassal.ROZoomIntoElementOnClick</class-id> <category>accessing</category><body package="Roassal-Core">stack	^ stack</body><body package="Roassal-Core">stack: aStack	stack := aStack.	 	</body></methods><methods><class-id>Roassal.ROViewDisplayer</class-id> <category>accessing</category><body package="Roassal-Core">view: aView	"Take a roassal view as argument"	view := aView.</body></methods><methods><class-id>Roassal.ROViewDisplayer</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| previousOffset|	previousOffset := aCanvas offset.	aCanvas offset: (aROElement position).	view drawElementsOn: aCanvas.	view doAnimationCycle.	aCanvas offset: previousOffset.</body></methods><methods><class-id>Roassal.ROZoomIntoElementOnClickTest</class-id> <category>as yet unclassified</category><body package="Roassal-Core">setUp	stack := ROViewStack new.</body><body package="Roassal-Core">testAddView	|view viewToAdd zoom|	view := ROView new.	viewToAdd := ROView new.	zoom := ROZoomIntoElementOnClick new stack: stack; view: viewToAdd.	view add: (ROElement sprite @zoom).	stack addView: view.		view elements first announce: ROMouseLeftClick.	view doAllAnimationCycles.			self assert: (stack viewsSize = 2).	self assert: (stack firstView = viewToAdd )	</body><body package="Roassal-Core">testAddViewAsBlock	|view zoom|	view := ROView new.	zoom := ROZoomIntoElementOnClick new.	zoom 		stack: stack; 		view: [:el | |v|			v := ROView new.			v						].	view add: (ROElement sprite @zoom).	stack addView: view.		view elements first announce: ROMouseLeftClick.	view doAllAnimationCycles.			self assert: (stack viewsSize = 2).	self assert: (stack firstView elements size = 0)	</body><body package="Roassal-Core">testRecursive	|view zoom|	view := ROView new.	zoom := ROZoomIntoElementOnClick new.	zoom 		stack: stack; 		view: [:el | 			|v| 			v := ROView new.			v add: ROElement sprite.					v];		recursive: true.	view add: (ROElement sprite @zoom).	stack addView: view.		(1 to: 2) do: [:n | 			stack firstView elements first announce: ROMouseLeftClick.			stack firstView doAllAnimationCycles.			self assert: (stack viewsSize = (n +1)).		].	(1 to: 2) do: [:n | 			stack firstView announce: ROMouseRightClick.			stack firstView doAllAnimationCycles.			self assert: (stack viewsSize = (3 - n)).		].</body><body package="Roassal-Core">testRemoveView	|view zoom viewToAdd|	view := ROView new.	zoom := ROZoomIntoElementOnClick new.	zoom 		stack: stack; 		view: (viewToAdd := ROView new).	viewToAdd add: ROElement sprite.	view add: (ROElement sprite @zoom).	stack addView: view.		view elements first announce: ROMouseLeftClick.	view doAllAnimationCycles.			self assert: (stack viewsSize = 2).	self assert: (stack firstView = viewToAdd).		viewToAdd announce: ROMouseRightClick.	viewToAdd doAllAnimationCycles.				self assert: (stack viewsSize = 1).	self assert: (stack firstView = view).	</body><body package="Roassal-Core">testZoomMove	|view move|	view := ROView new.	view camera bounds: (0@0 corner: 200@200).	move := ROZoomMove new.	move nbCycles: 10.	move on: view to: (0@0 corner: 50@50).		(1 to: 10) do: [:n | move doStep].		self assert: (view camera bounds = (0@0 corner: 50@50)).	</body></methods><methods><class-id>Roassal.ROAllRecursivelyConnectedNodeDraggableTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view els firstNode o oldPos newPos |	view := ROView new.	els := (ROBox green size: 10) elementsOn: (1 to: 20).	els do: [ :e | e @ ROPopup ].	view addAll: els.	ROLine buildEdgesFromElements: view elements from: #yourself toAll: [ :v | Array with: v + 1 with: v + 2 ].	ROTreeLayout on: view elements.	"	view open	"	firstNode := view elements first.	o := ROAllRecursivelyConnectedNodeDraggable new.	self assert: (o computeAllRecursivelyConnectedNodesOf: firstNode) asSet = view elementsNotEdge allButFirst asSet.		firstNode @ ROAllRecursivelyConnectedNodeDraggable.	oldPos := view elementsNotEdge collect: #position.	firstNode translateBy: 5 @ 10.	newPos := view elementsNotEdge collect: #position.		oldPos with: newPos do: [ :p1 :p2 | self assert: (p1 + (5 @ 10)) = p2 ]</body><body package="Roassal-Core">testBasic2	| view els firstNode o |	view := ROView new.	els := (ROBox green size: 10) elementsOn: (1 to: 3).	els do: [ :e | e @ ROPopup ].	view addAll: els.	ROLine buildEdgesFromAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3 with: 3 -&gt; 1) inView: view.	ROTreeLayout on: view elements.	"	view open	"	firstNode := view elements first.	o := ROAllRecursivelyConnectedNodeDraggable new.	self assert: (o computeAllRecursivelyConnectedNodesOf: firstNode) asSet = view elementsNotEdge allButFirst asSet.</body></methods><methods><class-id>Roassal.ROLinearMoveTest</class-id> <category>tests</category><body package="Roassal-Core">testCallingAfter	| move |	move := ROLinearMove for: ROElement new by: 50 @ 50.	move after.</body></methods><methods><class-id>Roassal.RODominanceTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">computeChildrenFor: aNode	^ self childrenWithHighestNestingLevelFor: aNode</body></methods><methods><class-id>Roassal.RORadialBezierCurve</class-id> <category>hooks</category><body package="Roassal-Core">lineSegmentsFor: anEdge 	| startingPoint endingPoint firstControl secondControl gap |		startingPoint := anEdge from position.	(startingPoint = (0@0)) ifTrue: [ ^ ROLine new lineSegmentsFor: anEdge ].		startingPoint := attachPoint startingPointOf: anEdge.	endingPoint := attachPoint endingPointOf: anEdge.		gap := endingPoint r - startingPoint r.		(startingPoint r = 0) ifTrue: [ firstControl := Point radius: 0 + (gap/2) theta: endingPoint theta. ] 						ifFalse: [ firstControl := Point radius: startingPoint r + (gap/2) theta: startingPoint theta. ].		secondControl := Point radius: endingPoint r - (gap/2) theta: endingPoint theta.		^ self class approximate: (Array with: startingPoint with: firstControl with: secondControl with: endingPoint ) in: Recursion</body></methods><methods><class-id>Roassal.ROCollectingVisitor</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	edges := OrderedCollection new.	nodes := OrderedCollection new</body></methods><methods><class-id>Roassal.ROCollectingVisitor</class-id> <category>visit</category><body package="Roassal-Core">visitEdge: anEdge	edges add: anEdge.	anEdge elementsDo: [ :el | el accept: self ]</body><body package="Roassal-Core">visitElement: aNode	nodes add: aNode.	aNode elementsDo: [ :el | el accept: self ] </body></methods><methods><class-id>Roassal.ROLoadViewCommand</class-id> <category>accessing</category><body package="Roassal-Core">view	^view</body></methods><methods><class-id>Roassal.ROLoadViewCommand</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	name := 'Load View'</body></methods><methods><class-id>Roassal.ROLoadViewCommand</class-id> <category>running</category><body package="Roassal-Core">execute	view := ROPlatform current serializerClass new interactiveImportView</body></methods><methods><class-id>Roassal.ROZoomMove</class-id> <category>initialization</category><body package="Roassal-Core">initialize 	super initialize.	nbCycles := 50.</body></methods><methods><class-id>Roassal.ROZoomMove</class-id> <category>hooks</category><body package="Roassal-Core">doStep	|oldBounds|	oldBounds := camera bounds.	topLeft := topLeft + incrementX1Y1.	bottomRight := bottomRight + incrementX2Y2.	camera bounds: (topLeft asIntegerPoint corner: bottomRight asIntegerPoint).	view announce: (ROCameraResized new oldBounds: oldBounds; newBounds: camera bounds)</body></methods><methods><class-id>Roassal.ROZoomMove</class-id> <category>public</category><body package="Roassal-Core">on: aView to: finalRealBounds	| initialRealBounds animBlock |	camera := aView camera.	view := aView.	initialRealBounds := camera bounds.	incrementX1Y1 := ((finalRealBounds topLeft - initialRealBounds topLeft) / nbCycles).	incrementX2Y2 := ((finalRealBounds bottomRight - initialRealBounds bottomRight) / nbCycles).	 	 topLeft := initialRealBounds topLeft.	 bottomRight := initialRealBounds bottomRight.				aView addAnimation: self.</body></methods><methods><class-id>Roassal.ROLabel</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| runner tmpFont  tmpColor tmpHeight |	tmpFont := self fontFor: aROElement with: aCanvas camera.	tmpHeight := 0 @ (self heightOfLineWithFont: tmpFont).	tmpColor := self colorFor: aROElement.	runner := aROElement absolutePosition + self offsetWhenDrawing + (textHorizontalPadding @ textVerticalPadding).	self		linesOf: aROElement do: [ :line | 			aCanvas				drawString: line				at: runner				font: tmpFont				color: tmpColor.			runner := runner + tmpHeight ]</body></methods><methods><class-id>Roassal.ROLabel class</class-id> <category>public</category><body package="Roassal-Core">verticalText	^ self verticalText: #model</body><body package="Roassal-Core">verticalText: aBlock	| answer |	answer := self text: [:object | 		String streamContents: [ :stream |			(aBlock roValue: object) asString do: [ :e | stream nextPut: e ] separatedBy: [ stream nextPut: Character cr ] ] ].		answer interlineSpace: -4.		^ answer</body></methods><methods><class-id>Roassal.ROBlink</class-id> <category>util</category><body package="Roassal-Core">highlight: element	^ self class highlight: element</body><body package="Roassal-Core">highlight: element color: aColor	^ self class highlight: element color: aColor</body><body package="Roassal-Core">set: element color: aColor	^ self class set: element color: aColor</body><body package="Roassal-Core">unhighlight: element	^ self class unhighlight: element</body></methods><methods><class-id>Roassal.ROBlink</class-id> <category>configuration</category><body package="Roassal-Core">defaultColor	^ self class defaultColor</body><body package="Roassal-Core">nbOfCyclesLightOn	^ 20</body></methods><methods><class-id>Roassal.ROBlink</class-id> <category>testing</category><body package="Roassal-Core">isHighlighted: element	^ self class isHighlighted: element</body></methods><methods><class-id>Roassal.ROBlink</class-id> <category>public</category><body package="Roassal-Core">on: element	self highlight: element.	RONopAnimation new		nbCycles: self nbOfCyclesLightOn;		after: [ self unhighlight: element ];		on: element view	"	RONopAnimation new		nbCycles: 20;		after: [ ROUnhighlightElement on: element ];		on: element view.	RONopAnimation new		nbCycles: 40;		after: [ ROHighlightElement on: element ];		on: element view.	RONopAnimation new		nbCycles: 60;		after: [ ROUnhighlightElement on: element ];		on: element view."</body></methods><methods><class-id>Roassal.ROBlink class</class-id> <category>public</category><body package="Roassal-Core">highlightElements: elements	^ elements do: [ :el | self highlight: el ]</body><body package="Roassal-Core">highlightElements: elements color: aColor	^ elements do: [ :el | self highlight: el color: aColor ]</body><body package="Roassal-Core">highlightIncomingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg to == element) ifTrue: [ self highlight: edg ] ].</body><body package="Roassal-Core">highlightOutgoingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg from == element) ifTrue: [ self highlight: edg ] ].</body><body package="Roassal-Core">incomingEdgesOf: element	"Blink all the edges that leave the node element"	element view raw elementsAsEdge 		do: [ :edg | (edg from == element) ifTrue: [ ROBlink on: edg ] ].</body><body package="Roassal-Core">on: element	^ self new on: element</body><body package="Roassal-Core">outgoingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg to == element) ifTrue: [ ROBlink on: edg ] ].</body><body package="Roassal-Core">unhighlightElements: elements	^ elements do: [ :el | self unhighlight: el ]</body><body package="Roassal-Core">unhighlightOutgoingEdgesOf: element	"Blink all the edges that leave the node element"	element view elementsAsEdge 		do: [ :edg | (edg from == element) ifTrue: [ self unhighlight: edg ] ].</body></methods><methods><class-id>Roassal.ROBlink class</class-id> <category>util</category><body package="Roassal-Core">highlight: element	self highlight: element color: self defaultColor</body><body package="Roassal-Core">highlight: element color: aColor	self set: element color: aColor</body><body package="Roassal-Core">set: element color: aColor	element forShape: ROShape do: [ :d | 		(element attributes includesKey: #oldColor)			ifFalse: 				[ element attributes at: #oldColor put: d color.				d color: aColor.				element signalUpdate ]].</body><body package="Roassal-Core">unhighlight: element	(self isHighlighted: element) ifFalse: [ ^ self ].		element forShape: ROShape do: [ :d | 		d color: (element attributes at: #oldColor).		element attributes removeKey: #oldColor ]. 	element signalUpdate</body></methods><methods><class-id>Roassal.ROBlink class</class-id> <category>configuration</category><body package="Roassal-Core">defaultColor	^ Color red</body></methods><methods><class-id>Roassal.ROBlink class</class-id> <category>testing</category><body package="Roassal-Core">isBlinking: element	^ element attributes includesKey: #oldColor</body><body package="Roassal-Core">isHighlighted: element	^ element attributes includesKey: #oldColor</body></methods><methods><class-id>Roassal.ROVWImageExporter</class-id> <category>accessing</category><body package="Roassal-VWSpecific">interactiveExportWithExtension: aFileExtention	| dialog defaultFilename file fileStream canvas rectangle oldPosition |	defaultFilename := 'ROView.png'.	dialog := SaveFileDialog new.	dialog 		addFileFilter: 'HTML (*.html)' pattern: '*.html';		defaultDirectory: '.';		defaultFilename: defaultFilename.	 file := dialog select.	file isNil ifTrue: [^self ].	fileStream := file newReadWriteStream binary.	canvas := ROVWCanvas onCamera: view camera.	rectangle := view encompassingRectangle.	canvas extent: rectangle extent + (10 @ 10).	oldPosition := view camera position.	view translateTo: rectangle origin negated.		view drawOn: canvas.	view camera translateTo: oldPosition .	[Refactory.PNG.PNGImageWriter writeImage: canvas form on: fileStream]		ensure: [fileStream notNil	ifTrue: [fileStream close]].</body></methods><methods><class-id>Roassal.ROVWImageExporter class</class-id> <category>export</category><body package="Roassal-VWSpecific">exportViewAsPNG: t1 	"	***This is decompiled code.*** 	The source was unavailable because the source pointer appears to point to 	an incorrect position in the file. The file may have been modified after this 	method was updated."	^(self new) view: t1; interactiveExportWithExtension: 'png'</body></methods><methods><class-id>Roassal.RONormalizerSpecificTest</class-id> <category>tests</category><body package="Roassal-VWSpecific">testBlockContext	| normalizer |	normalizer := RONColorLinearNormalizer inContext: [:entity | #(1 2 3 4 5 6 7 8)] withCommand: [:entity | entity].	self assert: (normalizer maximumValue: nil) = 8.	self assert: (normalizer roValue: 1) = ( (Color brightness: 1.0)).	self assert: (normalizer roValue: 8) = ( (Color brightness: 0.0)).</body><body package="Roassal-VWSpecific">testColor	Color colorNames do: [ :k | self assert: ((Color perform: k) isKindOf: ColorValue) ]</body><body package="Roassal-VWSpecific">testThreshold	| normalizer skyBlue |		skyBlue := (Color r:  0.529361 g: 0.807838 b: 0.921621).	normalizer := RONColorLinearNormalizer inContext: #(0 1 2 3 4 5 6 7 8 9 10) lowColor: skyBlue lowThreshold: 0.3 highColor: Color brown highThreshold: 0.7.	self assert: (normalizer maximumValue: nil) = 10.	self assert: (normalizer roValue: 10) = ( (Color red: 0.508851 green: 0.417409 blue: 0.451471)). 	self assert: (normalizer roValue: 1) = ( (Color red: 0.519351 green: 0.618239 blue: 0.693322)).	self assert: (normalizer roValue: 0) =  (Color red: 0.520571 green: 0.640459 blue: 0.720181)	"The adapted VW version. Differences with Squeak propably lay in different variable initialization. For example, brown in Squeak is different from VW	skyBlue := (Color r:  0.529361 g: 0.807838 b: 0.921621).	normalizer := MONColorLinearNormalizer inContext: #(0 1 2 3 4 5 6 7 8 9 10) lowColor: skyBlue lowThreshold: 0.3 highColor: Color brown highThreshold: 0.7.	self assert: (normalizer maximumValue: nil) = 10.	self assert: (normalizer moValue: 10) = (Color r: 0.611769 g: 0.357588 b: 0.391771). 	self assert: (normalizer moValue: 1) = (Color r: 0.569405 g: 0.589183 b: 0.664266).	self assert: (normalizer moValue: 0) = (Color r: 0.564644 g: 0.614943 b: 0.694543)."</body></methods><methods><class-id>Roassal.ROTimeOrganizer class</class-id> <category>public</category><body package="Roassal-Core">current	^ self subclasses first</body><body package="Roassal-Core">milliseconds	"Return the elapsed amount of milliseconds"		self subclassResponsibility </body><body package="Roassal-Core">now	^ Time now</body></methods><methods><class-id>Roassal.ROVWTime class</class-id> <category>public</category><body package="Roassal-VWSpecific">milliseconds	^ Timestamp now asMilliseconds</body><body package="Roassal-VWSpecific">now	^ Timestamp now</body></methods><methods><class-id>Roassal.ROVWPlatform</class-id> <category>configuration</category><body package="Roassal-VWSpecific">canvasClass 	^ ROVWCanvas</body><body package="Roassal-VWSpecific">fontOrganizerClass	^ ROVWFontOrganizer</body><body package="Roassal-VWSpecific">hostVisualElement	^ ROVWVisual</body><body package="Roassal-VWSpecific">htmlExporterClass	^ ROVWHTMLExporter</body><body package="Roassal-VWSpecific">imageExporterClass	^ Roassal.ROVWImageExporter</body><body package="Roassal-VWSpecific">name	^ 'visualworks'</body><body package="Roassal-VWSpecific">newLine	^''</body><body package="Roassal-VWSpecific">randomClass	^ LaggedFibonacciRandom</body><body package="Roassal-VWSpecific">serializerClass	^ROBOSSExporter</body><body package="Roassal-VWSpecific">svgExporterClass	^ Roassal.ROVWSVGExporter</body><body package="Roassal-VWSpecific">timeOrganizerClass	^ ROVWTime</body><body package="Roassal-VWSpecific">widgetFactory	^ ROVWWidgetFactory</body></methods><methods><class-id>Roassal.ROVWPlatform class</class-id> <category>class initialization</category><body package="Roassal-VWSpecific">initialize	"self initialize"	| p |	p := self new.	ROPlatform add: p.	ROPlatform setCurrent: p name</body></methods><methods><class-id>Roassal.ROStrokePaint</class-id> <category>accessing</category><body package="Roassal-VWSpecific">capStyle: aCapStyle	capStyle := aCapStyle.</body><body package="Roassal-VWSpecific">joinStyle: aJoinStyle	joinStyle := aJoinStyle.</body><body package="Roassal-VWSpecific">width: aNumber	width := aNumber</body></methods><methods><class-id>Roassal.ROStrokePaint</class-id> <category>drawing</category><body package="Roassal-VWSpecific">drawOn: aCairoContext	aCairoContext		sourceColorValue: color alpha: color alpha;		strokeWidth: 1;		lineCap: capStyle;		lineJoin: joinStyle;		lineWidth: width;		stroke.</body></methods><methods><class-id>Roassal.ROStrokePaint class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">color: aColor width: aNumber capStyle: aCapStyle joinStyle: aJoinStyle	^ ( (self color: aColor) width: aNumber; capStyle: aCapStyle; joinStyle: aJoinStyle).</body></methods><methods><class-id>Roassal.RODraggable</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: element	 element on: ROMouseDragging do: [ :event | 						element translateByRealPoint: event step.			element signalUpdate ]</body></methods><methods><class-id>Roassal.RODraggable class</class-id> <category>public</category><body package="Roassal-Core">elementToBeAdded	instance ifNil: [ instance := self new ].	^ instance</body></methods><methods><class-id>Roassal.ROBasicZOrdering</class-id> <category>accessing-computing</category><body package="Roassal-Core">setZindexOf: aGraphicalComponent	aGraphicalComponent zIndex: (self zIndexOf: aGraphicalComponent)</body><body package="Roassal-Core">zIndexOf: aComponent	^ aComponent zIndex.</body></methods><methods><class-id>Roassal.ROMotionMoveTest</class-id> <category>tests</category><body package="Roassal-Core">test	| view element |	view := ROView new.	element := ROElement new.	element extent: 20@20;				+ ROEllipse blue;				@ RODraggable;				@ RODraggableWithVelocity.	view add: element.	self deny: view hasAnimation.	ROMotionMove new for: element initialSpeed: 40 @ 30.		self assert: view hasAnimation.	</body></methods><methods><class-id>Roassal.ROSVGPathTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	self assert: pathShape lines isEmpty.	self assert: pathShape numberOfLines = 0.</body><body package="Roassal-Core">testDifferentStyles	| lines1 |	pathShape path: 'M100,100L300,100L200,300,z'.	lines1 := pathShape lines.		self assert: lines1 = (ROSVGPath new path: 'M 100 100 L 300 100 L 200 300 z') lines</body><body package="Roassal-Core">testLines	| expectedLines |	pathShape path: 'M100,100L300,100L200,300,z'.	expectedLines := OrderedCollection new.	expectedLines add: (100 @ 100) -&gt; (300 @ 100).	expectedLines add: (300 @ 100) -&gt; (200 @ 300).	expectedLines add: (200 @ 300) -&gt; (100 @ 100).	expectedLines := expectedLines asArray.		self assert: pathShape lines = expectedLines</body><body package="Roassal-Core">testOneTriangleAndOneLine	| expectedLines |	pathShape path: 'M 100,200 L 300,250 M 10,20 L30,25 L50,80 z'.	self assert: pathShape numberOfLines = 4.	expectedLines := OrderedCollection new.	expectedLines 		add: (100 @ 200) -&gt; (300 @ 250);		add: (10 @ 20) -&gt; (30 @ 25);		add: (30 @ 25) -&gt; (50 @ 80);		add: (50 @ 80) -&gt; (10 @ 20).	expectedLines := expectedLines asArray.		self assert: pathShape lines = expectedLines</body><body package="Roassal-Core">testParseFrancePath	pathShape path: ROSVGPath France.	self assert: pathShape lines size = 55.</body><body package="Roassal-Core">testRendering	| element canvas |	pathShape path: 'M100,100L300,100L200,300,z'.	element := pathShape element.	view add: element.		canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace =  #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#line '(100.0@100.0)' '(300.0@100.0)' 1 'Color gray') #(#line '(300.0@100.0)' '(200.0@300.0)' 1 'Color gray') #(#line '(200.0@300.0)' '(100.0@100.0)' 1 'Color gray'))</body><body package="Roassal-Core">testTriangle	pathShape path: self trianglePath.	self assert: pathShape numberOfLines = 3</body><body package="Roassal-Core">testTwoLines	pathShape path: 'M100,200L300,250M10,20L30,25'.	self assert: pathShape numberOfLines = 2</body><body package="Roassal-Core">testWithDelta	| expectedLines |	pathShape path: 'M 50 50 l 30 15 l 0 -15 M 150 150 l 30 15 l 0 -15'.	self assert: pathShape numberOfLines = 4.	expectedLines := OrderedCollection new.	expectedLines 		add: (50 @ 50) -&gt; (80 @ 65);		add: (80 @ 65) -&gt; (80 @ 50);		add: (150 @ 150) -&gt; (180 @ 165);		add: (180 @ 165) -&gt; (180 @ 150).	expectedLines := expectedLines asArray.		self assert: pathShape lines = expectedLines</body><body package="Roassal-Core">testWithDeltaAndMinusInTheMiddle	| pathShape2 |	pathShape path: 'M 50 50 l 30-15'.	pathShape2 := ROSVGPath new path: 'M 50 50 l 30 -15'.	self assert: pathShape lines = pathShape2 lines</body></methods><methods><class-id>Roassal.ROSVGPathTest</class-id> <category>configuration</category><body package="Roassal-Core">trianglePath	^ 'M 100 100 L 300 100 L 200 300 z'</body></methods><methods><class-id>Roassal.ROSVGPathTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	pathShape := ROSVGPath new.	view := ROView new.</body></methods><methods><class-id>Roassal.ROSVGPathTest</class-id> <category>extent</category><body package="Roassal-Core">testExtent	| element |	pathShape path: 'M0,0 L10,10'.	element := pathShape element.	self assert: element extent = (10 @ 10)</body><body package="Roassal-Core">testExtentAdjustedShape	| element |	pathShape path: 'M10,10 l20,10'.	pathShape setToAdjustElement.	element := pathShape element.	self assert: element position = (10 @ 10).	self assert: element extent = (20 @ 10).</body><body package="Roassal-Core">testExtentNonAdjustedShape	| element |	pathShape path: 'M10,10 l20,10'.		element := pathShape element.	self assert: element position = (0 @ 0).	self assert: element extent = (30 @ 20).		self assert: pathShape topLeftFromSVG = (10 @ 10).</body></methods><methods><class-id>Roassal.ROBOSSExporter</class-id> <category>import export</category><body package="Roassal-VWSpecific">exportView: view	|fileStream file bos |	file := 'view.boss' asFilename.	fileStream := file 	newReadWriteStream.        bos := (BinaryObjectStorage onNew: fileStream)                 expectCycles: true;                 yourself.         [bos nextPutAll: view] ensure: [bos close].</body><body package="Roassal-VWSpecific">exportView: view onFileNamed: filename	|fileStream file bos viewToExport|	viewToExport := self viewToExportFrom: view.		file := filename asFilename.	fileStream := file newReadWriteStream.        bos := (BinaryObjectStorage onNew: fileStream)                 expectCycles: false; 		sourceMode: #discard;                yourself.         [bos nextPut: view] ensure: [bos close].</body><body package="Roassal-VWSpecific">importView: filename	|fileStream file bos array |	file := filename asFilename.	fileStream := file newReadWriteStream.	bos := BinaryObjectStorage onOldNoScan: fileStream.         array := bos contents.	^array first</body><body package="Roassal-VWSpecific">interactiveExportView: view	|filename |	filename := Dialog requestFileName: 'Please enter a name for the file' default: 'view.boss'.	self exportView: view onFileNamed: filename.</body><body package="Roassal-VWSpecific">interactiveImportView	|fileStream file bos array dialog |	dialog := OpenFileDialog new.	(file := dialog select) ifNil: [^self].	fileStream := file readStream.	bos := BinaryObjectStorage onOldNoScan: fileStream.         array := bos contents.	^array first</body></methods><methods><class-id>Roassal.ROBOSSExporter</class-id> <category>util</category><body package="Roassal-VWSpecific">viewToExportFrom: aview	|res|	(aview isKindOf: Roassal.ROMondrianViewBuilder) 		ifTrue: [			|viewCopy res2|			viewCopy := aview copy.			res := viewCopy stack copy.			res	unsubscribeForEvent: Roassal.RORefreshNeeded.			res unsubscribeForEvent: Roassal.ROViewChanged.			res viewDo: [:v | 				v unsubscribeForEvent: Roassal.RORefreshNeeded.				v unsubscribeForEvent: Roassal.ROViewChanged.			]."			res2 := res firstView copy."			res2 := viewCopy raw copy.			res2 unsubscribeForEvent: Roassal.RORefreshNeeded;			unsubscribeForEvent: Roassal.ROViewChanged.		^res2		]		ifFalse:[			res := aview copy.			res unsubscribeForEvent: Roassal.RORefreshNeeded.			res unsubscribeForEvent: Roassal.ROViewChanged.			^res		].	^res</body></methods><methods><class-id>Roassal.ROShapeCache</class-id> <category>accessing</category><body package="Roassal-Core">extent: aPoint 	extent := aPoint</body><body package="Roassal-Core">extentIfAbsentPut: aBlockClosure 		^ extent ifNil: [ extent := aBlockClosure value ]</body><body package="Roassal-Core">height: aSmallInteger 		extent := extent x @ aSmallInteger</body><body package="Roassal-Core">with: aSmallInteger 		extent := aSmallInteger @ extent y</body></methods><methods><class-id>Roassal.RONopAnimation</class-id> <category>public</category><body package="Roassal-Core">on: aView	aView addAnimation: self</body></methods><methods><class-id>Roassal.ROEllipse</class-id> <category>rendering</category><body package="Roassal-Core">borderColor	^ borderColor </body><body package="Roassal-Core">borderColor: aBlockOrSymbolOrObject	borderColor := aBlockOrSymbolOrObject.</body><body package="Roassal-Core">borderOnly		self borderWidth: 1. 		self borderColor: Color black.		self color: Color transparent.		</body><body package="Roassal-Core">borderWidth	^ borderWidth</body><body package="Roassal-Core">borderWidth: anInteger	borderWidth := anInteger</body><body package="Roassal-Core">drawOn: aCanvas for: aROElement	aCanvas		fillOval: (self absoluteBoundsFor: aROElement)		color: (color roValue: aROElement) 		borderWidth: (borderWidth roValue: aROElement) 		borderColor: (borderColor roValue: aROElement)</body><body package="Roassal-Core">initialize	super initialize.	borderWidth := 0. 	borderColor := Color black.</body></methods><methods><class-id>Roassal.ROEllipse</class-id> <category>visitor</category><body package="Roassal-Core">accept: visitor	visitor visitCircle: self</body></methods><methods><class-id>Roassal.ROEllipse class</class-id> <category>defaults</category><body package="Roassal-Core">defaultColor 	^ Color veryLightGray</body></methods><methods><class-id>Roassal.ROEllipse class</class-id> <category>public</category><body package="Roassal-Core">color: aColor	^ self new color: aColor</body></methods><methods><class-id>Roassal.ROShapeTest</class-id> <category>compose shapes</category><body package="Roassal-Core">testCompose	| shape1 shape2 shape3 |	shape1 := ROBox new.	shape2 := ROLabel.	shape3 := shape1 compose: shape2.		self assert: shape3 == shape1.	self deny: shape3 next == shape2.	self assert: (shape1 next isKindOf: shape2).</body><body package="Roassal-Core">testCompose2	| shape1 shape2 shape3 |	shape1 := ROBox.	shape2 := ROLabel new.	shape3 := shape1 compose: shape2.		self deny: shape3 == shape1.	self assert: (shape3 isKindOf: shape1).	self assert: shape3 next == shape2.</body><body package="Roassal-Core">testCompose3	| shape1 shape2 shape3 |	shape1 := ROBox.	shape2 := ROLabel.	shape3 := shape1 compose: shape2.		self deny: shape3 == shape1.	self assert: (shape3 isKindOf: shape1).	self deny: shape3 next == shape2.	self assert: (shape3 next isKindOf: shape2).</body><body package="Roassal-Core">testCompose4	| shape1 shape2 shape3 |	shape1 := ROBox new.	shape2 := ROLabel new.	shape3 := shape1 compose: shape2.		self assert: shape3 == shape1.	self assert: shape3 next == shape2.</body><body package="Roassal-Core">testComposeAllElementShapes	| elementShapes composition element view excludedShapes |	view := ROView new.	excludedShapes := Array with: ROMiniMapDisplayer with: ROImage with: ROViewDisplayer.	elementShapes := ROShape withAllSubclasses reject: [: e |			(e isAbstract or: [ e isEdgeShape ]) or: [ excludedShapes anySatisfy: [ :ee | ee == e ] ] ].	composition := elementShapes first.	composition := elementShapes inject: composition into: [ :subComposition :shape |		subComposition + shape + shape new ].	composition := composition.	element := ROElement new.	element + composition.	view add: element.	view drawOn: ROTracingCanvas new.		self assert: ((element shapes collect: #class) includesAll: elementShapes).</body><body package="Roassal-Core">testPlus	| shape1 shape2 shape3 |	shape1 := ROBox new.	shape2 := ROLabel.	shape3 := shape1 + shape2.		self assert: shape3 == shape1.	self deny: shape3 next == shape2.	self assert: (shape1 next isKindOf: shape2).</body><body package="Roassal-Core">testPlus2	| shape1 shape2 shape3 |	shape1 := ROBox.	shape2 := ROLabel new.	shape3 := shape1 + shape2.		self deny: shape3 == shape1.	self assert: (shape3 isKindOf: shape1).	self assert: shape3 next == shape2.</body><body package="Roassal-Core">testPlus3	| shape1 shape2 shape3 |	shape1 := ROBox.	shape2 := ROLabel.	shape3 := shape1 + shape2.		self deny: shape3 == shape1.	self assert: (shape3 isKindOf: shape1).	self deny: shape3 next == shape2.	self assert: (shape3 next isKindOf: shape2).</body><body package="Roassal-Core">testPlus4	| shape1 shape2 shape3 |	shape1 := ROBox new.	shape2 := ROLabel new.	shape3 := shape1 + shape2.		self assert: shape3 == shape1.	self assert: shape3 next == shape2.</body></methods><methods><class-id>Roassal.ROShapeTest</class-id> <category>extent on chain</category><body package="Roassal-Core">testAddingShape	| el shape b |	el := ROElement on: 30.	shape := ROBox new.	shape height: (b := [ :e | e model + 1 ]).	self assert: (shape extentFor: el) = (5 @ 31).		el + shape.	self assert: (shape extentFor: el) = (5 @ 31).		self assert: shape height == b</body><body package="Roassal-Core">testAdjustingShapeChain	| shape1 shape2 el |	shape1 := ROBox blue.	shape2 := ROBox green.	el := ROElement new.	el + shape1 + shape2.		el extent: 50 @ 50.		self assert: el extent = (50 @ 50).	self assert: shape1 extent = (5 @ 5).		self assert: shape2 extent = (5 @ 5).</body><body package="Roassal-Core">testAdjustingShapeChain4	| shape1 shape2 el |	shape1 := ROBox blue.	shape2 := ROBox green.	el := ROElement new.	el + shape1 + shape2.		el extent: 50 @ 50.	shape1 extent: 70 @ 70.		self assert: el extent = (50 @ 50).	self assert: shape1 extent = (70 @ 70).		self assert: shape2 extent = (5 @ 5).</body><body package="Roassal-Core">testAdjustingShapeChain5	| shape1 shape2 el |	shape1 := ROBox blue.	shape2 := ROBox green.	shape1 extent: 70 @ 70.	el := ROElement new.	el + shape1 + shape2.		el extent: 50 @ 50.			self assert: el extent = (50 @ 50).	self assert: shape1 extent = (70 @ 70).		self assert: shape2 extent = (5 @ 5).</body></methods><methods><class-id>Roassal.ROShapeTest</class-id> <category>remove shape</category><body package="Roassal-Core">testRemoveShape	| b c removedElement |	b := ROBox new.	c := ROEllipse new.	b addLast: c.	self assert: b next == c.	removedElement := b removeShape: ROEllipse.		self assert: removedElement == c.	self assert: (b next isKindOf: RONullShape) </body><body package="Roassal-Core">testRemoveShape2	| b c b2 |	b := ROBox new.	c := ROEllipse new.	b addLast: c.	b2 := b removeShape: ROBox.		self assert: b2 == c.	self assert: (b2 next isKindOf: RONullShape)</body></methods><methods><class-id>Roassal.ROWindowResized</class-id> <category>accessing</category><body package="Roassal-Core">extent	^ extent</body><body package="Roassal-Core">extent: anObject	extent := anObject</body><body package="Roassal-Core">oldExtent	^ oldExtent</body><body package="Roassal-Core">oldExtent: anObject	oldExtent := anObject</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>initialize</category><body package="Roassal-Core">initialize	super initialize.	self path: ''.	borderWidth := 1. 	borderColor := Color gray.	setToAdjustElement := false.	zoom := 1.</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>accessing</category><body package="Roassal-Core">borderColor	^ borderColor</body><body package="Roassal-Core">borderColor: aBlockOrSymbolOrObject	borderColor := aBlockOrSymbolOrObject.</body><body package="Roassal-Core">borderWidth	^ borderWidth</body><body package="Roassal-Core">borderWidth: anInteger	borderWidth := anInteger.</body><body package="Roassal-Core">color	^ self borderColor</body><body package="Roassal-Core">color: aColor	^ self borderColor: aColor</body><body package="Roassal-Core">encompassingSVGBounds	^ self topLeftFromSVG corner: self bottomRightFromSVG</body><body package="Roassal-Core">lines	lines isNil ifFalse: [ ^ lines ].	lines := self processPath.	^ lines</body><body package="Roassal-Core">numberOfLines	^ self lines size</body><body package="Roassal-Core">path: aPathAsString	"Example of SVG path may be found on http://www.w3.org/TR/SVG/paths.html#PathData"	path := aPathAsString.	"	svg := ASVGRoot new.	svg addShape: (ASPath new d: aPathAsString)."</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>as yet unclassified</category><body package="Roassal-Core">bottomRightFromSVG	| bottomRight |	bottomRight := SmallInteger minVal @ SmallInteger minVal.	self lines do: [ :lineAsAssoc | bottomRight := bottomRight max: (lineAsAssoc key max: lineAsAssoc value) ].	^ bottomRight</body><body package="Roassal-Core">extentFor: element	 ^ (super extentFor: element) max: (self preferedExtentFor: element)</body><body package="Roassal-Core">preferedExtentFor: element	^ setToAdjustElement  		ifTrue: [ self bottomRightFromSVG - self topLeftFromSVG ]		ifFalse: [ self bottomRightFromSVG ]</body><body package="Roassal-Core">topLeftFromSVG	| topLeft |	topLeft := SmallInteger maxVal @ SmallInteger maxVal.	self lines do: [ :lineAsAssoc | topLeft := topLeft min: (lineAsAssoc key min: lineAsAssoc value) ].	^ topLeft</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| b w bc c  |	b := self absoluteBoundsFor: aROElement.	w := borderWidth roValue: aROElement.	bc := borderColor roValue: aROElement.	c := color roValue: aROElement.	"athensCanvas := aCanvas canvas.	athensCanvas pathTransform restoreAfter: [			athensCanvas pathTransform scaleBy: zoom.			svg renderOn: athensCanvas viewportExtent: b extent.		]"		self lines do: [ :assoc |		aCanvas 			line: assoc key + b topLeft 			to: assoc value + b topLeft 			width: w 			color: bc ]</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>instance creation</category><body package="Roassal-Core">adjustedElement	"Return an element with myself as shape. The element has the position of the top left position of the SVG graph"	| element topLeft |	element := super element.	topLeft := self encompassingSVGBounds topLeft.	element translateBy: topLeft. 		self offsetAllLinesBy: topLeft.	^ element</body><body package="Roassal-Core">adjustedElement: anElement	"Return an element with myself as shape. The element has the position of the top left position of the SVG graph"	| topLeft |	topLeft := self encompassingSVGBounds topLeft.	anElement translateBy: topLeft. 		self offsetAllLinesBy: topLeft.	^ anElement</body><body package="Roassal-Core">element	"Return an element with myself as shape. The element has the position of the top left position of the SVG graph"	| element topLeft |	setToAdjustElement ifFalse: [ ^ super element ].		element := super element.	topLeft := self encompassingSVGBounds topLeft.	element translateBy: topLeft. 		self offsetAllLinesBy: topLeft.	^ element</body><body package="Roassal-Core">elementOn: anObject	"Return an element with myself as shape. The element has the position of the top left position of the SVG graph"	| element topLeft |	setToAdjustElement ifFalse: [ ^ super elementOn: anObject ].		element := super elementOn: anObject.	topLeft := self encompassingSVGBounds topLeft.	element translateBy: topLeft. 		self offsetAllLinesBy: topLeft.	^ element</body><body package="Roassal-Core">setToAdjustElement	setToAdjustElement := true</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>utility</category><body package="Roassal-Core">offsetAllLinesBy: aPoint	lines := self lines collect: [ :assoc | (assoc key - aPoint) -&gt; (assoc value - aPoint) ]</body></methods><methods><class-id>Roassal.ROSVGPath</class-id> <category>processing</category><body package="Roassal-Core">processPath	"This method parse the path"	"	A complete description may be found on http://www.w3.org/TR/SVG/paths.html#PathData	So far, we only consider the following SVG tokens:		M = Move to - absolute	m = Move to - relative		Z or z = Close path		L = Line to - absolute	l = Line to - relative		The description of SVG path, says that M and m may accept more than one coordinates. In practices, this is rarely the case. 		"	| p initialPoint answer tokens stream token t pathWithSpaceBeforeMinus |	p := 0 @ 0.	initialPoint := nil.	answer := OrderedCollection new.		pathWithSpaceBeforeMinus := path copyReplaceAll: '-' with: ' -' asTokens: false.	tokens := pathWithSpaceBeforeMinus findTokens: 'MmLlZz, ' keep: 'MmLlZz'.	stream := ReadStream on: tokens.	[ stream atEnd ] whileFalse: [ 		token := stream next.		token = 'M' ifTrue: [ p := (Float readFrom: stream next) @ (Float readFrom: stream next). initialPoint := nil  ].		token = 'm' ifTrue: [ p := p + ((Float readFrom: stream next) @ (Float readFrom: stream next)). initialPoint := nil  ].		(token = 'Z' or: [ token = 'z' ]) ifTrue: [ answer add: p -&gt; initialPoint. initialPoint := nil ].		token = 'L' ifTrue: [ t := (Float readFrom: stream next) @ (Float readFrom: stream next). answer add: p -&gt; t. p := t ].		token = 'l' ifTrue: [ t := p + ((Float readFrom: stream next) @ (Float readFrom: stream next)). answer add: p -&gt; t. p := t ].				initialPoint ifNil: [ initialPoint := p ]. 	].	^ answer asArray</body></methods><methods><class-id>Roassal.ROSVGPath class</class-id> <category>countries</category><body package="Roassal-Core">Afghanistan	^ 'M630.069,130.876l2.832,1.030l2.059,-0.257l0.517,-1.288l2.058,-0.386l1.546,-0.772l0.515,-2.188l2.317,-0.516l0.387,-1.030l1.285,0.774l0.902,0.128l1.416,0l2.059,0.515l0.773,0.385l2.059,-0.900l0.901,0.515l0.773,-1.287l1.674,0.128l0.386,-0.387l0.256,-1.157l1.160,-0.903l1.543,0.645l-0.384,0.772l0.901,0.129l-0.259,2.317l1.030,0.900l0.904,-0.643l1.285,-0.257l1.674,-1.159l1.802,0.129l2.832,0l0.387,0.773l-1.545,0.385l-1.416,0.516l-3.090,0.256l-2.833,0.517l-1.545,1.287l0.645,1.029l0.257,1.416l-1.287,1.159l0.129,1.029l-0.773,0.902l-2.575,0l1.030,1.673l-1.673,0.772l-1.158,1.545l0.129,1.674l-1.031,0.772l-1.029,-0.257l-2.061,0.386l-0.257,0.644l-2.058,0l-1.417,1.544l-0.129,2.317l-3.476,1.159l-1.931,-0.257l-0.514,0.643l-1.674,-0.386l-2.704,0.386l-4.504,-1.415l2.445,-2.447l-0.129,-1.673l-2.060,-0.515l-0.256,-1.674l-0.902,-2.188l1.158,-1.416l-1.158,-0.386l0.773,-1.930l-1.029,3.477z'</body><body package="Roassal-Core">Albania	^ 'M520.651,114.27l-0.257,0.900l0.385,1.160l1.029,0.643l0,0.644l-0.901,0.386l-0.128,0.901l-1.288,1.287l-0.386,-0.128l-0.127,-0.644l-1.417,-0.900l-0.259,-1.288l0.259,-1.803l0.256,-0.901l-0.384,-0.386l-0.258,-0.901l1.287,-1.288l0.129,0.516l0.771,-0.258l0.516,0.773l0.643,0.257l-0.130,-1.030z'</body><body package="Roassal-Core">Algeria	^ 'M497.608,163.703l-9.269,5.150l-7.852,5.276l-3.734,1.288l-2.961,0.257l-0.128,-1.801l-1.159,-0.387l-1.672,-0.772l-0.645,-1.288l-9.139,-5.792l-9.140,-5.922l-10.040,-6.566l0,-0.514l0,-3.347l4.377,-1.931l2.703,-0.514l2.188,-0.644l1.030,-1.417l3.090,-1.029l0.128,-2.061l1.545,-0.128l1.287,-1.030l3.476,-0.515l0.515,-1.030l-0.772,-0.514l-0.902,-2.832l-0.128,-1.674l-1.030,-1.674l2.574,-1.545l2.962,-0.515l1.673,-1.029l2.574,-0.902l4.633,-0.385l4.377,-0.258l1.416,0.385l2.575,-1.028l2.833,0l1.029,0.643l1.930,-0.258l-0.642,1.416l0.514,2.575l-0.642,2.189l-1.674,1.545l0.257,2.059l2.187,1.545l0,0.643l1.674,1.159l1.159,4.763l0.903,2.446l0.126,1.158l-0.513,2.318l0.256,1.158l-0.387,1.546l0.259,1.673l-1.030,1.030l1.546,2.059l0.127,1.159l0.902,1.415l1.286,-0.385l2.060,1.158l-1.288,-1.674z'</body><body package="Roassal-Core">Angola	^ 'M497.994,242.615l-0.643,-2.060l1.030,-1.159l0.900,-0.515l0.902,1.031l-0.902,0.516l-0.514,0.642l0,1.159l0.773,-0.386zM496.836,273.64l-0.257,-1.804l0.385,-2.317l0.900,-2.445l0.130,-1.158l0.901,-2.447l0.643,-1.157l1.545,-1.674l0.902,-1.288l0.257,-1.931l-0.129,-1.544l-0.771,-0.902l-0.775,-1.673l-0.642,-1.674l0.129,-0.515l0.772,-1.029l-0.772,-2.704l-0.516,-1.802l-1.414,-1.674l0.257,-0.515l1.157,-0.387l0.774,0.131l0.900,-0.389l7.982,0.131l0.643,1.930l0.771,1.674l0.645,0.773l1.031,1.415l1.801,-0.128l0.900,-0.387l1.418,0.387l0.514,-0.772l0.644,-1.545l1.673,-0.128l0.128,-0.388l1.417,0l-0.258,0.902l3.219,0l0.128,1.672l0.514,1.031l-0.385,1.673l0.129,1.674l0.900,1.030l-0.129,3.091l0.645,-0.131l1.158,0l1.674,-0.385l1.287,0.128l0.257,0.902l-0.257,1.286l0.387,1.287l-0.387,0.903l0.257,1.028l-5.536,-0.127l-0.128,8.625l1.804,2.187l1.673,1.674l-4.892,1.158l-6.566,-0.385l-1.801,-1.287l-10.944,0.128l-0.384,0.128l-1.674,-1.159l-1.672,-0.128l-1.674,0.515l1.288,-0.516z'</body><body package="Roassal-Core">Argentina	^ 'M319.448,295.781l1.288,1.544l0,2.189l-2.319,1.416l-1.801,1.158l-2.961,2.576l-3.605,3.732l-0.772,2.189l-0.644,2.702l0,2.705l-0.643,0.643l-0.129,1.674l-0.257,1.417l3.475,2.317l-0.387,1.802l1.675,1.287l-0.129,1.288l-2.574,3.475l-3.991,1.417l-5.406,0.513l-2.961,-0.257l0.514,1.674l-0.514,1.931l0.514,1.415l-1.673,0.902l-2.703,0.385l-2.575,-1.028l-1.029,0.770l0.386,2.705l1.801,0.772l1.417,-0.901l0.901,1.416l-2.575,0.902l-2.188,1.673l-0.386,2.705l-0.643,1.414l-2.448,0l-2.188,1.416l-0.772,1.932l2.704,2.059l2.574,0.516l-0.901,2.445l-3.218,1.545l-1.803,3.090l-2.445,1.030l-1.031,1.287l0.774,2.832l1.802,1.543l-1.030,-0.127l-2.574,-0.387l-6.436,-0.385l-1.160,-1.545l0,-2.060l-1.801,0.129l-0.902,-0.902l-0.258,-2.831l2.060,-1.288l0.901,-1.674l-0.386,-1.288l1.546,-2.316l0.900,-3.605l-0.257,-1.545l1.158,-0.515l-0.258,-1.030l-1.287,-0.514l0.901,-1.158l-1.157,-1.030l-0.645,-3.089l1.030,-0.516l-0.385,-3.347l0.513,-2.703l0.773,-2.447l1.673,-1.030l-0.900,-2.574l0,-2.446l2.060,-1.802l0,-2.189l1.415,-2.702l0.129,-2.447l-0.772,-0.514l-1.287,-4.636l1.672,-2.831l-0.257,-2.575l1.030,-2.446l1.802,-2.574l1.802,-1.673l-0.772,-1.031l0.515,-0.900l0,-4.378l2.960,-1.415l0.902,-2.704l-0.386,-0.772l2.316,-2.447l3.477,0.644l1.544,2.060l1.030,-2.187l3.089,0.127l0.515,0.515l4.892,4.377l2.188,0.387l3.348,2.059l2.703,1.030l0.386,1.157l-2.574,4.121l2.702,0.772l2.961,0.387l2.189,-0.387l2.446,-2.059l0.386,-2.445l-1.416,0.516zM282.761,371.99l3.475,1.674l3.733,0.642l-1.159,1.417l-2.574,0.130l-1.416,-1.031l-1.546,0l-2.960,0l0.129,-5.923l0.901,1.160l-1.417,-1.931z'</body><body package="Roassal-Core">Armenia	^ 'M582.697,116.33l3.605,-0.515l0.642,0.772l1.032,0.386l-0.516,0.773l1.416,0.900l-0.772,0.902l1.159,0.643l1.158,0.516l0.129,1.801l-1.029,0.129l-1.032,-1.544l0,-0.515l-1.287,0.129l-0.771,-0.772l-0.516,0l-1.029,-0.773l-2.059,-0.643l0.256,-1.288l0.386,0.901z'</body><body package="Roassal-Core">Australia	^ 'M863.067,336.975l1.674,0.129l0.129,3.218l-0.900,0.901l-0.258,2.188l-0.900,-0.772l-1.934,1.931l-0.514,-0.129l-1.672,-0.129l-1.675,-2.316l-0.385,-1.803l-1.545,-2.318l0.127,-1.287l1.674,0.259l2.576,0.901l1.545,-0.258l-2.058,0.515zM805.011,313.803l-2.832,1.288l-2.317,0.643l-0.513,1.416l-1.034,1.159l-2.185,0l-1.803,0.256l-2.318,-0.513l-1.930,0.386l-1.930,0.127l-1.546,1.417l-0.772,-0.128l-1.416,0.772l-1.287,0.772l-1.932,-0.128l-1.800,0l-2.834,-1.674l-1.416,-0.514l0,-1.545l1.289,-0.387l0.515,-0.515l-0.131,-1.029l0.387,-1.932l-0.256,-1.545l-1.547,-2.702l-0.386,-1.546l0.129,-1.545l-1.030,-1.801l-0.127,-0.773l-1.160,-1.030l-0.387,-2.058l-1.545,-2.189l-0.384,-1.160l1.287,1.160l-1.029,-2.447l1.416,0.774l0.771,1.030l0,-1.417l-1.416,-2.061l-0.258,-0.900l-0.644,-0.773l0.386,-1.545l0.516,-0.644l0.387,-1.415l-0.258,-1.546l1.029,-1.930l0.258,2.060l1.158,-1.932l2.188,-0.900l1.287,-1.160l2.060,-0.901l1.159,-0.257l0.773,0.387l2.188,-1.029l1.544,-0.258l0.516,-0.644l0.643,-0.257l1.545,0.128l2.832,-0.901l1.418,-1.160l0.640,-1.414l1.676,-1.416l0.129,-1.030l0,-1.417l1.930,-2.318l1.158,2.318l1.031,-0.514l-0.902,-1.287l0.902,-1.287l1.156,0.516l0.260,-2.061l1.545,-1.289l0.643,-1.028l1.289,-0.516l0.127,-0.773l1.158,0.386l0,-0.643l1.158,-0.387l1.416,-0.385l1.930,1.157l1.547,1.675l1.671,0l1.676,0.258l-0.515,-1.545l1.287,-2.060l1.158,-0.772l-0.385,-0.643l1.158,-1.545l1.672,-1.031l1.289,0.385l2.317,-0.514l-0.129,-1.416l-1.932,-0.900l1.418,-0.388l1.801,0.775l1.416,1.029l2.316,0.772l0.774,-0.387l1.674,0.902l1.544,-0.773l1.030,0.258l0.644,-0.516l1.158,1.289l-0.644,1.416l-1.029,1.157l-0.903,0l0.260,1.160l-0.773,1.286l-0.901,1.289l0.127,0.772l2.190,1.545l2.058,0.900l1.418,0.902l1.930,1.544l0.771,0l1.418,0.773l0.387,0.772l2.574,0.900l1.801,-0.900l0.516,-1.416l0.513,-1.289l0.387,-1.415l0.772,-2.188l-0.385,-1.286l0.127,-0.775l-0.256,-1.542l0.387,-2.062l0.513,-0.514l-0.386,-0.901l0.644,-1.417l0.516,-1.414l0,-0.772l1.029,-1.032l0.772,1.288l0.130,1.674l0.641,0.385l0.131,1.029l1.029,1.417l0.258,1.544l-0.129,1.031l0.902,2.061l1.801,-1.031l0.903,1.158l1.285,1.031l-0.256,1.158l0.515,2.317l0.387,1.416l0.641,0.257l0.773,2.319l-0.256,1.414l0.901,1.805l2.961,1.414l1.800,1.288l1.803,1.159l-0.258,0.642l1.545,1.674l1.030,2.961l1.031,-0.642l1.158,1.286l0.643,-0.516l0.386,2.961l1.932,1.544l1.287,1.030l2.061,2.189l0.771,2.189l0.129,1.545l-0.260,1.674l1.289,2.316l-0.129,2.317l-0.515,1.287l-0.645,2.447l0,1.545l-0.513,1.930l-1.159,2.446l-2.058,1.288l-0.903,2.060l-0.900,1.415l-0.902,2.317l-1.030,1.288l-0.642,2.060l-0.387,1.802l0.129,0.900l-1.545,0.902l-2.961,0.128l-2.445,1.031l-1.287,1.030l-1.674,1.157l-2.188,-1.157l-1.675,-0.515l0.517,-1.287l-1.547,0.516l-2.316,1.929l-2.316,-0.773l-1.547,-0.385l-1.545,-0.258l-2.572,-0.772l-1.803,-1.674l-0.516,-2.060l-0.644,-1.288l-1.287,-1.157l-2.575,-0.258l0.903,-1.287l-0.645,-2.060l-1.287,1.931l-2.445,0.387l1.416,-1.416l0.386,-1.545l1.030,-1.288l-0.258,-2.059l-2.188,2.316l-1.673,0.902l-1.032,2.189l-2.058,-1.159l0.129,-1.416l-1.674,-1.932l-1.545,-1.029l0.516,-0.643l-3.348,-1.675l-1.932,0l-2.574,-1.286l-4.893,0.256l-3.474,0.902l-3.090,0.902l2.574,0.130z'</body><body package="Roassal-Core">Austria	^ 'M510.996,97.278l-0.257,1.158l-1.545,0l0.643,0.643l-0.900,1.674l-0.515,0.515l-2.446,0l-1.289,0.644l-2.315,-0.258l-3.734,-0.644l-0.644,-0.900l-2.703,0.386l-0.258,0.514l-1.672,-0.386l-1.416,0l-1.160,-0.514l0.385,-0.644l-0.128,-0.515l0.903,-0.128l1.285,0.772l0.387,-0.772l2.446,0.128l1.931,-0.515l1.287,0.128l0.773,0.515l0.258,-0.386l-0.387,-1.802l1.030,-0.386l0.901,-1.158l2.058,0.772l1.417,-1.030l1.030,-0.258l2.061,0.901l1.286,-0.129l1.158,0.516l-0.127,0.256l-0.257,-0.903z'</body><body package="Roassal-Core">Azerbaijan	^ 'M590.292,114.27l0.643,0l1.931,1.673l1.158,0.129l0.516,-0.644l1.545,-1.030l1.416,1.417l1.417,1.802l1.286,0.129l0.774,0.773l-2.190,0.257l-0.514,2.059l-0.386,0.901l-1.031,0.644l0,1.416l-0.643,0.129l-1.674,-1.417l0.902,-1.415l-0.773,-0.773l-1.030,0.258l-3.089,1.930l-0.129,-1.801l-1.158,-0.516l-1.159,-0.643l0.772,-0.902l-1.416,-0.900l0.516,-0.773l-1.032,-0.386l-0.642,-0.772l0.129,0l0.644,-0.387l1.930,0.772l1.545,0.130l0.258,-0.258l-1.287,-1.545l-0.771,0.257zM589.521,122.637l-1.804,-0.386l-1.415,-1.288l-0.387,-1.028l0.516,0l0.771,0.772l1.287,-0.129l0,0.515l-1.032,-1.544z'</body><body package="Roassal-Core">Bangladesh	^ 'M714.901,167.564l-0.129,1.932l-0.900,-0.387l0.127,2.189l-0.771,-1.417l-0.129,-1.415l-0.514,-1.287l-1.031,-1.545l-2.575,-0.129l0.258,1.159l-0.771,1.544l-1.158,-0.644l-0.389,0.516l-0.772,-0.258l-1.029,-0.258l-0.515,-2.188l-0.901,-2.059l0.514,-1.674l-1.672,-0.643l0.514,-1.031l1.802,-1.030l-2.060,-1.415l1.031,-1.803l2.061,1.159l1.285,0.128l0.260,1.931l2.574,0.386l2.574,-0.128l1.545,0.515l-1.289,2.317l-1.158,0.129l-0.901,1.545l1.545,1.416l0.387,-1.802l0.771,0l-1.416,-4.247z'</body><body package="Roassal-Core">Belarus	^ 'M528.503,81.701l2.574,0l2.961,-0.901l0.643,-1.545l2.189,-0.901l-0.258,-1.159l1.674,-0.514l2.831,-1.031l2.833,0.644l0.387,0.772l1.416,-0.385l2.703,0.643l0.258,1.287l-0.645,0.644l1.672,1.802l1.160,0.515l-0.129,0.515l1.803,0.387l0.772,0.772l-1.030,0.643l-2.187,-0.128l-0.516,0.257l0.644,0.901l0.643,1.674l-2.318,0.129l-0.900,0.643l-0.128,1.416l-1.031,-0.258l-2.446,0.129l-0.772,-0.643l-1.030,0.386l-0.900,-0.386l-2.189,0l-2.959,-0.644l-2.706,-0.258l-2.187,0.129l-1.417,0.644l-1.286,0.129l-0.129,-1.159l-0.772,-1.287l1.672,-0.516l0,-1.029l-0.771,-1.029l0.129,1.288z'</body><body package="Roassal-Core">Belgium	^ 'M474.179,88.652l1.932,0.258l2.574,-0.643l1.673,1.158l1.416,0.644l-0.258,1.930l-0.644,0l-0.385,1.544l-2.318,-1.286l-1.416,0.257l-1.801,-1.287l-1.288,-1.029l-1.287,0l-0.385,-1.031l-2.187,0.515z'</body><body package="Roassal-Core">Belize	^ 'M225.09,179.022l0,-0.387l0.257,-0.129l0.515,0.258l1.030,-1.544l0.515,-0.130l0,0.387l0.515,0.128l-0.129,0.645l-0.386,1.159l0.258,0.513l-0.258,0.902l0.128,0.258l-0.256,1.416l-0.644,0.643l-0.387,0.129l-0.643,0.901l-0.772,0l0.257,-3.089l0,2.060z'</body><body package="Roassal-Core">Benin	^ 'M472.505,210.174l-2.188,0.258l-0.773,-1.803l0.131,-6.307l-0.516,-0.515l-0.129,-1.287l-0.900,-0.902l-0.775,-0.900l0.259,-1.417l1.030,-0.256l0.515,-1.159l1.287,-0.257l0.645,-0.774l0.901,-0.773l0.901,-0.127l2.059,1.674l-0.129,0.771l0.643,1.673l-0.514,1.031l0.258,0.773l-1.288,1.672l-0.901,0.773l-0.386,1.674l0,1.802l0.130,-4.376z'</body><body package="Roassal-Core">Bhutan	^ 'M712.198,152.117l1.158,0.901l-0.257,1.674l-2.188,0l-2.189,-0.129l-1.672,0.386l-2.447,-1.029l-0.129,-0.516l1.804,-1.931l1.414,-0.773l1.930,0.645l1.416,0.128l-1.160,-0.644z'</body><body package="Roassal-Core">Bolivia	^ 'M295.89,286.383l-3.089,-0.127l-1.030,2.187l-1.544,-2.060l-3.477,-0.644l-2.316,2.447l-1.932,0.386l-1.028,-3.733l-1.417,-2.960l0.773,-2.576l-1.417,-1.157l-0.387,-1.933l-1.286,-1.932l1.673,-2.830l-1.158,-2.318l0.643,-0.901l-0.515,-1.029l1.159,-1.287l0,-2.317l0.128,-1.931l0.644,-0.901l-2.445,-4.248l2.060,0.127l1.415,0l0.515,-0.771l2.446,-1.160l1.416,-1.029l3.476,-0.386l-0.258,1.930l0.387,1.159l-0.258,1.802l2.960,2.317l2.962,0.515l1.030,1.030l1.801,0.515l1.159,0.772l1.673,0l1.545,0.773l0.128,1.544l0.516,0.773l0.128,1.158l-0.772,0l1.031,3.219l5.148,0.131l-0.386,1.542l0.258,1.030l1.416,0.771l0.643,1.676l-0.386,2.061l-0.772,1.158l0.257,1.544l-0.901,0.643l0,-0.902l-2.575,-1.285l-2.446,-0.130l-4.634,0.772l-1.416,2.447l0,1.414l-1.030,3.219l0.515,0.515z'</body><body package="Roassal-Core">BosniaandHerzegovina	^ 'M516.403,106.159l1.030,0l-0.645,1.159l1.289,1.030l-0.389,1.287l-1.158,0.387l-0.900,0.515l-0.387,1.545l-2.445,-1.030l-1.031,-1.159l-0.901,-0.514l-1.286,-1.031l-0.643,-0.901l-1.290,-1.158l0.516,-1.159l1.031,0.643l0.643,-0.643l1.159,0l2.316,0.386l1.931,0l-1.160,-0.643z'</body><body package="Roassal-Core">Botswana	^ 'M534.296,276.857l0.516,0.516l0.900,1.544l3.089,2.962l1.158,0.256l0,1.030l0.772,1.674l2.061,0.385l1.673,1.290l-3.734,1.929l-2.445,2.059l-0.901,1.804l-0.773,1.030l-1.545,0.128l-0.386,1.287l-0.258,0.901l-1.801,0.645l-2.188,-0.129l-1.288,-0.773l-1.159,-0.387l-1.287,0.644l-0.642,1.286l-1.287,0.775l-1.290,1.287l-1.929,0.256l-0.645,-0.901l0.258,-1.673l-1.544,-2.575l-0.772,-0.386l0,-7.852l2.574,-0.130l0.129,-9.654l2.060,0l4.119,-1.030l1.029,1.158l1.674,-1.028l0.901,0l1.416,-0.645l0.515,0.259l-1.030,-2.058z'</body><body package="Roassal-Core">Brazil	^ 'M310.05,308.396l3.605,-3.732l2.961,-2.576l1.801,-1.158l2.319,-1.416l0,-2.189l-1.288,-1.544l-1.416,0.516l0.515,-1.546l0.386,-1.545l0,-1.544l-0.901,-0.516l-1.031,0.516l-1.028,-0.129l-0.259,-1.031l-0.256,-2.443l-0.516,-0.903l-1.801,-0.642l-1.160,0.513l-2.831,-0.513l0.128,-3.736l-0.772,-1.415l0.901,-0.643l-0.257,-1.544l0.772,-1.158l0.386,-2.061l-0.643,-1.676l-1.416,-0.771l-0.258,-1.030l0.386,-1.542l-5.148,-0.131l-1.031,-3.219l0.772,0l-0.128,-1.158l-0.516,-0.773l-0.128,-1.544l-1.545,-0.773l-1.673,0l-1.159,-0.772l-1.801,-0.515l-1.030,-1.030l-2.962,-0.515l-2.960,-2.317l0.258,-1.802l-0.387,-1.159l0.258,-1.930l-3.476,0.386l-1.416,1.029l-2.446,1.160l-0.515,0.771l-1.415,0l-2.060,-0.127l-1.416,0.384l-1.287,-0.257l0.256,-4.119l-2.317,1.545l-2.317,0l-1.030,-1.416l-1.801,-0.129l0.644,-1.158l-1.546,-1.674l-1.158,-2.445l0.772,-0.516l0,-1.158l1.545,-0.773l-0.257,-1.416l0.772,-0.901l0.129,-1.288l3.089,-1.802l2.188,-0.515l0.386,-0.514l2.446,0.129l1.159,-7.338l0.129,-1.159l-0.515,-1.544l-1.159,-1.030l0,-1.931l1.545,-0.387l0.515,0.258l0.129,-1.029l-1.545,-0.258l-0.129,-1.674l5.278,0l0.900,-0.902l0.773,0.902l0.515,1.545l0.516,-0.387l1.544,1.417l2.060,-0.129l0.515,-0.772l1.930,-0.644l1.159,-0.515l0.257,-1.159l1.931,-0.772l-0.128,-0.514l-2.188,-0.259l-0.387,-1.672l0,-1.804l-1.158,-0.643l0.514,-0.257l2.060,0.257l2.059,0.773l0.774,-0.643l1.930,-0.515l3.090,-0.902l0.900,-1.030l-0.257,-0.772l1.287,-0.129l0.644,0.643l-0.257,1.159l0.900,0.386l0.644,1.288l-0.772,0.902l-0.515,2.316l0.773,1.287l0.128,1.287l1.674,1.288l1.287,0.128l0.386,-0.515l0.772,-0.128l1.288,-0.515l0.901,-0.644l1.416,0.259l0.643,-0.130l1.546,0.130l0.257,-0.517l-0.516,-0.514l0.259,-0.773l1.158,0.259l1.159,-0.259l1.545,0.515l1.287,0.516l0.772,-0.644l0.643,0.128l0.387,0.772l1.287,-0.256l1.030,-1.031l0.772,-1.930l1.545,-2.446l1.029,-0.128l0.645,1.415l1.544,4.763l1.416,0.386l0,1.931l-1.931,2.189l0.773,0.772l4.763,0.387l0.128,2.702l2.059,-1.674l3.348,0.902l4.505,1.674l1.288,1.545l-0.387,1.545l3.090,-0.901l5.278,1.415l3.991,0l3.990,2.189l3.476,2.961l2.059,0.772l2.318,0.128l0.900,0.902l0.901,3.475l0.516,1.545l-1.159,4.505l-1.287,1.675l-3.862,3.863l-1.674,2.959l-2.059,2.317l-0.643,0.129l-0.773,1.931l0.257,5.020l-0.773,4.250l-0.256,1.672l-0.902,1.158l-0.515,3.605l-2.703,3.475l-0.387,2.833l-2.187,1.158l-0.644,1.546l-2.960,0l-4.249,1.028l-1.931,1.288l-2.960,0.773l-3.219,2.060l-2.188,2.703l-0.386,2.060l0.386,1.416l-0.515,2.703l-0.644,1.416l-1.803,1.416l-2.960,4.764l-2.446,2.189l-1.802,1.157l-1.287,2.574l-1.673,1.545l-0.772,-1.545l1.158,-1.286l-1.545,-1.804l-2.189,-1.414l-2.702,-1.805l-1.030,0.130l-2.704,-2.059l1.674,-0.257z'</body><body package="Roassal-Core">BruneiDarussalam	^ 'M772.829,214.809l1.160,-1.030l2.315,-1.416l-0.127,1.287l-0.260,1.674l-1.285,0l-0.516,0.902l1.287,1.417z'</body><body package="Roassal-Core">Bulgaria	^ 'M526.314,107.833l0.773,1.030l1.031,-0.129l2.059,0.386l3.990,0.130l1.287,-0.644l3.219,-0.644l1.930,1.030l1.544,0.258l-1.416,1.158l-0.900,1.931l0.772,1.416l-2.317,-0.257l-2.705,0.772l0,1.417l-2.445,0.256l-1.930,-1.029l-2.187,0.773l-1.932,-0.130l-0.258,-1.674l-1.287,-0.900l0.385,-0.387l-0.256,-0.386l0.515,-0.772l1.030,-0.901l-1.415,-1.158l-0.259,-0.902l-0.772,0.644z'</body><body package="Roassal-Core">BurkinaFaso	^ 'M457.573,201.035l-1.802,-0.773l-1.287,0.129l-0.902,0.644l-1.286,-0.515l-0.387,-0.902l-1.287,-0.643l-0.128,-1.545l0.771,-1.159l-0.128,-0.900l2.189,-2.189l0.385,-1.802l0.773,-0.644l1.287,0.257l1.159,-0.514l0.257,-0.645l2.189,-1.285l0.514,-0.774l2.446,-1.158l1.545,-0.387l0.644,0.516l1.673,0l-0.129,1.287l0.258,1.287l1.545,1.673l0.128,1.417l3.091,0.515l0,1.930l-0.645,0.774l-1.287,0.257l-0.515,1.159l-1.030,0.256l-2.317,0l-1.288,-0.256l-0.770,0.514l-1.289,-0.258l-4.634,0.129l-0.129,1.545l-0.386,-2.060z'</body><body package="Roassal-Core">Burundi	^ 'M544.208,239.14l-0.130,-3.347l-0.643,-1.159l1.673,0.258l0.773,-1.545l1.415,0.128l0.131,1.030l0.642,0.643l0,0.903l-0.642,0.513l-1.030,1.416l-1.031,1.032l1.158,-0.128z'</body><body package="Roassal-Core">Cambodia	^ 'M743.995,198.331l-1.031,-1.415l-1.416,-2.834l-0.643,-3.217l1.801,-2.189l3.475,-0.514l2.447,0.387l2.316,1.029l1.160,-1.803l2.446,0.901l0.644,1.803l-0.386,3.218l-4.506,2.059l1.160,1.674l-2.834,0.258l-2.316,1.030l2.317,0.387z'</body><body package="Roassal-Core">Cameroon	^ 'M500.439,220.859l-0.256,-0.129l-1.674,0.387l-1.673,-0.387l-1.288,0.129l-4.378,0l0.387,-2.188l-1.029,-1.802l-1.158,-0.387l-0.516,-1.287l-0.772,-0.386l0,-0.643l0.772,-1.932l1.289,-2.575l0.771,-0.128l1.544,-1.545l1.029,0l1.546,1.030l1.803,-0.901l0.257,-1.029l0.644,-1.159l0.387,-1.288l1.414,-1.159l0.645,-1.931l0.513,-0.514l0.387,-1.417l0.773,-1.673l2.188,-2.189l0.129,-0.901l0.387,-0.386l-1.160,-1.158l0.128,-0.773l0.774,-0.257l1.029,1.801l0.258,1.804l-0.128,1.802l1.415,2.446l-1.415,-0.129l-0.774,0.257l-1.287,-0.257l-0.514,1.287l1.545,1.546l1.158,0.385l0.387,1.160l0.900,1.930l-0.515,0.644l-1.287,2.702l-0.643,0.515l-0.258,2.060l0.258,1.160l-0.258,0.772l1.288,1.416l0.257,1.029l1.031,1.416l1.157,0.773l0.129,1.287l0.387,0.772l-0.259,1.416l-2.187,-0.643l-2.062,-0.644l3.475,0.129z'</body><body package="Roassal-Core">Canada	^ 'M212.989,24.93l-1.416,1.159l-3.862,-0.257l-3.347,-0.644l1.417,-1.288l3.990,-0.772l2.317,1.030l-0.901,-0.772zM212.474,18.107l-1.287,0.130l-5.020,-0.130l-0.772,-0.772l5.535,0l1.802,0.515l0.258,-0.257zM204.622,14.761l3.218,0.901l-0.772,1.030l-3.991,0.515l-2.188,-0.644l-1.159,-0.901l-0.257,-1.159l3.604,0.129l-1.545,-0.129zM227.793,26.604l-4.377,-0.387l-7.208,-0.900l-0.901,-1.417l-0.258,-1.287l-2.703,-1.287l-5.664,-0.257l-3.090,-0.901l1.030,-1.031l5.535,0.130l2.962,0.901l5.406,0l2.317,0.901l-0.643,1.029l3.089,0.515l1.673,0.643l3.605,0.130l3.990,0.257l4.248,-0.643l5.535,-0.129l4.377,0.129l2.832,1.029l0.644,1.159l-1.674,0.644l-3.991,0.644l-3.475,-0.387l-7.724,0.387l5.535,-0.128zM165.489,16.434l3.862,0.386l-0.902,0.901l-5.020,0.772l-3.991,-0.900l2.188,-0.901l-3.863,0.258zM166.261,14.632l3.604,0.644l-3.347,0.515l-4.505,0l0.128,-0.387l2.704,-0.901l-1.416,-0.129zM205.137,40.636l2.703,1.158l-1.673,0.902l-3.605,-1.031l-2.188,0.516l-3.090,-0.387l1.803,-1.673l1.931,-1.159l2.059,0.643l-2.060,-1.031zM315.458,88.781l-1.417,1.673l-1.802,2.317l1.802,-0.900l1.802,0.643l-1.030,0.902l2.447,0.772l1.287,-0.772l2.574,0.901l-0.772,1.930l1.931,-0.386l0.257,1.417l0.901,1.673l-1.158,2.317l-1.288,0.129l-1.673,-0.515l0.515,-2.189l-0.772,-0.386l-3.089,2.317l-1.545,0l1.801,-1.287l-2.574,-0.644l-2.832,0.130l-5.278,-0.130l-0.386,-0.772l1.674,-0.901l-1.159,-0.773l2.317,-1.673l2.702,-4.248l1.675,-1.545l2.317,-0.901l1.288,0.129l0.515,-0.772zM239.25,51.578l2.960,0.901l3.090,0.901l0.258,1.287l1.930,-0.257l1.931,0.900l-2.316,0.903l-4.249,-0.774l-1.544,-1.158l-2.575,1.416l-3.861,1.416l-0.902,-1.544l-3.733,0.257l2.317,-1.416l0.386,-2.060l0.901,-2.445l1.931,0.257l0.515,1.158l1.417,-0.514l-1.544,-0.772zM218.525,6.393l7.080,-0.643l5.278,-0.386l5.921,-0.130l3.604,-1.415l11.199,-0.773l9.656,0.129l7.723,-0.386l18.924,0.514l10.555,1.802l-6.565,1.159l-6.437,0.515l-2.445,0.644l5.792,0l-10.684,2.317l-10.169,2.704l-9.913,0.900l3.734,0.258l-1.931,0.515l2.317,1.287l-6.694,1.674l-1.287,1.159l-3.863,0.772l0.387,0.643l3.604,0.258l0,0.644l-6.049,1.158l-7.081,-0.643l-7.981,0.386l-9.012,-0.515l-0.385,-1.288l5.020,-0.643l-1.158,-0.902l2.187,-0.900l6.437,0.900l-7.981,-2.316l2.188,-1.030l4.763,-0.644l0.773,-0.901l-3.862,-1.030l-1.159,-1.416l7.338,0.129l6.437,-0.644l-15.577,-0.128l-4.762,-1.031l-5.407,-1.802l0.515,0.901zM253.024,32.01l2.574,-1.030l5.922,1.417l3.734,1.287l0.385,1.158l5.020,-0.643l2.833,1.674l6.437,1.158l2.317,1.030l2.574,2.575l-4.891,1.158l6.307,1.803l4.248,0.643l3.862,2.446l4.248,0.128l-0.773,1.932l-4.763,3.089l-3.347,-1.158l-4.248,-2.575l-3.476,0.386l-0.257,1.545l2.832,1.545l3.605,1.287l1.159,0.644l1.673,2.704l-0.902,1.930l-3.347,-0.772l-6.821,-2.061l3.862,2.318l2.702,1.545l0.516,1.030l-7.339,-1.159l-5.793,-1.545l-3.218,-1.286l0.903,-0.774l-3.991,-1.415l-3.992,-1.287l0.129,0.772l-7.853,0.386l-2.188,-0.901l1.675,-1.931l5.149,-0.129l5.535,-0.257l-0.901,-1.031l0.901,-1.287l3.475,-2.702l-0.772,-1.159l-1.030,-0.901l-4.120,-1.288l-5.406,-0.901l1.674,-0.772l-2.832,-1.674l-2.317,-0.129l-2.189,-0.900l-1.416,0.772l-4.891,0.385l-9.784,-0.643l-5.664,-0.772l-4.377,-0.386l-2.317,-0.901l2.832,-1.287l-3.862,0l-0.772,-2.704l2.059,-2.446l2.704,-1.030l6.951,-0.772l-1.931,1.802l2.188,1.674l2.447,-2.189l6.823,-1.159l4.633,2.832l-0.386,1.675l-5.278,0.774zM210.672,27.248l5.536,0.128l5.148,0.645l-3.989,2.445l-3.219,0.514l-2.833,1.932l-3.088,-0.128l-1.675,-2.318l0,-1.287l1.417,-1.158l-2.703,0.773zM206.552,9.869l1.931,-0.901l2.704,-0.128l-1.159,-0.644l6.308,-0.129l3.348,1.416l8.753,1.673l5.664,2.060l-3.733,0.772l-5.021,2.060l-4.763,0.258l-5.535,-0.386l-2.961,-1.031l0.129,-1.030l2.059,-0.772l-4.891,0.129l-2.961,-0.902l-1.673,-1.287l-1.801,1.158zM194.71,31.109l-2.832,-2.574l2.961,-0.514l3.218,0.643l4.119,-0.258l0.515,1.030l-1.544,0.901l3.604,1.803l-0.644,1.416l-3.862,1.415l-2.574,-0.257l-1.803,-1.030l-5.535,-1.544l-1.673,-1.160l-6.050,-0.129zM178.233,30.08l3.089,1.158l1.674,2.574l0.772,1.932l4.634,1.287l4.764,1.287l-0.258,1.159l-4.377,0.257l1.673,1.030l-0.900,1.030l-6.436,0l-1.804,-0.644l-4.376,-0.386l-5.278,1.545l-6.565,0.644l-3.604,0.128l-2.704,-2.059l-6.050,-0.386l-4.505,-1.674l2.960,-0.772l4.119,-0.386l3.863,0.129l3.475,-0.516l-5.149,-0.644l-5.793,0.258l-3.862,-0.129l-1.416,-0.901l6.308,-1.159l-4.249,0.129l-4.634,-0.772l2.189,-2.059l1.932,-1.031l7.208,-1.673l2.703,0.515l-1.287,1.287l5.922,-0.772l3.861,1.287l2.961,-1.287l2.446,0.901l2.189,2.574l1.416,-1.157l-1.932,-2.704l2.446,-0.387l-2.575,-0.387zM174.757,22.613l2.446,-0.385l2.832,0.128l0.385,1.287l-1.543,1.287l-9.141,0.387l-6.822,1.159l-4.120,0.128l-0.257,-0.901l5.535,-1.159l-12.228,0.257l-3.734,-0.514l3.734,-2.575l2.445,-0.772l7.596,0.901l4.891,1.673l4.634,0.129l-3.862,-2.574l2.446,-1.030l1.803,0.643l0.900,1.287l-2.060,-0.644zM134.336,21.969l4.506,-2.059l5.535,-1.803l4.120,0.130l3.732,-0.387l-0.385,2.060l-2.060,0.901l-2.575,0.129l-5.020,1.158l-4.248,0.386l3.605,0.515zM137.812,26.476l3.862,0.514l6.823,0.129l2.703,0.772l2.832,1.158l-3.347,0.644l-6.694,1.674l-3.991,2.060l-0.643,1.287l-5.664,1.287l-1.802,-1.030l-5.922,-1.544l0.129,-0.902l2.188,-2.317l2.060,-1.159l-1.673,-2.188l-9.139,0.385zM107.69,81.443l2.574,-0.256l-0.773,3.088l2.318,2.188l-1.030,0l-1.674,-1.287l-0.900,-1.287l-1.416,-0.772l-0.516,-1.158l0.130,-0.902l-1.287,-0.386zM199.73,20.682l1.288,0.901l0,1.417l-1.416,1.801l-3.218,0.387l-2.961,-0.387l0.129,-1.545l-4.507,0.130l-0.128,-2.060l2.961,0.129l3.990,-0.901l-3.862,-0.128zM181.064,13.344l5.279,0.387l7.337,0.901l2.060,1.288l1.030,1.158l-4.377,-0.258l-4.506,-0.900l-5.922,-0.129l2.576,-0.773l-3.348,-0.644l0.129,1.030zM127.385,92.386l1.288,1.287l2.702,1.158l1.160,1.416l-1.417,0.387l-4.376,-1.159l-0.773,-1.029l-2.446,-0.903l-0.515,-0.772l-2.703,-0.514l-1.030,-1.416l0.129,-0.643l2.832,0.643l1.673,0.386l2.575,0.257l-0.901,-0.902zM315.071,83.502l0.129,2.961l-1.931,1.031l-1.932,0.901l-4.376,1.030l-3.476,2.188l-4.505,0.386l-5.793,-0.515l-3.990,0l-2.832,0.129l-2.318,1.930l-3.346,1.288l-3.863,3.476l-3.089,2.575l2.189,-0.515l4.376,-3.476l5.664,-2.317l3.991,-0.257l2.445,1.286l-2.573,1.932l0.772,2.832l0.901,2.060l3.476,1.287l4.504,-0.387l2.704,-2.960l0.258,1.931l1.673,1.029l-3.347,1.674l-5.921,1.674l-2.703,1.029l-2.961,1.931l-2.060,-0.128l-0.128,-2.317l4.633,-2.189l-4.247,0l-2.961,0.387l-1.803,-1.545l0,-3.605l-1.157,-0.772l-1.804,0.386l-0.900,-0.644l-2.060,1.932l-0.901,2.187l-0.902,1.159l-1.158,0.515l-0.901,0l-0.258,0.772l-4.891,0l-4.120,0l-1.287,0.516l-2.703,1.801l-0.387,0.258l-0.256,0.258l-0.387,0.386l-0.257,0.515l-0.643,0l-0.516,0l-0.901,0l-0.772,-0.128l-0.902,0l-0.643,0l-0.772,0.128l-0.258,0l-0.515,0.257l-0.386,0.129l0.257,0.386l0,0.129l0.387,0.772l0,0.258l0,0.128l-0.258,0.130l-0.386,0.128l-0.772,0.258l-0.902,0.257l-0.643,0.257l-0.643,0.258l-0.644,0.129l-0.128,0l-0.387,0l-0.900,0.128l-0.645,0.129l-0.644,0.258l-0.643,0.385l-0.644,0.258l-0.644,0.257l-0.643,0.258l-0.644,0l-0.514,-0.129l-0.387,-0.257l-0.257,-0.257l0,-0.130l0,-0.257l0.644,-0.900l1.286,-1.546l0,-0.128l0,-0.129l0.259,-0.515l0.385,-0.515l0.129,-0.258l-0.258,-0.772l-0.129,-0.515l0,-0.386l-0.127,-0.515l-0.130,-0.515l-0.129,-0.515l-0.128,-0.386l-0.130,-0.515l0,-0.257l-0.128,-0.387l-0.515,-0.386l-0.514,-0.128l-0.644,-0.258l-0.643,-0.257l-0.516,-0.257l0.386,-0.515l0,-0.129l-0.128,0l-0.258,-0.258l-0.128,0l-0.258,0.128l-0.386,-0.128l-0.258,-0.129l-0.128,0l-0.129,-0.257l-0.129,0l0,-0.258l0,-0.128l0,-0.129l0,-0.129l-0.257,0l-0.258,0.258l-0.772,0l0.128,-0.258l-0.257,0l-0.386,-0.257l-0.128,-0.387l-0.130,-0.386l-0.514,-0.257l-0.515,-0.129l-0.515,-0.258l-0.515,-0.257l-0.515,-0.128l-0.515,-0.258l-0.515,-0.258l-0.514,-0.128l-0.258,-0.128l-0.387,-0.130l-0.643,-0.257l-0.772,-0.386l-0.772,-0.258l-0.773,-0.257l-0.386,-0.257l-0.258,0l-0.386,-0.258l-0.644,-0.129l-0.643,0.129l-0.772,0.258l-0.387,0.128l-0.386,0.129l-0.258,0.129l-0.515,0l-0.385,0l-3.219,-0.773l-2.188,0.387l-2.703,-0.773l-2.704,-0.515l-1.930,-0.129l-0.772,-0.514l-0.516,-1.417l-0.901,0l0,1.030l-5.536,0l-9.139,0l-9.397,0l-32.182,0l-2.704,0l-15.962,0l-5.149,-2.574l-1.931,-1.287l-4.891,-1.030l-1.545,-2.446l0.385,-1.673l-3.474,-1.031l-0.387,-2.188l-3.348,-2.061l0,-1.287l1.417,-1.287l0,-1.802l-4.634,-1.673l-2.703,-3.090l-1.674,-1.930l-2.446,-1.159l-1.802,-1.159l-1.545,-1.417l-2.703,0.902l-2.575,1.545l-2.445,-1.803l-1.802,-1.157l-2.704,-0.774l-2.574,0l0,-15.446l0,-9.913l5.019,0.644l4.249,1.286l2.832,0.258l2.317,-1.158l3.347,-0.901l3.990,0.385l3.992,-1.157l4.376,-0.644l1.931,1.029l1.931,-0.644l0.643,-1.158l1.803,0.257l4.634,2.447l3.604,-1.931l0.387,2.059l3.218,-0.387l1.029,-0.772l3.219,0.129l4.120,1.159l6.307,0.901l3.733,0.515l2.704,-0.129l3.604,1.288l-3.734,1.415l4.763,0.515l7.338,-0.257l2.317,-0.515l2.832,1.544l2.960,-1.287l-2.832,-1.158l1.803,-0.901l3.218,-0.129l2.189,-0.258l2.188,0.644l2.703,1.417l2.961,-0.258l4.763,1.287l4.248,-0.386l3.862,0l-0.258,-1.673l2.446,-0.515l4.120,0.900l0,2.576l1.673,-2.060l2.188,0l1.288,-2.704l-2.962,-1.673l-3.088,-1.030l0.128,-2.961l3.218,-2.060l3.605,0.515l2.703,1.158l3.604,3.091l-2.317,1.287l5.020,0.514l0,2.832l3.605,-2.189l3.218,1.804l-0.900,1.930l2.702,1.802l2.704,-1.931l2.060,-2.317l0.129,-2.960l3.861,0.257l3.862,0.387l3.733,1.287l0.128,1.416l-2.059,1.416l1.931,1.416l-0.386,1.286l-5.277,1.932l-3.734,0.386l-2.704,-0.772l-0.901,1.287l-2.574,2.317l-0.773,1.159l-3.089,1.802l-3.862,0.257l-2.188,1.031l-0.130,1.802l-3.089,0.386l-3.347,2.188l-2.961,2.961l-1.028,2.188l-0.130,3.090l3.991,0.386l1.159,2.576l1.287,2.059l3.733,-0.515l5.020,1.159l2.704,1.029l1.930,1.288l3.347,0.643l2.832,1.158l4.507,0.129l2.959,0.258l-0.514,2.446l0.901,2.702l1.931,2.961l3.991,2.576l2.059,-0.902l1.545,-2.703l-1.416,-4.247l-1.931,-1.545l4.247,-1.159l3.090,-1.931l1.545,-1.931l-0.257,-1.803l-1.802,-2.188l-3.348,-2.060l3.219,-2.832l-1.158,-2.445l-0.902,-4.249l1.931,-0.514l4.506,0.643l2.832,0.257l2.188,-0.644l2.575,0.902l3.347,1.545l0.772,1.029l4.763,0.259l0,2.187l0.901,3.476l2.446,0.386l1.931,1.545l3.862,-1.416l2.574,-2.961l1.802,-1.287l2.060,2.446l3.605,3.347l2.960,3.218l-1.159,1.802l3.604,1.417l2.446,1.545l4.249,0.772l1.802,0.772l1.030,2.317l2.060,0.387l-1.158,-1.028z'</body><body package="Roassal-Core">CentralAfricanRepublic	^ 'M506.361,206.957l2.318,-0.129l0.384,-0.773l0.517,0.129l0.642,0.515l3.349,-1.029l1.157,-1.031l1.416,-0.901l-0.256,-0.900l0.772,-0.259l2.574,0.130l2.574,-1.287l1.932,-2.962l1.417,-1.030l1.672,-0.514l0.258,1.157l1.545,1.674l0,1.159l-0.387,1.159l0.129,0.773l1.029,0.771l2.059,1.159l1.419,1.159l0,0.901l1.800,1.287l1.159,1.287l0.643,1.544l2.059,1.031l0.389,0.901l-0.903,0.257l-1.674,0l-2.058,-0.257l-0.901,0.129l-0.514,0.643l-0.775,0.129l-1.158,-0.514l-2.961,1.287l-1.287,-0.258l-0.258,0.258l-0.900,1.544l-1.930,-0.514l-2.060,-0.258l-1.674,-1.030l-2.190,-0.900l-1.415,0.900l-1.030,1.417l-0.258,1.802l-1.800,-0.130l-1.803,-0.514l-1.545,1.544l-1.415,2.446l-0.387,-0.772l-0.129,-1.287l-1.157,-0.773l-1.031,-1.416l-0.257,-1.029l-1.288,-1.416l0.258,-0.772l-0.258,-1.160l0.258,-2.060l0.643,-0.515l-1.287,2.702z'</body><body package="Roassal-Core">Chad	^ 'M504.302,192.281l0.258,-1.158l-1.674,-0.130l0,-1.673l-1.158,-1.029l1.158,-3.605l3.475,-2.446l0.130,-3.605l1.030,-5.406l0.514,-1.159l-1.030,-0.901l-0.129,-0.901l-1.029,-0.643l-0.643,-4.249l2.702,-1.416l10.815,5.149l11.069,5.407l-0.258,10.427l-2.316,-0.257l-1.158,2.060l-0.774,1.673l0.643,0.643l-0.901,0.772l0.258,1.159l-0.643,1.030l-0.259,1.031l0.902,-0.129l0.517,1.030l0.126,1.544l0.902,0.772l0,0.645l-1.672,0.514l-1.417,1.030l-1.932,2.962l-2.574,1.287l-2.574,-0.130l-0.772,0.259l0.256,0.900l-1.416,0.901l-1.157,1.031l-3.349,1.029l-0.642,-0.515l-0.517,-0.129l-0.384,0.773l-2.318,0.129l0.515,-0.644l-0.900,-1.930l-0.387,-1.160l-1.158,-0.385l-1.545,-1.546l0.514,-1.287l1.287,0.257l0.774,-0.257l1.415,0.129l-1.415,-2.446l0.128,-1.802l-0.258,-1.804l1.029,1.801z'</body><body package="Roassal-Core">Chile	^ 'M266.669,369.286l-3.347,-1.544l-0.772,-1.675l0.644,-1.544l-1.288,-1.802l-0.386,-4.634l1.158,-2.574l2.832,-2.061l-3.990,-0.772l2.445,-2.446l1.030,-4.505l2.962,1.031l1.416,-5.666l-1.802,-0.642l-0.902,3.345l-1.674,-0.386l0.902,-3.862l0.901,-5.020l1.159,-1.801l-0.773,-2.576l-0.129,-3.090l1.030,-0.128l1.673,-4.249l1.932,-4.376l1.158,-3.991l-0.643,-3.990l0.772,-2.317l-0.387,-3.347l1.674,-3.218l0.386,-5.278l0.901,-5.535l0.902,-6.051l-0.259,-4.378l-0.513,-3.862l1.415,-0.644l0.644,-1.417l1.286,1.932l0.387,1.933l1.417,1.157l-0.773,2.576l1.417,2.960l1.028,3.733l1.932,-0.386l0.386,0.772l-0.902,2.704l-2.960,1.415l0,4.378l-0.515,0.900l0.772,1.031l-1.802,1.673l-1.802,2.574l-1.030,2.446l0.257,2.575l-1.672,2.831l1.287,4.636l0.772,0.514l-0.129,2.447l-1.415,2.702l0,2.189l-2.060,1.802l0,2.446l0.900,2.574l-1.673,1.030l-0.773,2.447l-0.513,2.703l0.385,3.347l-1.030,0.516l0.645,3.089l1.157,1.030l-0.901,1.158l1.287,0.514l0.258,1.030l-1.158,0.515l0.257,1.545l-0.900,3.605l-1.546,2.316l0.386,1.288l-0.901,1.674l-2.060,1.288l0.258,2.831l0.902,0.902l1.801,-0.129l0,2.060l1.160,1.545l6.436,0.385l2.574,0.387l-2.446,0l-1.288,0.643l-2.444,1.029l-0.387,2.447l-1.159,0.129l-3.090,-0.902l3.089,1.931zM283.274,374.822l1.546,0l-0.902,1.157l-2.316,0.774l-1.288,0l-1.544,-0.256l-1.932,-0.774l-2.831,-0.386l-3.476,-1.545l-2.704,-1.416l-3.732,-3.090l2.188,0.645l3.862,1.802l3.476,0.901l1.416,-1.159l0.901,-1.932l2.445,-1.029l1.931,0.258l0.129,0.127l-0.129,5.923l-2.960,0z'</body><body package="Roassal-Core">China	^ 'M760.085,177.992l-2.188,-0.902l0,-2.317l1.288,-1.158l2.961,-0.773l1.544,0l0.645,1.031l-1.289,1.287l-0.514,1.545l2.447,-1.287zM712.198,152.117l-1.160,-0.644l-1.416,-0.128l-1.930,-0.645l-1.414,0.773l-1.804,1.931l-0.258,-2.059l-1.543,0.514l-3.221,-0.257l-2.959,-0.644l-2.189,-1.158l-2.188,-0.515l-0.900,-1.288l-1.545,-0.386l-2.703,-1.802l-2.061,-0.772l-1.158,0.643l-3.732,-1.930l-2.704,-1.674l-0.773,-2.960l1.932,0.385l0.129,-1.416l-1.030,-1.416l0.256,-2.189l-2.961,-3.089l-4.375,-1.159l-0.773,-2.059l-2.059,-1.287l-0.387,-0.773l-0.515,-1.416l0.129,-1.158l-1.674,-0.515l-0.772,0.256l-0.773,-2.573l0.773,-0.516l-0.386,-0.643l2.574,-1.288l1.930,-0.514l2.834,0.257l1.029,-1.673l3.476,-0.258l0.901,-1.158l4.248,-1.416l0.387,-0.644l-0.260,-1.545l1.931,-0.643l-2.445,-4.635l5.279,-1.159l1.415,-0.514l1.931,-4.892l5.408,0.901l1.416,-1.288l0.127,-2.704l2.317,-0.128l2.060,-1.801l1.030,-0.258l0.644,1.802l2.317,1.545l3.863,0.901l1.803,2.188l-1.032,3.219l1.032,1.158l3.216,0.387l3.606,0.385l3.217,1.674l1.673,0.386l1.159,2.446l1.672,1.545l2.962,0l5.536,0.644l3.605,-0.386l2.701,0.386l3.862,1.673l3.347,0l1.160,0.773l3.090,-1.416l4.375,-0.902l4.121,-0.128l3.088,-1.030l1.932,-1.416l1.931,-0.902l-0.515,-0.900l-0.774,-1.030l1.416,-1.674l1.416,0.257l2.832,0.516l2.704,-1.417l4.119,-1.029l1.931,-1.803l1.932,-0.772l3.861,-0.386l2.190,0.258l0.258,-0.902l-2.448,-1.931l-2.189,-0.772l-2.059,0.901l-2.701,-0.386l-1.420,0.386l-0.771,-1.158l1.931,-2.704l1.287,-1.931l3.219,0.900l3.862,-1.672l0,-1.159l2.447,-2.832l1.414,-0.901l0,-1.416l-1.545,-0.644l2.316,-1.417l3.350,-0.513l3.475,0l4.119,0.772l2.316,1.030l1.674,2.703l1.031,1.158l0.901,1.674l1.029,2.574l4.635,0.902l3.218,1.930l1.159,2.447l3.990,0l2.447,-1.030l4.375,-0.774l-1.414,2.448l-1.031,1.029l-0.901,2.832l-1.802,2.704l-3.346,-0.516l-2.318,0.901l0.771,2.317l-0.385,3.219l-1.416,0.129l0,1.288l-1.674,-1.546l-1.029,1.546l-4.248,1.157l0.387,1.417l-2.319,-0.130l-1.287,-0.900l-1.802,1.930l-2.961,1.546l-2.190,1.673l-3.732,0.772l-2.059,1.288l-2.832,0.772l1.416,-1.288l-0.513,-1.028l2.058,-1.803l-1.418,-1.417l-2.314,0.902l-3.090,1.931l-1.674,1.673l-2.576,0.129l-1.414,1.287l1.414,1.802l2.189,0.387l0.129,1.287l2.061,0.773l3.088,-1.931l2.447,1.029l1.672,0.129l0.387,1.416l-3.733,0.772l-1.287,1.416l-2.574,1.288l-1.418,1.931l2.834,1.417l1.158,2.702l1.545,2.446l1.930,2.060l-0.129,2.059l-1.674,0.773l0.644,1.416l1.545,0.773l-0.386,2.187l-0.643,2.189l-1.545,0.258l-1.932,2.832l-2.189,3.604l-2.443,3.219l-3.735,2.446l-3.732,2.317l-3.090,0.258l-1.674,1.157l-0.900,-0.772l-1.545,1.287l-3.733,1.416l-2.832,0.386l-0.900,2.833l-1.547,0.129l-0.642,-1.931l0.642,-1.031l-3.605,-0.900l-1.285,0.387l-2.704,-0.645l-1.289,-1.029l0.387,-1.545l-2.445,-0.515l-1.287,-1.030l-2.317,1.416l-2.576,0.257l-2.187,0l-1.416,0.644l-1.416,0.386l0.386,3.089l-1.418,0l-0.256,-0.643l-0.128,-1.158l-1.930,0.773l-1.160,-0.387l-2.059,-1.030l0.772,-2.317l-1.674,-0.515l-0.645,-2.446l-2.832,0.386l0.387,-3.089l2.445,-2.318l0.131,-2.188l0,-2.060l-1.289,-0.644l-0.900,-1.545l-1.545,0.130l-2.832,-0.386l0.900,-1.159l-1.285,-1.674l-1.934,1.158l-2.314,-0.643l-3.092,1.674l-2.445,2.059l2.188,-0.258z'</body><body package="Roassal-Core">Colombia	^ 'M262.164,227.425l-1.159,-0.644l-1.287,-0.901l-0.772,0.386l-2.318,-0.386l-0.643,-1.157l-0.515,0.127l-2.704,-1.544l-0.386,-0.902l1.031,-0.129l-0.130,-1.416l0.644,-1.029l1.417,-0.129l1.029,-1.674l1.030,-1.416l-0.901,-0.644l0.515,-1.545l-0.644,-2.445l0.515,-0.772l-0.386,-2.318l-1.030,-1.416l0.258,-1.287l0.900,0.257l0.515,-0.901l-0.643,-1.544l0.386,-0.387l1.416,0.129l1.931,-1.931l1.158,-0.258l0,-0.901l0.515,-2.317l1.545,-1.158l1.674,-0.128l0.257,-0.516l2.059,0.257l2.189,-1.415l1.029,-0.644l1.288,-1.288l0.901,0.258l0.773,0.644l-0.516,0.901l-1.802,0.514l-0.644,1.289l-1.029,0.771l-0.772,1.030l-0.387,1.931l-0.772,1.545l1.415,0.129l0.387,1.287l0.644,0.645l0.128,1.028l-0.257,1.030l0,0.516l0.772,0.257l0.644,0.901l3.475,-0.258l1.546,0.387l1.802,2.317l1.158,-0.258l1.931,0.129l1.545,-0.386l0.902,0.515l-0.517,1.416l-0.513,0.901l-0.259,1.931l0.516,1.802l0.773,0.772l0.127,0.644l-1.416,1.287l1.031,0.644l0.772,0.901l0.773,2.703l-0.516,0.387l-0.515,-1.545l-0.773,-0.902l-0.900,0.902l-5.278,0l0.129,1.674l1.545,0.258l-0.129,1.029l-0.515,-0.258l-1.545,0.387l0,1.931l1.159,1.030l0.515,1.544l-0.129,1.159l-1.159,7.338l-1.416,-1.417l-0.772,0l1.802,-2.704l-2.060,-1.287l-1.673,0.259l-1.030,-0.516l-1.416,0.644l-2.060,-0.257l-1.544,-2.832l-1.288,-0.644l-0.772,-1.287l-1.802,-1.288l0.772,-0.258z'</body><body package="Roassal-Core">Congo	^ 'M500.183,239.912l-0.902,-1.031l-0.900,0.515l-1.030,1.159l-2.189,-2.832l2.059,-1.544l-1.029,-1.804l0.901,-0.643l1.802,-0.257l0.256,-1.287l1.416,1.287l2.319,0.129l0.900,-1.288l0.258,-1.802l-0.258,-2.059l-1.286,-1.545l1.157,-3.219l-0.642,-0.515l-2.060,0.258l-0.643,-1.415l0.127,-1.160l3.475,0.129l2.062,0.644l2.187,0.643l0.259,-1.416l1.415,-2.446l1.545,-1.544l1.803,0.514l1.800,0.130l-0.257,1.673l-0.770,1.416l-0.517,1.673l-0.386,2.448l0.257,1.414l-0.514,1.030l0,0.901l-0.385,0.901l-1.805,1.287l-1.156,1.417l-1.160,2.575l0,2.190l-0.645,0.898l-1.543,1.288l-1.544,1.804l-1.032,-0.516l-0.128,-0.772l-1.544,0l-0.901,1.030l0.772,0.258z'</body><body package="Roassal-Core">CostaRica	^ 'M241.695,204.768l-1.415,-0.515l-0.515,-0.644l0.257,-0.386l-0.128,-0.644l-0.644,-0.643l-1.159,-0.514l-0.901,-0.387l-0.128,-0.773l-0.773,-0.515l0.257,0.901l-0.643,0.644l-0.515,-0.772l-0.901,-0.258l-0.386,-0.644l0,-0.772l0.386,-0.901l-0.772,-0.257l0.644,-0.643l0.386,-0.259l1.801,0.644l0.644,-0.257l0.773,0.128l0.515,0.644l0.772,0.128l0.644,-0.514l0.644,1.416l1.029,1.030l1.287,1.157l-1.029,0.260l0,1.157l0.514,0.387l-0.385,0.257l0.128,0.515l-0.257,0.515l0.130,-0.515z'</body><body package="Roassal-Core">Croatia	^ 'M516.017,103.327l0.643,1.031l0.773,0.772l-1.030,1.029l-1.160,-0.643l-1.931,0l-2.316,-0.386l-1.159,0l-0.643,0.643l-1.031,-0.643l-0.516,1.159l1.290,1.158l0.643,0.901l1.286,1.031l0.901,0.514l1.031,1.159l2.445,1.030l-0.258,0.514l-2.572,-1.030l-1.547,-1.029l-2.444,-0.773l-2.318,-1.931l0.514,-0.257l-1.157,-1.159l-0.130,-0.901l-1.674,-0.386l-0.898,1.159l-0.774,-0.901l0.128,-0.902l0.129,-0.128l1.802,0.128l0.516,-0.386l0.901,0.386l1.030,0l0,-0.772l0.901,-0.257l0.255,-1.030l2.190,-0.773l0.902,0.386l1.930,1.159l2.316,0.515l-1.032,0.387zM502.372,101.654l2.315,0.258l1.289,-0.644l2.446,0l0.515,-0.515l0.385,0l0.515,0.901l-2.190,0.773l-0.255,1.030l-0.901,0.257l0,0.772l-1.030,0l-0.901,-0.386l-0.516,0.386l-1.802,-0.128l0.517,-0.258l-0.646,-1.029l-0.259,1.417z'</body><body package="Roassal-Core">Cuba	^ 'M243.626,164.475l2.318,0.257l2.059,0l2.576,0.902l1.028,1.030l2.576,-0.387l0.900,0.644l2.318,1.673l1.673,1.287l0.901,-0.128l1.545,0.644l-0.129,0.772l1.931,0l2.060,1.159l-0.257,0.644l-1.803,0.385l-1.802,0.129l-1.931,-0.257l-3.861,0.257l1.801,-1.544l-1.029,-0.644l-1.802,-0.258l-0.902,-0.772l-0.643,-1.415l-1.546,0l-2.445,-0.645l-0.772,-0.644l-3.604,-0.385l-0.902,-0.515l1.030,-0.644l-2.704,-0.128l-1.930,1.416l-1.030,0l-0.386,0.643l-1.417,0.257l-1.158,-0.257l1.417,-0.772l0.643,-1.030l1.159,-0.515l1.415,-0.515l2.059,-0.257l-0.644,0.387z'</body><body package="Roassal-Core">Cyprus	^ 'M556.694,132.549l0.129,0.259l-2.704,1.028l-1.417,-0.385l-0.514,-1.030l1.159,-0.129l0.258,0.129l0.127,0l0.130,0l0.257,0l0.257,-0.129l0.260,-0.128l0.127,0.128l0.258,0l0.128,0l0.128,0l0.130,0.129l0,0.258l0.129,-0.130l0.257,0.130l0.128,0l0.131,-0.130l0.128,0l0.128,0l0.129,-0.128l0.128,0l-0.129,-0.128z'</body><body package="Roassal-Core">CzechRepublic	^ 'M510.866,96.119l-1.158,-0.516l-1.286,0.129l-2.061,-0.901l-1.030,0.258l-1.417,1.030l-2.058,-0.772l-1.544,-1.159l-1.288,-0.645l-0.386,-1.157l-0.387,-0.773l1.932,-0.643l1.029,-0.644l1.932,-0.515l0.642,-0.516l0.645,0.259l1.287,-0.259l1.287,0.903l1.932,0.256l-0.129,0.645l1.414,0.644l0.517,-0.773l1.802,0.386l0.257,0.772l1.930,0.129l1.289,1.416l-0.774,0l-0.385,0.515l-0.644,0l-0.256,0.643l-0.517,0.129l0,0.257l-0.900,0.258l-1.288,0l0.387,-0.644z'</body><body package="Roassal-Core">DemocraticRepublicCongo	^ 'M548.327,217.513l-0.258,3.217l1.159,0.258l-0.901,1.031l-1.031,0.643l-1.029,1.416l-0.514,1.287l-0.131,2.189l-0.643,1.028l0,2.061l-0.901,0.643l0,1.674l-0.386,0.128l-0.257,1.546l0.643,1.159l0.130,3.347l0.514,2.445l-0.257,1.415l0.514,1.546l1.545,1.546l1.545,3.346l-1.030,-0.258l-3.733,0.386l-0.643,0.387l-0.771,1.673l0.642,1.288l-0.514,3.088l-0.387,2.705l0.772,0.514l1.932,1.031l0.642,-0.516l0.258,2.961l-2.058,0l-1.159,-1.545l-0.903,-1.158l-2.058,-0.387l-0.644,-1.416l-1.674,0.901l-2.187,-0.385l-0.903,-1.158l-1.672,-0.258l-1.289,0l-0.128,-0.772l-0.901,-0.130l-1.287,-0.128l-1.674,0.385l-1.158,0l-0.645,0.131l0.129,-3.091l-0.900,-1.030l-0.129,-1.674l0.385,-1.673l-0.514,-1.031l-0.128,-1.672l-3.219,0l0.258,-0.902l-1.417,0l-0.128,0.388l-1.673,0.128l-0.644,1.545l-0.514,0.772l-1.418,-0.387l-0.900,0.387l-1.801,0.128l-1.031,-1.415l-0.645,-0.773l-0.771,-1.674l-0.643,-1.930l-7.982,-0.131l-0.900,0.389l-0.774,-0.131l-1.157,0.387l-0.387,-0.772l0.773,-0.386l0,-1.159l0.514,-0.642l0.902,-0.516l0.772,0.258l0.901,-1.030l1.544,0l0.128,0.772l1.032,0.516l1.544,-1.804l1.543,-1.288l0.645,-0.898l0,-2.190l1.160,-2.575l1.156,-1.417l1.805,-1.287l0.385,-0.901l0,-0.901l0.514,-1.030l-0.257,-1.414l0.386,-2.448l0.517,-1.673l0.770,-1.416l0.257,-1.673l0.258,-1.802l1.030,-1.417l1.415,-0.900l2.190,0.900l1.674,1.030l2.060,0.258l1.930,0.514l0.900,-1.544l0.258,-0.258l1.287,0.258l2.961,-1.287l1.158,0.514l0.775,-0.129l0.514,-0.643l0.901,-0.129l2.058,0.257l1.674,0l0.903,-0.257l1.672,2.188l1.158,0.387l0.773,-0.515l1.287,0.257l1.416,-0.643l0.644,1.159l-2.446,-1.802z'</body><body package="Roassal-Core">Denmark	^ 'M488.21,78.87l-1.159,-1.417l0,-2.832l0.387,-0.644l0.772,-0.901l2.447,-0.130l0.900,-0.772l2.188,-0.771l-0.128,1.415l-0.772,0.902l0.385,0.772l1.417,0.386l-0.644,1.029l-0.773,-0.257l-2.060,1.932l0.775,1.288l-1.675,0.385l2.060,0.385zM498.509,75.779l0.900,1.416l-1.545,2.188l-2.831,-1.544l-0.386,-1.158l-3.862,0.902z'</body><body package="Roassal-Core">Djibouti	^ 'M581.28,192.797l0.645,0.771l-0.129,1.159l-1.545,0.644l1.158,0.772l-0.900,1.416l-0.645,-0.514l-0.642,0.256l-1.545,-0.128l0,-0.773l-0.257,-0.771l0.901,-1.288l1.030,-1.159l1.158,0.257l-0.771,0.642z'</body><body package="Roassal-Core">DominicanRepublic	^ 'M272.075,173.873l0.259,-0.516l2.187,0l1.545,0.772l0.772,-0.128l0.387,1.030l1.545,-0.129l-0.129,0.901l1.288,0l1.286,1.030l-1.030,1.159l-1.287,-0.644l-1.287,0.129l-0.773,-0.129l-0.514,0.515l-1.030,0.129l-0.387,-0.644l-0.900,0.386l-1.159,1.803l-0.643,-0.387l-0.130,-0.772l0,-0.773l-0.643,-0.772l0.643,-0.515l0.259,-1.029l0.259,1.416z'</body><body package="Roassal-Core">Ecuador	^ 'M248.905,236.179l1.415,-2.060l-0.514,-1.159l-1.031,1.288l-1.672,-1.160l0.515,-0.772l-0.387,-2.445l0.901,-0.516l0.515,-1.673l1.030,-1.674l-0.258,-1.158l1.545,-0.514l1.802,-1.030l2.704,1.544l0.515,-0.127l0.643,1.157l2.318,0.386l0.772,-0.386l1.287,0.901l1.159,0.644l0.386,2.059l-0.772,1.674l-2.961,2.832l-3.219,1.030l-1.673,2.446l-0.514,1.802l-1.545,1.030l-1.159,-1.286l-1.030,-0.388l-1.159,0.257l0,-1.029l0.773,-0.643l0.386,1.030z'</body><body package="Roassal-Core">Egypt	^ 'M559.269,147.483l-0.774,1.158l-0.514,1.931l-0.771,1.417l-0.645,0.514l-0.901,-0.901l-1.159,-1.158l-1.930,-3.862l-0.258,0.258l1.159,2.831l1.545,2.703l2.059,4.119l1.030,1.545l0.903,1.545l2.316,2.961l-0.517,0.386l0.130,1.802l3.089,2.447l0.259,0.514l-10.299,0l-10.556,0l-10.813,0l0,-9.912l0,-9.526l-0.901,-2.189l0.772,-1.673l-0.387,-1.159l0.903,-1.287l3.603,0l2.575,0.644l2.705,0.773l1.287,0.514l2.058,-0.901l1.030,-0.772l2.447,-0.258l1.930,0.386l0.642,1.287l0.647,-0.900l2.186,0.644l2.061,0.128l1.415,-0.644l-1.674,-4.635z'</body><body package="Roassal-Core">ElSalvador	^ 'M228.694,190.865l-0.257,0.645l-1.545,0l-1.030,-0.259l-1.029,-0.515l-1.545,-0.129l-0.772,-0.644l0.128,-0.385l0.901,-0.644l0.515,-0.385l-0.129,-0.258l0.644,-0.129l0.772,0.129l0.515,0.643l0.902,0.386l0,0.386l1.287,-0.386l0.515,0.258l0.386,0.256l0.258,-1.031z'</body><body package="Roassal-Core">EquatorialGuinea	^ 'M490.785,224.206l-0.515,-0.387l0.900,-2.960l4.378,0l0.128,3.219l-3.988,0l0.903,-0.128z'</body><body package="Roassal-Core">Eritrea	^ 'M579.351,193.182l-0.901,-0.901l-1.160,-1.545l-1.158,-0.902l-0.773,-0.900l-2.317,-1.030l-1.801,-0.129l-0.644,-0.514l-1.674,0.643l-1.544,-1.287l-0.900,2.059l-3.091,-0.514l-0.258,-1.160l1.160,-3.861l0.258,-1.802l0.770,-0.901l2.061,-0.386l1.288,-1.546l1.543,3.090l0.773,2.446l1.545,1.288l3.604,2.574l1.545,1.545l1.415,1.544l0.903,0.902l1.285,0.902l-0.771,0.642l1.158,0.257z'</body><body package="Roassal-Core">Estonia	^ 'M530.69,71.273l0.387,-1.544l-1.029,0.257l-1.674,-0.900l-0.256,-1.545l3.344,-0.773l3.477,-0.386l2.833,0.515l2.831,-0.129l0.386,0.515l-1.930,1.544l0.900,2.446l-1.158,0.901l-2.318,0l-2.316,-1.028l-1.158,-0.387l2.319,-0.514z'</body><body package="Roassal-Core">Ethiopia	^ 'M579.351,193.182l-1.030,1.159l-0.901,1.288l0.257,0.771l0,0.773l1.545,0.128l0.642,-0.256l0.645,0.514l-0.645,0.901l1.032,1.545l1.029,1.287l1.029,0.901l8.754,3.218l2.316,0l-7.722,8.110l-3.475,0.129l-2.318,1.932l-1.803,0l-1.029,0.644l-1.030,0.256l-1.931,-1.158l-2.445,1.287l-1.030,1.159l-1.031,-0.387l-0.900,0.258l-1.159,-0.385l-0.772,-0.130l-3.089,-2.574l-2.318,0l-0.129,-0.644l-0.772,-1.288l-1.159,-0.515l-1.158,-2.832l-1.286,-0.644l-0.388,-1.158l-1.416,-1.287l-1.673,-0.129l0.901,-1.545l1.416,-0.127l0.386,-0.774l0,-2.447l0.774,-2.831l1.286,-0.772l0.259,-1.030l1.158,-2.060l1.672,-1.415l1.158,-2.575l0.387,-2.317l3.091,0.514l0.900,-2.059l1.544,1.287l1.674,-0.643l0.644,0.514l1.801,0.129l2.317,1.030l0.773,0.900l1.158,0.902l1.160,1.545l-0.901,-0.901z'</body><body package="Roassal-Core">FalklandIslandsMalvinas	^ 'M302.584,365.296l-0.129,1.159l-1.03,1.416l2.188-1.031l1.158-1.286L302.584,365.296zM307.733,365.037l1.159,0.388l-0.902,1.415l-2.188,0.772l-0.257-0.9l1.288-1.416L307.733,365.037z'</body><body package="Roassal-Core">Fiji	^ 'M946.097,274.154l0.773,-0.514l0.901,0.772l-0.516,1.416l-1.672,0.385l-1.418,-0.256l-0.256,-1.289l1.029,-0.900l-1.159,-0.386zM950.089,271.579l-1.160,0.773l-1.545,0.644l-0.385,-1.287l1.031,-1.030l0.899,-0.130l1.160,-0.256l-0.001,0l0.515,-0.129l-0.387,1.287l-0.128,0.128l-0.001,0z'</body><body package="Roassal-Core">Finland	^ 'M542.276,40.893l-0.384,1.932l4.119,1.801l-2.448,2.060l3.089,2.960l-1.801,2.318l2.445,2.060l-1.157,1.802l3.991,1.802l-1.030,1.416l-2.448,1.545l-5.792,3.347l-4.890,0.257l-4.764,1.030l-4.377,0.515l-1.545,-1.416l-2.574,-0.901l0.514,-2.704l-1.286,-2.445l1.286,-1.545l2.447,-1.673l6.180,-2.961l1.800,-0.515l-0.256,-1.159l-3.734,-1.286l-0.901,-1.031l-0.128,-4.120l-4.250,-1.801l-3.475,-1.417l1.545,-0.643l2.961,1.416l3.606,-0.129l2.832,0.644l2.572,-1.159l1.289,-2.060l4.247,-0.900l3.476,1.157l1.159,-1.803z'</body><body package="Roassal-Core">France	^ 'M481.903,93.673l1.287,0.773l3.861,0.514l-1.416,1.802l-0.257,1.931l-0.772,0.515l-1.288,-0.257l0.130,0.644l-1.932,1.545l0,1.158l1.288,-0.386l0.901,1.159l-0.128,0.772l0.772,1.029l-0.901,0.774l0.642,2.058l1.418,0.386l-0.258,1.160l-2.446,1.544l-5.277,-0.772l-3.992,0.901l-0.257,1.673l-3.090,0.258l-3.089,-1.158l-0.901,0.514l-5.021,-1.158l-1.029,-1.030l1.416,-1.674l0.515,-5.277l-2.832,-2.833l-2.060,-1.415l-3.991,-1.031l-0.386,-1.931l3.604,-0.644l4.506,0.773l-0.901,-3.090l2.575,1.159l6.306,-2.060l0.775,-2.317l2.317,-0.515l0.385,1.031l1.287,0l1.288,1.029l1.801,1.287l1.416,-0.257l2.318,1.286l0.643,0.259l-0.773,0.129zM488.854,112.082l1.674,-1.030l0.514,2.317l-0.899,2.188l-1.289,-0.643l-0.644,-1.803l-0.644,1.029z'</body><body package="Roassal-Core">FrenchGuyana	^ 'M319.834,211.463l0.902,0.256l2.058,0.644l2.833,2.317l0.386,1.159l-1.545,2.446l-0.772,1.930l-1.030,1.031l-1.287,0.256l-0.387,-0.772l-0.643,-0.128l-0.772,0.644l-1.287,-0.516l0.772,-1.158l0.257,-1.159l0.386,-1.157l-1.029,-1.674l-0.259,-1.803l-1.417,2.316z'</body><body package="Roassal-Core">GM	^ 'M419.855,191.51l0.387,-1.160l2.961,-0.129l0.515,-0.643l0.901,0l1.030,0.643l0.901,0l0.900,-0.387l0.516,0.773l-1.159,0.644l-1.158,-0.128l-1.159,-0.516l-1.030,0.644l-0.514,0l-0.644,0.386l2.447,0.127z'</body><body package="Roassal-Core">Gabon	^ 'M495.162,237.723l-2.833,-2.703l-1.801,-2.317l-1.544,-2.704l0,-0.900l0.642,-0.902l0.644,-1.931l0.515,-2.060l0.903,-0.128l3.988,0l-0.128,-3.219l1.288,-0.129l1.673,0.387l1.674,-0.387l0.256,0.129l-0.127,1.160l0.643,1.415l2.060,-0.258l0.642,0.515l-1.157,3.219l1.286,1.545l0.258,2.059l-0.258,1.802l-0.900,1.288l-2.319,-0.129l-1.416,-1.287l-0.256,1.287l-1.802,0.257l-0.901,0.643l1.029,1.804l2.059,-1.544z'</body><body package="Roassal-Core">Georgia	^ 'M577.161,115.042l0.387,-1.159l-0.643,-1.801l-1.546,-1.030l-1.544,-0.258l-0.900,-0.772l0.256,-0.387l2.318,0.516l3.990,0.386l3.604,1.287l0.517,0.515l1.671,-0.387l2.446,0.516l0.772,1.158l1.803,0.644l-0.771,0.257l1.287,1.545l-0.258,0.258l-1.545,-0.130l-1.930,-0.772l-0.644,0.387l-3.734,0.515l-2.702,-1.416l2.834,-0.128z'</body><body package="Roassal-Core">Germany	^ 'M491.945,78.87l0.127,1.028l2.703,0.644l-0.128,0.901l2.831,-0.514l1.417,-0.644l3.090,1.029l1.287,0.901l0.642,1.287l-0.770,0.773l1.029,0.901l0.644,1.417l-0.257,1.030l1.158,1.672l-1.287,0.259l-0.645,-0.259l-0.642,0.516l-1.932,0.515l-1.029,0.644l-1.932,0.643l0.387,0.773l0.386,1.157l1.288,0.645l1.544,1.159l-0.901,1.158l-1.030,0.386l0.387,1.802l-0.258,0.386l-0.773,-0.515l-1.287,-0.128l-1.931,0.515l-2.446,-0.128l-0.387,0.772l-1.285,-0.772l-0.903,0.128l-2.832,-0.772l-0.515,0.514l-2.317,0l0.257,-1.931l1.416,-1.802l-3.861,-0.514l-1.287,-0.773l0.129,-1.159l-0.516,-0.515l0.258,-1.930l-0.386,-2.833l1.544,0l0.773,-0.901l0.644,-2.574l-0.515,-0.902l0.515,-0.515l2.317,-0.129l0.385,0.516l1.933,-1.288l-0.645,-1.029l-0.129,-1.544l2.060,0.385l-1.675,0.385z'</body><body package="Roassal-Core">Ghana	^ 'M468.13,210.946l-4.249,1.674l-1.545,0.901l-2.446,0.773l-2.317,-0.773l0.129,-1.030l-1.159,-2.317l0.644,-3.088l1.158,-2.190l-0.772,-3.861l-0.386,-2.060l0.129,-1.545l4.634,-0.129l1.289,0.258l0.770,-0.514l1.288,0.256l-0.258,0.772l1.159,1.417l0,1.932l0.258,2.187l0.643,1.030l-0.514,2.318l0.128,1.416l0.773,1.673l-0.644,-0.900z'</body><body package="Roassal-Core">GreatBritian	^ 'M444.829,78.483l2.317,-0.129l2.832,1.673l-1.416,1.803l-2.060,-0.516l-1.673,0l0.515,-1.416l0.515,1.415zM453.84,69.214l3.347,-0.257l-2.961,2.960l2.832,-0.386l2.832,0l-0.643,2.189l-2.446,2.446l2.832,0.256l2.575,3.348l1.801,0.515l1.674,3.089l0.773,1.030l3.347,0.515l-0.387,1.674l-1.416,0.772l1.159,1.416l-2.446,1.417l-3.605,0l-4.633,0.772l-1.159,-0.516l-1.803,1.159l-2.574,-0.257l-1.802,1.030l-1.415,-0.515l3.860,-2.832l2.446,-0.644l-4.247,-0.386l-0.772,-1.030l2.831,-0.901l-1.416,-1.416l0.515,-1.803l3.991,0.258l0.386,-1.545l-1.803,-1.674l-3.346,-0.515l-0.645,-0.772l1.031,-1.158l-0.901,-0.772l-1.416,1.286l-0.258,-2.573l-1.287,-1.417l0.901,-2.704l2.189,-2.187l-2.059,-0.128z'</body><body package="Roassal-Core">Greece	^ 'M536.099,131.906l-0.387,0.773l-3.861,0.257l0,-0.515l-3.219,-0.515l0.387,-1.159l1.543,0.902l2.060,-0.129l2.059,0.257l-0.127,0.387l-1.545,0.258zM521.808,116.973l1.804,-0.258l1.029,-0.643l1.417,0.128l0.515,-0.513l0.514,-0.130l1.932,0.130l2.187,-0.773l1.930,1.029l2.445,-0.256l0,-1.417l1.289,0.772l-0.771,1.673l-0.645,0.258l-1.674,0l-1.416,-0.258l-3.218,0.644l1.802,1.545l-1.287,0.387l-1.543,0l-1.418,-1.417l-0.514,0.645l0.643,1.672l1.289,1.159l-1.031,0.644l1.545,1.286l1.286,0.774l0.130,1.545l-2.575,-0.773l0.772,1.417l-1.672,0.256l1.028,2.317l-1.800,0.129l-2.189,-1.287l-1.030,-2.059l-0.516,-1.803l-1.030,-1.288l-1.287,-1.545l-0.258,-0.772l1.288,-1.287l0.128,-0.901l0.901,-0.386l0,0.644z'</body><body package="Roassal-Core">Greenland	^ 'M339.272,4.333l9.011,-1.544l9.525,0.128l3.348,-1.029l9.526,-0.258l21.497,0.386l16.864,2.060l-4.892,1.029l-10.298,0.129l-14.546,0.258l1.287,0.515l9.654,-0.257l8.110,0.901l5.149,-0.773l2.317,0.901l-2.961,1.545l6.824,-1.030l13.130,-1.030l7.981,0.515l1.545,1.159l-10.942,1.931l-1.546,0.644l-8.625,0.514l6.180,0.129l-3.089,1.931l-2.189,1.802l0.129,2.961l3.218,1.674l-4.249,0.128l-4.376,0.902l4.893,1.415l0.643,2.318l-2.832,0.257l3.476,2.317l-5.923,0.129l3.091,1.159l-0.902,0.900l-3.733,0.387l-3.862,0l3.476,1.931l0,1.158l-5.407,-1.158l-1.287,0.773l3.604,0.644l3.476,1.673l1.030,2.188l-4.763,0.515l-2.060,-1.031l-3.347,-1.544l0.901,1.803l-3.090,1.416l7.081,0.129l3.733,0.128l-7.208,2.316l-7.338,2.189l-7.852,0.902l-2.962,0l-2.831,1.030l-3.734,2.832l-5.793,1.931l-1.930,0.128l-3.604,0.644l-3.862,0.644l-2.317,1.673l0,1.802l-1.288,1.802l-4.505,2.189l1.158,2.060l-1.287,2.188l-1.287,2.703l-3.863,0.129l-3.989,-2.188l-5.278,0l-2.704,-1.545l-1.802,-2.574l-4.635,-3.347l-1.415,-1.803l-0.258,-2.316l-3.732,-2.576l0.900,-1.930l-1.802,-1.031l2.703,-3.088l3.991,-1.031l1.159,-1.158l0.515,-2.059l-3.476,-0.259l-6.179,-1.416l2.189,0l6.049,0l-4.634,-1.801l-2.446,-0.902l-4.892,-0.258l2.960,-2.445l-1.544,-1.030l-2.188,-1.931l-3.218,-2.832l-3.475,-1.030l0.128,-1.159l-7.338,-1.545l-5.664,-0.257l-7.208,0.129l-6.565,0.257l-3.090,-0.901l-4.763,-1.673l7.081,-0.901l5.405,-0.130l-11.457,-0.643l-6.050,-1.158l0.387,-1.030l10.169,-1.288l9.784,-1.287l1.030,-1.030l-7.210,-0.901l2.318,-1.029l9.397,-1.931l3.862,-0.258l-1.159,-1.287l6.437,-0.644l8.238,-0.387l8.368,-0.128l2.832,0.901l7.209,-1.545l6.436,1.030l3.347,1.159l6.050,0l-6.436,-1.545l-0.386,1.159z'</body><body package="Roassal-Core">Guatemala	^ 'M222.516,189.963l-1.417,-0.514l-1.673,0l-1.159,-0.515l-1.544,-1.159l0.128,-0.773l0.257,-0.643l-0.385,-0.514l1.416,-2.188l3.347,0l0.128,-0.903l-0.385,-0.128l-0.387,-0.644l-1.030,-0.643l-0.901,-0.901l1.158,0l0,-1.416l2.575,0l2.446,0l0,2.060l-0.257,3.089l0.772,0l0.901,0.515l0.258,-0.386l0.771,0.257l-1.158,1.030l-1.287,0.772l-0.257,0.516l0.257,0.514l-0.515,0.773l-0.644,0.129l0.129,0.258l-0.515,0.385l-0.901,0.644l0.128,-0.385z'</body><body package="Roassal-Core">Guinea	^ 'M442.512,206.313l-0.772,-0.129l-0.515,1.158l-0.772,-0.128l-0.515,-0.515l0.128,-1.029l-1.158,-1.674l-0.644,0.257l-0.643,0.130l-0.644,0.127l0,-1.030l-0.387,-0.642l0,-0.773l-0.515,-1.159l-0.772,-1.029l-2.188,0l-0.644,0.514l-0.772,0.129l-0.386,0.515l-0.387,0.772l-1.415,1.159l-1.159,-1.544l-1.030,-1.031l-0.644,-0.386l-0.772,-0.515l-0.257,-1.159l-0.386,-0.643l-0.773,-0.515l1.159,-1.287l0.901,0.128l0.644,-0.515l0.643,0l0.386,-0.386l-0.257,-0.901l0.257,-0.257l0.129,-0.901l1.287,0l1.931,0.643l0.643,0l0.130,-0.258l1.544,0.129l0.387,-0.129l0.128,1.030l0.387,0l0.772,-0.387l0.386,0.130l0.772,0.643l1.159,0.258l0.772,-0.644l0.773,-0.387l0.643,-0.385l0.515,0.129l0.644,0.643l0.386,0.644l1.030,1.158l-0.516,0.645l-0.128,0.900l0.644,-0.257l0.257,0.386l-0.128,0.773l0.772,0.772l-0.515,0.257l-0.129,0.901l0.516,1.031l0.772,2.187l-1.030,0.387l-0.258,0.257l0.129,0.644l-0.129,1.159l0.386,0z'</body><body package="Roassal-Core">GuineaBissau	^ 'M424.49,197.173l-1.416,-1.030l-1.159,-0.257l-0.643,-0.773l0,-0.386l-0.772,-0.515l-0.258,-0.644l1.545,-0.386l0.901,0.129l0.644,-0.386l5.020,0.129l-0.129,0.901l-0.257,0.257l0.257,0.901l-0.386,0.386l-0.643,0l-0.644,0.515l-0.901,-0.128l1.159,-1.287z'</body><body package="Roassal-Core">Guyana	^ 'M304.257,204.383l1.804,1.028l1.672,1.803l0,1.415l1.030,0l1.417,1.289l1.157,1.028l-0.514,2.319l-1.545,0.772l0.129,0.643l-0.514,1.416l1.157,1.931l0.902,0l0.385,1.545l1.545,2.317l-0.643,0.130l-1.416,-0.259l-0.901,0.644l-1.288,0.515l-0.772,0.128l-0.386,0.515l-1.287,-0.128l-1.674,-1.288l-0.128,-1.287l-0.773,-1.287l0.515,-2.316l0.772,-0.902l-0.644,-1.288l-0.900,-0.386l0.257,-1.159l-0.644,-0.643l-1.287,0.129l-1.930,-2.061l0.772,-0.772l0,-1.287l1.673,-0.385l0.644,-0.516l-0.902,-1.029l0.130,-0.902l-2.187,1.672z'</body><body package="Roassal-Core">Haiti	^ 'M268.085,173.357l1.673,0.129l2.317,0.387l0.259,1.416l-0.259,1.029l-0.643,0.515l0.643,0.772l0,0.773l-1.802,-0.515l-1.287,0.257l-1.673,-0.257l-1.159,0.515l-1.545,-0.773l0.258,-0.900l2.446,0.385l2.060,0.258l1.029,-0.643l-1.288,-1.159l0,-1.030l-1.673,-0.387l-0.644,0.772z'</body><body package="Roassal-Core">Honduras	^ 'M229.981,192.023l-0.385,-0.900l-0.902,-0.258l0.258,-1.031l-0.386,-0.256l-0.515,-0.258l-1.287,0.386l0,-0.386l-0.902,-0.386l-0.515,-0.643l-0.772,-0.129l0.515,-0.773l-0.257,-0.514l0.257,-0.516l1.287,-0.772l1.158,-1.030l0.258,0.129l0.644,-0.386l0.772,-0.129l0.257,0.258l0.386,-0.129l1.288,0.257l1.288,-0.128l0.772,-0.258l0.386,-0.258l0.773,0.129l0.643,0.129l0.772,0l0.515,-0.258l1.287,0.387l0.387,0l0.772,0.515l0.773,0.643l1.030,0.387l0.643,0.772l-0.901,-0.128l-0.386,0.386l-0.902,0.386l-0.643,0l-0.643,0.385l-0.516,-0.127l-0.514,-0.517l-0.258,0.130l-0.258,0.643l-0.257,0l-0.129,0.516l-0.900,0.771l-0.515,0.258l-0.258,0.386l-0.773,-0.515l-0.643,0.643l-0.515,0l-0.643,0.129l0,1.288l-0.387,0l-0.257,0.644l0.902,-0.128z'</body><body package="Roassal-Core">Hungary	^ 'M508.937,100.753l0.900,-1.674l-0.643,-0.643l1.545,0l0.257,-1.158l1.288,0.772l1.028,0.257l2.318,-0.257l0.129,-0.644l1.158,0l1.287,-0.515l0.258,0.258l1.287,-0.387l0.645,-0.643l0.900,-0.129l2.832,0.772l0.645,-0.257l1.415,0.773l0.256,0.643l-1.671,0.643l-1.290,1.803l-1.673,1.802l-2.059,0.515l-1.672,-0.129l-2.060,0.772l-1.032,0.387l-2.316,-0.515l-1.930,-1.159l-0.902,-0.386l-0.515,-0.901l0.385,0z'</body><body package="Roassal-Core">Iceland	^ 'M426.163,47.974l-0.643,1.672l3.089,1.932l-3.604,2.059l-7.723,1.802l-2.318,0.515l-3.475,-0.385l-7.595,-0.902l2.703,-1.158l-5.922,-1.287l4.763,-0.516l-0.128,-0.900l-5.664,-0.644l1.930,-1.674l3.991,-0.386l4.248,1.803l4.119,-1.417l3.348,0.645l4.376,-1.417l-4.505,-0.258z'</body><body package="Roassal-Core">India	^ 'M674.866,131.391l2.961,3.089l-0.256,2.189l1.030,1.416l-0.129,1.416l-1.932,-0.385l0.773,2.960l2.704,1.674l3.732,1.930l-1.672,1.160l-1.160,2.573l2.703,1.031l2.447,1.287l3.604,1.545l3.603,0.386l1.674,1.287l2.059,0.257l3.219,0.644l2.189,0l0.385,-1.158l-0.385,-1.674l0.258,-1.159l1.543,-0.514l0.258,2.059l0.129,0.516l2.447,1.029l1.672,-0.386l2.189,0.129l2.188,0l0.257,-1.674l-1.158,-0.901l2.188,-0.258l2.445,-2.059l3.092,-1.674l2.314,0.643l1.934,-1.158l1.285,1.674l-0.900,1.159l2.832,0.386l0.258,1.029l-1.030,0.515l0.256,1.674l-1.930,-0.515l-3.474,1.802l0.127,1.545l-1.545,2.317l-0.127,1.287l-1.160,2.189l-2.188,-0.515l0,2.704l-0.642,0.900l0.255,1.159l-1.287,0.643l-1.416,-4.247l-0.771,0l-0.387,1.802l-1.545,-1.416l0.901,-1.545l1.158,-0.129l1.289,-2.317l-1.545,-0.515l-2.574,0.128l-2.574,-0.386l-0.260,-1.931l-1.285,-0.128l-2.061,-1.159l-1.031,1.803l2.060,1.415l-1.802,1.030l-0.514,1.031l1.672,0.643l-0.514,1.674l0.901,2.059l0.515,2.188l-0.387,1.030l-1.931,-0.128l-3.217,0.643l0.129,1.931l-1.416,1.674l-3.861,1.802l-3.092,3.218l-2.059,1.675l-2.574,1.673l-0.129,1.287l-1.287,0.644l-2.447,1.029l-1.287,0.129l-0.772,2.059l0.645,3.476l0.127,2.189l-1.159,2.574l0,4.635l-1.414,0.128l-1.289,2.060l0.903,0.901l-2.448,0.773l-0.900,1.802l-1.158,0.772l-2.576,-2.574l-1.159,-3.734l-1.027,-2.703l-1.031,-1.287l-1.416,-2.575l-0.645,-3.347l-0.513,-1.674l-2.448,-3.733l-1.029,-5.278l-0.900,-3.346l0,-3.347l-0.516,-2.446l-3.861,1.544l-1.931,-0.257l-3.476,-3.347l1.287,-0.901l-0.772,-1.159l-3.218,-2.188l1.801,-1.802l5.922,0l-0.514,-2.317l-1.545,-1.417l-0.258,-2.059l-1.802,-1.159l2.961,-2.832l3.218,0.129l2.704,-2.833l1.802,-2.702l2.575,-2.704l0,-1.931l2.187,-1.545l-2.059,-1.287l-1.031,-1.802l-0.900,-2.447l1.287,-1.157l4.121,0.643l2.961,-0.386l-2.572,2.189z'</body><body package="Roassal-Core">Indonesia	^ 'M801.921,250.982l0.258,0.515l0,0.773l-1.674,2.060l-2.317,0.515l-0.386,-0.257l0.258,-0.902l1.158,-1.674l-2.703,1.030zM826.767,245.576l-0.258,-2.058l0.515,-0.903l0.516,-1.030l0.643,0.901l0,1.286l1.416,-1.804zM845.175,242.742l0,8.755l-2.447,-2.188l-2.702,-0.514l-0.644,0.771l-3.475,0.129l1.156,-2.189l1.676,-0.772l-0.644,-2.962l-1.287,-2.317l-5.280,-2.187l-2.187,-0.256l-3.992,-2.448l-0.899,1.288l-1.031,0.257l-0.516,-1.030l0,-1.157l-2.058,-1.288l2.832,-1.030l1.931,0l-0.259,-0.644l-3.860,0l-1.160,-1.674l-2.314,-0.515l-1.161,-1.287l3.606,-0.643l1.414,-0.902l4.248,1.160l0.516,1.028l0.771,4.248l2.705,1.676l2.317,-2.833l3.090,-1.674l2.316,0l2.318,0.901l2.059,1.030l2.832,0.515l-0.129,-8.752zM761.116,223.434l1.801,1.416l1.803,-0.514l1.672,0.257l1.545,-1.417l1.289,-0.257l2.574,0.772l2.189,-0.515l1.414,-3.862l1.032,-0.901l0.900,-3.089l3.090,0l2.316,0.515l-1.545,2.446l2.059,2.574l-0.514,1.160l3.090,2.574l-3.217,0.257l-0.902,1.802l0.129,2.447l-2.576,1.930l-0.129,2.575l-1.030,4.119l-0.386,-0.901l-3.088,1.158l-1.031,-1.542l-1.930,-0.259l-1.287,-0.773l-3.219,0.901l-1.029,-1.287l-1.801,0.128l-2.189,-0.256l-0.387,-3.606l-1.416,-0.772l-1.287,-2.317l-0.260,-2.317l0.260,-2.574l1.545,-1.674l-0.515,-1.802zM813.765,234.505l2.961,0.772l0.902,2.059l-2.190,-1.029l-2.318,-0.256l-1.545,0.128l-1.801,0l0.643,-1.545l-3.348,0.129zM807.069,237.209l-1.929,-0.516l-0.516,-1.158l2.705,-0.129l0.643,0.901l0.903,-0.902zM809.903,221.117l0.129,1.416l1.674,0.258l0.256,1.158l-0.256,2.317l-1.289,-0.258l-0.514,1.674l1.159,1.417l-0.774,0.256l-1.029,-1.673l-0.772,-3.476l0.514,-2.060l-0.902,1.029zM796.386,224.593l3.090,-0.130l2.703,-1.930l0.386,0.643l-2.060,2.704l-2.059,0.515l-2.574,-0.644l-4.506,0.257l-2.316,0.387l-0.387,1.931l2.316,2.445l1.545,-1.158l5.022,-1.031l-0.258,1.289l-1.158,-0.387l-1.160,1.545l-2.446,1.030l2.575,3.476l-0.514,0.903l2.445,3.216l0,1.674l-1.416,0.771l-1.029,-0.901l1.287,-2.186l-2.703,1.028l-0.645,-0.772l0.385,-1.031l-1.930,-1.544l0.131,-2.574l-1.804,0.773l0.257,3.088l0.129,3.862l-1.800,0.387l-1.161,-0.774l0.774,-2.443l-0.389,-2.574l-1.156,-0.131l-0.772,-1.802l1.159,-1.802l0.384,-2.060l1.288,-4.120l0.515,-1.029l2.317,-2.060l2.189,0.772l-3.346,-0.387zM789.306,254.588l-3.604,-1.804l2.574,-0.643l1.416,0.902l0.903,0.771l-0.131,0.774l1.158,0zM792.138,249.953l1.802,-0.129l2.317,-1.029l-0.385,1.544l-3.992,0.643l-3.604,-0.257l0,-1.030l2.188,-0.515l-1.674,-0.773zM783.771,249.566l1.673,-0.257l0.645,1.158l-3.090,0.515l-1.803,0.387l-1.545,0l1.030,-1.674l1.416,0l0.773,-0.900l-0.901,-0.771zM757.511,244.287l0.386,0.902l5.149,0.258l0.514,-1.031l5.021,1.288l1.029,1.674l3.991,0.515l3.349,1.673l-3.092,1.032l-2.961,-1.160l-2.445,0.128l-2.832,-0.257l-2.445,-0.514l-3.219,-0.902l-1.932,-0.387l-1.158,0.387l-4.890,-1.159l-0.387,-1.158l-2.574,-0.129l1.929,-2.574l3.219,0.127l2.190,1.031l-1.158,-0.256zM746.438,229.871l0.387,1.932l0.903,1.415l2.058,0.257l1.289,1.802l-0.644,3.347l-0.129,4.118l-2.961,0l-2.317,-2.187l-3.476,-2.188l-1.158,-1.674l-2.059,-2.188l-1.289,-2.060l-2.061,-3.733l-2.314,-2.189l-0.775,-2.317l-1.028,-2.187l-2.447,-1.674l-1.416,-2.318l-2.059,-1.416l-2.705,-3.090l-0.256,-1.287l1.674,0.129l4.248,0.515l2.317,2.575l2.058,1.803l1.547,1.157l2.572,2.962l2.706,0l2.187,1.801l1.674,2.318l2.060,1.158l-1.158,2.189l1.545,1.030l-1.027,0z'</body><body package="Roassal-Core">Iran	^ 'M610.502,126.756l2.317,-0.513l1.932,-1.546l1.803,0.129l1.157,-0.515l1.932,0.257l2.961,1.288l2.188,0.387l3.088,2.317l2.060,0.128l0.129,2.188l-1.029,3.477l-0.773,1.930l1.158,0.386l-1.158,1.416l0.902,2.188l0.256,1.674l2.060,0.515l0.129,1.673l-2.445,2.447l1.414,1.415l1.031,1.674l2.574,1.159l0.128,2.446l1.288,0.386l0.259,1.287l-3.992,1.288l-1.030,3.218l-5.020,-0.902l-2.961,-0.515l-2.961,-0.386l-1.160,-3.346l-1.285,-0.515l-2.058,0.515l-2.706,1.287l-3.345,-0.901l-2.705,-2.060l-2.575,-0.773l-1.800,-2.446l-2.061,-3.604l-1.416,0.387l-1.674,-0.902l-1.029,1.030l-1.545,-1.416l0,-1.416l-0.901,0l0.514,-1.931l-1.415,-2.060l-3.347,-1.416l-1.802,-2.575l0.643,-2.187l1.289,-0.902l-0.130,-1.545l-1.802,-0.772l-1.803,-3.476l-0.128,0l-1.288,-1.931l0.516,-0.901l-0.773,-3.089l1.802,-0.772l0.387,1.028l1.415,1.288l1.804,0.386l1.029,-0.129l3.089,-1.930l1.030,-0.258l0.773,0.773l-0.902,1.415l1.674,1.417l0.643,-0.129l0.901,1.931l2.575,0.516l1.803,1.415l3.862,0.385l4.247,-0.643l-0.257,0.644z'</body><body package="Roassal-Core">Iraq	^ 'M585.658,126.628l0.128,0l1.803,3.476l1.802,0.772l0.130,1.545l-1.289,0.902l-0.643,2.187l1.802,2.575l3.347,1.416l1.415,2.060l-0.514,1.931l0.901,0l0,1.416l1.545,1.416l-1.674,-0.128l-1.803,-0.258l-1.930,2.703l-5.020,-0.258l-7.596,-5.406l-3.990,-1.931l-3.218,-0.773l-1.158,-3.218l6.051,-2.832l1.029,-3.218l-0.258,-1.931l1.417,-0.773l1.416,-1.673l1.158,-0.385l3.091,0.385l0.899,0.643l1.287,-0.385l0.128,0.258z'</body><body package="Roassal-Core">Ireland	^ 'M448.562,81.83l0.387,1.931l-2.060,2.445l-4.764,1.544l-3.732,-0.385l2.188,-2.832l-1.415,-2.703l3.604,-2.060l2.059,-1.287l0.515,1.415l-0.515,1.416l1.673,0l-2.060,-0.516z'</body><body package="Roassal-Core">Israel	^ 'M561.458,138.857l-0.516,0.902l-0.900,-0.387l-0.645,1.803l0.774,0.258l-0.774,0.385l-0.128,0.644l1.287,-0.257l0.130,1.029l-1.417,4.249l-1.674,-4.635l0.773,-0.901l-0.258,-0.129l0.772,-1.287l0.515,-1.931l0.385,-0.773l0.130,0l0.900,0l0.259,-0.515l0.643,0l0,1.160l0.256,-0.385z'</body><body package="Roassal-Core">Italy	^ 'M493.361,100.624l1.672,0.386l0.258,-0.514l2.703,-0.386l0.644,0.900l3.734,0.644l-0.259,1.417l0.646,1.029l-2.063,-0.386l-2.315,1.030l0.257,1.287l-0.387,0.772l0.900,1.417l2.577,1.287l1.287,2.317l2.961,2.189l2.187,-0.130l0.645,0.644l-0.773,0.515l2.445,1.030l1.933,0.772l2.315,1.416l0.257,0.516l-0.513,0.900l-1.417,-1.157l-2.316,-0.516l-1.159,1.803l1.931,0.901l-0.387,1.416l-1.030,0.257l-1.544,2.317l-1.029,0.129l0,-0.772l0.514,-1.417l0.644,-0.643l-1.158,-1.545l-0.772,-1.417l-1.160,-0.256l-0.772,-1.159l-1.673,-0.515l-1.159,-1.030l-2.060,-0.257l-2.061,-1.159l-2.444,-1.802l-1.933,-1.545l-0.772,-2.703l-1.286,-0.258l-2.189,-0.901l-1.288,0.386l-1.545,1.287l-1.157,0.130l0.258,-1.160l-1.418,-0.386l-0.642,-2.058l0.901,-0.774l-0.772,-1.029l0.128,-0.772l1.160,0.643l1.287,-0.128l1.543,-1.031l0.387,0.516l1.288,-0.129l0.643,-1.030l1.932,0.257l1.158,-0.386l-0.258,1.159zM504.944,124.183l2.061,-0.258l-0.901,2.188l0.387,0.773l-0.644,1.415l-2.061,-1.030l-1.286,-0.256l-3.733,-1.416l0.384,-1.288l3.091,0.257l-2.702,0.385zM488.726,116.844l1.287,-0.901l1.675,1.931l-0.387,3.605l-1.288,-0.258l-1.029,0.902l-1.032,-0.644l-0.128,-3.219l-0.642,-1.545l-1.544,-0.129z'</body><body package="Roassal-Core">IvoryCoast	^ 'M457.573,213.521l-1.287,0l-1.802,-0.514l-1.802,0l-3.219,0.514l-1.802,0.773l-2.703,1.030l-0.516,-0.129l0.259,-2.188l0.257,-0.387l-0.129,-1.030l-1.159,-1.158l-0.772,-0.129l-0.901,-0.772l0.644,-1.158l-0.258,-1.287l0.129,-0.773l0.386,0l0.129,-1.159l-0.129,-0.644l0.258,-0.257l1.030,-0.387l-0.772,-2.187l-0.516,-1.031l0.129,-0.901l0.515,-0.257l0.387,-0.258l0.772,0.386l2.059,0l0.514,-0.772l0.516,0.129l0.772,-0.385l0.387,1.157l0.643,-0.257l1.030,-0.515l1.287,0.643l0.387,0.902l1.286,0.515l0.902,-0.644l1.287,-0.129l1.802,0.773l0.772,3.861l-1.158,2.190l-0.644,3.088l1.159,2.317l0.129,-1.030z'</body><body package="Roassal-Core">Jamacia	^ 'M256.242,177.22l1.802,0.128l1.416,0.644l0.515,0.772l-1.931,0.129l-0.772,0.386l-1.544,-0.386l-1.545,-1.030l0.385,-0.643l1.030,-0.130l-0.644,-0.130z'</body><body package="Roassal-Core">Japan	^ 'M847.491,121.479l-2.574,2.704l0.129,2.703l-1.031,2.188l0.386,1.287l-1.287,1.931l-3.476,1.288l-4.762,0.128l-3.861,3.090l-1.801,-1.030l-0.129,-1.932l-4.635,0.517l-3.219,1.287l-3.089,0l2.703,2.059l-1.803,4.506l-1.801,1.159l-1.287,-1.031l0.643,-2.445l-1.672,-0.772l-1.031,-1.804l2.445,-0.900l1.416,-1.674l2.705,-1.415l2.059,-1.803l5.277,-0.773l2.961,0.516l2.832,-4.764l1.803,1.288l3.861,-2.704l1.545,-1.029l1.674,-3.347l-0.387,-2.961l1.158,-1.803l2.832,-0.386l1.416,3.734l0,-2.188zM854.829,108.606l1.930,-1.159l0.515,2.961l-3.990,0.772l-2.316,2.703l-4.250,-1.931l-1.414,2.962l-3.090,0.128l-0.387,-2.703l1.416,-2.060l2.832,-0.128l0.774,-3.734l0.771,-2.188l3.219,2.832l2.060,0.901l-1.930,-0.644zM821.874,136.798l1.416,-1.545l1.545,0.257l1.160,-1.157l1.930,0.643l0.387,0.900l-1.545,1.674l-1.159,-0.901l-1.287,0.643l-0.773,1.545l-1.801,-0.772l-0.127,1.287z'</body><body package="Roassal-Core">Jordan	^ 'M560.942,139.759l0.516,-0.902l2.960,1.031l5.278,-2.833l1.158,3.218l-0.514,0.516l-5.407,1.287l2.703,2.703l-0.901,0.515l-0.515,0.902l-2.060,0.386l-0.643,0.901l-1.160,0.900l-2.960,-0.514l-0.128,-0.386l1.417,-4.249l-0.130,-1.029l0.386,-0.902l0,1.544z'</body><body package="Roassal-Core">Kazakhstan	^ 'M656.46,113.111l-1.547,0.515l-3.603,1.802l-1.160,1.931l-1.030,0.129l-0.771,-1.288l-3.347,-0.128l-0.644,-2.189l-1.287,0l0.258,-2.703l-3.219,-2.060l-4.633,0.259l-3.219,0.385l-2.574,-2.446l-2.189,-1.029l-4.120,-1.931l-0.515,-0.129l-6.951,1.544l0.130,9.914l-1.419,0.128l-1.930,-2.060l-1.800,-0.772l-3.090,0.515l-1.160,0.900l-0.127,-0.643l0.642,-1.159l-0.515,-0.900l-3.089,-0.902l-1.286,-2.446l-1.416,-0.644l-0.130,-0.901l2.702,0.258l0,-1.931l2.320,-0.514l2.316,0.385l0.515,-2.574l-0.387,-1.674l-2.704,0.129l-2.316,-0.644l-3.090,1.159l-2.574,0.643l-1.416,-0.514l0.387,-1.416l-1.803,-1.803l-1.931,0.129l-2.317,-1.802l1.545,-2.060l-0.772,-0.515l2.186,-2.960l2.705,1.544l0.387,-1.931l5.535,-2.962l4.248,-0.127l5.922,1.931l3.088,1.029l2.961,-1.158l4.250,0l3.474,1.416l0.773,-0.772l3.732,0l0.644,-1.159l-4.376,-1.931l2.702,-1.288l-0.515,-0.772l2.575,-0.644l-1.929,-1.931l1.158,-0.901l10.039,-0.901l1.418,-0.644l6.693,-1.028l2.446,-1.160l4.763,0.644l0.901,2.833l2.832,-0.645l3.474,0.901l-0.258,1.416l2.577,-0.128l6.822,-2.575l-1.029,0.901l3.474,2.060l5.922,6.822l1.545,-1.416l3.605,1.546l3.860,-0.644l1.545,0.514l1.289,1.545l1.930,0.515l1.158,1.159l3.478,-0.387l1.414,1.675l-2.060,1.801l-2.317,0.128l-0.127,2.704l-1.416,1.288l-5.408,-0.901l-1.931,4.892l-1.415,0.514l-5.279,1.159l2.445,4.635l-1.931,0.643l0.260,1.545l-1.674,-0.386l-1.287,-0.902l-3.993,-0.386l-4.505,0l-1.030,0.258l-3.732,-1.159l-1.545,0.644l-0.514,1.545l-4.378,-0.902l-1.801,0.386l0.514,-1.159z'</body><body package="Roassal-Core">Kenya	^ 'M561.972,214.552l2.318,0l3.089,2.574l0.772,0.130l1.159,0.385l0.900,-0.258l1.031,0.387l1.030,-1.159l2.445,-1.287l1.931,1.158l1.030,-0.256l-2.188,2.960l-0.130,10.169l1.931,2.189l-1.931,1.030l-0.514,1.416l-1.030,0.258l-0.515,1.545l-0.902,1.158l-0.513,1.673l-1.031,1.157l-4.119,-2.445l-0.256,-2.059l-10.042,-5.793l0,-2.832l0,-0.772l1.931,-1.674l1.029,-1.931l-0.771,-1.930l-1.031,-2.704l-1.287,-1.930l1.416,-1.159l2.188,-2.447l1.159,0.515l0.772,1.288l-0.129,-0.644z'</body><body package="Roassal-Core">Kuwait	^ 'M594.411,146.196l0.645,1.158l-0.257,0.643l0.900,2.060l-1.930,0.129l-0.644,-1.288l-2.447,-0.257l1.930,-2.703l-1.803,-0.258z'</body><body package="Roassal-Core">Kyrgyzstan	^ 'M656.46,113.111l0.514,-1.159l1.801,-0.386l4.378,0.902l0.514,-1.545l1.545,-0.644l3.732,1.159l1.030,-0.258l4.505,0l3.993,0.386l1.287,0.902l1.674,0.386l-0.387,0.644l-4.248,1.416l-0.901,1.158l-3.476,0.258l-1.029,1.673l-2.834,-0.257l-1.930,0.514l-2.574,1.288l0.386,0.643l-0.773,0.516l-5.020,0.514l-3.347,-0.901l-2.961,0.129l0.257,-1.545l2.961,0.515l1.030,-0.900l2.060,0.257l3.346,-1.932l-3.090,-1.416l-1.929,0.772l-2.061,-1.030l2.317,-1.801l0.770,0.258z'</body><body package="Roassal-Core">Laos	^ 'M748.628,188.549l0.902,-1.288l0.127,-2.189l-2.187,-2.446l-0.129,-2.574l-2.059,-2.189l-2.060,-0.258l-0.516,1.030l-1.545,0l-0.900,-0.385l-2.832,1.544l0,-2.446l0.642,-2.832l-1.800,-0.128l-0.129,-1.546l-1.161,-0.900l0.516,-0.902l2.318,-1.802l0.256,0.643l1.418,0l-0.386,-3.089l1.416,-0.386l1.544,2.188l1.159,2.446l3.347,0l1.028,2.317l-1.672,0.772l-0.774,0.902l3.219,1.674l2.188,3.217l1.673,2.318l2.061,1.931l0.645,1.803l-0.387,2.702l-2.446,-0.901l-1.160,1.803l2.316,1.029z'</body><body package="Roassal-Core">Latvia	^ 'M521.938,76.037l0.128,-2.060l1.288,-1.674l2.573,-0.900l2.060,2.059l2.190,-0.128l0.513,-2.061l2.319,-0.514l1.158,0.387l2.316,1.028l2.318,0l1.286,0.644l0.129,1.287l0.901,1.545l-2.831,1.031l-1.674,0.514l-2.574,-1.288l-1.416,-0.257l-0.385,-0.515l-2.705,0.259l-4.506,-0.130l3.088,-0.773z'</body><body package="Roassal-Core">Lebanon	^ 'M561.714,137.312l-0.643,0l-0.259,0.515l-0.900,0l0.900,-2.187l1.289,-1.932l0.128,0l1.159,0.128l0.515,1.031l-1.546,1.029l-0.514,1.416l0.129,0z'</body><body package="Roassal-Core">Lesotho	^ 'M543.306,304.922l0.902,0.900l-0.773,1.287l-0.515,0.902l-1.417,0.385l-0.514,0.901l-1.030,0.258l-1.931,-2.059l1.416,-1.803l1.416,-1.029l1.287,-0.516l-1.159,-0.774z'</body><body package="Roassal-Core">Liberia	^ 'M444.442,215.195l-0.643,0l-2.832,-1.287l-2.446,-2.060l-2.317,-1.416l-1.802,-1.673l0.644,-0.902l0.129,-0.771l1.287,-1.546l1.159,-1.157l0.643,-0.130l0.644,-0.257l1.158,1.674l-0.128,1.029l0.515,0.515l0.772,0.128l0.515,-1.158l0.772,0.129l-0.129,0.773l0.258,1.287l-0.644,1.158l0.901,0.772l0.772,0.129l1.159,1.158l0.129,1.030l-0.257,0.387l0.259,-2.188z'</body><body package="Roassal-Core">Libya	^ 'M505.204,165.376l-1.932,1.030l-1.416,-1.544l-4.248,-1.159l-1.288,-1.674l-2.060,-1.158l-1.286,0.385l-0.902,-1.415l-0.127,-1.159l-1.546,-2.059l1.030,-1.030l-0.259,-1.673l0.387,-1.546l-0.256,-1.158l0.513,-2.318l-0.126,-1.158l-0.903,-2.446l1.287,-0.643l0.257,-1.031l-0.257,-1.158l1.803,-1.029l0.900,-0.902l1.288,-0.772l0.129,-2.060l3.217,0.901l1.030,-0.257l2.320,0.514l3.602,1.159l1.160,2.446l2.446,0.515l3.860,1.158l2.833,1.288l1.286,-0.644l1.288,-1.287l-0.643,-2.059l0.900,-1.288l1.932,-1.288l1.801,-0.385l3.734,0.514l0.901,1.287l1.029,0l0.773,0.516l2.703,0.257l0.645,0.901l-0.903,1.287l0.387,1.159l-0.772,1.673l0.901,2.189l0,9.526l0,9.912l0,5.408l-2.832,0l0,1.415l-11.069,-5.407l-10.815,-5.149l2.702,-1.416z'</body><body package="Roassal-Core">Lithuania	^ 'M526.442,80.67l-0.128,-0.772l0.259,-0.643l-1.289,-0.515l-2.702,-0.386l-0.644,-2.317l3.088,-0.773l4.506,0.130l2.705,-0.259l0.385,0.515l1.416,0.257l2.574,1.288l0.258,1.159l-2.189,0.901l-0.643,1.545l-2.961,0.901l-2.574,0l-0.644,-0.772l1.417,0.259z'</body><body package="Roassal-Core">Luxembourg	^ 'M481.516,91.999l0.516,0.515l-0.129,1.159l-0.773,0.129l-0.643,-0.259l0.385,-1.544l-0.644,0z'</body><body package="Roassal-Core">Madagascar	^ 'M598.66,260.508l0.772,1.160l0.643,1.801l0.385,3.219l0.775,1.287l-0.257,1.287l-0.518,0.773l-0.898,-1.545l-0.516,0.772l0.516,2.060l-0.258,1.158l-0.774,0.516l-0.129,2.316l-1.028,3.219l-1.417,3.604l-1.545,5.149l-1.031,3.734l-1.285,3.089l-2.188,0.644l-2.318,1.157l-1.544,-0.641l-2.189,-1.031l-0.773,-1.417l-0.129,-2.317l-0.900,-2.188l-0.258,-1.931l0.387,-1.930l1.287,-0.515l0,-0.901l1.288,-1.932l0.257,-1.802l-0.645,-1.285l-0.514,-1.676l-0.128,-2.446l0.900,-1.544l0.387,-1.673l1.287,-0.130l1.544,-0.514l0.901,-0.516l1.289,0l1.544,-1.544l2.189,-1.674l0.771,-1.415l-0.387,-1.159l1.159,0.386l1.545,-1.931l0,-1.544l0.901,-1.288l-0.902,-1.158z'</body><body package="Roassal-Core">Malawi	^ 'M558.368,258.062l-0.773,1.932l0.773,3.605l0.901,-0.130l1.030,0.902l1.030,1.930l0.258,3.476l-1.160,0.645l-0.772,1.801l-1.802,-1.674l-0.258,-1.931l0.645,-1.158l-0.130,-1.159l-1.159,-0.644l-0.643,0.259l-1.545,-1.289l-1.416,-0.770l0.772,-2.447l0.773,-0.902l-0.516,-2.317l0.645,-2.189l0.386,-0.644l-0.644,-2.315l-1.287,-1.160l2.704,0.514l1.415,1.933l-0.773,-3.732z'</body><body package="Roassal-Core">Malaysia	^ 'M740.39,210.174l0.642,0.258l1.545,1.673l1.160,1.803l0.129,1.803l-0.258,1.287l0.258,0.900l0.129,1.545l1.029,0.772l1.030,2.318l0,0.901l-1.932,0.257l-2.574,-2.059l-3.217,-2.060l-0.260,-1.416l-1.543,-1.802l-0.386,-2.188l-1.032,-1.546l0.387,-1.931l-0.643,-1.158l0.516,-0.385l2.188,1.157l0.129,1.287l1.802,-0.257l-0.901,1.159zM760.601,221.632l2.058,0.901l2.061,-0.514l0.513,-2.318l1.159,-0.515l3.218,-0.515l1.932,-2.189l1.287,-1.673l1.287,1.417l0.516,-0.902l1.285,0l0.260,-1.674l0.127,-1.287l2.060,-1.931l1.287,-2.059l1.159,0l1.287,1.286l0.129,1.159l1.802,0.772l2.319,0.773l-0.258,1.158l-1.803,0.129l0.514,1.288l-2.059,0.901l-2.316,-0.515l-3.090,0l-0.900,3.089l-1.032,0.901l-1.414,3.862l-2.189,0.515l-2.574,-0.772l-1.289,0.257l-1.545,1.417l-1.672,-0.257l-1.803,0.514l-1.801,-1.416l0.515,1.802z'</body><body package="Roassal-Core">Mali	^ 'M432.471,187.646l0.902,-0.514l0.385,-1.674l0.902,0l1.930,0.772l1.416,-0.514l1.160,0.129l0.385,-0.644l10.814,0l0.514,-1.931l-0.385,-0.257l-1.288,-11.587l-1.416,-11.714l4.119,0l9.140,5.922l9.139,5.792l0.645,1.288l1.672,0.772l1.159,0.387l0.128,1.801l2.961,-0.257l0,6.179l-1.543,1.802l-0.130,1.674l-2.445,0.386l-3.735,0.258l-0.900,0.901l-1.802,0.129l-1.673,0l-0.644,-0.516l-1.545,0.387l-2.446,1.158l-0.514,0.774l-2.189,1.285l-0.257,0.645l-1.159,0.514l-1.287,-0.257l-0.773,0.644l-0.385,1.802l-2.189,2.189l0.128,0.900l-0.771,1.159l0.128,1.545l-1.030,0.515l-0.643,0.257l-0.387,-1.157l-0.772,0.385l-0.516,-0.129l-0.514,0.772l-2.059,0l-0.772,-0.386l-0.387,0.258l-0.772,-0.772l0.128,-0.773l-0.257,-0.386l-0.644,0.257l0.128,-0.900l0.516,-0.645l-1.030,-1.158l-0.386,-0.644l-0.644,-0.643l-0.515,-0.129l-0.643,0.385l-0.773,0.387l-0.772,0.644l-1.159,-0.258l-0.772,-0.643l-0.386,-0.130l-0.772,0.387l-0.387,0l-0.128,-1.030l0.128,-0.772l-0.257,-1.030l-1.030,-0.772l-0.515,-1.545l0.129,1.674z'</body><body package="Roassal-Core">Mauritania	^ 'M432.471,187.646l-1.802,-1.930l-1.674,-1.931l-1.801,-0.772l-1.288,-0.773l-1.416,0l-1.287,0.643l-1.416,-0.257l-0.901,0.901l-0.258,-1.416l0.773,-1.416l0.386,-2.445l-0.386,-2.704l-0.258,-1.417l0.258,-1.287l-0.773,-1.287l-1.416,-1.158l0.643,-0.901l10.557,0l-0.515,-3.862l0.644,-1.417l2.574,-0.257l-0.129,-6.823l8.883,0.129l0,-4.120l10.040,6.566l-4.119,0l1.416,11.714l1.288,11.587l0.385,0.257l-0.514,1.931l-10.814,0l-0.385,0.644l-1.160,-0.129l-1.416,0.514l-1.930,-0.772l-0.902,0l-0.385,1.674l0.902,-0.514z'</body><body package="Roassal-Core">Mexico	^ 'M203.592,157.266l-1.030,2.446l-0.515,1.931l-0.257,3.605l-0.257,1.287l0.514,1.416l0.773,1.287l0.644,2.188l1.802,1.931l0.515,1.545l1.158,1.416l2.832,0.643l1.029,1.159l2.447,-0.772l2.060,-0.258l1.930,-0.513l1.803,-0.388l1.672,-1.158l0.644,-1.545l0.258,-2.317l0.386,-0.772l1.803,-0.644l2.961,-0.644l2.316,0l1.674,-0.129l0.644,0.516l-0.129,1.287l-1.417,1.674l-0.643,1.544l0.515,0.515l-0.386,1.158l-0.772,2.060l-0.644,-0.644l-0.515,0l-0.515,0.130l-1.030,1.544l-0.515,-0.258l-0.257,0.129l0,0.387l-2.446,0l-2.575,0l0,1.416l-1.158,0l0.901,0.901l1.030,0.643l0.387,0.644l0.385,0.128l-0.128,0.903l-3.347,0l-1.416,2.188l0.385,0.514l-0.257,0.643l-0.128,0.773l-2.961,-2.832l-1.416,-0.901l-2.189,-0.772l-1.544,0.257l-2.189,1.030l-1.287,0.258l-1.930,-0.773l-2.060,-0.515l-2.446,-1.158l-2.061,-0.387l-3.088,-1.287l-2.189,-1.286l-0.644,-0.645l-1.545,-0.258l-2.702,-0.772l-1.159,-1.287l-2.961,-1.545l-1.288,-1.673l-0.644,-1.287l0.902,-0.258l-0.258,-0.772l0.644,-0.772l0,-0.902l-0.901,-1.158l-0.257,-1.159l-0.902,-1.287l-2.445,-2.704l-2.703,-2.059l-1.288,-1.674l-2.317,-1.159l-0.515,-0.643l0.386,-1.674l-1.287,-0.643l-1.673,-1.287l-0.644,-1.802l-1.416,-0.258l-1.545,-1.416l-1.287,-1.288l-0.129,-0.901l-1.416,-2.060l-1.029,-2.059l0.128,-1.030l-1.931,-1.030l-0.901,0.129l-1.544,-0.773l-0.515,1.159l0.515,1.288l0.257,1.930l0.901,1.160l1.931,1.801l0.515,0.644l0.386,0.257l0.386,0.902l0.515,0l0.515,1.673l0.773,0.644l0.643,1.030l1.673,1.415l0.902,2.446l0.772,1.159l0.773,1.287l0.128,1.416l1.287,0.129l1.030,1.158l1.029,1.288l-0.128,0.386l-1.029,1.030l-0.516,0l-0.772,-1.673l-1.673,-1.546l-1.931,-1.286l-1.416,-0.644l0.129,-1.931l-0.515,-1.545l-1.288,-0.773l-1.802,-1.287l-0.386,0.386l-0.644,-0.643l-1.673,-0.643l-1.545,-1.675l0.129,-0.128l1.158,0.128l1.030,-1.029l0,-1.159l-2.059,-1.931l-1.545,-0.772l-1.031,-1.674l-0.900,-1.802l-1.287,-2.189l-1.159,-2.317l3.090,-0.256l3.475,-0.259l-0.258,0.515l3.992,1.288l6.178,1.931l5.407,0l2.060,0l0.129,-1.158l4.633,0l0.902,0.900l1.416,0.901l1.545,1.159l0.900,1.416l0.772,1.545l1.288,0.772l2.316,0.772l1.674,-2.058l2.189,-0.130l1.930,1.159l1.288,1.802l1.030,1.545l1.545,1.545l0.515,1.931l0.772,1.287l2.188,0.773l1.931,0.643l-1.030,0.129z'</body><body package="Roassal-Core">Moldova	^ 'M536.998,97.02l0.644,-0.386l1.675,-0.259l2.059,0.903l1.029,0.128l1.287,0.644l-0.257,0.901l1.030,0.515l0.386,1.030l0.902,0.772l-0.131,0.386l0.517,0.258l-0.773,0.257l-1.545,-0.129l-0.258,-0.386l-0.513,0.258l0.129,0.386l-0.774,0.901l-0.385,0.901l-0.773,0.386l-0.387,-1.287l0.257,-1.159l-0.128,-1.158l-1.545,-1.674l-0.902,-1.029l-0.770,-0.901l0.774,0.258z'</body><body package="Roassal-Core">Mongolia	^ 'M701.642,94.188l2.832,-0.515l5.148,-2.317l4.121,-1.287l2.317,0.901l2.832,0l1.802,1.287l2.703,0.129l3.862,0.644l2.574,-1.931l-1.029,-1.545l2.703,-2.832l3.090,1.158l2.445,0.257l3.090,0.773l0.515,1.931l3.862,1.158l2.574,-0.515l3.348,-0.257l2.705,0.257l2.701,1.287l1.674,1.417l2.445,0l3.348,0.386l2.574,-0.644l3.476,-0.387l3.991,-1.930l1.545,0.258l1.414,0.900l3.218,-0.128l-1.287,1.931l-1.931,2.704l0.771,1.158l1.420,-0.386l2.701,0.386l2.059,-0.901l2.189,0.772l2.448,1.931l-0.258,0.902l-2.190,-0.258l-3.861,0.386l-1.932,0.772l-1.931,1.803l-4.119,1.029l-2.704,1.417l-2.832,-0.516l-1.416,-0.257l-1.416,1.674l0.774,1.030l0.515,0.900l-1.931,0.902l-1.932,1.416l-3.088,1.030l-4.121,0.128l-4.375,0.902l-3.090,1.416l-1.160,-0.773l-3.347,0l-3.862,-1.673l-2.701,-0.386l-3.605,0.386l-5.536,-0.644l-2.962,0l-1.672,-1.545l-1.159,-2.446l-1.673,-0.386l-3.217,-1.674l-3.606,-0.385l-3.216,-0.387l-1.032,-1.158l1.032,-3.219l-1.803,-2.188l-3.863,-0.901l-2.317,-1.545l0.644,1.802z'</body><body package="Roassal-Core">Morocco	^ 'M461.436,138.472l0.772,0.514l-0.515,1.030l-3.476,0.515l-1.287,1.030l-1.545,0.128l-0.128,2.061l-3.090,1.029l-1.030,1.417l-2.188,0.644l-2.703,0.514l-4.377,1.931l0,3.218l-0.387,0l0,1.417l-1.544,0.128l-0.901,0.515l-1.288,0l-0.900,-0.257l-2.319,0.257l-0.900,2.060l-0.773,0.257l-1.287,3.347l-3.733,2.961l-0.901,3.733l-1.159,1.159l-0.257,1.029l-6.050,0.129l-0.129,0l0.129,-1.158l1.030,-0.772l0.901,-1.416l-0.129,-0.902l0.901,-1.930l1.545,-1.674l0.901,-0.515l0.644,-1.546l0.128,-1.415l0.901,-1.673l1.802,-1.031l1.803,-2.703l1.287,-1.030l2.574,-0.386l2.060,-1.802l1.416,-0.644l2.189,-2.317l-0.644,-3.347l1.031,-2.317l0.384,-1.416l1.675,-1.803l2.703,-1.287l2.059,-1.029l1.802,-2.833l0.773,-1.673l2.059,0l1.545,1.158l2.575,-0.128l2.832,0.515l1.159,0.128l1.030,1.674l0.128,1.674l-0.902,-2.832z'</body><body package="Roassal-Core">Mozambique	^ 'M558.368,258.062l1.931,-0.256l3.347,0.771l0.644,-0.386l1.930,0l0.902,-0.900l1.672,0.128l2.961,-1.030l2.060,-1.674l0.516,1.287l-0.129,2.705l0.257,2.316l0.128,4.248l0.516,1.289l-0.772,1.930l-1.160,1.803l-1.673,1.673l-2.446,1.030l-3.090,1.416l-2.961,2.830l-1.029,0.517l-1.930,1.930l-1.160,0.643l-0.128,1.803l1.288,2.060l0.514,1.674l-0.129,1.415l0.644,-0.770l-0.129,2.573l-0.386,1.288l0.643,0.514l-0.387,1.030l-1.157,1.030l-2.187,0.901l-3.349,1.417l-1.159,1.030l0.259,1.158l0.643,0.127l-0.130,1.418l-2.058,0l-0.259,-1.158l-0.385,-1.289l-0.258,-0.901l0.514,-3.090l-0.771,-1.801l-1.287,-3.863l2.832,-3.089l0.773,-1.930l0.386,-0.258l0.257,-1.545l-0.385,-0.773l0.128,-2.061l0.513,-1.801l0,-3.475l-1.415,-0.774l-1.287,-0.254l-0.515,-0.645l-1.287,-0.645l-2.317,0.129l-0.129,-1.029l-0.258,-1.932l8.239,-2.189l1.545,1.289l0.643,-0.259l1.159,0.644l0.130,1.159l-0.645,1.158l0.258,1.931l1.802,1.674l0.772,-1.801l1.160,-0.645l-0.258,-3.476l-1.030,-1.930l-1.030,-0.902l-0.901,0.130l-0.773,-3.605l-0.773,1.932z'</body><body package="Roassal-Core">MyanmarBurma	^ 'M733.437,172.585l-1.672,1.159l-1.803,0.129l-1.287,2.960l-1.158,0.515l1.287,2.317l1.802,1.931l1.030,1.802l-0.901,2.318l-1.029,0.514l0.643,1.416l1.802,2.060l0.387,1.545l-0.129,1.287l1.158,2.447l-1.545,2.445l-1.287,2.832l-0.257,-2.059l0.773,-2.060l-0.902,-1.544l0.257,-2.962l-1.158,-1.416l-0.773,-3.219l-0.516,-3.345l-1.158,-2.318l-1.803,1.415l-3.088,1.932l-1.416,-0.257l-1.673,-0.644l0.902,-3.347l-0.647,-2.575l-2.058,-3.090l0.386,-0.900l-1.671,-0.387l-1.934,-2.188l-0.127,-2.189l0.900,0.387l0.129,-1.932l1.287,-0.643l-0.255,-1.159l0.642,-0.900l0,-2.704l2.188,0.515l1.160,-2.189l0.127,-1.287l1.545,-2.317l-0.127,-1.545l3.474,-1.802l1.930,0.515l-0.256,-1.674l1.030,-0.515l-0.258,-1.029l1.545,-0.130l0.900,1.545l1.289,0.644l0,2.060l-0.131,2.188l-2.445,2.318l-0.387,3.089l2.832,-0.386l0.645,2.446l1.674,0.515l-0.772,2.317l2.059,1.030l1.160,0.387l1.930,-0.773l0.128,1.158l-2.318,1.802l-0.516,0.902l1.544,-0.643z'</body><body package="Roassal-Core">Nambia	^ 'M509.322,304.019l-2.059,-2.059l-1.030,-2.060l-0.644,-2.575l-0.645,-1.930l-0.900,-4.120l0,-3.216l-0.387,-1.545l-1.029,-1.032l-1.416,-2.317l-1.414,-3.218l-0.647,-1.674l-2.187,-2.575l-0.128,-2.058l1.288,-0.516l1.674,-0.515l1.672,0.128l1.674,1.159l0.384,-0.128l10.944,-0.128l1.801,1.287l6.566,0.385l4.892,-1.158l2.187,-0.644l1.803,0.258l1.030,0.513l0,0.259l-1.416,0.645l-0.901,0l-1.674,1.028l-1.029,-1.158l-4.119,1.030l-2.060,0l-0.129,9.654l-2.574,0.130l0,7.852l0,9.912l-2.446,1.416l-1.418,0.129l-1.673,-0.514l-1.288,-0.129l-0.383,-1.158l-1.033,-0.773l1.286,-1.415z'</body><body package="Roassal-Core">Nepal	^ 'M702.673,151.859l-0.258,1.159l0.385,1.674l-0.385,1.158l-2.189,0l-3.219,-0.644l-2.059,-0.257l-1.674,-1.287l-3.603,-0.386l-3.604,-1.545l-2.447,-1.287l-2.703,-1.031l1.160,-2.573l1.672,-1.160l1.158,-0.643l2.061,0.772l2.703,1.802l1.545,0.386l0.900,1.288l2.188,0.515l2.189,1.158l2.959,0.644l-3.221,-0.257z'</body><body package="Roassal-Core">Netherlands	^ 'M481.646,82.859l2.188,0l0.515,0.902l-0.644,2.574l-0.773,0.901l-1.544,0l0.386,2.833l-1.416,-0.644l-1.673,-1.158l-2.574,0.643l-1.932,-0.258l1.417,-0.772l2.317,-3.991l-3.733,1.030z'</body><body package="Roassal-Core">NewCaledonia	^ 'M911.856,283.809l2.188,1.673l1.416,1.159l-1.029,0.643l-1.545,-0.643l-1.932,-1.287l-1.672,-1.416l-1.803,-1.932l-0.386,-0.901l1.158,0.129l1.545,0.901l1.158,0.902l-0.902,-0.772z'</body><body package="Roassal-Core">NewZealand	^ 'M941.72,334.914l-1.030,1.417l-1.287,1.931l-2.058,1.030l-0.514,-0.772l-1.160,-0.386l1.545,-2.189l-0.774,-1.416l-2.961,-1.159l0.131,-0.901l1.930,-1.030l0.387,-2.059l-0.129,-1.674l-1.029,-1.803l0,-0.514l-1.290,-1.158l-2.058,-2.317l-1.158,-1.932l1.027,-0.256l1.418,1.544l2.187,0.773l0.774,2.315l1.930,2.834l0,-1.803l1.289,0.773l0.384,1.931l2.190,0.901l1.803,0.257l1.545,-1.030l1.285,0.258l-0.645,2.446l-0.771,1.544l-2.059,0l-0.771,0.773l0.255,1.158l0.386,-0.514zM922.282,344.312l2.319,-1.416l1.671,-1.416l1.161,-1.931l1.029,-0.772l0.387,-1.416l1.929,-1.287l0.514,1.158l0.645,1.030l1.933,-1.030l0.770,1.160l0,1.157l-1.028,1.160l-1.802,2.059l-1.289,1.029l1.029,1.288l-2.188,0l-2.316,1.030l-0.645,1.803l-1.545,2.703l-2.060,1.286l-1.414,0.773l-2.445,-0.128l-1.805,-0.901l-2.830,-0.130l-0.516,-1.030l1.416,-1.930l3.477,-2.704l1.672,-0.515l-1.931,1.030z'</body><body package="Roassal-Core">Nicaragua	^ 'M234.359,197.045l-0.902,-0.774l-1.287,-1.158l-0.643,-0.901l-1.159,-0.773l-1.288,-1.287l0.258,-0.386l0.514,0.386l0.129,-0.129l0.902,-0.128l0.257,-0.644l0.387,0l0,-1.288l0.643,-0.129l0.515,0l0.643,-0.643l0.773,0.515l0.258,-0.386l0.515,-0.258l0.900,-0.771l0.129,-0.516l0.257,0l0.258,-0.643l0.258,-0.130l0.514,0.517l0.516,0.127l0.643,-0.385l0.643,0l0.902,-0.386l0.386,-0.386l0.901,0.128l-0.129,0.258l-0.129,0.514l0.258,1.030l-0.643,0.901l-0.258,1.159l-0.129,1.158l0.129,0.644l0.128,1.287l-0.514,0.258l-0.129,1.159l0.129,0.644l-0.516,0.771l0.130,0.645l0.386,0.514l-0.644,0.514l-0.772,-0.128l-0.515,-0.644l-0.773,-0.128l-0.644,0.257l-1.801,-0.644l0.386,-0.259z'</body><body package="Roassal-Core">Niger	^ 'M471.091,194.855l0,-1.930l-3.091,-0.515l-0.128,-1.417l-1.545,-1.673l-0.258,-1.287l0.129,-1.287l1.802,-0.129l0.900,-0.901l3.735,-0.258l2.445,-0.386l0.130,-1.674l1.543,-1.802l0,-6.179l3.734,-1.288l7.852,-5.276l9.269,-5.150l4.248,1.159l1.416,1.544l1.932,-1.030l0.643,4.249l1.029,0.643l0.129,0.901l1.030,0.901l-0.514,1.159l-1.030,5.406l-0.130,3.605l-3.475,2.446l-1.158,3.605l1.158,1.029l0,1.673l1.674,0.130l-0.258,1.158l-0.774,0.257l-0.128,0.773l-0.514,0.128l-1.803,-2.960l-0.644,-0.129l-2.058,1.545l-2.061,-0.772l-1.545,-0.258l-0.772,0.386l-1.545,0l-1.544,1.159l-1.416,0l-3.219,-1.417l-1.286,0.644l-1.416,0l-1.030,-1.030l-2.704,-1.029l-2.832,0.385l-0.772,0.516l-0.259,1.544l-0.770,1.159l-0.258,2.447l-2.059,-1.674l-0.901,0.127l0.901,-0.773z'</body><body package="Roassal-Core">Nigeria	^ 'M488.082,214.166l-2.704,0.900l-1.029,-0.128l-1.031,0.644l-2.188,-0.129l-1.415,-1.674l-0.902,-1.931l-1.931,-1.802l-2.059,0.128l-2.318,0l0.130,-4.376l0,-1.802l0.386,-1.674l0.901,-0.773l1.288,-1.672l-0.258,-0.773l0.514,-1.031l-0.643,-1.673l0.129,-0.771l0.258,-2.447l0.770,-1.159l0.259,-1.544l0.772,-0.516l2.832,-0.385l2.704,1.029l1.030,1.030l1.416,0l1.286,-0.644l3.219,1.417l1.416,0l1.544,-1.159l1.545,0l0.772,-0.386l1.545,0.258l2.061,0.772l2.058,-1.545l0.644,0.129l1.803,2.960l0.514,-0.128l1.160,1.158l-0.387,0.386l-0.129,0.901l-2.188,2.189l-0.773,1.673l-0.387,1.417l-0.513,0.514l-0.645,1.931l-1.414,1.159l-0.387,1.288l-0.644,1.159l-0.257,1.029l-1.803,0.901l-1.546,-1.030l-1.029,0l-1.544,1.545l-0.771,0.128l-1.289,2.575l0.772,-1.932z'</body><body package="Roassal-Core">NorthKorea	^ 'M817.112,112.726l0.385,0.514l-1.029,-0.129l-1.158,0.902l-0.774,0.901l0.131,1.930l-1.418,0.644l-0.516,0.386l-1.027,0.772l-1.803,0.516l-1.158,0.773l0,1.158l-0.387,0.257l1.157,0.386l1.418,1.159l-0.385,0.772l-1.033,0.129l-1.930,0.129l-1.029,1.158l-1.285,0l-0.131,0.257l-1.287,-0.514l-0.385,0.386l-0.774,0.257l-0.129,-0.514l-0.644,-0.258l-0.772,-0.386l0.772,-1.159l0.644,-0.385l-0.255,-0.387l0.640,-1.545l-0.127,-0.386l-1.545,-0.258l-1.289,-0.772l2.190,-1.673l2.961,-1.546l1.802,-1.930l1.287,0.900l2.319,0.130l-0.387,-1.417l4.248,-1.157l1.029,-1.546l-1.674,-1.546z'</body><body package="Roassal-Core">Norway	^ 'M494.905,68.442l-1.802,-1.674l-5.279,3.090l-3.603,0.643l-3.734,-1.415l-0.902,-2.833l-0.900,-6.179l2.445,-1.802l7.080,-2.189l5.407,-2.832l4.892,-3.733l6.435,-5.278l4.508,-1.931l7.465,-3.476l5.922,-1.158l4.377,0.129l4.119,-2.188l4.893,0.128l4.889,-0.515l8.368,1.931l-3.474,0.773l2.961,1.672l-4.507,1.031l-2.189,0.257l1.159,-1.803l-3.476,-1.157l-4.247,0.900l-1.289,2.060l-2.572,1.159l-2.832,-0.644l-3.606,0.129l-2.961,-1.416l-1.545,0.643l-1.673,0.129l-0.513,1.803l-5.022,-0.387l-0.644,1.417l-2.702,0l-1.674,1.931l-2.703,2.960l-4.248,3.862l1.031,0.901l-0.903,1.030l-2.705,0l-1.800,2.446l0.127,3.605l1.803,1.415l-0.900,3.090l-2.318,1.931l1.158,-1.545z'</body><body package="Roassal-Core">Oman	^ 'M617.197,159.841l1.157,1.802l1.545,1.030l1.932,0.387l1.674,0.385l1.158,1.545l0.772,0.902l0.902,0.385l0,0.644l-1.031,1.545l-0.387,0.772l-1.158,0.902l-1.029,1.802l-1.157,-0.130l-0.517,0.645l-0.514,1.416l0.385,1.673l-0.257,0.387l-1.286,0l-1.675,1.028l-0.257,1.289l-0.642,0.514l-1.675,0l-1.031,0.773l0,1.029l-1.287,0.773l-1.416,-0.257l-1.802,0.900l-1.286,0.129l-0.900,-1.930l-2.061,-4.378l7.981,-2.702l1.802,-5.408l-1.159,-1.931l0,-1.030l0.773,-1.159l0.129,-1.029l1.159,-0.515l-0.517,-0.386l0.258,-1.802l-1.417,0zM616.294,156.752l0.773,-0.902l0.387,0.257l-0.257,1.159l-0.385,0.386l0.518,0.900z'</body><body package="Roassal-Core">Pakistan	^ 'M667.659,126.886l2.059,1.287l0.773,2.059l4.375,1.159l-2.572,2.189l-2.961,0.386l-4.121,-0.643l-1.287,1.157l0.900,2.447l1.031,1.802l2.059,1.287l-2.187,1.545l0,1.931l-2.575,2.704l-1.802,2.702l-2.704,2.833l-3.218,-0.129l-2.961,2.832l1.802,1.159l0.258,2.059l1.545,1.417l0.514,2.317l-5.922,0l-1.801,1.802l-1.931,-0.772l-0.774,-1.932l-2.187,-2.059l-4.891,0.514l-4.377,0.130l-3.863,0.386l1.030,-3.218l3.992,-1.288l-0.259,-1.287l-1.288,-0.386l-0.128,-2.446l-2.574,-1.159l-1.031,-1.674l-1.414,-1.415l4.504,1.415l2.704,-0.386l1.674,0.386l0.514,-0.643l1.931,0.257l3.476,-1.159l0.129,-2.317l1.417,-1.544l2.058,0l0.257,-0.644l2.061,-0.386l1.029,0.257l1.031,-0.772l-0.129,-1.674l1.158,-1.545l1.673,-0.772l-1.030,-1.673l2.575,0l0.773,-0.902l-0.129,-1.029l1.287,-1.159l-0.257,-1.416l-0.645,-1.029l1.545,-1.287l2.833,-0.517l3.090,-0.256l1.416,-0.516l-1.545,0.385z'</body><body package="Roassal-Core">Palestine	^ 'M560.942,139.759l0,1.544l-0.386,0.902l-1.287,0.257l0.128,-0.644l0.774,-0.385l-0.774,-0.258l0.645,-1.803l-0.900,-0.387z'</body><body package="Roassal-Core">Panama	^ 'M255.47,207.471l-0.902,-0.772l-0.643,-1.416l0.643,-0.773l-0.643,-0.127l-0.514,-0.903l-1.288,-0.771l-1.159,0.257l-0.644,0.900l-1.029,0.644l-0.644,0.129l-0.257,0.515l1.287,1.545l-0.643,0.258l-0.387,0.385l-1.287,0.129l-0.515,-1.544l-0.387,0.386l-0.772,-0.129l-0.643,-1.030l-1.030,-0.258l-0.773,-0.257l-1.158,0l0,0.644l-0.387,-0.515l0.130,-0.515l0.257,-0.515l-0.128,-0.515l0.385,-0.257l-0.514,-0.387l0,-1.157l1.029,-0.260l1.030,1.031l-0.129,0.516l1.159,0.129l0.129,-0.129l0.772,0.643l1.416,-0.258l1.031,-0.643l1.673,-0.515l0.900,-0.901l1.545,0.257l-0.129,0.257l1.545,0l1.159,0.516l0.900,0.773l1.031,0.771l-0.386,0.387l0.643,1.544l-0.515,0.901l-0.900,-0.257l0.258,-1.287z'</body><body package="Roassal-Core">PapuaNewGuinea	^ 'M845.175,242.742l-0.129,-8.752l4.635,1.803l5.019,1.543l1.932,1.417l1.416,1.417l0.385,1.544l4.505,1.673l0.645,1.416l-2.445,0.258l0.642,1.802l2.317,1.802l1.802,2.832l1.545,-0.128l-0.129,1.287l2.059,0.387l-0.771,0.514l2.832,1.158l-0.258,0.773l-1.803,0.129l-0.641,-0.644l-2.320,-0.258l-2.701,-0.385l-2.061,-1.803l-1.545,-1.416l-1.414,-2.446l-3.478,-1.159l-2.315,0.772l-1.673,0.902l0.386,2.059l-2.189,0.902l-1.416,-0.515l-2.832,-0.129l0,8.755zM876.454,236.822l1.031,0.901l0.258,1.417l-0.771,0.641l-0.518,-1.544l-0.642,-1.028l-1.288,-0.902l-1.545,-1.159l-1.931,-0.773l0.773,-0.643l1.416,0.773l1.030,0.515l1.031,0.642l-1.156,-1.160zM872.851,242.742l-1.545,0.645l-1.287,0.644l-1.545,0l-2.188,-0.772l-1.545,-0.773l0.256,-0.901l2.447,0.388l1.416,-0.131l0.387,-1.287l0.385,-0.127l0.260,1.414l1.543,-0.128l0.773,-0.902l1.543,-1.031l-0.256,-1.544l1.543,-0.128l0.516,0.515l0,1.416l-0.901,1.674l-1.416,0.259l0.386,-0.769zM882.118,241.328l0.776,0.645l1.414,1.673l1.158,0.900l-0.258,0.771l-0.771,0.259l-1.159,-1.030l-1.287,-1.673l-0.515,-2.061l0.386,-0.257l-0.256,-0.773z'</body><body package="Roassal-Core">Paraguay	^ 'M296.405,286.898l1.030,-3.219l0,-1.414l1.416,-2.447l4.634,-0.772l2.446,0.130l2.575,1.285l0,0.902l0.772,1.415l-0.128,3.736l2.831,0.513l1.160,-0.513l1.801,0.642l0.516,0.903l0.256,2.443l0.259,1.031l1.028,0.129l1.031,-0.516l0.901,0.516l0,1.544l-0.386,1.545l-0.515,1.546l-0.386,2.445l-2.446,2.059l-2.189,0.387l-2.961,-0.387l-2.702,-0.772l2.574,-4.121l-0.386,-1.157l-2.703,-1.030l-3.348,-2.059l-2.188,-0.387l4.892,4.377z'</body><body package="Roassal-Core">Peru	^ 'M277.74,274.281l-0.644,1.417l-1.415,0.644l-2.704,-1.543l-0.258,-1.031l-5.278,-2.705l-4.891,-2.959l-2.059,-1.674l-1.159,-2.188l0.515,-0.773l-2.318,-3.605l-2.703,-4.891l-2.446,-5.407l-1.158,-1.288l-0.902,-1.930l-2.058,-1.802l-1.932,-1.028l0.901,-1.161l-1.287,-2.576l0.772,-1.929l2.189,-1.673l0.386,1.030l-0.773,0.643l0,1.029l1.159,-0.257l1.030,0.388l1.159,1.286l1.545,-1.030l0.514,-1.802l1.673,-2.446l3.219,-1.030l2.961,-2.832l0.772,-1.674l-0.386,-2.059l0.772,-0.258l1.802,1.288l0.772,1.287l1.288,0.644l1.544,2.832l2.060,0.257l1.416,-0.644l1.030,0.516l1.673,-0.259l2.060,1.287l-1.802,2.704l0.772,0l1.416,1.417l-2.446,-0.129l-0.386,0.514l-2.188,0.515l-3.089,1.802l-0.129,1.288l-0.772,0.901l0.257,1.416l-1.545,0.773l0,1.158l-0.772,0.516l1.158,2.445l1.546,1.674l-0.644,1.158l1.801,0.129l1.030,1.416l2.317,0l2.317,-1.545l-0.256,4.119l1.287,0.257l1.416,-0.384l2.445,4.248l-0.644,0.901l-0.128,1.931l0,2.317l-1.159,1.287l0.515,1.029l-0.643,0.901l1.158,2.318l1.673,-2.830z'</body><body package="Roassal-Core">Phillipines	^ 'M790.722,192.797l-1.416,-2.061l2.318,0l1.031,1.030l-0.775,2.316l1.158,1.285zM795.485,200.134l0.645,-0.773l0.256,-1.673l1.545,-0.129l-0.385,1.802l1.930,-2.703l-0.258,2.574l-0.903,0.902l-0.900,1.802l-0.900,0.773l-1.545,-1.932l-0.515,0.643zM805.655,204.253l0.258,1.802l0.256,1.545l-1.029,2.446l-0.901,-2.704l-1.289,1.287l0.903,2.060l-0.774,1.288l-3.217,-1.545l-0.771,-2.059l0.898,-1.287l-1.801,-1.159l-0.773,1.030l-1.285,-0.129l-2.061,1.545l-0.386,-0.773l1.031,-2.317l1.672,-0.773l1.545,-0.901l0.902,1.159l2.061,-0.772l0.384,-1.158l1.930,-0.129l-0.129,-2.061l2.192,1.288l0.255,1.416l-0.129,-0.901zM784.415,201.936l-3.477,2.447l1.288,-1.804l1.929,-1.673l1.676,-1.931l1.285,-2.575l0.518,2.190l-1.803,1.415l1.416,-1.931zM794.841,177.863l-0.514,1.159l0.901,1.931l-0.643,2.188l-1.545,0.901l-0.516,2.188l0.645,2.189l1.416,0.257l1.158,-0.257l3.348,1.415l-0.258,1.417l0.900,0.772l-0.257,1.159l-2.061,-1.287l-1.029,-1.416l-0.643,1.031l-1.803,-1.676l-2.445,0.387l-1.287,-0.515l0.127,-1.157l0.775,-0.645l-0.775,-0.643l-0.256,0.901l-1.416,-1.545l-0.387,-1.159l-0.127,-2.575l1.157,0.902l0.257,-4.248l0.901,-2.447l1.545,0l1.674,0.773l0.902,-0.643l-0.256,-0.643zM793.94,196.271l-0.386,-1.286l1.674,0.771l1.673,0l0,1.160l-1.287,1.157l-1.674,0.773l-0.128,-1.287l-0.128,1.288zM803.337,194.212l0.773,2.961l-2.060,-0.644l0,0.901l0.644,1.674l-1.287,0.514l-0.129,-1.802l-0.773,-0.128l-0.385,-1.674l1.545,0.257l0,-1.029l-1.676,-2.060l2.576,0l-0.772,-1.030z'</body><body package="Roassal-Core">Poland	^ 'M505.718,89.295l-1.158,-1.672l0.257,-1.030l-0.644,-1.417l-1.029,-0.901l0.770,-0.773l-0.642,-1.287l1.802,-0.901l4.248,-1.158l3.347,-0.901l2.703,0.387l0.258,0.643l2.574,0.129l3.348,0.256l4.890,0l1.417,0.259l0.644,0.772l0.129,1.288l0.771,1.029l0,1.029l-1.672,0.516l0.772,1.287l0.129,1.159l1.286,2.317l-0.257,0.773l-1.287,0.385l-2.447,2.189l0.646,1.287l-0.515,-0.257l-2.577,-1.030l-1.929,0.386l-1.289,-0.257l-1.672,0.644l-1.289,-1.030l-1.158,0.386l-0.127,-0.129l-1.289,-1.416l-1.930,-0.129l-0.257,-0.772l-1.802,-0.386l-0.517,0.773l-1.414,-0.644l0.129,-0.645l-1.932,-0.256l1.287,0.903z'</body><body package="Roassal-Core">Portugal	^ 'M440.838,114.141l1.031,-0.643l1.158,-0.387l0.643,1.287l1.545,0l0.514,-0.385l1.545,0.128l0.773,1.416l-1.287,0.643l0,2.189l-0.514,0.387l0,1.159l-1.160,0.256l1.030,1.674l-0.772,1.674l0.902,0.900l-0.258,0.644l-1.030,1.030l0.257,0.902l-1.158,0.772l-1.416,-0.387l-1.416,0.258l0.386,-2.059l-0.129,-1.674l-1.288,-0.258l-0.643,-1.030l0.259,-1.802l1.028,-0.900l0.259,-1.159l0.514,-1.545l0,-1.159l-0.644,-1.030l0.129,0.901z'</body><body package="Roassal-Core">PuertoRico	^ 'M286.622,177.09l1.416,0.258l0.516,0.515l-0.644,0.643l-2.060,0l-1.545,0.129l-0.258,-1.158l0.387,-0.387l-2.188,0z'</body><body package="Roassal-Core">Qatar	^ 'M602.136,160.227l-0.257,-1.931l0.770,-1.416l0.772,-0.257l0.775,0.901l0,1.545l-0.517,1.544l-0.772,0.258l0.771,0.644z'</body><body package="Roassal-Core">RepublicofMacedonia	^ 'M520.651,114.27l0.385,0l0.129,-0.515l1.545,-0.515l1.544,-0.257l1.288,0l1.287,0.900l0.258,1.674l-0.514,0.130l-0.515,0.513l-1.417,-0.128l-1.029,0.643l-1.804,0.258l-1.029,-0.643l-0.385,-1.160l-0.257,0.900z'</body><body package="Roassal-Core">RepublicofTurkey	^ 'M535.712,120.707l2.961,-2.575l4.247,-0.129l1.030,-2.060l5.150,0.387l3.217,-1.803l3.219,-0.772l4.376,0l4.765,1.932l3.860,1.028l3.089,-0.515l2.317,0.259l3.218,-1.417l2.834,-0.128l2.702,1.416l0.386,0.901l-0.256,1.288l2.059,0.643l1.029,0.773l-1.802,0.772l0.773,3.089l-0.516,0.901l1.416,2.189l-1.287,0.385l-0.899,-0.643l-3.091,-0.385l-1.158,0.385l-3.090,0.515l-1.416,-0.128l-3.090,1.028l-2.317,0l-1.416,-0.514l-2.960,0.772l-0.902,-0.514l-0.129,1.545l-0.643,0.515l-0.772,0.643l-1.029,-1.287l1.029,-0.902l-1.674,0.129l-2.188,-0.514l-1.803,1.544l-4.118,0.257l-2.189,-1.416l-2.961,-0.128l-0.644,1.159l-1.802,0.256l-2.574,-1.415l-2.961,0l-1.545,-2.574l-2.058,-1.545l1.286,-2.060l1.673,1.287zM535.581,114.27l2.705,-0.772l2.317,0.257l0.386,1.030l2.317,0.902l-0.514,0.643l-3.219,0.257l-1.031,0.772l-2.314,1.417l-0.774,-1.159l0,-0.644l0.645,-0.258l0.771,-1.673l1.289,0.772z'</body><body package="Roassal-Core">Romania	^ 'M526.442,97.921l1.159,-0.515l1.674,0.258l1.673,0l1.289,0.772l0.899,-0.515l1.931,-0.257l0.773,-0.644l1.158,0l0.774,0.258l0.770,0.901l0.902,1.029l1.545,1.674l0.128,1.158l-0.257,1.159l0.387,1.287l1.287,0.386l1.287,-0.386l1.158,0.515l0,0.645l-1.287,0.643l-0.772,-0.258l-0.773,3.219l-1.544,-0.258l-1.930,-1.030l-3.219,0.644l-1.287,0.644l-3.990,-0.130l-2.059,-0.386l-1.031,0.129l-0.773,-1.030l-0.513,-0.515l0.641,-0.386l-0.771,-0.386l-0.774,0.644l-1.543,-0.773l-0.257,-1.158l-1.674,-0.643l-0.258,-0.902l-1.416,-1.030l2.059,-0.515l1.673,-1.802l1.290,-1.803l-1.671,0.643z'</body><body package="Roassal-Core">Russia	^ 'M950.089,36.129l-0.258,0l-0.516,-1.801l0.774,-0.772l0.127,-0.129l6.308,1.158l6.435,-1.544zM586.045,9.869l5.276,-0.515l4.121,0l0.514,0.773l1.545,-0.644l2.574,-0.515l3.990,0.644l-1.028,0.386l-3.605,0.385l-2.447,0.130l-0.384,0.514l-3.221,0.386l-2.830,-0.643l1.545,-0.772l6.050,0.129zM950.089,51.964l-3.992,1.802l2.574,3.219l-0.641,2.188l-5.539,-0.773l-7.336,1.674l-6.177,2.703l-4.764,2.703l-3.990,-1.673l-7.725,1.803l-6.693,0.128l-4.377,4.506l3.088,0.772l0,4.634l-3.475,1.545l0.645,1.803l-4.506,1.544l-1.159,3.219l-4.250,1.158l-0.513,1.931l-4.119,3.089l-1.674,-6.178l-1.545,-5.922l1.545,-4.249l2.060,-1.157l0.127,-1.287l3.864,-0.773l5.148,-3.219l4.506,-2.832l5.019,-2.060l2.061,-3.732l-3.219,0.128l-1.672,2.317l-6.695,2.446l-2.187,-3.089l-7.081,0.901l-6.693,4.247l1.803,1.288l-6.309,1.416l-10.041,-1.416l-11.715,0l-6.564,1.159l-8.369,5.278l-9.781,5.665l3.861,0.643l0.771,2.317l3.092,0.385l1.672,-1.545l2.961,0.387l3.475,2.060l0.515,3.089l-1.543,2.189l-0.902,2.575l-1.031,5.535l-4.120,3.862l-0.900,1.802l-3.603,3.219l-3.735,3.089l-1.674,1.545l-3.603,1.674l-1.674,0l-1.674,-1.288l-3.601,1.931l-0.518,0.901l-0.385,-0.514l0,-1.288l1.416,-0.129l0.385,-3.219l-0.771,-2.317l2.318,-0.901l3.346,0.516l1.802,-2.704l0.901,-2.832l1.031,-1.029l1.414,-2.448l-4.375,0.774l-2.447,1.030l-3.990,0l-1.159,-2.447l-3.218,-1.930l-4.635,-0.902l-1.029,-2.574l-0.901,-1.674l-1.031,-1.158l-1.674,-2.703l-2.316,-1.030l-4.119,-0.772l-3.475,0l-3.350,0.513l-2.316,1.417l1.545,0.644l0,1.416l-1.414,0.901l-2.447,2.832l0,1.159l-3.862,1.672l-3.219,-0.900l-3.218,0.128l-1.414,-0.900l-1.545,-0.258l-3.991,1.930l-3.476,0.387l-2.574,0.644l-3.348,-0.386l-2.445,0l-1.674,-1.417l-2.701,-1.287l-2.705,-0.257l-3.348,0.257l-2.574,0.515l-3.862,-1.158l-0.515,-1.931l-3.090,-0.773l-2.445,-0.257l-3.090,-1.158l-2.703,2.832l1.029,1.545l-2.574,1.931l-3.862,-0.644l-2.703,-0.129l-1.802,-1.287l-2.832,0l-2.317,-0.901l-4.121,1.287l-5.148,2.317l-2.832,0.515l-1.030,0.258l-1.414,-1.675l-3.478,0.387l-1.158,-1.159l-1.930,-0.515l-1.289,-1.545l-1.545,-0.514l-3.860,0.644l-3.605,-1.546l-1.545,1.416l-5.922,-6.822l-3.474,-2.060l1.029,-0.901l-6.822,2.575l-2.577,0.128l0.258,-1.416l-3.474,-0.901l-2.832,0.645l-0.901,-2.833l-4.763,-0.644l-2.446,1.160l-6.693,1.028l-1.418,0.644l-10.039,0.901l-1.158,0.901l1.929,1.931l-2.575,0.644l0.515,0.772l-2.702,1.288l4.376,1.931l-0.644,1.159l-3.732,0l-0.773,0.772l-3.474,-1.416l-4.250,0l-2.961,1.158l-3.088,-1.029l-5.922,-1.931l-4.248,0.127l-5.535,2.962l-0.387,1.931l-2.705,-1.544l-2.186,2.960l0.772,0.515l-1.545,2.060l2.317,1.802l1.931,-0.129l1.803,1.803l-0.387,1.416l1.416,0.514l-1.287,1.546l-2.575,0.386l-2.704,2.831l2.445,2.576l-0.255,1.801l2.960,3.218l-1.545,1.030l-0.516,0.644l-1.158,-0.129l-1.931,-1.673l-0.643,0l-1.803,-0.644l-0.772,-1.158l-2.446,-0.516l-1.671,0.387l-0.517,-0.515l-3.604,-1.287l-3.990,-0.386l-2.318,-0.516l-0.256,0.387l-3.477,-2.318l-3.089,-1.029l-2.318,-1.545l1.931,-0.514l2.317,-2.189l-1.544,-1.030l3.991,-1.159l-0.129,-0.643l-2.446,0.515l0.128,-1.159l1.417,-0.772l2.575,-0.258l0.384,-0.901l-0.513,-1.417l1.029,-1.415l0,-0.772l-3.990,-0.902l-1.545,0l-1.674,-1.287l-2.059,0.386l-3.476,-0.901l0.129,-0.514l-1.030,-1.159l-2.058,-0.129l-0.258,-0.901l0.643,-0.515l-1.673,-1.544l-2.833,0.256l-0.772,-0.128l-0.773,0.644l-0.901,-0.129l-0.643,-1.674l-0.644,-0.901l0.516,-0.257l2.187,0.128l1.030,-0.643l-0.772,-0.772l-1.803,-0.387l0.129,-0.515l-1.160,-0.515l-1.672,-1.802l0.645,-0.644l-0.258,-1.287l-2.703,-0.643l-1.416,0.385l-0.387,-0.772l-2.833,-0.644l-0.901,-1.545l-0.129,-1.287l-1.286,-0.644l1.158,-0.901l-0.900,-2.446l1.930,-1.544l-0.386,-0.515l3.089,-1.545l-2.832,-1.287l5.792,-3.347l2.448,-1.545l1.030,-1.416l-3.991,-1.802l1.157,-1.802l-2.445,-2.060l1.801,-2.318l-3.089,-2.960l2.448,-2.060l-4.119,-1.801l0.384,-1.932l2.189,-0.257l4.507,-1.031l2.830,-0.900l4.378,1.545l7.466,0.643l10.169,3.089l2.059,1.288l0.129,1.802l-7.336,2.061l-12.102,-2.061l-1.929,0.386l4.504,3.219l0.772,2.060l2.961,1.544l3.218,-2.703l7.596,1.287l0,-2.960l7.465,-1.803l3.992,-0.901l-2.190,-1.674l-0.643,-3.218l7.466,0.772l-1.801,3.348l4.632,-0.129l7.210,-2.703l9.783,-2.318l2.060,1.417l9.397,-1.546l6.695,0.902l0.643,-3.219l7.853,0.772l10.684,2.832l1.673,-1.801l-3.991,-4.507l4.505,-2.702l2.190,-3.090l8.369,0.386l0.769,4.763l0.260,5.536l1.672,1.674l-0.516,1.802l-4.119,2.832l2.832,0.386l5.151,-2.961l1.029,-3.991l-2.832,-1.159l-1.029,-5.664l3.345,-3.346l2.190,1.802l0.644,2.060l1.672,-1.288l3.477,-0.901l5.535,-0.128l5.019,1.544l-2.445,-2.575l-0.256,-2.574l4.760,-0.514l6.437,0.128l5.793,-0.387l-2.189,-1.415l3.219,-1.674l3.090,-0.129l5.150,-1.288l0.385,-0.128l1.029,0l1.418,0l1.545,-0.128l1.416,-0.129l1.027,0l0.389,0l0.900,-0.773l7.080,-0.257l2.190,0.643l6.049,-1.415l4.890,0l0.774,-1.159l2.574,-1.159l6.309,-1.030l4.632,0.772l-3.603,0.644l6.051,0.515l0.771,1.288l2.447,-0.644l9.782,-0.257l5.023,1.673l-2.318,3.089l-7.082,1.546l1.031,1.544l6.180,-0.257l2.961,1.030l11.968,0l2.705,1.544l10.299,0.129l0.387,-1.673l16.603,1.673l0.518,4.892l4.246,1.030l8.111,-1.545l15.834,-0.515l1.930,-3.476l23.170,1.802l2.320,1.545l7.078,2.059l14.416,-0.385l6.438,3.733l10.170,-0.128l9.269,-0.259l6.178,2.447l0.774,-3.219l13.257,0.515l8.496,1.159l3.735,1.158l6.564,2.059l7.209,2.448l8.110,1.029l5.277,2.575l-6.178,1.416l-0.386,2.703l-4.506,0.129l-5.278,-2.317l-5.150,-0.644l-3.475,-1.674l-1.802,2.961l0.385,-0.129zM518.204,80.414l0.645,-1.288l3.733,-0.772l2.702,0.386l1.289,0.515l-0.259,0.643l0.128,0.772l-4.890,0l3.348,0.256zM861.522,24.158l5.666,0.515l-0.128,1.416l-7.725,-1.416l-2.187,0.515zM836.034,22.871l5.279,-0.387l10.426,0.772l1.803,2.189l-9.527,-0.128l-3.989,1.030l-5.021,-1.931l-1.029,1.545zM742.835,13.473l0.516,0.772l5.019,2.575l-14.287,0.387l3.604,-3.090l-5.148,0.644zM718.763,9.226l10.556,0.386l5.922,3.346l-7.853,1.674l-11.328,-1.030l-0.127,-2.446l-2.830,1.930zM609.345,28.277l6.435,-2.317l-0.643,-1.287l6.050,-1.417l8.882,-1.673l8.882,-0.514l4.634,-1.030l5.279,-0.387l1.801,1.159l-1.801,0.772l-9.526,1.417l-8.239,1.287l-8.367,2.445l-3.993,2.704l-4.246,2.574l0.644,2.189l5.149,2.317l-1.672,0.129l-8.756,-0.257l-0.771,-1.287l-4.891,-0.644l-0.386,-1.545l2.830,-0.515l-0.127,-1.417l5.277,-2.316l2.445,0.387zM850.194,82.344l0.901,2.575l0,2.575l1.158,2.832l2.705,4.763l-3.990,-0.901l-1.674,3.862l2.574,2.703l0,1.931l-2.058,-1.674l-1.803,2.189l-0.516,-2.317l0.258,-2.575l-0.258,-2.960l0.645,-2.061l0.127,-3.604l-1.545,-2.575l0.131,-3.733l2.574,-1.287l-1.160,-1.158l1.289,-0.387l-0.642,-1.802z'</body><body package="Roassal-Core">Rwanda	^ 'M547.169,229.999l1.028,1.545l-0.128,1.544l-0.773,0.387l-1.415,-0.128l-0.773,1.545l-1.673,-0.258l0.257,-1.546l0.386,-0.128l0,-1.674l0.901,-0.643l0.643,0.256l-1.547,0.900z'</body><body package="Roassal-Core">SaudiArabia	^ 'M580.509,182.883l-0.387,-1.157l-0.771,-0.773l-0.259,-1.031l-1.415,-1.029l-1.416,-2.188l-0.772,-2.189l-1.802,-1.931l-1.289,-0.386l-1.672,-2.574l-0.386,-1.932l0.128,-1.544l-1.545,-2.961l-1.287,-1.030l-1.416,-0.644l-0.902,-1.545l0.130,-0.514l-0.771,-1.417l-0.774,-0.643l-1.030,-2.060l-1.674,-2.059l-1.287,-1.931l-1.417,0l0.387,-1.417l0.131,-0.901l0.384,-1.158l2.960,0.514l1.160,-0.900l0.643,-0.901l2.060,-0.386l0.515,-0.902l0.901,-0.515l-2.703,-2.703l5.407,-1.287l0.514,-0.516l3.218,0.773l3.990,1.931l7.596,5.406l5.020,0.258l2.447,0.257l0.644,1.288l1.930,-0.129l1.030,2.317l1.288,0.644l0.513,0.902l1.803,1.158l0.127,1.159l-0.256,0.900l0.387,0.901l0.772,0.644l0.386,0.901l0.387,0.644l0.771,0.644l0.772,-0.258l0.517,1.030l0.127,0.643l1.031,2.704l8.110,1.416l0.514,-0.644l1.159,1.931l-1.802,5.408l-7.981,2.702l-7.853,1.030l-2.445,1.159l-1.931,2.832l-1.287,0.515l-0.644,-0.901l-1.031,0.128l-2.574,-0.257l-0.514,-0.257l-3.090,0l-0.773,0.257l-1.158,-0.644l-0.645,1.288l0.258,1.158l1.158,-0.772z'</body><body package="Roassal-Core">Senegal	^ 'M420.242,190.35l-1.159,-2.059l-1.287,-1.030l1.159,-0.515l1.287,-1.803l0.644,-1.416l0.901,-0.901l1.416,0.257l1.287,-0.643l1.416,0l1.288,0.773l1.801,0.772l1.674,1.931l1.802,1.930l0.129,1.674l0.515,1.545l1.030,0.772l0.257,1.030l-0.128,0.772l-0.387,0.129l-1.544,-0.129l-0.130,0.258l-0.643,0l-1.931,-0.643l-1.287,0l-5.020,-0.129l-0.644,0.386l-0.901,-0.129l-1.545,0.386l-0.387,-2.058l2.447,0.127l0.644,-0.386l0.514,0l1.030,-0.644l1.159,0.516l1.158,0.128l1.159,-0.644l-0.516,-0.773l-0.900,0.387l-0.901,0l-1.030,-0.643l-0.901,0l-0.515,0.643l2.961,-0.129z'</body><body package="Roassal-Core">Serbia	^ 'M519.749,102.684l1.416,1.030l0.258,0.902l1.674,0.643l0.257,1.158l1.543,0.773l0.774,-0.644l0.771,0.386l-0.641,0.386l0.513,0.515l-0.772,0.644l0.259,0.902l1.415,1.158l-1.030,0.901l-0.515,0.772l0.256,0.386l-0.385,0.387l-1.288,0l-1.544,0.257l-1.545,0.515l-0.129,0.515l-0.385,0l-0.130,-1.030l-0.643,-0.257l-0.516,-0.773l-0.771,0.258l-0.129,-0.516l-1.287,1.288l0.258,0.901l-0.516,-0.128l-0.773,-0.902l-1.159,-0.515l0.258,-0.514l0.387,-1.545l0.900,-0.515l1.158,-0.387l0.389,-1.287l-1.289,-1.030l0.645,-1.159l-1.030,0l1.030,-1.029l-0.773,-0.772l-0.643,-1.031l2.060,-0.772l-1.672,-0.129z'</body><body package="Roassal-Core">SierraLeone	^ 'M434.402,208.759l-0.772,-0.257l-1.931,-1.031l-1.287,-1.544l-0.515,-0.902l-0.386,-2.059l1.415,-1.159l0.387,-0.772l0.386,-0.515l0.772,-0.129l0.644,-0.514l2.188,0l0.772,1.029l0.515,1.159l0,0.773l0.387,0.642l0,1.030l0.644,-0.127l-1.159,1.157l-1.287,1.546l-0.129,0.771l0.644,-0.902z'</body><body package="Roassal-Core">Slovakia	^ 'M516.017,93.673l0.127,0.129l1.158,-0.386l1.289,1.030l1.672,-0.644l1.289,0.257l1.929,-0.386l2.577,1.030l-0.774,0.772l-0.513,1.030l-0.645,0.257l-2.832,-0.772l-0.900,0.129l-0.645,0.643l-1.287,0.387l-0.258,-0.258l-1.287,0.515l-1.158,0l-0.129,0.644l-2.318,0.257l-1.028,-0.257l-1.288,-0.772l-0.257,-0.903l0.127,-0.256l0.387,-0.644l1.288,0l0.900,-0.258l0,-0.257l0.517,-0.129l0.256,-0.643l0.644,0l0.385,-0.515l-0.774,0z'</body><body package="Roassal-Core">SolomonIslands	^ 'M901.944,255.23l0.772,0.903l-1.930,0l-1.031,-1.674l1.674,0.643l-0.515,-0.128zM900.786,252.784l-0.387,0.516l-2.060,-2.318l-0.514,-1.544l0.901,0l1.029,2.059l-1.031,-1.287zM898.597,253.557l-1.159,0.129l-1.544,-0.386l-0.643,-0.386l0.256,-1.031l1.674,0.387l0.900,0.644l-0.516,-0.643zM895.251,248.537l0.643,0.901l0.128,0.515l-2.060,-1.158l-1.543,-0.902l-1.031,-0.901l0.384,-0.258l1.290,0.644l-2.189,-1.159zM888.556,245.834l1.031,0.900l-0.516,0.129l-1.160,-0.515l-1.158,-1.159l0.129,-0.386l-1.674,-1.031z'</body><body package="Roassal-Core">Somolia	^ 'M597.114,201.549l-1.287,1.674l-1.803,2.188l-2.316,0l-8.754,-3.218l-1.029,-0.901l-1.029,-1.287l-1.032,-1.545l0.645,-0.901l0.900,-1.416l0.902,0.515l0.516,1.030l1.286,1.158l1.288,0l2.575,-0.643l2.959,-0.387l2.319,-0.771l1.286,-0.259l1.029,-0.515l1.545,0l0,1.159l0,2.704l0,-1.415zM603.037,195.371l-0.258,1.545l0,1.415l-0.643,0.901l-0.773,2.961l-1.288,2.961l-1.674,3.475l-2.316,3.991l-2.189,2.962l-3.218,3.732l-2.702,2.188l-3.991,2.576l-2.576,2.059l-2.959,3.347l-0.644,1.415l-0.516,0.645l-1.931,-2.189l0.130,-10.169l2.188,-2.960l1.029,-0.644l1.803,0l2.318,-1.932l3.475,-0.129l7.722,-8.110l1.803,-2.188l1.287,-1.674l0,-1.415l0,-2.704l0,-1.159l0.903,-0.128l1.158,-0.387l1.416,-0.257l1.288,-0.900l1.028,0l-0.130,-0.772z'</body><body package="Roassal-Core">SouthAfrica	^ 'M550.13,305.822l-0.516,0.387l-1.158,1.287l-0.773,1.416l-1.544,1.93l-2.96,2.832l-1.932,1.545l-2.061,1.287l-2.832,1.031l-1.287,0.128l-0.387,0.772l-1.672-0.386l-1.288,0.514l-2.961-0.514l-1.544,0.257l-1.158-0.128l-2.834,1.028l-2.316,0.517l-1.545,1.028h-1.285l-1.16-0.9l-0.9-0.128l-1.158-1.16l-0.131,0.388l-0.385-0.772v-1.546l-0.771-1.801l0.771-0.516v-2.061l-1.802-2.445l-1.288-2.316l-1.931-3.478l1.286-1.415l1.032,0.773l0.384,1.158l1.288,0.129l1.673,0.514l1.418-0.129l2.445-1.416v-9.912l0.772,0.387l1.544,2.574l-0.258,1.674l0.645,0.9l1.93-0.256l1.289-1.287l1.287-0.774l0.643-1.286l1.287-0.645l1.158,0.387l1.288,0.773l2.188,0.129l1.801-0.645l0.258-0.901l0.387-1.287l1.545-0.128l0.772-1.03l0.901-1.804l2.445-2.059l3.733-1.93h1.157l1.289,0.514l0.9-0.387l1.416,0.258l1.287,3.862l0.771,1.802l-0.514,3.09l0.258,0.9l-1.416-0.385l-0.773,0.129l-0.258,0.771l-0.771,1.029L547.94,299l1.545,1.544l1.545-0.386l0.644-1.158h2.059l-0.772,1.93l-0.258,2.318l-0.77,1.157L550.13,305.822zM543.306,304.922l-1.158-0.773l-1.287,0.516l-1.416,1.029l-1.416,1.803l1.931,2.059l1.03-0.258l0.514-0.9l1.417-0.386l0.515-0.901l0.773-1.287L543.306,304.922z'</body><body package="Roassal-Core">SouthKorea	^ 'M810.933,122.895l2.447,3.218l0.642,1.803l0,3.089l-1.029,1.416l-2.445,0.515l-2.190,1.159l-2.445,0.258l-0.258,-1.545l0.514,-1.932l-1.158,-2.833l1.931,-0.514l-1.802,-2.189l0.131,-0.257l1.285,0l1.029,-1.158l1.930,-0.129l1.033,-0.129l-0.385,0.772z'</body><body package="Roassal-Core">Spain	^ 'M440.838,114.141l0.129,-1.931l-1.029,-1.158l3.861,-1.932l3.219,0.515l3.604,0l2.960,0.387l2.189,-0.129l4.377,0.129l1.029,1.030l5.021,1.158l0.901,-0.514l3.089,1.158l3.090,-0.258l0.129,1.545l-2.574,1.802l-3.478,0.516l-0.127,0.900l-1.672,1.545l-1.031,2.189l1.031,1.544l-1.547,1.159l-0.642,1.803l-2.061,0.514l-1.802,2.060l-3.476,0l-2.574,0l-1.673,0.901l-1.031,1.030l-1.287,-0.129l-1.030,-1.030l-0.772,-1.545l-2.446,-0.385l-0.257,-0.902l1.030,-1.030l0.258,-0.644l-0.902,-0.900l0.772,-1.674l-1.030,-1.674l1.160,-0.256l0,-1.159l0.514,-0.387l0,-2.189l1.287,-0.643l-0.773,-1.416l-1.545,-0.128l-0.514,0.385l-1.545,0l-0.643,-1.287l-1.158,0.387l1.031,-0.643z'</body><body package="Roassal-Core">SriLanka	^ 'M685.552,206.699l-0.387,2.832l-1.158,0.772l-2.317,0.643l-1.289,-2.187l-0.513,-3.863l1.285,-4.376l1.805,1.545l1.285,1.801l-1.289,-2.833z'</body><body package="Roassal-Core">Sudan	^ 'M556.308,215.711l-1.416,1.028l-1.545,0l-2.189,0.644l-1.802,-0.644l-1.029,0.774l-2.446,-1.802l-0.644,-1.159l-1.416,0.643l-1.287,-0.257l-0.773,0.515l-1.158,-0.387l-1.672,-2.188l-0.389,-0.901l-2.059,-1.031l-0.643,-1.544l-1.159,-1.287l-1.800,-1.287l0,-0.901l-1.419,-1.159l-2.059,-1.159l-1.029,-0.771l-0.129,-0.773l0.387,-1.159l0,-1.159l-1.545,-1.674l-0.258,-1.157l0,-0.645l-0.902,-0.772l-0.126,-1.544l-0.517,-1.030l-0.902,0.129l0.259,-1.031l0.643,-1.030l-0.258,-1.159l0.901,-0.772l-0.643,-0.643l0.774,-1.673l1.158,-2.060l2.316,0.257l0.258,-10.427l0,-1.415l2.832,0l0,-5.408l10.813,0l10.556,0l10.299,0l1.158,2.704l-0.643,0.386l0.385,2.832l1.030,3.218l1.029,0.644l1.418,1.029l-1.288,1.546l-2.061,0.386l-0.770,0.901l-0.258,1.802l-1.160,3.861l0.258,1.160l-0.387,2.317l-1.158,2.575l-1.672,1.415l-1.158,2.060l-0.259,1.030l-1.286,0.772l-0.774,2.831l0,2.447l-0.386,0.774l-1.416,0.127l-0.901,1.545l1.673,0.129l1.416,1.287l0.388,1.158l1.286,0.644l1.158,2.832l-2.188,2.447l1.416,-1.159z'</body><body package="Roassal-Core">Suriname	^ 'M311.337,210.946l3.219,0.517l0.257,-0.517l2.188,-0.257l2.833,0.774l-1.417,2.316l0.259,1.803l1.029,1.674l-0.386,1.157l-0.257,1.159l-0.772,1.158l-1.545,-0.515l-1.159,0.259l-1.158,-0.259l-0.259,0.773l0.516,0.514l-0.257,0.517l-1.546,-0.130l-1.545,-2.317l-0.385,-1.545l-0.902,0l-1.157,-1.931l0.514,-1.416l-0.129,-0.643l1.545,-0.772l-0.514,2.319z'</body><body package="Roassal-Core">SvalbardJanMayen	^ 'M539.059,11.285l-3.991,1.416l-7.852,0.387l-7.854-0.515l-0.514-0.644l-3.863-0.128l-2.961-1.159l8.369-0.772l3.86,0.644l2.704-0.772l6.822,0.643L539.059,11.285zM505.976,12.314h-3.733l-1.546-0.901l-7.335,1.031l2.059,2.06l5.276,2.317l3.99,0.772l-2.314,0.9l5.791,1.675l3.219-0.129l1.287-2.189l2.316-0.515l1.545-2.06l6.693-1.031l-8.881-1.931l-3.347-1.03l-3.991,0.128L505.976,12.314zM531.851,17.207l-3.863-0.515l-1.158-1.03l-5.535,0.515l1.674,0.901l-1.932,0.643l4.765,0.645L531.851,17.207z'</body><body package="Roassal-Core">Swaziland	^ 'M551.674,299l-0.644,1.158l-1.545,0.386l-1.545,-1.544l-0.128,-0.902l0.771,-1.030l0.258,-0.771l0.773,-0.129l1.416,0.385l0.385,1.289l-0.259,-1.158z'</body><body package="Roassal-Core">Sweden	^ 'M525.026,49.905l-2.703,1.930l0.516,1.674l-4.377,2.060l-5.150,2.317l-1.930,3.861l1.930,1.932l2.576,1.415l-2.576,3.090l-2.704,0.643l-1.028,4.507l-1.545,2.445l-3.348,-0.257l-1.415,2.188l-3.218,0.129l-0.773,-2.575l-2.317,-3.090l-2.059,-3.732l1.158,-1.545l2.318,-1.931l0.900,-3.090l-1.803,-1.415l-0.127,-3.605l1.800,-2.446l2.705,0l0.903,-1.030l-1.031,-0.901l4.248,-3.862l2.703,-2.960l1.674,-1.931l2.702,0l0.644,-1.417l5.022,0.387l0.513,-1.803l1.673,-0.129l3.475,1.417l4.250,1.801l0.128,4.120l0.901,1.031l4.635,-0.772z'</body><body package="Roassal-Core">Switzerland	^ 'M491.042,98.951l0.128,0.515l-0.385,0.644l1.160,0.514l1.416,0l-0.258,1.159l-1.158,0.386l-1.932,-0.257l-0.643,1.030l-1.288,0.129l-0.387,-0.516l-1.543,1.031l-1.287,0.128l-1.160,-0.643l-0.901,-1.159l-1.288,0.386l0,-1.158l1.932,-1.545l-0.130,-0.644l1.288,0.257l0.772,-0.515l2.317,0l0.515,-0.514l-2.832,-0.772z'</body><body package="Roassal-Core">Syria	^ 'M569.696,137.055l-5.278,2.833l-2.960,-1.031l0.256,-0.385l0,-1.160l0.643,-1.416l1.546,-1.029l-0.515,-1.031l-1.159,-0.128l-0.257,-2.059l0.644,-1.159l0.772,-0.643l0.643,-0.515l0.129,-1.545l0.902,0.514l2.960,-0.772l1.416,0.514l2.317,0l3.090,-1.028l1.416,0.128l3.090,-0.515l-1.416,1.673l-1.417,0.773l0.258,1.931l-1.029,3.218l6.051,-2.832z'</body><body package="Roassal-Core">Taiwan	^ 'M793.296,161.256l-1.672,4.378l-1.160,2.188l-1.414,-2.317l-0.260,-1.932l1.545,-2.702l2.189,-2.060l1.288,0.772l0.516,-1.673z'</body><body package="Roassal-Core">Tajikistan	^ 'M656.587,118.519l-1.030,0.900l-2.961,-0.515l-0.257,1.545l2.961,-0.129l3.347,0.901l5.020,-0.514l0.773,2.573l0.772,-0.256l1.674,0.515l-0.129,1.158l0.515,1.416l-2.832,0l-1.802,-0.129l-1.674,1.159l-1.285,0.257l-0.904,0.643l-1.030,-0.900l0.259,-2.317l-0.901,-0.129l0.384,-0.772l-1.543,-0.645l-1.160,0.903l-0.256,1.157l-0.386,0.387l-1.674,-0.128l-0.773,1.287l-0.901,-0.515l-2.059,0.900l-0.773,-0.385l1.547,-2.703l-0.645,-2.060l-1.931,-0.644l0.643,-1.159l2.318,0.129l1.285,-1.417l0.775,-1.801l3.603,-0.644l-0.514,1.287l0.386,0.772l-1.158,0.127z'</body><body package="Roassal-Core">Tanzania	^ 'M551.03,229.742l5.407,-0.258l10.042,5.793l0.256,2.059l4.119,2.445l-1.289,3.092l0.131,1.543l1.802,1.031l0,0.645l-0.644,1.673l0.129,0.772l-0.129,1.287l0.901,1.673l1.160,2.704l0.900,0.514l-2.060,1.674l-2.961,1.030l-1.672,-0.128l-0.902,0.900l-1.930,0l-0.644,0.386l-3.347,-0.771l-1.931,0.256l-0.773,-3.732l-1.415,-1.933l-2.704,-0.514l-1.543,-0.901l-1.675,-0.384l-1.030,-0.387l-1.159,-0.773l-1.545,-3.346l-1.545,-1.546l-0.514,-1.546l0.257,-1.415l-0.514,-2.445l1.158,-0.128l1.031,-1.032l1.030,-1.416l0.642,-0.513l0,-0.903l-0.642,-0.643l-0.131,-1.030l0.773,-0.387l0.128,-1.544l-1.028,-1.545l0.900,-0.257l-2.961,0z'</body><body package="Roassal-Core">Thailand	^ 'M741.548,194.082l-2.445,-1.157l-2.188,0l0.385,-2.060l-2.446,0l-0.128,2.961l-1.545,3.990l-0.903,2.318l0.260,1.931l1.801,0.128l1.031,2.446l0.514,2.318l1.416,1.545l1.674,0.257l1.416,1.415l-0.901,1.159l-1.802,0.257l-0.129,-1.287l-2.188,-1.157l-0.516,0.385l-1.029,-1.029l-0.515,-1.288l-1.418,-1.544l-1.286,-1.287l-0.515,1.544l-0.514,-1.417l0.385,-1.672l0.773,-2.576l1.287,-2.832l1.545,-2.445l-1.158,-2.447l0.129,-1.287l-0.387,-1.545l-1.802,-2.060l-0.643,-1.416l1.029,-0.514l0.901,-2.318l-1.030,-1.802l-1.802,-1.931l-1.287,-2.317l1.158,-0.515l1.287,-2.960l1.803,-0.129l1.672,-1.159l1.544,-0.643l1.161,0.900l0.129,1.546l1.800,0.128l-0.642,2.832l0,2.446l2.832,-1.544l0.900,0.385l1.545,0l0.516,-1.030l2.060,0.258l2.059,2.189l0.129,2.574l2.187,2.446l-0.127,2.189l-0.902,1.288l-2.447,-0.387l-3.475,0.514l-1.801,2.189l-0.643,-3.217z'</body><body package="Roassal-Core">TimorLeste	^ 'M801.921,250.982l0.258,-0.643l2.316,-0.644l1.934,-0.129l0.771,-0.257l1.029,0.257l-0.900,0.773l-2.834,1.158l-2.316,0.773l0,-0.773l0.258,0.515z'</body><body package="Roassal-Core">Togo	^ 'M470.317,210.432l-2.187,0.514l-0.644,-0.900l-0.773,-1.673l-0.128,-1.416l0.514,-2.318l-0.643,-1.030l-0.258,-2.187l0,-1.932l-1.159,-1.417l0.258,-0.772l2.317,0l-0.259,1.417l0.775,0.900l0.900,0.902l0.129,1.287l0.516,0.515l-0.131,6.307l-0.773,-1.803z'</body><body package="Roassal-Core">Tunisia	^ 'M490.785,145.294l-1.159,-4.763l-1.674,-1.159l0,-0.643l-2.187,-1.545l-0.257,-2.059l1.674,-1.545l0.642,-2.189l-0.514,-2.575l0.642,-1.416l2.962,-1.029l1.801,0.257l0,1.415l2.190,-1.028l0.257,0.514l-1.417,1.416l0,1.159l0.902,0.643l-0.258,2.446l-1.801,1.287l0.515,1.416l1.415,0.129l0.644,1.287l1.030,0.387l-0.129,2.060l-1.288,0.772l-0.900,0.902l-1.803,1.029l0.257,1.158l-0.257,1.031l1.287,-0.643z'</body><body package="Roassal-Core">Turkmenistan	^ 'M630.069,130.876l-0.129,-2.188l-2.060,-0.128l-3.088,-2.317l-2.188,-0.387l-2.961,-1.288l-1.932,-0.257l-1.157,0.515l-1.803,-0.129l-1.932,1.546l-2.317,0.513l-0.515,-1.930l0.387,-2.832l-2.059,-0.901l0.644,-1.802l-1.804,-0.129l0.645,-2.318l2.574,0.644l2.316,-0.773l-1.931,-1.673l-0.772,-1.544l-2.187,0.643l-0.260,2.059l-0.900,-1.802l1.160,-0.900l3.090,-0.515l1.800,0.772l1.930,2.060l1.419,-0.128l2.959,0l-0.384,-1.417l2.315,-0.901l2.188,-1.545l3.735,1.416l0.256,2.188l1.030,0.515l2.832,-0.128l1.029,0.515l1.289,2.702l3.089,1.931l1.674,1.288l2.832,1.288l3.604,1.158l0,1.674l-0.902,-0.128l-1.285,-0.774l-0.387,1.030l-2.317,0.516l-0.515,2.188l-1.546,0.772l-2.058,0.386l-0.517,1.288l-2.059,0.257l2.832,1.030z'</body><body package="Roassal-Core">Uganda	^ 'M551.03,229.742l-2.961,0l-0.900,0.257l-1.547,0.900l-0.643,-0.256l0,-2.061l0.643,-1.028l0.131,-2.189l0.514,-1.287l1.029,-1.416l1.031,-0.643l0.901,-1.031l-1.159,-0.258l0.258,-3.217l1.029,-0.774l1.802,0.644l2.189,-0.644l1.545,0l1.416,-1.028l1.287,1.930l1.031,2.704l0.771,1.930l-1.029,1.931l-1.931,1.674l0,0.772l0,2.832l5.407,-0.258z'</body><body package="Roassal-Core">Ukraine	^ 'M550.901,86.593l0.901,0.129l0.773,-0.644l0.772,0.128l2.833,-0.256l1.673,1.544l-0.643,0.515l0.258,0.901l2.058,0.129l1.030,1.159l-0.129,0.514l3.476,0.901l2.059,-0.386l1.674,1.287l1.545,0l3.990,0.902l0,0.772l-1.029,1.415l0.513,1.417l-0.384,0.901l-2.575,0.258l-1.417,0.772l-0.128,1.159l-2.060,0.128l-1.801,0.902l-2.576,0.128l-2.317,1.030l0.129,1.674l1.416,0.644l2.704,-0.130l-0.516,0.902l-2.959,0.515l-3.606,1.544l-1.544,-0.515l0.643,-1.286l-2.962,-0.774l0.389,-0.514l2.573,-0.901l-0.772,-0.645l-4.120,-0.643l-0.257,-1.029l-2.446,0.386l-1.030,1.416l-2.060,2.059l-1.158,-0.515l-1.287,0.386l-1.287,-0.386l0.773,-0.386l0.385,-0.901l0.774,-0.901l-0.129,-0.386l0.513,-0.258l0.258,0.386l1.545,0.129l0.773,-0.257l-0.517,-0.258l0.131,-0.386l-0.902,-0.772l-0.386,-1.030l-1.030,-0.515l0.257,-0.901l-1.287,-0.644l-1.029,-0.128l-2.059,-0.903l-1.675,0.259l-0.644,0.386l-1.158,0l-0.773,0.644l-1.931,0.257l-0.899,0.515l-1.289,-0.772l-1.673,0l-1.674,-0.258l-1.159,0.515l-0.256,-0.643l-1.415,-0.773l0.513,-1.030l0.774,-0.772l0.515,0.257l-0.646,-1.287l2.447,-2.189l1.287,-0.385l0.257,-0.773l-1.286,-2.317l1.286,-0.129l1.417,-0.644l2.187,-0.129l2.706,0.258l2.959,0.644l2.189,0l0.900,0.386l1.030,-0.386l0.772,0.643l2.446,-0.129l1.031,0.258l0.128,-1.416l0.900,-0.643l-2.318,0.129z'</body><body package="Roassal-Core">UnitedArabEmirates	^ 'M604.196,161.643l0.514,-0.129l0,0.772l2.188,-0.386l2.189,0l1.672,0.129l1.803,-1.802l2.058,-1.802l1.674,-1.673l0.518,0.900l0.385,2.189l-1.417,0l-0.258,1.802l0.517,0.386l-1.159,0.515l-0.129,1.029l-0.773,1.159l0,1.030l-0.514,0.644l-8.110,-1.416l-1.031,-2.704l0.127,0.643z'</body><body package="Roassal-Core">UnitedStates	^ 'M284.434,106.546l-2.704,0.772l-2.575,0.644l-3.089,1.673l-1.287,1.417l-0.258,0.386l-0.127,1.545l0.900,1.415l1.159,0l-0.259,-0.900l0.773,0.515l-0.257,0.772l-1.803,0.515l-1.286,-0.130l-1.931,0.517l-1.159,0.128l-1.673,0.128l-2.060,0.644l3.733,-0.387l0.128,0l0.773,0.515l-3.733,0.773l-1.802,0l0.129,-0.257l0.128,-0.644l-0.900,1.416l0.643,0l-0.515,2.060l-1.931,2.060l-0.257,-0.773l-0.516,-0.129l-0.643,-0.643l-0.129,0l-0.128,0l0.514,1.416l0.773,1.416l0.129,0.257l-1.030,0.901l-1.545,2.188l-0.258,-0.128l1.030,-1.802l-1.416,-1.287l-0.128,-2.060l-0.387,0.901l0,2.446l-1.673,-0.901l1.802,1.544l0.515,1.417l0.772,1.674l0.387,2.703l-1.803,1.930l-2.574,1.030l-2.318,1.417l-0.901,0.128l-1.158,1.931l-2.317,1.673l-2.832,1.288l-1.158,2.060l-0.516,1.415l0.387,2.061l1.030,2.187l1.159,2.061l0,1.029l1.157,2.703l0.129,2.447l-0.514,2.316l-1.159,0.516l-1.287,-0.386l-0.386,-1.159l-1.031,-0.644l-1.545,-2.317l-1.287,-1.931l-0.257,-1.287l0.515,-1.674l-0.643,-1.544l-1.803,-1.545l-1.416,-1.030l-3.089,1.158l-0.644,-0.772l-2.574,-1.287l-2.962,0.386l-2.445,-0.258l-1.674,0.515l-1.544,0l-0.258,1.160l0.772,1.543l-3.605,0.130l-2.316,-0.516l-1.545,-0.514l-2.059,-0.387l-2.318,-0.128l-2.317,0.643l-2.446,1.931l-2.702,1.158l-1.417,1.289l-0.644,1.287l0,1.802l0.129,1.287l0.515,0.901l-1.030,0.129l-1.931,-0.643l-2.188,-0.773l-0.772,-1.287l-0.515,-1.931l-1.545,-1.545l-1.030,-1.545l-1.288,-1.802l-1.930,-1.159l-2.189,0.130l-1.674,2.058l-2.316,-0.772l-1.288,-0.772l-0.772,-1.545l-0.900,-1.416l-1.545,-1.159l-1.416,-0.901l-0.902,-0.900l-4.633,0l-0.129,1.158l-2.060,0l-5.407,0l-6.178,-1.931l-3.992,-1.288l0.258,-0.515l-3.475,0.259l-3.090,0.256l-0.258,-1.029l-1.159,-1.416l-2.831,-1.545l-1.158,-0.129l-1.160,-0.900l-2.059,-0.130l-0.772,-0.515l-0.258,-1.416l-2.702,-2.704l-2.189,-3.732l0.128,-0.644l-1.287,-0.901l-2.059,-2.317l-0.386,-2.188l-1.417,-1.417l0.644,-2.189l-0.129,-2.317l-0.901,-1.544l0.901,-2.960l0.129,-2.962l0.514,-4.119l-0.771,-2.188l-0.387,-2.575l3.734,0.515l1.158,2.060l0.644,-0.773l-0.387,-2.188l-1.287,-2.189l15.962,0l2.704,0l32.182,0l18.536,0l5.536,0l0,-1.030l0.901,0l0.516,1.417l0.772,0.514l1.930,0.129l2.704,0.515l2.703,0.773l2.188,-0.387l3.219,0.773l0.385,0l0.515,0l0.258,-0.129l0.386,-0.129l0.387,-0.128l0.772,-0.258l0.643,-0.129l0.644,0.129l0.386,0.258l0.258,0l0.386,0.257l0.773,0.257l0.772,0.258l0.772,0.386l0.643,0.257l0.387,0.130l0.258,0.128l0.514,0.128l0.515,0.258l0.515,0.258l0.515,0.128l0.515,0.257l0.515,0.258l0.515,0.129l0.514,0.257l0.130,0.386l0.128,0.387l0.386,0.257l0.257,0l0.902,0l0.257,0l0,0.129l0,0.129l0,0.128l0,0.258l0.129,0l0.129,0.257l0.128,0l0.258,0.129l0.386,0.128l0.258,-0.128l0.128,0l0.258,0.258l0.128,0l0,0.129l-0.386,0.515l0.516,0.257l0.643,0.257l0.644,0.258l0.514,0.128l0.515,0.386l0.128,0.387l0,0.257l0.130,0.515l0.128,0.386l0.129,0.515l0.130,0.515l0.127,0.515l0,0.386l0.129,0.515l0.258,0.772l-0.129,0.258l-0.385,0.515l-0.259,0.515l0,0.129l0,0.128l-0.514,0.516l-0.772,1.030l-0.387,0.385l-0.257,0.515l0,0.257l0,0.130l0.257,0.257l0.387,0.257l0.514,0.129l0.644,0l0.643,-0.258l0.644,-0.257l0.644,-0.258l0.643,-0.385l0.644,-0.258l0.645,-0.129l0.900,-0.128l0.387,0l0.128,0l0.644,-0.129l0.643,-0.258l0.643,-0.257l0.902,-0.257l0.772,-0.258l0.386,-0.128l0.258,-0.130l0,-0.128l0,-0.258l-0.387,-0.772l0,-0.129l-0.257,-0.386l0.386,-0.129l0.515,-0.257l0.258,0l0.772,-0.128l0.643,0l0.902,0l0.772,0.128l0.901,0l0.516,0l0.643,0l0.257,-0.515l0.387,-0.386l0.256,-0.258l0.387,-0.258l2.703,-1.801l1.287,-0.516l4.120,0l4.891,0l0.258,-0.772l0.901,0l1.158,-0.515l0.902,-1.159l0.901,-2.187l2.060,-1.932l0.900,0.644l1.804,-0.386l1.157,0.772l0,3.605l1.803,1.545l0,-1.158zM16.808,64.322l2.059,0.257l0.258,1.031l-1.545,0.386l-1.802,-0.516l-1.673,-0.772l-2.703,0.386zM52.465,70.759l1.803,0.257l1.157,0.774l-2.317,1.286l-2.703,1.029l-1.416,-0.643l-0.385,-1.288l2.445,-0.901l-1.416,0.514zM85.42,39.22l0,9.913l0,15.446l2.574,0l2.704,0.774l1.802,1.157l2.445,1.803l2.575,-1.545l2.703,-0.902l1.545,1.417l1.802,1.159l2.446,1.159l1.674,1.930l2.703,3.090l4.634,1.673l0,1.802l-1.417,1.287l-1.544,-1.029l-2.316,-0.901l-0.773,-2.318l-3.476,-2.189l-1.415,-2.573l-2.576,-0.129l-4.376,-0.129l-3.090,-0.773l-5.535,-2.703l-2.702,-0.514l-4.636,-1.031l-3.733,0.259l-5.278,-1.288l-3.217,-1.159l-2.962,0.643l0.515,1.804l-1.544,0.257l-3.090,0.515l-2.318,0.900l-2.961,0.644l-0.385,-1.673l1.159,-2.575l2.831,-0.900l-0.771,-0.645l-3.347,1.545l-1.802,1.802l-3.991,1.931l2.059,1.288l-2.574,1.931l-2.961,1.030l-2.704,0.900l-0.643,1.159l-4.119,1.416l-0.901,1.288l-3.090,1.158l-1.931,-0.258l-2.445,0.773l-2.832,0.901l-2.189,0.902l-4.634,0.772l-0.387,-0.516l2.962,-1.158l2.574,-0.901l2.832,-1.417l3.347,-0.385l1.416,-1.030l3.734,-1.673l0.514,-0.516l2.059,-0.901l0.386,-2.059l1.418,-1.545l-3.091,0.773l-0.901,-0.516l-1.415,1.031l-1.803,-1.417l-0.644,1.030l-1.029,-1.417l-2.704,1.160l-1.673,0l-0.257,-1.674l0.514,-0.901l-1.673,-1.029l-3.604,0.513l-2.189,-1.287l-1.931,-0.643l0,-1.545l-2.059,-1.030l1.029,-1.673l2.188,-1.416l1.030,-1.416l2.189,-0.129l1.802,0.386l2.189,-1.287l1.930,0.257l2.059,-0.901l-0.513,-1.158l-1.546,-0.515l2.059,-1.030l-1.673,0l-2.832,0.515l-0.772,0.643l-2.188,-0.514l-3.863,0.257l-3.861,-0.643l-1.158,-1.159l-3.476,-1.545l3.862,-1.030l6.050,-1.416l2.188,0l-0.386,1.416l5.665,-0.129l-2.189,-1.673l-3.347,-1.031l-1.931,-1.286l-2.574,-1.158l-3.605,-0.901l1.417,-1.417l4.762,-0.129l3.475,-1.158l0.644,-1.288l2.703,-1.287l2.704,-0.386l5.021,-1.159l2.574,0.128l4.119,-1.415l3.990,0.643l2.060,1.159l1.159,-0.515l4.505,0.128l-0.128,0.644l4.119,0.516l2.703,-0.258l5.664,0.773l5.278,0.257l2.060,0.386l3.604,-0.514l3.991,0.900l-2.961,-0.387zM2.647,55.182l1.673,0.515l1.674,-0.258l2.189,0.644l2.574,0.386l-0.128,0.258l-2.061,0.644l-2.059,-0.644l-1.030,-0.514l-2.446,0.128l-0.643,-0.128l-0.257,1.031zM45.256,175.546l0,-0.773l-0.385,-1.029l0.643,-0.643l-0.258,-0.516l0.129,-0.128l0,-0.129l1.803,0.773l0.256,0.385l0,0.258l0.258,0.129l0.129,0.128l0.385,0.387l-0.643,0.514l-0.772,0.129l-0.515,0.515l-0.258,0.387l0.772,0.387zM43.067,170.01l-0.385,0.258l-1.158,-0.128l0.128,-0.387l-1.415,-0.257zM44.999,170.912l0,0.257l-0.258,0.129l-0.900,0.128l-0.130,-0.514l-0.386,0l-0.258,-0.387l0.130,-0.128l0.257,-0.129l0.257,0.385l0.516,-0.128l-0.772,-0.387zM39.335,169.496l-0.515,-0.643l0.386,-0.130l0.515,-0.257l0.386,0.643l0.257,0l0.258,0.516l-0.515,0l-0.257,-0.129l-0.129,0l0.386,0zM34.829,167.564l0.129,-0.256l0.386,-0.259l0.643,0.130l0.130,0.129l-0.130,0.514l-0.256,0.258l-0.516,-0.129l0.386,0.387z'</body><body package="Roassal-Core">Uruguay	^ 'M310.05,308.396l1.674,-0.257l2.704,2.059l1.030,-0.130l2.702,1.805l2.189,1.414l1.545,1.804l-1.158,1.286l0.772,1.545l-1.159,1.674l-3.089,1.545l-2.060,-0.515l-1.416,0.257l-2.447,-1.157l-1.801,0.128l-1.674,-1.545l0.129,-1.674l0.643,-0.643l0,-2.705l0.644,-2.702l-0.772,2.189z'</body><body package="Roassal-Core">Uzbekistan	^ 'M644.487,126.371l0,-1.674l-3.604,-1.158l-2.832,-1.288l-1.674,-1.288l-3.089,-1.931l-1.289,-2.702l-1.029,-0.515l-2.832,0.128l-1.030,-0.515l-0.256,-2.188l-3.735,-1.416l-2.188,1.545l-2.315,0.901l0.384,1.417l-2.959,0l-0.130,-9.914l6.951,-1.544l0.515,0.129l0.644,0.386l1.159,0.515l2.317,1.030l2.189,1.029l2.574,2.446l3.219,-0.385l4.633,-0.259l3.219,2.060l-0.258,2.703l1.287,0l0.644,2.189l3.347,0.128l0.771,1.288l1.030,-0.129l1.160,-1.931l3.603,-1.802l1.547,-0.515l0.770,0.258l-2.317,1.801l2.061,1.030l1.929,-0.772l3.090,1.416l-3.346,1.932l-2.060,-0.257l-1.158,0.127l-0.386,-0.772l0.514,-1.287l-3.603,0.644l-0.775,1.801l-1.285,1.417l-2.318,-0.129l-0.643,1.159l1.931,0.644l0.645,2.060l-1.547,2.703l-2.059,-0.515l1.416,0z'</body><body package="Roassal-Core">Vanuatu	^ 'M915.718,269.777l1.674,1.545l-0.901,0.387l-0.902,-1.160l-0.129,0.772zM914.56,269.133l-0.387,-0.643l0,-2.060l1.287,0.773l0.387,2.189l-0.774,-0.387l0.513,-0.128z'</body><body package="Roassal-Core">Venezuela	^ 'M273.105,195.242l-0.128,0.644l-1.545,0.257l0.902,1.287l-0.129,1.416l-1.160,1.545l1.030,2.188l1.159,-0.257l0.643,-1.931l-0.900,-0.901l-0.129,-2.060l3.346,-1.159l-0.385,-1.158l1.029,-0.901l0.902,1.931l1.930,0l1.804,1.545l0,0.902l2.444,0l2.962,-0.259l1.544,1.159l2.060,0.387l1.416,-0.902l0.128,-0.644l3.218,-0.128l3.348,-0.130l-2.317,0.773l0.900,1.288l2.189,0.257l2.060,1.288l0.386,2.187l1.417,-0.128l1.028,0.645l-2.187,1.672l-0.130,0.902l0.902,1.029l-0.644,0.516l-1.673,0.385l0,1.287l-0.772,0.772l1.930,2.061l0.257,0.772l-0.900,1.030l-3.090,0.902l-1.930,0.515l-0.774,0.643l-2.059,-0.773l-2.060,-0.257l-0.514,0.257l1.158,0.643l0,1.804l0.387,1.672l2.188,0.259l0.128,0.514l-1.931,0.772l-0.257,1.159l-1.159,0.515l-1.930,0.644l-0.515,0.772l-2.060,0.129l-1.544,-1.417l-0.773,-2.703l-0.772,-0.901l-1.031,-0.644l1.416,-1.287l-0.127,-0.644l-0.773,-0.772l-0.516,-1.802l0.259,-1.931l0.513,-0.901l0.517,-1.416l-0.902,-0.515l-1.545,0.386l-1.931,-0.129l-1.158,0.258l-1.802,-2.317l-1.546,-0.387l-3.475,0.258l-0.644,-0.901l-0.772,-0.257l0,-0.516l0.257,-1.030l-0.128,-1.028l-0.644,-0.645l-0.387,-1.287l-1.415,-0.129l0.772,-1.545l0.387,-1.931l0.772,-1.030l1.029,-0.771l0.644,-1.289l-1.802,0.514z'</body><body package="Roassal-Core">Vietnam	^ 'M756.353,168.853l-3.606,2.316l-2.316,2.575l-0.514,1.930l2.059,2.832l2.445,3.476l2.445,1.675l1.674,2.188l1.287,5.020l-0.385,4.634l-2.318,1.802l-3.090,1.803l-2.187,2.188l-3.348,2.574l-0.902,-1.801l0.644,-1.803l-1.929,-1.544l2.316,-1.030l2.834,-0.258l-1.160,-1.674l4.506,-2.059l0.386,-3.218l-0.644,-1.803l0.387,-2.702l-0.645,-1.803l-2.061,-1.931l-1.673,-2.318l-2.188,-3.217l-3.219,-1.674l0.774,-0.902l1.672,-0.772l-1.028,-2.317l-3.347,0l-1.159,-2.446l-1.544,-2.188l1.416,-0.644l2.187,0l2.576,-0.257l2.317,-1.416l1.287,1.030l2.445,0.515l-0.387,1.545l1.289,1.029l-2.704,-0.645z'</body><body package="Roassal-Core">WesternSahara	^ 'M441.482,153.92l0,-1.417l0.387,0l0,0.129l0,0.514l0,4.120l-8.883,-0.129l0.129,6.823l-2.574,0.257l-0.644,1.417l0.515,3.862l-10.557,0l-0.643,0.901l0.129,-1.159l0.129,0l6.050,-0.129l0.257,-1.029l1.159,-1.159l0.901,-3.733l3.733,-2.961l1.287,-3.347l0.773,-0.257l0.900,-2.060l2.319,-0.257l0.900,0.257l1.288,0l0.901,-0.515l-1.544,0.128z'</body><body package="Roassal-Core">Yemen	^ 'M608.315,182.111l-1.931,0.772l-0.516,1.159l-0.127,0.901l-2.704,1.159l-4.249,1.287l-2.445,1.802l-1.158,0.258l-0.774,-0.258l-1.673,1.159l-1.673,0.515l-2.189,0.128l-0.772,0.130l-0.515,0.772l-0.772,0.128l-0.386,0.774l-1.287,-0.130l-0.903,0.387l-1.930,-0.129l-0.644,-1.545l0.129,-1.546l-0.516,-0.772l-0.513,-1.930l-0.772,-1.158l0.514,-0.129l-0.258,-1.159l0.388,-0.515l-0.130,-1.288l1.158,-0.772l-0.258,-1.158l0.645,-1.288l1.158,0.644l0.773,-0.257l3.090,0l0.514,0.257l2.574,0.257l1.031,-0.128l0.644,0.901l1.287,-0.515l1.931,-2.832l2.445,-1.159l7.853,-1.030l2.061,4.378l-0.900,-1.930z'</body><body package="Roassal-Core">Zambia	^ 'M553.476,251.883l1.287,1.160l0.644,2.315l-0.386,0.644l-0.645,2.189l0.516,2.317l-0.773,0.902l-0.772,2.447l1.416,0.770l-8.239,2.189l0.258,1.932l-2.060,0.385l-1.543,1.031l-0.259,1.028l-1.028,0.130l-2.319,2.188l-1.545,1.802l-0.902,0l-0.772,-0.257l-3.088,-0.256l-0.515,-0.259l0,-0.259l-1.030,-0.513l-1.803,-0.258l-2.187,0.644l-1.673,-1.674l-1.804,-2.187l0.128,-8.625l5.536,0.127l-0.257,-1.028l0.387,-0.903l-0.387,-1.287l0.257,-1.286l-0.257,-0.902l0.901,0.130l0.128,0.772l1.289,0l1.672,0.258l0.903,1.158l2.187,0.385l1.674,-0.901l0.644,1.416l2.058,0.387l0.903,1.158l1.159,1.545l2.058,0l-0.258,-2.961l-0.642,0.516l-1.932,-1.031l-0.772,-0.514l0.387,-2.705l0.514,-3.088l-0.642,-1.288l0.771,-1.673l0.643,-0.387l3.733,-0.386l1.030,0.258l1.159,0.773l1.030,0.387l1.675,0.384l-1.543,-0.901z'</body><body package="Roassal-Core">Zimbabwe	^ 'M549.228,286.898l-1.416,-0.257l-0.901,0.386l-1.289,-0.513l-1.157,0l-1.673,-1.290l-2.061,-0.385l-0.772,-1.674l0,-1.030l-1.158,-0.256l-3.089,-2.962l-0.900,-1.544l-0.516,-0.516l-1.030,-2.058l3.088,0.256l0.772,0.257l0.902,0l1.545,-1.802l2.319,-2.188l1.028,-0.130l0.259,-1.028l1.543,-1.031l2.060,-0.385l0.129,1.029l2.317,-0.129l1.287,0.645l0.515,0.645l1.287,0.254l1.415,0.774l0,3.475l-0.513,1.801l-0.128,2.061l0.385,0.773l-0.257,1.545l-0.386,0.258l-0.773,1.930l2.832,-3.'</body></methods><methods><class-id>Roassal.ROSVGPath class</class-id> <category>instance creation</category><body package="Roassal-Core">path: aPathString	^ self new path: aPathString</body></methods><methods><class-id>Roassal.ROSVGPath class</class-id> <category>list of countries</category><body package="Roassal-Core">countries	^ #(#Afghanistan #Albania #Algeria #Angola #Argentina #Armenia #Australia #Austria #Azerbaijan #Bangladesh #Belarus #Belgium #Belize #Benin #Bhutan #Bolivia #BosniaandHerzegovina #Botswana #Brazil #BruneiDarussalam #Bulgaria #BurkinaFaso #Burundi #Cambodia #Cameroon #Canada #CentralAfricanRepublic #Chad #Chile #China #Colombia #Congo #CostaRica #Croatia #Cuba #Cyprus #CzechRepublic #DemocraticRepublicCongo #Denmark #Djibouti #DominicanRepublic #Ecuador #Egypt #ElSalvador #EquatorialGuinea #Eritrea #Estonia #Ethiopia #FalklandIslandsMalvinas #Fiji #Finland #France #FrenchGuyana #GM #Gabon #Georgia #Germany #Ghana #GreatBritian #Greece #Greenland #Guatemala #Guinea #GuineaBissau #Guyana #Haiti #Honduras #Hungary #Iceland #India #Indonesia #Iran #Iraq #Ireland #Israel #Italy #IvoryCoast #Jamacia #Japan #Jordan #Kazakhstan #Kenya #Kuwait #Kyrgyzstan #Laos #Latvia #Lebanon #Lesotho #Liberia #Libya #Lithuania #Luxembourg #Madagascar #Malawi #Malaysia #Mali #Mauritania #Mexico #Moldova #Mongolia #Morocco #Mozambique #MyanmarBurma #Nambia #Nepal #Netherlands #NewZealand #Nicaragua #Niger #Nigeria #NorthKorea #Norway #NewCaledonia #Oman #Pakistan #Palestine #Panama #PapuaNewGuinea #Paraguay #Peru #Phillipines #Poland #Portugal #PuertoRico #Qatar #RepublicofMacedonia #RepublicofTurkey #Romania #Russia #Rwanda #SaudiArabia #Senegal #Serbia #SierraLeone #Slovakia #SolomonIslands #Somolia #SouthAfrica #SouthKorea #Spain #SriLanka #Sudan #Suriname #SvalbardJanMayen #Swaziland #Sweden #Switzerland #Syria #Taiwan #Tajikistan #Tanzania #Thailand #TimorLeste #Togo #Tunisia #Turkmenistan #Uganda #Ukraine #UnitedArabEmirates #UnitedStates #Uruguay #Uzbekistan #Vanuatu #Venezuela #Vietnam #WesternSahara #Yemen #Zambia #Zimbabwe)</body><body package="Roassal-Core">southAmerica	^ #(#Argentina #Brazil #Chile #Colombia #Ecuador #Paraguay #Peru #Uruguay #Venezuela)</body></methods><methods><class-id>Roassal.RODraggableWithVelocity</class-id> <category>initialization</category><body package="Roassal-Core">initializeElement: element	| lastStep |		element on: ROMouseDragging do: [:event |		lastStep := event step.		"lastTimeStamp := ROPlatform current timeOrganizerClass milliseconds "].	 element on: ROMouseDragged do: [ :event | 		ROMotionMove new 			strategy: ROAnimationExclusive instance;			for: element initialSpeed: lastStep ].			element on: ROMouseClick do: [ :event |		ROMotionMove new 			strategy: ROAnimationExclusive instance;			for: element initialSpeed: 0 @ 0 ]</body></methods><methods><class-id>Roassal.RODraggableWithVelocity class</class-id> <category>public</category><body package="Roassal-Core">elementToBeAdded	instance ifNil: [  instance := self new ].	^ instance</body></methods><methods><class-id>Roassal.ROHorizontalArrow</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Return the begining and ending of the arrow"		| fromPoint toPoint vector u unit arrowMiddle arrowTop arrowBottom w c toPointWithOffset r |	fromPoint := line startingPointOf: anEdge.	toPoint := line endingPointOf: anEdge.	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		u := vector normal.	unit := vector / r."	toPointWithOffset := toPoint - (offset * (vector r - size) * unit)."	(offset = 0)		ifTrue: [ toPointWithOffset := toPoint - (offset * (vector r - size) * unit) ]		ifFalse: [ toPointWithOffset := fromPoint + (unit * (size @ 0))  ].		arrowMiddle := toPointWithOffset - (unit * size). 	arrowTop :=  arrowMiddle - (u * size).	arrowBottom := arrowMiddle + (u * size).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: toPointWithOffset to: arrowTop width: w color: c.	aCanvas line: arrowTop to: arrowBottom width: w color: c.	aCanvas line: arrowBottom to: toPointWithOffset width: w color: c.		^ Array with: toPointWithOffset with: arrowMiddle</body></methods><methods><class-id>Roassal.ROHorizontalArrow</class-id> <category>hooks</category><body package="Roassal-Core">getDirectionVectorFrom: fromPoint to: toPoint	^ (toPoint - fromPoint) x @  0</body></methods><methods><class-id>Roassal.ROReversedHorizontalArrow</class-id> <category>drawing</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge line: line	"Return the begining and ending of the arrow"		| fromPoint toPoint vector u unit arrowMiddle arrowTop arrowBottom w c toPointWithOffset r |	fromPoint := line startingPointOf: anEdge.	toPoint := line endingPointOf: anEdge.	"Draw head"	vector := self getDirectionVectorFrom: fromPoint to: toPoint.	r := vector r.	r = 0 ifTrue: [ ^ Array with: fromPoint with: fromPoint ].		u := vector normal.	unit := vector / r.		(offset = 0)		ifTrue: [ toPointWithOffset := toPoint - (offset * (vector r - size) * unit) ]		ifFalse: [ toPointWithOffset := fromPoint + (unit * (size @ 0))  ].		arrowMiddle := toPointWithOffset - (unit * size). 	arrowTop :=  toPointWithOffset - (u * size).	arrowBottom := toPointWithOffset + (u * size).	w :=  line width roValue: anEdge.	c := line colorFor: anEdge.	aCanvas line: arrowMiddle to: arrowTop width: w color: c.	aCanvas line: arrowTop to: arrowBottom width: w color: c.	aCanvas line: arrowBottom to: arrowMiddle width: w color: c.		^ Array with: (fromPoint + (unit * (size @ 0))) with: (toPoint - (unit * (size @ 0)))</body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>private</category><body package="Roassal-Core">getIdFor: anObject	|id|	idsDic at: anObject ifAbsentPut: [id := idCount. idCount := idCount + 1. id].	^idsDic at: anObject </body><body package="Roassal-Core">getModelAsString: aNode	|ret|	aNode model isNil 		ifTrue: [ret := 'Node'] 		ifFalse: [ "Ugly but compatible with VW"				((aNode model) isKindOf: String) 					ifTrue: [ret := aNode model] 					ifFalse:  [ret := aNode model printString ]].			^ (ret replaceAll: '"' first with: ' ' first)</body><body package="Roassal-Core">getParentIdFor: aNode	^(aNode parent isNil) 		ifTrue: ['"null"'] 		ifFalse: [(self getIdFor: aNode parent) printString ] </body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>visit</category><body package="Roassal-Core">visitEdge: anEdge	self getShapesForEdge: anEdge.	</body><body package="Roassal-Core">visitElement: aNode	self addElementToStream: aNode.			self getShapesForElement: aNode.	self addChildrenElementsFor: aNode.</body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>start-end</category><body package="Roassal-Core">afterRun	self endNodesStream.	self endLinksStream.</body><body package="Roassal-Core">beforeRun	self initializeIdDependences.	self initializeNodesStream.	self initializeLinksStream.	self initializeElementShapeVisitor.	self initializeEdgeShapeVisitor.</body><body package="Roassal-Core">endLinksStream 	linksStream nextPutAll: ' ] '.</body><body package="Roassal-Core">endNodesStream 	nodesStream nextPutAll: ' ], '.</body><body package="Roassal-Core">initializeEdgeShapeVisitor	edgeVisitor := ROHTMLEdgeShapeVisitor new.	edgeVisitor stream: linksStream.</body><body package="Roassal-Core">initializeElementShapeVisitor	shapeVisitor := ROHTMLElementShapeVisitor new.	shapeVisitor stream: nodesStream.</body><body package="Roassal-Core">initializeIdDependences	idsDic := IdentityDictionary new.	idCount := 0.</body><body package="Roassal-Core">initializeLinksStream 	linksStream := WriteStream on: String new.	linksStream nextPutAll: ' links:[ '.</body><body package="Roassal-Core">initializeNodesStream 	nodesStream := WriteStream on: String new.	nodesStream nextPutAll: ' nodes:[ '.</body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>private-element</category><body package="Roassal-Core">addChildrenElementsFor: aNode	aNode view camera 		translateBy: aNode topLeft negated.	aNode elementsDo: [:el | el accept: self.].	aNode view camera 		translateBy: aNode topLeft.</body><body package="Roassal-Core">addElementToStream: aNode		| position bounds nodeModel nodeParentID |	position := aNode view camera virtualToRealPoint: aNode topLeft.	bounds :=  aNode view camera virtualToRealRectangle: aNode bounds. 	nodeModel :=  self getModelAsString: aNode.	nodeParentID := self getParentIdFor: aNode.		nodesStream 		nextPutAll: '{ ';		nextPutAll: ('nodeID: &lt;1p&gt;' expandMacrosWith: (self getIdFor: aNode )); 		nextPutAll: ', ';		nextPutAll: ('nodeShape: "&lt;1s&gt;"' expandMacrosWith: (ROElement name asString)); 		nextPutAll: ', ';		nextPutAll: ('nodeModel: "&lt;1s&gt;"' expandMacrosWith: nodeModel); 		nextPutAll: ', ';		nextPutAll: ('nodeWidth: &lt;1p&gt;' expandMacrosWith: bounds width); 		nextPutAll: ', ';		nextPutAll: ('nodeHeight: &lt;1p&gt;' expandMacrosWith: bounds height); 		nextPutAll: ', ';		nextPutAll: ('x: &lt;1p&gt;' expandMacrosWith: position x); 		nextPutAll: ', ';		nextPutAll: ('y: &lt;1p&gt;' expandMacrosWith: position y); 		nextPutAll: ', ';		nextPutAll: ('nodeParentID: &lt;1s&gt;' expandMacrosWith: nodeParentID); 		nextPutAll: ', ';		nextPutAll: ('draggable: "&lt;1p&gt;"' expandMacrosWith: (aNode is: RODraggable));		nextPutAll: '},';		nextPutAll: ROPlatform current newLine.</body><body package="Roassal-Core">getShapesForElement: aNode 	| nodeID nodeParentID |		shapeVisitor node: aNode.		aNode 		shapesDo: [:aShape | 	nodeID := self getIdFor: aShape.								nodeParentID := (self getIdFor: aNode) printString.								shapeVisitor nodeParentID: nodeParentID.								shapeVisitor nodeID: nodeID.								aShape accept: shapeVisitor.]</body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>accesing</category><body package="Roassal-Core">linksStream	^linksStream </body><body package="Roassal-Core">nodesStream 	^nodesStream </body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>public</category><body package="Roassal-Core">runOn: aROView	self beforeRun.	aROView elementsDo: [ :el | el accept: self ].	self afterRun.</body></methods><methods><class-id>Roassal.ROHTMLVisitor</class-id> <category>private-edge</category><body package="Roassal-Core">getShapesForEdge: anEdge	edgeVisitor edge: anEdge.		anEdge 		shapesDo: [:aShape | 	| idFrom idTo |								idFrom := self getIdFor: anEdge from.								idTo := self getIdFor: anEdge to.								edgeVisitor edge: anEdge.								edgeVisitor idNodeFrom: idFrom. 								edgeVisitor idNodeTo: idTo. 								aShape accept: edgeVisitor.]	</body></methods><methods><class-id>Roassal.ROCenteredAttachPoint</class-id> <category>public - hooks</category><body package="Roassal-Core">endingPointOf: anEdge	^ anEdge to absolutePosition + (anEdge to extent / 2) asIntegerPoint</body><body package="Roassal-Core">startingPointOf: anEdge	^ (anEdge from absolutePosition + (anEdge from extent / 2)) asIntegerPoint</body></methods><methods><class-id>Roassal.ROSortBlock</class-id> <category>accessing</category><body package="Roassal-Core">fixTemps</body><body package="Roassal-Core">value: assocA value: assocB	"Return false if assocA is bigger than assocB.	Return true if assocA is smaller than assocB.	-&gt; Inverted list with biggest elements first"		| a b offset |	offset := 0.	a := assocA value.	b := assocB value.	[(a size &gt; offset)		and: [(b size &gt; offset) and: [(a at: a size - offset) = (b at: b size - offset)]]]		whileTrue: [offset := offset + 1].	"Corner cases"	(a size = b size and: [b size = offset]) ifTrue: [ ^ true ].	"[3, 3], [3, 3]"	(a size &gt; offset and: [b size = offset]) ifTrue: [ ^ true ].	"[3, 3, 6], [3, 3]"	(b size &gt; offset and: [a size = offset]) ifTrue: [ ^ false ].	"[3, 3], [3, 3, 6]"	"Normal case"	^(a at: a size - offset) &gt;= (b at: b size - offset)</body></methods><methods><class-id>Roassal.ROOrderedCollection</class-id> <category>tests</category><body package="Roassal-Core">testBasic	self assert: ((#(5 4 1 5 2) sortedAs: #squared) asArray =  #(1 2 4 5 5) )</body><body package="Roassal-Core">testReverseBasic	self assert: ((#(5 4 1 5 2) reverseSortedAs: #squared) asArray =  #(1 2 4 5 5) reverse )</body></methods><methods><class-id>Roassal.ROZoomOnClick</class-id> <category>initialization</category><body package="Roassal-Core">initializeElement: element	 | el isZoomed originalBounds |	isZoomed := false.		 element on: ROMouseClick do: [:event | 		isZoomed 			ifTrue: [ ROZoomMove new on: element view to: originalBounds ]			ifFalse: [				originalBounds := element view camera bounds.				ROZoomMove new on: element view to: element bounds ].		isZoomed := isZoomed not ].	</body></methods><methods><class-id>Roassal.RONoTextCanvasWrapper</class-id> <category>rendering</category><body package="Roassal-Core">drawString: aByteString at: aPoint </body><body package="Roassal-Core">drawString: aByteString at: aPoint color: color</body><body package="Roassal-Core">drawString: aByteString at:  p font: f color: color</body></methods><methods><class-id>Roassal.ROAllConnectedNodeDraggableTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view oldPoss newPoss |	view := ROView new.	view addAll: (ROBox green elementsOn: #(1 2 3)).	view addAll: (ROLine buildEdgesFromElement: view elements first from: #yourself toAll: #(2 3)).	ROTreeLayout on: view elements.		view elements first @ ROAllConnectedNodeDraggable.	oldPoss := view elements collect: #position.	view elements first translateBy: 10 @ 15.	newPoss := view elements collect: #position.	oldPoss with: newPoss do: [ :p1 :p2 | self assert: p2 = (p1 + (10 @ 15)) ].</body></methods><methods><class-id>Roassal.ROTreeMapLayoutTest</class-id> <category>tests</category><body package="Roassal-Core">testBasicNodePositioning	| layout view nodes edges root |		"Setting up..."	layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	view shape width: 400; height: 400.	view nodes: (0 to: 76).	edges := view edgesFrom: [ :each | each // 10 ].	view layout: layout.		nodes := view nodes.	root := nodes first.	view applyLayout.	nodes := layout recursiveChildrenSortedFor: root.		"Check dimensions and position of root node."      self assert: root extent = (400 @ 400).	self assert: root bounds = ((5@5) corner: (405@405)).		"These are relative bounds (to containment nodes bounds)."	self assert: (nodes at: 1) bounds = ((5@5) corner: (44@91)).	self assert: (nodes at: 2) bounds = ((43@5) corner: (122@91)).	self assert: (nodes at: 3) bounds = ((121@5) corner: (238@91)).	self assert: (nodes at: 8) bounds = ((126@177) corner: (252@395)).	self assert: (nodes at: 33) bounds = ((5@46) corner: (29@81)).	self assert: (nodes at: 49) bounds = ((102@53) corner: (153@81)).	self assert: (nodes at: 67) bounds = ((47@79) corner: (117@106)).	self assert: (nodes at: 76) bounds = ((223@5) corner: (264@83)).</body><body package="Roassal-Core">testDeepNesting	| layout view nodes interval o |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	layout inset: 5.	layout minInset: 3.	interval := 1 to: 30.	view := ROMondrianViewBuilder new.	view shape size: 240.	view nodes: interval.	o := OrderedCollection new.	interval do: [ :each | o add: each -&gt; (each+1)].	view edgesFromAssociations: o.	view layout: layout.		nodes := view nodes.	view applyLayout.		self assert: (nodes at: 1) extent = (240@240).	self assert: (nodes at: 1) position = (5@5).	self assert: (nodes at: 2) extent = (230@230).	self assert: (nodes at: 2) position = (5@5).	self assert: (nodes at: 4) extent = (210@210).	self assert: (nodes at: 4) position = (5@5).	self assert: (nodes at: 7) extent = (182@182).	self assert: (nodes at: 7) position = (4@4).	self assert: (nodes at: 11) extent = (150@150).	self assert: (nodes at: 11) position = (4@4).	self assert: (nodes at: 16) extent = (120@120).	self assert: (nodes at: 16) position = (3@3).	self assert: (nodes at: 22) extent = (84@84).	self assert: (nodes at: 22) position = (3@3).	self assert: (nodes at: 29) extent = (42@42).	self assert: (nodes at: 29) position = (3@3).	self assert: (nodes at: 30) extent = (36@36).	self assert: (nodes at: 30) position = (3@3).</body><body package="Roassal-Core">testDisplayOfManyChildren	| layout view associations numberOfNodes |	numberOfNodes := 800.		layout := ROTreeMapLayout withWeightBlock: [ :e | e model ].	layout minAreaPerNode: 25.	layout inset: 5.	layout weightBlock: [ :e | e model squared ].		view := ROMondrianViewBuilder new.	view shape rectangle size: 200.	view nodes: (1 to: numberOfNodes).	associations := Array new: numberOfNodes.	(1 to: numberOfNodes) do: [ :i | associations at: i put: (1 -&gt; i) ].		view edgesFromAssociations: associations.	view layout: layout.	"view open."	view applyLayout.		self assert: view nodes first elements size = 498 description: 'Not all 800 should be drawn, but only 498'.</body><body package="Roassal-Core">testDisplayOfManyChildren2	| layout view associations numberOfNodes |	numberOfNodes := 5000.		layout := ROTreeMapLayout withWeightBlock: [ :e | e model ].	layout minAreaPerNode: 25.	layout inset: 5.	layout weightBlock: [ :e | e model squared ].		view := ROMondrianViewBuilder new.	view shape rectangle size: 400.	view nodes: (1 to: numberOfNodes).	associations := Array new: numberOfNodes.	(1 to: numberOfNodes) do: [ :i | associations at: i put: (1 -&gt; i) ].		view edgesFromAssociations: associations.	view layout: layout.	"view open."	view applyLayout.		self assert: view nodes first elements size = 2773 description: 'Not all 5000 should be drawn, but only 2773'.</body><body package="Roassal-Core">testEdgeDrivenLayouting	| view nodes rawEdges edges |		view := ROMondrianViewBuilder new.	view shape width: 200; height: 200.	"view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass."	nodes := view nodes: (1 to: 9).	rawEdges := OrderedCollection new.	rawEdges add: 1 -&gt; 2; add: 1 -&gt; 3; add: 2 -&gt; 4; add: 3 -&gt; 5; add: 5 -&gt; 6; add: 6 -&gt; 7; add: 7 -&gt; 8; add: 8 -&gt; 9.	edges := view edgesFromAssociations: rawEdges.		view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view applyLayout.		"Testing right number of objects and ordering"	self assert: nodes size = 9.	self assert: edges size = 8.	self assert: nodes first model = 1.		"Testing  bounds"	self assert: (nodes first bounds = ((5@5) corner: (205@205))).	self assert: (nodes second bounds = ((5@5) corner: (195@81))).	self assert: (nodes third bounds = ((5@80) corner: (195@195))).	self assert: ((nodes at: 8) bounds = ((5@5) corner: (155@80))).	self assert: ((nodes at: 9) bounds = ((4@4) corner: (146@71))).		"Testing z-index"	self assert: nodes first zIndex = 1.	self assert: nodes second zIndex = 2.	self assert: nodes third zIndex = 2.	self assert: nodes fourth zIndex = 3.	self assert: nodes fifth zIndex = 3.	self assert: (nodes at: 6) zIndex = 4.	self assert: (nodes at: 7) zIndex = 5.	self assert: (nodes at: 8) zIndex = 6.	self assert: (nodes at: 9) zIndex = 7.</body><body package="Roassal-Core">testLayoutEmbedding	| layout view outerModel outerNodes node1 node2 node3 |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	outerModel := (OrderedCollection with: 1).	outerNodes := view nodes: outerModel forEach: [ :node |				"Testing setting the size of the node that has the treemap layout."		view shape rectangle size: 150.				view nodes: (2 to: 3).		view edgesFromAssociations: (Array with: 2 -&gt; 3).		view layout: layout.	].	view applyLayout.	node1 := outerNodes at: 1.	node2 := node1 elements at: 1.	node3 := node2 elements at: 1.	"Make sure outer node has grown corecctly."	self assert: node1 extent = (165 @ 165).		"Make sure the inner nodes have according sizes."	self assert: node2 extent = (150@150).	self assert: node3 extent = (140@140).	</body><body package="Roassal-Core">testLayoutEmbedding2	| layout view outerModel outerNodes innerNodes node1 node2 node3 |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	outerModel := (OrderedCollection with: 1).		"Testing setting the size of the node that is outside of the treemap layout."	view shape rectangle size: 160.		outerNodes := view nodes: outerModel forEach: [ :node |		innerNodes := view nodes: (2 to: 3).		view edgesFromAssociations: (Array with: 2 -&gt; 3).		view layout: layout.	].	view applyLayout.	node1 := outerNodes at: 1.	node2 := node1 elements at: 1.	node3 := node2 elements at: 1.	self assert: node1 extent = (160@160).	self assert: node2 extent = (150@150).	self assert: node3 extent = (140@140).	</body><body package="Roassal-Core">testMinAreaOptimizations	| layout view nodes |	layout := ROTreeMapLayout withWeightBlock: [ :e | e model ].	layout minAreaPerNode: 25.		view := ROMondrianViewBuilder new.	view shape rectangle size: 15.	view nodes: (1 to: 3).	view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 1 -&gt; 3).	view layout: layout.	view applyLayout.		nodes := view nodes.		"The node has lost its relation to its children... :("	self assert: nodes first elements isEmpty.		"Make sure we only render the first node, and none of its children"	self assert: view raw elementsToRender size = 1.		"Also check for correct sizing"	self assert: nodes first extent = (15@15).	self assert: nodes first bounds = ((5@5) corner: (20@20)).</body><body package="Roassal-Core">testMinAreaOptimizations2	| layout view minAreaPerNode minAreaBreakPoint sizeBreakpoint inset numberOfNodes nodes o |	minAreaPerNode := 25.	inset := 3.	numberOfNodes := 10.		layout := ROTreeMapLayout withWeightBlock: [ :e | e model ].	layout inset: inset.	layout minAreaPerNode: minAreaPerNode.		minAreaBreakPoint := layout minAreaNeededFor: (2 to: (numberOfNodes - 1)).	sizeBreakpoint := minAreaBreakPoint sqrt.	view := ROMondrianViewBuilder new.	view shape rectangle size: sizeBreakpoint + 40.		view nodes: (1 to: numberOfNodes).		o := OrderedCollection new.	o add: 1-&gt;2; add: 1-&gt;3; add: 2-&gt;4; add: 1-&gt;5; add: 1-&gt;6; add: 4-&gt;7; add: 7-&gt;8; add: 7-&gt;9; add: 7-&gt;10.	view edgesFromAssociations: o.		view layout: layout.	view applyLayout.		nodes := view nodes.	"In this confgration, exactly 7 nodes should be visible"	self assert: view raw elementsToRender size = 7.</body><body package="Roassal-Core">testMinAreaOptimizations3	| layout view minAreaPerNode minAreaBreakPoint sizeBreakpoint inset numberOfNodes nodes o |	minAreaPerNode := 25.	inset := 3.	numberOfNodes := 10.		layout := ROTreeMapLayout withWeightBlock: [ :e | e model ].	layout inset: inset.	layout minAreaPerNode: minAreaPerNode.		minAreaBreakPoint := layout minAreaNeededFor: (2 to: (numberOfNodes - 1)).	sizeBreakpoint := minAreaBreakPoint sqrt.	view := ROMondrianViewBuilder new.	view shape rectangle size: sizeBreakpoint + 40.		view nodes: (1 to: numberOfNodes).		o := OrderedCollection new.	o add: 1-&gt;2; add: 1-&gt;3; add: 2-&gt;4; add: 1-&gt;5; add: 1-&gt;6; add: 4-&gt;7; add: 7-&gt;8; add: 7-&gt;9; add: 7-&gt;10.	view edgesFromAssociations: o.		view layout: layout.	view applyLayout.		nodes := view nodes.	"In this confgration, exactly 7 nodes should be visible"	self assert: view raw elementsToRender size = 7.</body><body package="Roassal-Core">testNestedNodePositioning	| view nodes edges root |	view := ROMondrianViewBuilder new.	view shape rectangle size: 100.	view nodes: (1 to: 4) forEach: [ :each |		| innerNodes innerEdges |		innerNodes := view nodes: (each*10 to: each*40 by: each*5) asOrderedCollection.		innerEdges := view edgesFromAssociations: 			((Array new: 6)				at: 1 put: (each*10) -&gt; (each*10+each*5*1);				at: 2 put: (each*10) -&gt; (each*10+each*5*2);				at: 3 put: (each*10) -&gt; (each*10+each*5*3);				at: 4 put: (each*10) -&gt; (each*10+each*5*4);				at: 5 put: (each*10) -&gt; (each*10+each*5*5);				at: 6 put: (each*10) -&gt; (each*10+each*5*6);			 	yourself).		view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	].		nodes := view nodes.	view applyLayout.	"view open."		"Make sure outer nodes have the size we specified."	self assert: (nodes at: 1) extent = (100 @ 100).	self assert: (nodes at: 2) extent = (100 @ 100).	self assert: (nodes at: 3) extent = (100 @ 100).	self assert: (nodes at: 4) extent = (100 @ 100).	"Make sure the standard layout - because we have none set for the outer nodes - positions them correctly."	self assert: (nodes at: 1) bounds = ((5@5) corner: (105@105)).	self assert: (nodes at: 2) bounds = ((115@5) corner: (215@105)).	self assert: (nodes at: 3) bounds = ((225@5) corner: (325@105)).	self assert: (nodes at: 4) bounds = ((335@5) corner: (435@105)).		"Test first (inner) nodes..."	self assert: ((nodes at: 1) elements at: 2) bounds = ((24@5) corner: (54@28)).	self assert: ((nodes at: 1) elements at: 3) bounds = ((53@5) corner: (95@28)).	self assert: ((nodes at: 1) elements at: 5) bounds = ((5@56) corner: (43@95)).	self assert: ((nodes at: 1) elements at: 7) bounds = ((42@57) corner: (95@95)).		"Test third (inner) nodes..."	self assert: ((nodes at: 3) elements at: 1) bounds = ((5@5) corner: (25@28)).	self assert: ((nodes at: 3) elements at: 3) bounds = ((53@5) corner: (95@28)).	self assert: ((nodes at: 3) elements at: 4) bounds = ((5@27) corner: (43@57)).	self assert: ((nodes at: 3) elements at: 6) bounds = ((42@27) corner: (95@58)).</body><body package="Roassal-Core">testSimpleEdgeDrivenLayouting	| layout view nodes edges node1 node2 node3 mergedBounds |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	view shape width: 100; height: 100.	view nodes: (1 to: 3).	view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 1 -&gt; 3).	view layout: layout.		nodes := view nodes.	view applyLayout.		node1 := (nodes at: 1).	node2 := (nodes at: 2).	node3 := (nodes at: 3).	mergedBounds := node1 bounds merge: (node2 bounds merge: node3 bounds).	"Make sure the whole 'canvas' is as specified"	self assert: mergedBounds extent = (100@100).	self assert: mergedBounds = ((5@5) corner: (105@105)).		"Lets also make sure the nodes are correctly positioned"	self assert: (node1 bounds = ((5@5) corner: (105@105))).	self assert: (node2 bounds = ((5@5) corner: (95@41))).	self assert: (node3 bounds = ((5@40) corner: (95@95))).		</body><body package="Roassal-Core">testSimpleNestedDrivenLayouting	| layout view nodes root mergedBounds node1 node2 node3 |	view := ROMondrianViewBuilder new.	view shape rectangle size: 100.	view nodes: (OrderedCollection with: 1) forEach: [ :each |		| innerNodes innerEdges |		innerNodes := (view nodes: (2 to: 3)) reverse.		view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	].	nodes := view nodes.	view applyLayout.	nodes := nodes reverse.		node1 := (nodes at: 1).	node2 := ((nodes at: 1) elements at: 1).	node3 := ((nodes at: 1) elements at: 2).	mergedBounds := node1 bounds merge: (node2 bounds merge: node3 bounds).	"Make sure the whole 'canvas' is as specified"	self assert: mergedBounds extent = (100@100).	self assert: mergedBounds = ((5@5) corner: (105@105)).		"Lets also make sure the nodes are correctly positioned"	self assert: (node1 bounds = ((5@5) corner: (105@105))).	self assert: (node2 bounds = ((5@5) corner: (95@41))).	self assert: (node3 bounds = ((5@40) corner: (95@95))).	</body><body package="Roassal-Core">testSingleNodeLayouting	| layout view nodes edges root |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	view shape width: 100; height: 100.	view nodes: (OrderedCollection with: 1).	view layout: layout.		nodes := view nodes.	root := nodes first.		"view open."		view applyLayout.	"Make sure the node has the dimension we specified."	self assert: (nodes at: 1) extent = (100 @ 100).	</body><body package="Roassal-Core">testThreeNodesLayouting	| layout view nodes node1 node2 node3 mergedBounds |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	view shape width: 100; height: 100.	view nodes: (1 to: 3).	view layout: layout.		nodes := view nodes.	view applyLayout.	node1 := (nodes at: 1).	node2 := (nodes at: 2).	node3 := (nodes at: 3).	mergedBounds := node1 bounds merge: (node2 bounds merge: node3 bounds).	"Make sure the whole 'canvas' is as specified"	self assert: mergedBounds extent = (100@100).	self assert: mergedBounds = ((5@5) corner: (105@105)).		"Lets also make sure the nodes are correctly positioned"	self assert: (node1 bounds = ((5@5) corner: (105@21))).	self assert: (node2 bounds = ((5@20) corner: (45@105))).	self assert: (node3 bounds = ((44@20) corner: (105@105))).</body><body package="Roassal-Core">testTwoNodeslayouting	| layout view nodes node1 node2 mergedBounds |		layout := (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	view := ROMondrianViewBuilder new.	view shape width: 100; height: 100.	view nodes: (1 to: 2).	view layout: layout.		nodes := view nodes.	view applyLayout.	node1 := (nodes at: 1).	node2 := (nodes at: 2).	mergedBounds := node1 bounds merge: node2 bounds.	"Make sure the whole 'canvas' is as specified"	self assert: mergedBounds extent = (100@100).	self assert: mergedBounds = ((5@5) corner: (105@105)).	"Make sure the nodes have the right dimensions based on their weight: node2 should be double the size as node1."	"We have to substract the area that node2 has additionally because of the border overlapping. See the splitRectangle 	methods in ROTreeMapLayout"	self assert: (node1 bounds area) * 2 = (node2 bounds area - (2 * node2 bounds width)).	"Lets also make sure the nodes are correctly positioned"	self assert: (node1 bounds = ((5@5) corner: (105@38))).	self assert: (node2 bounds = ((5@37) corner: (105@105))).</body></methods><methods><class-id>Roassal.ROColorTest</class-id> <category>tests</category><body package="Roassal-Core">testAdjustBrightness	self assert: (((Color gray: 0.7) adjustBrightness: -0.2) brightness - 0.5) &lt; 0.01 </body><body package="Roassal-Core">testAdjustBrightnessNegativo	self assert: (((Color gray: 0.7) adjustBrightness: -0.2) brightness - 0.5) &lt; 0.01 </body><body package="Roassal-Core">testAdjustBrightnessPositivo	self assert: (((Color gray: 0.5) adjustBrightness: 0.2) brightness - 0.7) &lt; 0.01 </body><body package="Roassal-Core">testBrightness	self assert: Color red brightness = 1.0.	self assert: Color green brightness = 1.0.	self assert: Color blue brightness = 1.0.		self assert: ((Color gray: 0.7) brightness -  0.7) &lt; 0.1</body></methods><methods><class-id>Roassal.ROAttachPointTest</class-id> <category>rendering</category><body package="Roassal-Core">testRenderingEmbeddedVerticalAttachPoint	| canvas str spr embedding trace1 |		view := ROView new.	el1 := ROElement sprite.	el2 := ROElement sprite.	shape := ROLine new.	shape attachPoint: (ROVerticalAttachPoint new).	edge := (ROEdge from: el1 to: el2) + shape.	embedding := ROElement sprite.	embedding add: el1; add: el2; add: edge.	ROHorizontalLineLayout on: (Array with: el1 with: el2).   	embedding translateBy: 40 @ 30.	canvas := ROTracingCanvas new.	view add: embedding.	view drawOn: canvas. 	self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#line '(40@30)' '(160@30)' 1 'Color red') #(#line '(160@30)' '(160@90)' 1 'Color red') #(#line '(160@90)' '(40@90)' 1 'Color red') #(#line '(40@90)' '(40@30)' 1 'Color red') #(#line '(45@35)' '(95@35)' 1 'Color red') #(#line '(95@35)' '(95@85)' 1 'Color red') #(#line '(95@85)' '(45@85)' 1 'Color red') #(#line '(45@85)' '(45@35)' 1 'Color red') #(#line '(105@35)' '(155@35)' 1 'Color red') #(#line '(155@35)' '(155@85)' 1 'Color red') #(#line '(155@85)' '(105@85)' 1 'Color red') #(#line '(105@85)' '(105@35)' 1 'Color red') #(#line '(130@35)' '(70@85)' 1 'Color veryLightGray'))</body><body package="Roassal-Core">testRenderingVerticalAttachPoint	| canvas |	shape attachPoint: (ROVerticalAttachPoint new).	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace = #(#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') #(#line '(5@5)' '(55@5)' 1 'Color red') #(#line '(55@5)' '(55@55)' 1 'Color red') #(#line '(55@55)' '(5@55)' 1 'Color red') #(#line '(5@55)' '(5@5)' 1 'Color red') #(#line '(65@5)' '(115@5)' 1 'Color red') #(#line '(115@5)' '(115@55)' 1 'Color red') #(#line '(115@55)' '(65@55)' 1 'Color red') #(#line '(65@55)' '(65@5)' 1 'Color red') #(#line '(90@5)' '(30@55)' 1 'Color veryLightGray'))</body></methods><methods><class-id>Roassal.ROAttachPointTest</class-id> <category>tests</category><body package="Roassal-Core">testHorizontalAttachPoint	shape attachPoint: (ROHorizontalAttachPoint new).	self assert: (shape startingPointOf: edge) = (el1 bounds topRight + (0 @ (el1 bounds extent y / 2)) asIntegerPoint ) .	self assert: (shape endingPointOf: edge) = (el2 bounds topLeft + (0 @ (el2 bounds extent y / 2)) asIntegerPoint )  .</body><body package="Roassal-Core">testShorterDistancePoint1	shape attachPoint: (ROShorterDistanceAttachPoint new).		"el1 and el2 are on the same horizontal line. el1 is on the left of el2"	self assert: (shape startingPointOf: edge) = (el1 bounds topRight + (0 @ (el1 bounds extent y / 2)) asIntegerPoint)  .	self assert: (shape endingPointOf: edge) = (el2 bounds topLeft + (0 @ (el2 bounds extent y / 2)) asIntegerPoint)</body><body package="Roassal-Core">testShorterDistancePoint2	| p |	shape attachPoint: (ROShorterDistanceAttachPoint new).		"el1 and el2 are on the same horizontal line. el2 is on the left of el1"	p := el1 position.	el1 translateTo: el2 position.	el2 translateTo: p.		self assert: (shape startingPointOf: edge) = (el1 bounds topLeft + (0 @ (el1 bounds extent y / 2)) asIntegerPoint)  .	self assert: (shape endingPointOf: edge) = (el2 bounds topRight + (0 @ (el2 bounds extent y / 2)) asIntegerPoint)</body><body package="Roassal-Core">testShorterDistancePoint3	| p |	shape attachPoint: (ROShorterDistanceAttachPoint new).		"el1 and el2 are on the same horizontal line. el2 is on the left of el1"	p := el1 position.	el1 translateBy: 0 @ 80.	el2 translateTo: p.		self assert: (shape startingPointOf: edge) = (el1 bounds topLeft + ((el1 bounds width / 2) asInteger @0)) .	self assert: (shape endingPointOf: edge) = (el2 bounds topLeft + ((el2 bounds width / 2) asInteger @ el2 bounds width))</body><body package="Roassal-Core">testShorterDistancePoint4	| p |	shape attachPoint: (ROShorterDistanceAttachPoint new).		"el1 and el2 are on the same vertical line. el1 is above el2"	el2 translateTo: el1 position.	el2 translateBy: 0 @ 80.		self assert: (shape startingPointOf: edge) = (el1 bounds topLeft + ((el1 bounds width / 2) asInteger @ el1 bounds height)) .	self assert: (shape endingPointOf: edge) = (el2 bounds topLeft + ((el2 bounds width / 2) asInteger @ 0))</body><body package="Roassal-Core">testShorterDistancePoint4WithOffset	| p |	shape attachPoint: (ROShorterDistanceAttachPoint new offset: 5).		"el1 and el2 are on the same vertical line. el1 is above el2"	el2 translateTo: el1 position.	el2 translateBy: 0 @ 80.		self assert: (shape startingPointOf: edge) = ((el1 bounds topLeft + ((el1 bounds width / 2) asInteger @ el1 bounds height)) + (5 @ 0)) .	self assert: (shape endingPointOf: edge) = ((el2 bounds topLeft + ((el2 bounds width / 2) asInteger @ 0) + (5 @ 0)))</body><body package="Roassal-Core">testVerticalAttachPoint	shape attachPoint: (ROVerticalAttachPoint new).	self assert: (shape startingPointOf: edge) = (el1 bounds bottomLeft + ((el1 bounds extent x / 2) asInteger @ 0))  .	self assert: (shape endingPointOf: edge) = (el2 bounds topLeft + ((el2 bounds extent x / 2) asInteger @ 0))  .</body></methods><methods><class-id>Roassal.ROAttachPointTest</class-id> <category>running</category><body package="Roassal-Core">setUp		view := ROView new.	el1 := ROElement spriteOn: 1.	el2 := ROElement spriteOn: 2.	el1 @ RODraggable.	el2 @ RODraggable.		edge := ROEdge from: el1 to: el2.	view addAll: (Array with: el1 with: el2 with: edge).	shape := ROLine new.	edge + shape.	ROHorizontalLineLayout on: (Array with: el1 with: el2)</body></methods><methods><class-id>Roassal.ROQuadTree</class-id> <category>accessing</category><body package="Roassal-Core">charge	^ charge</body><body package="Roassal-Core">charge: anObject	charge := anObject</body><body package="Roassal-Core">corner	^ corner</body><body package="Roassal-Core">corner: anObject	corner := anObject</body><body package="Roassal-Core">cx	^ cx</body><body package="Roassal-Core">cx: aFloat	cx := aFloat</body><body package="Roassal-Core">cy	^ cy</body><body package="Roassal-Core">cy: aFloat	cy := aFloat</body><body package="Roassal-Core">leaf	^ leaf</body><body package="Roassal-Core">node	^ node</body><body package="Roassal-Core">nodes	^ nodes</body><body package="Roassal-Core">origin	^ origin</body><body package="Roassal-Core">origin: anObject	origin := anObject</body></methods><methods><class-id>Roassal.ROQuadTree</class-id> <category>adding</category><body package="Roassal-Core">add: aNode	|n|	leaf ifTrue: [ x isNil ifFalse: [ (x - aNode position x) abs + (y - aNode position y) abs &lt; 0.01 ifTrue: [ self addChild: aNode ]																								   ifFalse: [ n := node.																											x := nil.																											y := nil.																											node := nil.																											self addChild: aNode;																												addChild: n ] ] 						ifTrue: [ x := aNode position x.								y := aNode position y.								node := aNode ] ] 		 ifFalse: [ self addChild: aNode ]</body><body package="Roassal-Core">addChild: aNode	| sx sy new |		sx := (origin x + corner x) / 2.	sy := (origin y + corner y) / 2.		leaf := false.	aNode position x &lt; sx ifTrue: [ aNode position y &lt; sy ifTrue: [ (nodes at: 1) isNil ifTrue: [ new := ROQuadTree new.																								new origin: origin;																									corner: sx@sy.																								nodes at: 1 put: new ] .																	(nodes at: 1) add: aNode ]															ifFalse: [ (nodes at: 3) isNil ifTrue: [ new := ROQuadTree new.																								new origin: origin x @ sy;																									corner: sx @ corner y.																								nodes at: 3 put: new ] .																	(nodes at: 3) add: aNode ] ]	 						    ifFalse: [ aNode position y &lt; sy ifTrue: [  (nodes at: 2) isNil ifTrue: [ new := ROQuadTree new.																								new origin: sx @ origin y;																									corner: corner x @ sy.																								nodes at: 2 put: new ] .																	(nodes at: 2) add: aNode ] 															ifFalse: [ (nodes at: 4) isNil ifTrue: [ new := ROQuadTree new.																								new origin: sx @ sy;																									corner: corner.																								nodes at: 4 put: new ] .																	(nodes at: 4) add: aNode ] ]</body></methods><methods><class-id>Roassal.ROQuadTree</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	super initialize.		leaf := true.	nodes := Array new: 4.</body></methods><methods><class-id>Roassal.ROQuadTree class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">withAll: aNodeCollection	^ self withAll: aNodeCollection origin: (aNodeCollection collect: [:e | e position x]) min @ (aNodeCollection collect: [:e | e position y]) min corner: (aNodeCollection collect: [:e | e position x]) max @ (aNodeCollection collect: [:e | e position y]) max</body><body package="Roassal-Core">withAll: aNodeCollection origin: aPoint corner: anotherPoint	| dx dy root |	dx := anotherPoint x - aPoint x.	dy := anotherPoint y - aPoint y.	(dx closeTo: dy ) ifTrue: [ root := self new.										root origin: aPoint;											corner: anotherPoint.										aNodeCollection do: [ :e | root add: e ].										^ root ] .		dx &gt; dy ifTrue: [ ^ self withAll: aNodeCollection origin: aPoint corner: anotherPoint x @ (aPoint y + dx) ].	dy &gt; dx ifTrue: [ ^ self withAll: aNodeCollection origin: aPoint corner: (aPoint x + dy) @ anotherPoint y ] .</body></methods><methods><class-id>Roassal.ROLightlyHighlightable</class-id> <category>initialization</category><body package="Roassal-Core">cacheKey	"Key used as attribute"		^ #previousColorBeforeHighlighting</body><body package="Roassal-Core">defaultHighlightColor	^ self class highlightedColor	</body><body package="Roassal-Core">highlightElement: element	ROBlink highlight: element color: highlightColor</body><body package="Roassal-Core">initialize	super initialize.	self highlightColor: self defaultHighlightColor</body><body package="Roassal-Core">initializeElement: element	element		on: ROMouseEnter		do: [ 			self highlightElement: element.			element signalUpdate ].	element		on: ROMouseLeave		do: [ 			self unhighlightElement: element.			element signalUpdate ].</body><body package="Roassal-Core">unhighlightElement: element	ROBlink unhighlight: element</body><body package="Roassal-Core">unhighlightedColor	^ self class unhighlightedColor</body></methods><methods><class-id>Roassal.ROLightlyHighlightable</class-id> <category>accessing</category><body package="Roassal-Core">highlightColor	^ highlightColor</body><body package="Roassal-Core">highlightColor: aColor	highlightColor := aColor</body></methods><methods><class-id>Roassal.ROLightlyHighlightable class</class-id> <category>public</category><body package="Roassal-Core">lightBlue	^ self new highlightColor: Color lightBlue; yourself</body><body package="Roassal-Core">lightGray	^ self new highlightColor: Color lightGray; yourself</body><body package="Roassal-Core">veryVeryLightGray	^ self new highlightColor: Color veryVeryLightGray; yourself</body></methods><methods><class-id>Roassal.ROLightlyHighlightable class</class-id> <category>configuration</category><body package="Roassal-Core">highlightedColor	^ Color blue</body><body package="Roassal-Core">unhighlightedColor	^ Color gray</body></methods><methods><class-id>Roassal.ROMenuElement</class-id> <category>public</category><body package="Roassal-Core">evaluate: aTitleAsString	"Evaluate the callback associate to the title given as parameter"		(actionDictionary at: aTitleAsString) value: targetObject</body><body package="Roassal-Core">item: aTitleAsString action: aBlock	"Register a menu entry. The title is used as the entry name when the menu is displayed.	 The callback is defined as a one-arg block. The block is evaluated with the content of the variable targetObject"	actionDictionary at: aTitleAsString put: aBlock</body><body package="Roassal-Core">targetObject: anObject	"set the object that is passed to the callback blocks when being evaluated"	targetObject := anObject</body></methods><methods><class-id>Roassal.ROMenuElement</class-id> <category>accessing computed</category><body package="Roassal-Core">numberOfActions	"Return the number of actions"		^ actionDictionary size</body></methods><methods><class-id>Roassal.ROMenuElement</class-id> <category>private</category><body package="Roassal-Core">create	self createEntries.	self + ROBorder blue + ROBox white.	self on: ROMouseLeave do: [ :event | event element remove ].</body><body package="Roassal-Core">createEntries	| nameElements |	nameElements := actionDictionary keys collect: [ :title |		(ROLabel elementOn: title)			@ ROLightlyHighlightable;			forward: ROMouseLeave;			on: ROMouseClick do: [ :event | 				(actionDictionary at: title) value: targetObject.				self remove.				self view signalUpdate ]			yourself  ].	 	self addAll: nameElements.		ROVerticalLineLayout on: nameElements.</body></methods><methods><class-id>Roassal.ROMenuElement</class-id> <category>accessing</category><body package="Roassal-Core">targetObject	^ targetObject</body></methods><methods><class-id>Roassal.ROMenuElement</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	targetObject := self.	actionDictionary := Dictionary new.	 </body></methods><methods><class-id>Roassal.ROMenuElement class</class-id> <category>example</category><body package="Roassal-Core">example"self example""Preambule. It includes the initialization. "| rawView view element |rawView := ROView new.view := ROMondrianViewBuilder view: rawView."enter your script below""-------------""-------------" view shape rectangle size: 80.element := view node: 100.element on: ROMouseClick do: [ :ann |	| menu |	menu := ROMenuElement new.	menu item: 'foo10' action: [ :an | 10 inspect ].	menu item: 'foo20' action: [ :an | 20 inspect ].	menu item: 'foo30' action: [ :an | 30 inspect ].		menu create.			view raw add: menu. 		menu translateTo: ann position - (10 @ 40).	 element on: ROMouseDragging do: [ :v | menu remove ].	element on: ROMouseClick do: [ :v | menu remove ].	 		"element on: ROMouseLeave doOnce: [ :v | menu remove ].	element on: ROMouseEnter doOnce: [ :v | menu remove ].	"view raw signalUpdate.]."-------------""-------------""Below is the initiation of the menu and opening the visualization""ROEaselMorphic new populateMenuOn: view."view open</body></methods><methods><class-id>Roassal.ROBoxTest</class-id> <category>tests</category><body package="Roassal-Core">testChangingBorderColor	| box color |	box := ROBox new.	color := box borderColorFor: ROElement new.	box borderColor: Color red.	self assert: (box  borderColorFor: ROElement new) = Color red.	self assert: (box  borderColorFor: ROElement new) ~= color</body><body package="Roassal-Core">testChangingWidthColor	| box width |	box := ROBox new.	width := box borderWidthFor: ROElement new.	box borderWidth: 4.	self assert: (box  borderWidthFor: ROElement new) = 4.	self assert: (box  borderWidthFor: ROElement new) ~= width</body><body package="Roassal-Core">testColorAndCache 	| el box |	el := ROElement on: (Array with: Color blue).	box := ROBox new color: [ :element | element model first ].		self assert: (box colorFor: el) = Color blue.	"el model at: 1 put: Color red."	box color: Color green.	self assert: (box colorFor: el) = Color green.	</body><body package="Roassal-Core">testComputingWidth	| box width |	box := ROBox new.	width := box borderWidthFor: ROElement new.	box borderWidth: 4.	self assert: (box  borderWidthFor: ROElement new) = 4.	self assert: (box  borderWidthFor: ROElement new) ~= width</body><body package="Roassal-Core">testInitialization 	self assert: ROBox new color = ROBox defaultColor</body></methods><methods><class-id>Roassal.ROBoxTest</class-id> <category>reusing shapes</category><body package="Roassal-Core">testReusingShapeWithMultipleShapes	| el s1 s2 |	el := ROElement new.	s1 := ROBox green.	s1 extent: 20 @ 20.	s2 := ROBox gray.		el + s1.	self assert: (el extent = (20 @ 20)).	el + s2.	self assert: (el extent = (20 @ 20)).</body><body package="Roassal-Core">testReusingShapes	| shape el1 el2 |	shape := ROBox new.	el1 := ROElement new.	el1 + shape.		el2 := ROElement new.	el2 + shape.		self assert: (el1 isShapedAs: ROBox).	self assert: (el2 isShapedAs: ROBox).		self assert: (el1 getShape: ROBox) == shape.	self assert: (el2 getShape: ROBox) == shape.</body><body package="Roassal-Core">testReusingShapesAndResettingCache	| shape el |	shape := ROBox new.	el := ROElement new.	el + shape.			self assert: (shape extentFor: el) = (5 @ 5).	self assert: el extent = (5 @ 5).	shape size: 6.	self assert: (shape extentFor: el) = (6 @ 6).	self assert: el extent = (5 @ 5).		el extent: 7 @ 7.	self assert: el extent = (7 @ 7).	self assert: (shape extentFor: el) = (6 @ 6).</body><body package="Roassal-Core">testReusingShapesWithDifferentSize	| shape el1 el2 |	shape := ROBox new size: [ :el | el model ].	el1 := ROElement on: 10.	el1 + shape.		el2 := ROElement on: 20.	el2 + shape.		self assert: (shape extentFor: el1) = (10 @ 10).	self assert: (shape extentFor: el2) = (20 @ 20).	self assert: (shape extentFor: el1) = (10 @ 10).	self assert: (shape extentFor: el2) = (20 @ 20).</body><body package="Roassal-Core">testReusingShapesWithNesting	| shape1 shape2 el1 el2 |	shape1 := ROBox new.	shape2 := ROBox new.	el1 := ROElement on: 10.	el1 + shape1.		el2 := ROElement on: 20.	el2 + shape2.		el1 add: el2.	self assert: (el1 extent) = (15 @ 15).	self assert: (shape1 extentFor: el1) = (5 @ 5).	self assert: (shape2 extentFor: el2) = (5 @ 5).</body><body package="Roassal-Core">testReusingShapesWithSize	| shape |	shape := ROBox new.	shape size: 30.	self assert: (shape element extent = (30 @ 30))</body></methods><methods><class-id>Roassal.ROPluggableContainerCallback</class-id> <category>accessing</category><body package="Roassal-Core">addingBlock	^ addingBlock</body><body package="Roassal-Core">addingBlock: anObject	addingBlock := anObject</body><body package="Roassal-Core">childrenHasBeenResized	^ childrenHasBeenResized</body><body package="Roassal-Core">childrenHasBeenResized1: anObject	childrenHasBeenResized := anObject</body><body package="Roassal-Core">removingAllBlock	^ removingAllBlock</body><body package="Roassal-Core">removingAllBlock: anObject	removingAllBlock := anObject</body><body package="Roassal-Core">removingBlock	^ removingBlock</body><body package="Roassal-Core">removingBlock: anObject	removingBlock := anObject</body></methods><methods><class-id>Roassal.ROPluggableContainerCallback</class-id> <category>calling</category><body package="Roassal-Core">addElement: element in: parentElement	addingBlock value: element</body><body package="Roassal-Core">childrenHasBeenResized: container	"One of my children has been resized"	childrenHasBeenResized value: container</body><body package="Roassal-Core">removeAllElementsFrom: element	removingAllBlock value: element</body><body package="Roassal-Core">removeElement: element in: parentElement	removingBlock value: element</body></methods><methods><class-id>Roassal.ROPluggableContainerCallback</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	| b |	super initialize.	"Empty blocks"	b := [ :v | v ].		addingBlock := b.	removingBlock := b.	removingAllBlock := b.	childrenHasBeenResized := b</body></methods><methods><class-id>Roassal.RORubberBand</class-id> <category>hooks</category><body package="Roassal-Core">initializeElement: sourceElement"	ROExample new rubberBanding	"		sourceElement on: ROMouseDragging do: 	[ 	:event | | relativePosition |		tmpLine ifNil: 		[			tmpElement := ROElement new.			tmpLine := (ROEdge from: event element to: tmpElement) + ROLine; yourself.			sourceElement view add: tmpLine.			sourceElement view add: tmpElement. 							sourceElement view allElementsDo: 			[	:candidateTarget | 				candidateTarget getInteraction: self ifPresent:				[	:interaction |					targetSelection source: sourceElement target: candidateTarget. 				].			].		].        	relativePosition := sourceElement view camera realToVirtualPoint: (event position).        	tmpElement translateTo: relativePosition.	        	sourceElement view signalUpdate.	].	sourceElement on: ROMouseDragged do: 	[ 	:event | | targetElement newEdgeRaw |		tmpElement remove.		tmpLine remove.		tmpLine := nil.		tmpElement := nil.			targetElement := (sourceElement view elementAtRealPosition: event position).		(targetSelection contains: targetElement) ifTrue:		[				dropAction ifNotNil: [ dropAction value: event element value: targetElement ] 		].		targetSelection clear.				sourceElement view signalUpdate.	].  </body><body package="Roassal-Core">key 	"Used in the dictionary each element has"	"Key on instance rather than class"	^ self</body></methods><methods><class-id>Roassal.RORubberBand</class-id> <category>accessing</category><body package="Roassal-Core">onDrop: aBlock	dropAction := aBlock</body><body package="Roassal-Core">targeting: aBlock	targetSelection := aBlock</body></methods><methods><class-id>Roassal.ROAnnouncerTest</class-id> <category>tests</category><body package="Roassal-Core">testIsForwarder	| t |	self deny: announcer isForwarder.	t := 0.	announcer when: ROEvent do: [ :ann | t := t + 1 ].	self assert: t isZero.	announcer announce: ROEvent.	self assert: t = 1.	announcer announce: ROMouseClick.	self assert: t = 2.		announcer forward: ROMouseClick.	announcer announce: ROMouseClick.	self assert: t = 2. "No increase since it is forwarded."	announcer announce: ROEvent.	self assert: t = 3.</body><body package="Roassal-Core">testIsForwarder2	| t |	t := 0.	announcer when: ROEvent do: [ :ann | t := t + 1 ].	self deny: (announcer isForwarded: ROMouseClick). 	announcer forward: ROEvent.	self assert: (announcer isForwarded: ROMouseClick).	announcer announce: ROMouseClick.	self assert: t = 0. "No increase since it is forwarded."	announcer announce: ROEvent.	self assert: t = 0.</body></methods><methods><class-id>Roassal.ROAnnouncerTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	announcer := ROAnnouncer new.</body></methods><methods><class-id>Roassal.ROGridLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements	| pointer lineItemCount lineItemSize maxLastLineHeight originalGapLeft originalGapTop parent oldParentStrategy |	originalGapLeft := self paddingLeftFor: elements.	originalGapTop := self paddingTopFor: elements.		pointer := originalGapLeft @ originalGapTop.	lineItemSize := self lineItemsCountBlock roValue: elements.	lineItemCount := 0.	maxLastLineHeight := 0.	"We are here assuming all the elements have the same parent"	parent := elements anyOne parent.	parent isView ifFalse:		[oldParentStrategy := elements anyOne parent resizeStrategy.		parent resizeStrategy: (ROPermissiveParent new padding: oldParentStrategy padding)].	elements		do: [ :element | 			translator translate: element to: pointer.			pointer := (pointer x + element width + (self gapSize * 2)) @ pointer y.			lineItemCount := lineItemCount + 1.			maxLastLineHeight := maxLastLineHeight max: element height.			lineItemCount &gt;= lineItemSize				ifTrue: [ 					pointer := originalGapLeft @ (pointer y + (self gapSize * 2) + maxLastLineHeight).										maxLastLineHeight := 0.					lineItemCount := 0 ].			self step ].			"We set the old strategy and adjust the size of the parent"	parent isView ifFalse:		[parent resizeStrategy: oldParentStrategy.		parent adjustSizeIfNecessary].</body></methods><methods><class-id>Roassal.ROContainerCallbackLayout</class-id> <category>accessing</category><body package="Roassal-Core">layout	^ layout</body><body package="Roassal-Core">layout: aLayout	layout := aLayout</body></methods><methods><class-id>Roassal.ROContainerCallbackLayout</class-id> <category>calling</category><body package="Roassal-Core">addElement: element in: parentElement	element callback: self.	self doLayoutIn: parentElement</body><body package="Roassal-Core">childrenHasBeenResized: container	"One of my children has been resized"	self doLayoutIn: container.	container isView 		ifFalse: [ container parent callback childrenHasBeenResized: container parent ]</body><body package="Roassal-Core">element: anElement resizedTo: aPoint	self doLayoutIn: anElement.	anElement parent callback childrenHasBeenResized: anElement parent	"anElement parent callback element: anElement resizedTo: aPoint"</body><body package="Roassal-Core">removeAllElementsFrom: anElement	self doLayoutIn: anElement</body><body package="Roassal-Core">removeElement: element in: parentElement	self doLayoutIn: parentElement</body></methods><methods><class-id>Roassal.ROContainerCallbackLayout</class-id> <category>util</category><body package="Roassal-Core">doLayoutIn: element	layout on: element elements</body></methods><methods><class-id>Roassal.ROContainerCallbackLayout class</class-id> <category>public</category><body package="Roassal-Core">for: aLayout	^ self new layout: aLayout; yourself</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>colors</category><body package="Roassal-Core">brightness "	Brightness 	by Rusty Robison. 	from Processing		self new brightness 		"		| view barWidth elements windowExtent cantBars layout |		view := ROView new.	windowExtent := 500.	self brightnessOn: view.		view openInWindowSized: windowExtent @windowExtent .	</body><body package="Roassal-Core">brightnessOn: rawView	| barWidth elements windowExtent cantBars layout |	windowExtent := 250.	barWidth := 5.		cantBars := windowExtent / barWidth .	elements := ROElement forCollection: (1 to: cantBars).	elements do: [:e |			e extent: barWidth@windowExtent.			e + (ROBox new color: Color black).			e on: ROMouseMove do:[:event | 				(e getShape: ROBox) color: (Color h: e position x s: 100 v: (event position y / 250) ).				e signalUpdate.			].					].	layout := ROHorizontalLineLayout  withGap: 0.	layout applyOn: elements.	rawView addAll: elements.	</body><body package="Roassal-Core">colors	"	self new colors	"	| view els |	view := ROView new.	view @RODraggable .	self colorsOn: view.	view open. view inspect </body><body package="Roassal-Core">colorsOn: rawView	| els |		els := ROElement forCollection: (1 to: 20). 	els with: (Color red mix: Color green shades: 20) do: [:el :c | (el size: 20) + (ROEllipse color: c )].		"We make the circle draggable"	els do: [ :e | e @ RODraggable ].		rawView addAll: els.	ROCircleLayout new scaleBy: 4; on: els.</body><body package="Roassal-Core">normalizer	"	self new normalizer	"	| view el |	view := ROView new.	self normalizerOn: view.	view open</body><body package="Roassal-Core">normalizerOn: rawView	| el normalizer nodes|		normalizer := RONIdentityNormalizer beginingAtBlue.		nodes := (1 to: 30) collect: [ :i | 		el := ROElement on: i.		el @ RODraggable.		el @ ROPopup.		el extent: 60 @ 30.		el + (ROBox new color: normalizer) + ROBorder.		el ].		rawView addAll: nodes.	ROGridLayout on: nodes."-------------"</body><body package="Roassal-Core">varyingHueOn: rawView	| el1 el2 |	el1 := (ROBox new extent: 100 @ 100) element.	el2 := (ROBox new extent: 100 @ 100) element.	rawView add: el1; add: el2.	rawView on: ROMouseMove do: [ :event |		(el1 getShape: ROBox) color: (Color h: event position y \\ 360 s: 100 v: 100).				(el2 getShape: ROBox) color: (Color h: (360 - (event position y \\ 360)) s: 100 v: 100).		rawView signalUpdate.		 ].	ROConstraint move: el2 onTheRightOf: el1.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>interaction</category><body package="Roassal-Core">addingInnerOnClickOn: rawView| bundle label body elements |label := ROLabel elementOn: 'Click here!'.body := ROBox element.bundle := ROElement new.bundle add: label; add: body.ROVerticalLineLayout on: (Array with: label with: body).rawView add: bundle.ROBlink on: label.label on: ROMouseClick do: [ :event | 	elements := (1 to: 5) collect: [ :i | ROBox green elementOn: i ].		body addAll: elements.	ROGridLayout on: body elements.	rawView signalUpdate.].</body><body package="Roassal-Core">addingOnClickOn: rawView| addButton element |addButton := (ROBorder + ROLabel) elementOn: '+ 1'.addButton @ ROLightlyHighlightable. rawView add: addButton.addButton translateBy: 15 @ 15.element := ROBorder element.element @ RODraggable.element translateBy: 50 @ 50.element callback: (ROContainerCallbackLayout for: ROGridLayout new).rawView add: element."callback"addButton on: ROMouseClick do: [ :event | element add: ROBox gray element. element signalUpdate ].</body><body package="Roassal-Core">clickAndMove	"	self new clickAndMove		Click to make the element go to where you have clicked	"	| rawView |	rawView := ROView new.	self clickAndMoveOn: rawView.	rawView open.	</body><body package="Roassal-Core">clickAndMoveOn: rawView	| el |	"	Click to make the element go to where you have clicked	"	el := ROElement sprite.	rawView add: el.	rawView on: ROMouseLeftClick do: [ :event | 		ROLinearMove new			nbCycles: 20;			for: el to: event position.	].</body><body package="Roassal-Core">continuousLinearMove"	From Processing		self new continuousLinearMove"	|view line1 line2|	view := ROView new.	line1 := (ROElement new model: 'line1') extent:1@100; yourself.	line1 + (ROBorder new color: Color red).	line2 := (ROElement new model: 'line1') extent:1@100; yourself.	line2 + (ROBorder new color: Color green).	line2 translateBy: 0@100.	view add: line1.	view add: line2.	ROMotionMove new for: line1 initialSpeed: 60@0.	ROMotionMove new for: line2 initialSpeed: 30@0.	view openInWindowSized: 200@200.	</body><body package="Roassal-Core">drawing	| rawView p newEl |	rawView := ROView new.	rawView add: (ROLabel elementOn: 'Drawing!').	rawView on: ROMouseRightClick do: [ :event | rawView removeAllElements ].	rawView on: ROMouseDragging do: [ :event | 		p ifNil: [ p := ROBox element size: 1 . p translateTo: event position. rawView add: p ].		newEl := (ROBox element size: 1) translateTo: event position.		rawView add: newEl.		rawView add: ((ROEdge from: p to: newEl) + ROLine).		p := newEl.		rawView signalUpdate ].	rawView on: ROMouseDragged do: [ :event | p := nil ].	rawView open </body><body package="Roassal-Core">dynamicEdgeOn: rawView	| el1 el2 el3 |	rawView add: (el1 := ROBox element size: 20).	rawView add: (el2 := ROBox element size: 20).	rawView add: (el3 := ROBox element size: 20).	ROCircleLayout on: (Array with: el1 with: el2 with: el3).		el1 @ RODraggable.	el2 @ RODraggable.	el3 @ RODraggable.		el1 @ (RODynamicEdge toAll: (Array with: el2 with: el3) using: (ROLine arrowed color: Color red)).</body><body package="Roassal-Core">expandableNodes	"	ROExample new expandableNodes	"		| view initialNodes |	view := ROView new.	self expandableNodesOn: view.	view @RODraggable @ RODraggableWithVelocity.	view open</body><body package="Roassal-Core">expandableNodesOn: rawView	| initialNodes |		initialNodes := (ROElement labelsOn: (Array with: Integer)) asOrderedCollection.	initialNodes do: [:n |		n + ROLabel + ROBorder red.		n @ (RORecursiveExpandOnClick childrenForModel: [ :model | model subclasses])].	rawView addAll: initialNodes.	ROTreeLayout new 		translator: (ROSmoothLayoutTranslator new);		applyOn: initialNodes.</body><body package="Roassal-Core">growOnClick	"	self new growOnClick	"	| view greenNode blueNode |	view := ROView new.	self growOnClickOn: view.	view open </body><body package="Roassal-Core">growOnClickOn: rawView 	| greenNode blueNode |		greenNode := ROElement on: 'green node'.	greenNode addShape: (ROBox new color: Color green).	greenNode setBounds: (5 @ 10 corner: (180 @ 170)).	greenNode @ RODraggable.	greenNode @ ROGrowable.	blueNode := ROElement on: 'blue node'.	blueNode addShape: (ROBox new color: Color blue).	blueNode setBounds: (5 @ 10 corner: (180 @ 170)).	blueNode translateBy: 50@30.	blueNode @ RODraggable.	blueNode @ ROGrowable.	rawView add: greenNode; add: blueNode.	</body><body package="Roassal-Core">innerNodeAndZoom	"	self new innerNodeAndZoom	"	| view els |	view := ROView new.	els := ROElement forCollection: (1 to: 200).	els do: [:spr |		| innerNodes |		spr extent: 50@50. 		spr + ROBorder red.		spr @ ROZoomOnClick @ RODraggable.				innerNodes := ROElement forCollection: (1 to: 10).		innerNodes do: [:s | s + ROBox green @ RODraggable ].		spr addAll: (ROGridLayout on: innerNodes).		].	view addAll: els.	ROGridLayout on: els.	view @ RODraggable.		view open.</body><body package="Roassal-Core">leftAndRightClick	" 	self new leftAndRightClick	"	| view |	view := ROView new.	self leftAndRightClickOn: view.	view open  </body><body package="Roassal-Core">leftAndRightClickOn: rawView	| counter add sub els |		els := OrderedCollection new.		add := ROElement sprite 				addShape: (ROLabel new text: '+ / --');				addShape: (ROBorder yellow).	add on: ROMouseLeftClick do: [ :ev | 		| el |		el := ROElement sprite translateTo: (200 atRandom @ 200 atRandom ).		els add: el.		rawView add: el.		rawView signalUpdate ].	add on: ROMouseRightClick do: [ :ev | 		| el |		els ifNotEmpty: [			rawView remove: els removeLast.			rawView signalUpdate ] ].	rawView add: add.	</body><body package="Roassal-Core">miniMap"		self new miniMap"	| view eltos |	view := ROView new.	view @ RODraggable.	view on: ROMouseRightClick 		do: [ :event | ROZoomInMove new on: view ].	view on: ROMouseLeftClick			do: [ :event | ROZoomOutMove new on: view ].			eltos := ROElement spritesOn: (1 to: 400).	eltos do:  [:el | el + ROLabel  ].	view addAll: eltos.	ROGridLayout new on: eltos.		"Mini map opens by pressing m"	view @ ROMiniMap.	view open.	</body><body package="Roassal-Core">motion	"	self new motion	"	|view sprs |	view := ROView new.	self motionOn: view.	view open.</body><body package="Roassal-Core">motionOn: rawView	| sprs |		sprs := (ROElement forCollection: (1 to: 20)).	sprs do: [:s | 		s extent: 20@20.		s + ROEllipse blue.		s @ RODraggable.		s @ RODraggableWithVelocity ].	rawView addAll: sprs.	sprs do: [ :spr | ROMotionMove new for: spr initialSpeed: 60 atRandom @ 60 atRandom ].	sprs last @ (ROPopup text: 'Press me!' ).	(sprs last getShape: ROEllipse) color: Color red.	sprs last on: ROMouseClick do: [ 		sprs do: [ :spr | ROMotionMove new for: spr initialSpeed: (60 atRandom - 30) @ (60 atRandom - 30 ) ] ].</body><body package="Roassal-Core">mouse1D"	From Processing	self new mouse1D"	|view lElto rElto w h|	w := 200.	h := 200.	view := ROView new.	lElto := ROElement new model: 'left element'.	lElto width: 100; height: 200.	lElto + (ROBox new color: Color green).	rElto := ROElement new model: 'right element'.	rElto width: 100; height: 200.	rElto + (ROBox new color: Color blue).		rElto translateBy: 100@0.		view add: lElto ; add: rElto .		view openInWindowSized: w@h.</body><body package="Roassal-Core">popup	"	self new popup	"		| view |	view := ROView new.	view add: ((ROElement spriteOn: 'world')				+ (ROLabel text: 'hello')				@ (ROPopup)).	view open.</body><body package="Roassal-Core">popupOn: rawView	rawView add: ((ROElement spriteOn: 'world')				+ (ROLabel text: 'hello')				@ (ROPopup)).</body><body package="Roassal-Core">popupView	"	self new popupView 	"	| element view popupView |		popupView := ROView new.	popupView add: ((ROElement new extent: 50@60)+ (ROBox new color: Color blue)).		view := ROView new.	element := ROElement sprite.	element @ (ROPopupView new view: popupView).	view add: element.	view open</body><body package="Roassal-Core">resizableCircle	"	self new resizableCircle	"	| view circles colors |	view := ROView new.	colors := Color wheel: 6 alpha: 0.7. 	circles := (1 to: 6) with: colors collect: [:i :c | 		ROElement new			@ RODraggable;			+ (ROEllipse color: c);			translateTo: (i * 60) @ (i \\ 3 * 50 + 50);			extent: 50@50.	].	view on: ROMouseMove do: [:event | 		circles do: [:c | | t |			t := ((c bounds center - event position ) r / 2) max: 40.			c size: t ].		view signalUpdate  ].		view addAll: circles.	view open.</body><body package="Roassal-Core">resizableCircleOn: rawView	| circles colors |		colors := Color wheel: 6 alpha: 0.7. 	circles := (1 to: 6) with: colors collect: [:i :c | 		ROElement new			@ RODraggable;			+ (ROEllipse color: c);			translateTo: (i * 60) @ (i \\ 3 * 50 + 50);			extent: 50@50.	].	rawView on: ROMouseMove do: [:event | 		circles do: [:c | | t |			t := ((c bounds center - event position ) r / 2) max: 40.			c size: t ].		rawView signalUpdate  ].		rawView addAll: circles.</body><body package="Roassal-Core">rubberBand	"	self new rubberBand	"	| view |	view := ROView new.	self rubberBandOn: view.	view open</body><body package="Roassal-Core">rubberBandOn: rawView	| rubberband |	"Drag edges from '1x' to '2x' then from '2x' to '3x' etc..."   	rubberband := RORubberBand new		targeting:   		( 	ROSelection new 				for: [ :source :target | source model first asInteger + 1 = target model first asInteger ];				onInclusion: [ :element | ROBlink highlight: element color: Color blue ];				onExclusion: [ :element | ROBlink unhighlight: element ]  		);                         		onDrop: 		[	:fromElement :toElement |                   RORemoveEdge edgesTo: toElement.                    fromElement view add: (ROEdge lineFrom: fromElement to: toElement).                   ROTreeLayout on: fromElement view elements. 		]. 	1 to: 4 do: 	[	:num | 		"$a asInteger = 97 en Pharo"		"$d asInteger = 100 en Pharo"		97 asInteger to: 100 do: 		[	:charInt | | element |			element := (ROElement on: num asString , charInt asCharacter asString) + ROBorder red + ROLabel.			element extent: 40 @ 40.			element @ rubberband.			rawView add: element.		]	].	ROTreeLayout on: rawView elements.</body><body package="Roassal-Core">scrollbar	| view els stack |	view := ROView new.	view add: ROElement sprite.	els := ROElement spritesOn: (1 to: 500).	els do: [ :el | el + ROLabel @ ROPopup ].	view addAll: (ROGridLayout  on: els).	view @ RODraggable .	stack := ROViewStack new.	stack addView: view.	stack @ ROScrollable.	stack open.</body><body package="Roassal-Core">zooming	"	self new zooming	"	| view els classes stack |	view := ROView new.	view @ ROMiniMap .	self zoomingOn: view.	view open.</body><body package="Roassal-Core">zoomingOn: rawView	| els classes stack |		"We gather what we want to visualize"	classes := Smalltalk globals allClasses select: [ :c | c name beginsWith: 'RO' ].		"We build the visualization"	els := ROElement forCollection: classes.	els do: [:spr |		spr extent: 50@50. 		spr + ROBorder red.		spr @ ROZoomOnClick @ RODraggable 		].	rawView addAll: els.	ROGridLayout on: els.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>basic</category><body package="Roassal-Core">arrowedLine	"	self new arrowedLine	"	| view n1 n2|	view := ROView new.	self arrowedLineOn: view.	view open</body><body package="Roassal-Core">arrowedLineOn: rawView 	| n1 n2 |		n1 := ROElement sprite.	n2 := ROElement sprite.	n2 translateBy: 20@60.	rawView 		add: n1; 		add: n2; 		add: (ROEdge arrowedLineFrom: n1 to: n2).	</body><body package="Roassal-Core">buildingEdge	"	self new buildingEdge.	"| view |view := ROView new.view addAll: (ROBox elementsOn: Collection withAllSubclasses).view addAll: (ROLine buildEdgesFromElements: view elements from: #superclass to: #yourself).ROTreeLayout on: view elements.view open</body><body package="Roassal-Core">buildingEdgesOn: rawView| assocs |assocs := OrderedCollection new.assocs add: 1 -&gt; 3; add: 3 -&gt; 5; add: 1 -&gt; 4; add: 4 -&gt; 5.rawView addAll: (ROBox elementsOn: (1 to: 5) ).rawView addAll: (ROLine buildEdgesFromAssociations: assocs inView: rawView).ROHorizontalTreeLayout on: rawView elements.</body><body package="Roassal-Core">centeredLabel	"	self new centeredLabel	"		| rawView |	rawView := ROView new.	self centeredLabelOn: rawView.	rawView open .	</body><body package="Roassal-Core">centeredLabelOn: rawView	| el |	el := (ROElement spriteOn: 'xxxxxx x x x x x x x x x x x x x x x x xxxxxx' ) width: 200; height:200.el + ROCenteredLabel + (ROEllipse color: Color green).rawView add: el.</body><body package="Roassal-Core">centeringTextOn: rawView| el1 el2 |el1 := ROElement on: 'centered text'.el1 + (ROBorder new extent: 180 @ 40) + ROCenteredLabel.rawView add: el1.el2 := ROElement on: 'left text'.el2 + (ROBorder new extent: 180 @ 40) + ROLabel.rawView add: el2.ROHorizontalLineLayout on: (Array with: el1 with: el2).</body><body package="Roassal-Core">composingOn: rawView | outer inner innerLabel |outer := ROElement new + ROBorder white.outer @ RODraggable.inner := ROElement sprite.innerLabel := ROLabel elementOn: 'My sprite'.outer add: inner; add: innerLabel."We make the inner and innerLabel forwarder of events"inner forward.innerLabel forward."We layout the things"ROVerticalLineLayout on: outer elements.rawView add: outer.</body><body package="Roassal-Core">constraintsOn: rawView| outer inner innerLabel |outer := ROElement sprite.outer @ ROLightlyHighlightable .inner := ROElement sprite .innerLabel := ROLabel elementOn: 'My sprite'.outer add: inner; add: innerLabel.inner add: ROElement sprite.rawView add: outer.ROConstraint stick: innerLabel onTheRightOf: inner."ROConstraint stick: innerLabel below: inner.""ROConstraint stick: innerLabel above: inner.""ROConstraint stick: innerLabel onTheLeftOf: inner.""ROConstraint stick: innerLabel onTheCenterOf: inner."</body><body package="Roassal-Core">draggingAllConnected	"	self new draggingAllConnected	"	| view |	view := ROView new.	self draggingAllConnectedOn: view.	view open</body><body package="Roassal-Core">draggingAllConnectedOn: rawView| elements |0 to: 50 by: 10 do: [ :i | 	elements := (ROBox green size: 10) elementsOn: (i to: i + 9).	elements do: [ :e | e @ RODraggable @ ROPopup ].	rawView addAll: elements.	ROLine buildEdgesFromElement: elements first from: #yourself toAll: [ :v | (v + 1 to: v + 9) ].	ROTreeLayout on: elements.		(rawView elementFromModel: i) - ROBox + ROBox red.	(rawView elementFromModel: i)		@ ROAllConnectedNodeDraggable ;		translateBy: i * 15 @ 10.].</body><body package="Roassal-Core">draggingAllRecursivelyConnected	"	self new draggingAllRecursivelyConnected	"	| view |	view := ROView new.	self draggingAllRecursivelyConnectedOn: view.	view open</body><body package="Roassal-Core">draggingAllRecursivelyConnectedOn: rawView| toElement fromElement |1 to: 7 do:[  :n | toElement :=   ((ROLabel elementOn: n) extent: 50@50 ) + ROBorder @ RODraggable. rawView add: toElement.  ((fromElement := rawView elementFromModel: n // 2) )  ifNotNil: [ rawView add:    (ROEdge from: fromElement to: toElement ) + ROLine ]].ROHorizontalTreeLayout new on: rawView elements.rawView elements first @ ROAllRecursivelyConnectedNodeDraggable.rawView elements first  - ROBorder + ROBorder red.</body><body package="Roassal-Core">fontSize: rawView| label |(1 to: 30) do: [ :h|	label := ROLabel new.	label fontSize: h.	rawView add: ((label elementOn: 'Hello World') @ RODraggable)].ROVerticalLineLayout on: rawView elements.</body><body package="Roassal-Core">imageOn: rawViewrawView add: (ROImage new form: ROEaselMorphic new roassalIcon ) element @ RODraggable.  rawView add: (ROImage new form: ROEaselMorphic new objectprofileIcon ) element @ RODraggable.  ROHorizontalLineLayout on: rawView elements.</body><body package="Roassal-Core">label	"	self new label	"		| rawView |	rawView := ROView new.	self labelOn: rawView.	rawView open.	</body><body package="Roassal-Core">labelOn: rawView	rawView add: (ROLabel elementOn: 'hello world').	</body><body package="Roassal-Core">labelOnEdgeOn: rawView	| el1 el2 label |	rawView add: (el1 := ROBox red element size: 50).	rawView add: (el2 := ROBox green element size: 50).		el1 @ RODraggable.	el2 @ RODraggable.	el1 translateTo: 50 @ 50.	el2 translateTo: 200 @ 54.		rawView add: (ROLine elementFrom: el1 to: el2).		label := ROLabel elementOn: 'Hello World'.	ROConstraint stick: label between: el1 and: el2.	rawView add: label.	"view shape rectangle size: 50.nodes := view nodes: #(1 2).view edgeFromAssociation: 1 -&gt; 2.view shape label.labelNode := view node: 'Hello'.ROConstraint stick: labelNode between: nodes first and: nodes second."</body><body package="Roassal-Core">labelWithCRCharacter	"	self new labelWithCRCharacter	"		| view |	view := ROView new.	view add: (ROLabel elementOn: 'hello world').	view open</body><body package="Roassal-Core">labelWithCRCharacterOn: rawView	rawView add: (ROLabel elementOn: 'hello world').		</body><body package="Roassal-Core">lines	"	self new lines	"		| view node1 node2 edge |	view := ROView new.	self linesOn: view.	view open.	view camera inspect.</body><body package="Roassal-Core">linesOn: rawView	| node1 node2 edge |	node1 := ROLabel elementOn: 'node1'. 	node2 := ROLabel elementOn: 'node2'.	node1 @ RODraggable.	node2 @ RODraggable.	edge := ROEdge from: node1 to: node2.	edge + (ROLine red).	rawView add: edge; add: node1; add: node2.	ROHorizontalLineLayout on: (Array with: node1 with: node2).	</body><body package="Roassal-Core">multipleArrow	| view el1 el2 edge line  |	view := ROView new.	el1 := ROElement new.	el1 @RODraggable.	el1 extent: 50@50.	el1 + ROBox blue.	el2 := ROElement new.	el2 @RODraggable.	el2 extent: 50@50.	el2 + ROBox green.	el1 translateTo: 0 @ 100.	 	edge := ROEdge from: el1 to: el2.	line := ROLine new.	line add: ROArrow new offset: 0.1.	line add: ROArrow new offset: 0.5.	edge + line.	view add: el1; add: el2; add: edge.	view open 	 </body><body package="Roassal-Core">multipleArrowOn: rawView	| el1 el2 edge line  |		"A line shape can have several arrows on it."	el1 := ROElement new.	el1 @RODraggable.	el1 extent: 50@50.	el1 + ROBox blue.	el2 := ROElement new.	el2 @RODraggable.	el2 extent: 50@50.	el2 + ROBox green.	el1 translateTo: 0 @ 100.	 	edge := ROEdge from: el1 to: el2.	line := ROLine new.	line add: ROArrow new offset: 0.1.	line add: ROArrow new offset: 0.5.	edge + line.	rawView add: el1; add: el2; add: edge.	 	 </body><body package="Roassal-Core">resizeParentStrategyOn: rawView	| el el2 el3 |	el := ROBox element.	el @ RODraggable.	el extent: 100 @ 80.		"The parent cannot be resized"	el resizeStrategy: ROFixedSizedParent instance.	"The parent shrinks when inner nodes are drag and dropped"	"el resizeStrategy: ROShrinkingParent instance."		"Inner nodes can be dragged and dropped outside its parent"	"el resizeStrategy: ROPermissiveParent instance."		el2 := ROBox green element.	el3 := ROBox red element.	el2 extent: 20 @ 20.	el3 extent: 20 @ 20.	el2 @ RODraggable.	el3 @ RODraggable.	el add: el2; add: el3.	rawView add: el.</body><body package="Roassal-Core">verticalLabel	"	ROExample new verticalLabel	"		| rawView|	rawView := ROView new.	self verticalLabelOn: rawView.	rawView open</body><body package="Roassal-Core">verticalLabelOn: rawView-15 to: 10 do: [ :i |	rawView add: ((ROLabel verticalText interlineSpace: i) elementOn: 'hello world').].ROHorizontalLineLayout on: rawView elements.</body><body package="Roassal-Core">zIndexOn: rawView	| normalizerSize elements |		elements := ROElement forCollection: (1 to: 20).	elements do: [ :el | 		el + (ROBorder new size: 30).		el + (ROBox new 				color: (el model odd ifTrue: [ Color blue ] ifFalse: [ Color green ])). 		el @ RODraggable ].	rawView addAll: elements.	ROHorizontalLineLayout on: (elements select: [ :el | el model odd ]).	ROHorizontalLineLayout on: (elements select: [ :el | el model even ]).		(elements select: [ :el | el model even ]) do: [ :el | el translateBy: 5 @ 5 ].		"Elements are displayed from low zIndex to high zIndex"	rawView zOrdering: (ROZOrdering new 							setZIndex: 5 if: [ :el | el model odd ]; "Will be displayed first"							setZIndex: 10 if: [ :el | el model even ]).</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>layouts</category><body package="Roassal-Core">choice	"	self new choice	"	| view circle grid options choice container elementsToLayout |	view := ROView new.	circle := ROButtonElement named: 'circle' do: [:e | ROCircleLayout on: elementsToLayout. view signalUpdate  ].	grid := ROButtonElement named: 'grid' do:  [:e | ROGridLayout on: elementsToLayout. view signalUpdate  ].		options := Array with: circle with: grid.	choice := ROElement new.	choice addAll: (ROHorizontalLineLayout on: options).		container := ROElement new.	elementsToLayout := ROElement labelsOn: (1 to: 20).	elementsToLayout do: [ :v | 		v + ROBorder red @RODraggable.		v extent: 50@50 ].	container addAll: (ROCircleLayout on: elementsToLayout).	elementsToLayout do: [:l | l addShape: ROLabel].	view addAll: (ROVerticalLineLayout on: (Array with: choice with: container)).	view open.	</body><body package="Roassal-Core">choiceOn: rawView	| circle grid options choice container elementsToLayout |	circle := ROButtonElement named: 'circle' do: [:e | ROCircleLayout on: elementsToLayout. rawView signalUpdate  ].	grid := ROButtonElement named: 'grid' do:  [:e | ROGridLayout on: elementsToLayout. rawView signalUpdate  ].	options := Array with: circle with: grid.	choice := ROElement new.	choice addAll: (ROHorizontalLineLayout on: options).		container := ROElement new.	elementsToLayout := ROElement labelsOn: (1 to: 20).	elementsToLayout do: [ :v | 		v + ROBorder red @RODraggable.		v extent: 50@50 ].	container addAll: (ROCircleLayout on: elementsToLayout).	elementsToLayout do: [:l | l addShape: ROLabel].	rawView addAll: (ROVerticalLineLayout on: (Array with: choice with: container)).		</body><body package="Roassal-Core">grid	"	self new grid	"	| view elements |	view := ROView new.	view addAll: ((elements := ROElement spritesOn: (1 to: 20)) do: [:n | n addShape: ROLabel]).	ROGridLayout on: elements.	view open </body><body package="Roassal-Core">nestedLayoutOn: rawView	| elements edges outterNode |		outterNode := ROElement new + ROBorder blue.	elements := ROElement spritesOn: (1 to: 5).	outterNode addAll: elements.		rawView add: outterNode.	rawView addAll: (edges := ROEdge linesFor: (Array with: elements first -&gt; elements second with: elements second -&gt; elements fifth with: elements second -&gt; elements third )).		ROTreeLayout on: elements.</body><body package="Roassal-Core">radialTreeLayoutOn: rawView| nodes edges |nodes := (ROEllipse gray size: 10) elementsOn: Collection withAllSubclasses.nodes do: [ :n | n @ RODraggable ].rawView addAll: nodes.edges := ROLine buildEdgesFromElements: nodes from: #superclass to: #yourself.rawView addAll: edges. RORadialTreeLayout new 	translator: (ROSmoothLayoutTranslator new nbCycles: 10);	applyOn: nodes.</body><body package="Roassal-Core">rectanglePackLayout	"	self new rectanglePackLayout	"	| rawView |	rawView := ROView new.	self rectanglePackLayoutOn: rawView.	rawView open</body><body package="Roassal-Core">rectanglePackLayoutOn: rawView	| shape |	shape := ROBox gray 					width: [ :e | e model numberOfVariables * 3 ];					height: [ :e | e model numberOfMethods ].	shape := shape + ROBorder.	ROObject withAllSubclasses do: [ :cls |		rawView add: (shape elementOn: cls) @ ROPopup ].	RORectanglePackLayout new		padding: 3;		on: rawView elements.</body><body package="Roassal-Core">scatterPlot	"	self new scatterPlot	"	| view elements |	view := ROView new.	elements := ROElement forCollection:  #(#(1 2) #(100 50) #(60 20)).	elements do: [:el | el 						addShape: ROEllipse;						size: 30 ].	view addAll: elements.	ROScatterplotLayout new 		x: #first ; y: #second;		applyOn: elements.	view open.</body><body package="Roassal-Core">scatterPlotOn: rawView	| elements |	elements := ROElement forCollection:  #(#(1 2) #(100 50) #(60 20)).	elements do: [:el | el 						addShape: ROEllipse;						size: 30 ].	rawView addAll: elements.	ROScatterplotLayout new 		x: #first ; y: #second;		applyOn: elements.	</body><body package="Roassal-Core">treeLayout 	"	self new treeLayout	"		| view elements edges |	view := ROView new.	elements := ROElement spritesOn: (1 to: 5).	view addAll: elements.	view addAll: (edges := ROEdge linesFor: (Array with: elements first -&gt; elements second with: elements second -&gt; elements fifth with: elements second -&gt; elements third )).		ROTreeLayout on: elements.	view open.</body><body package="Roassal-Core">treeLayoutOn: rawView	| elements edges |	elements := ROElement spritesOn: (1 to: 5).	rawView addAll: elements.	rawView addAll: (edges := ROEdge linesFor: (Array with: elements first -&gt; elements second with: elements second -&gt; elements fifth with: elements second -&gt; elements third )).		ROTreeLayout on: elements.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>animation</category><body package="Roassal-Core">animationOn: rawView| elements b helpLabel |"Define 10 blue rectangles, align them, and move them away from the corner"elements := ROElement forCollection: (1 to: 10).elements do: [ :el | el + ROBox blue; extent: 40 @ 80 ].rawView addAll: elements.ROHorizontalLineLayout new 	horizontalGap: 0;	on: elements.	elements do: [ :el | 	el translateBy: 40 @ 40 ]."We define the animation in a block to be repeatable"b := [ elements do: [ :el | 	el model odd ifTrue: [		ROLinearMove new			nbCycles: 30;			for: el by: 0 @ 40;			after: [ ROLinearMove new						nbCycles: 30;						for: el by: 0 @ -40 ] ] ] ]. "We first do the animation"b value."Help message"RONopAnimation new	nbCycles: 70;	after: [ helpLabel := (ROElement on: 'Click here!') + ROLabel.			 rawView add: helpLabel. 			helpLabel translateTo: 20 @ 150.];	on: rawView.RONopAnimation new	nbCycles: 120;	after: [ helpLabel remove ];	on: rawView.		rawView on: ROMouseClick do: [ :event | b value ].</body><body package="Roassal-Core">bouncingBall"	self new bouncingBall"	| rawView |	rawView := ROView new.	self bouncingBallOn: rawView.	rawView open.</body><body package="Roassal-Core">bouncingBallOn: rawView| x y dy ball b |x := 0.y := 50.dy := 0.ball := ROElement new + ROEllipse.ball extent: 30 @ 30.rawView add: ball. b := [ 	x := x + 4.	y := y + dy.	( y &gt; 185) 		ifTrue: [ 			dy := dy negated. 			ball extent: 30 @ 25.			ball translateTo: x @ 190 ]		ifFalse: [			dy := dy * 0.98 + 3.			ball extent: 30 @ 30.			ball translateTo: x @ y ].].ROPluggableAnimation new	nbCycles: 100;	block: b;	on: rawView.</body><body package="Roassal-Core">circle	| view |	view := ROView new.	self circleOn: view.	view open</body><body package="Roassal-Core">circleOn: rawView	| outterElements innerElements b angle |		outterElements := ROElement forCollection: (1 to: 20).	outterElements do: [ :el | el + (ROEllipse blue extent: 20 @ 20) @ RODraggable ].		innerElements := ROElement forCollection: (21 to: 41).	innerElements do: [ :el | el + (ROEllipse green extent: 20 @ 20) @ RODraggable ].		rawView addAll: outterElements.	rawView addAll: innerElements.		angle := 0.	b := [ 		ROCircleLayout new 			initialAngleInDegree: angle;			initialRadius: 130;			initialIncrementalAngleInDegree: 10;			on: innerElements.					ROCircleLayout new 			initialAngleInDegree: angle;			initialRadius: 250;			initialIncrementalAngleInDegree: 10;			on: outterElements.		angle := angle + 1.		angle &gt;= 360 ifTrue: [ angle := 0 ].	].	ROPluggableAnimation new		nbCycles: 5000;		nbIterationsBeforeRefresh: 2;		block: b;		on: rawView.		</body><body package="Roassal-Core">moveLikeCircle"	self new moveLikeCircle"	| rawView |	rawView := ROView new.	self moveLikeCircleOn: rawView.	rawView open.</body><body package="Roassal-Core">moveLikeCircleOn: rawView	| elto mov |		elto := ROElement new.	elto size: 10.	elto + (ROEllipse color: Color green).	rawView add: elto.	elto translateBy: 250@250.	ROFunctionMove new		nbCycles: 360;		blockX: [ :elapseCycle | (elapseCycle * 3.14 / 180) cos * 40  + 100 ]; 		blockY: [ :elapseCycle | (elapseCycle * 3.14 / 180) sin * 40 + 100 ];		on: elto.		"	mov := ROTranslation new nbCycles: 200.	mov for: elto functionX: [:t | 10* (t cos)] Y: [:t | 10* (t sin)] intervalIni: 0 IntervalEnd: 2 * Float pi.	"</body><body package="Roassal-Core">moveLikeCurve"	self new moveLikeCurve"	| rawView |	rawView := ROView new.	self moveLikeCurveOn: rawView.	rawView open.</body><body package="Roassal-Core">moveLikeCurveOn: rawView	| elto mov |		elto := ROElement new.	elto size: 10.	elto + (ROEllipse color: Color green).	rawView add: elto.	elto translateBy: 30@20.	ROFunctionMove new		nbCycles: 360;		blockY: [ :x | (x * 3.1415 / 180) sin * 80 + 50 ];		on: elto.		"	mov := ROTranslation new nbCycles: 100.	mov for: elto function:  [:x | x ] intervalIni: 0 IntervalEnd: 100."</body><body package="Roassal-Core">omgParticules"	self new omgParticules"	| rawView |	rawView := ROView new.	self omgParticulesOn: rawView.	rawView open.</body><body package="Roassal-Core">omgParticulesOn: rawView	| particules |		"Inspired from http://bl.ocks.org/1062544"	particules := OrderedCollection new.	rawView on: ROMouseMove do: [ :event | 		| newElem |		newElem := ROElement new + ROEllipse.		newElem extent: 10 @ 10.		newElem translateTo: (rawView camera realToVirtualPoint: event position).		particules addFirst: newElem.		rawView add: newElem.		rawView signalUpdate.		(particules size = 70) ifTrue: [ particules last remove.  particules removeLast ].		].	ROPluggableAnimation new	nbCycles: 300;	block: [ particules do: [ :el | (el extent: (el extent + (3 @ 3))) ] ];	on: rawView.</body><body package="Roassal-Core">spaceInvaderOn: rawView| ascii1 ascii2 ascii3 monsterAscii color size monster b |ascii1 := '  XX        XX      XX    XX      XXXXXXXXXXXX   XXX  XXXX  XXX XXXXXXXXXXXXXXXXX  XXXXXXXXXX  XX  X        X  X    XXX  XXX    '.ascii2 := '     XXXXX      XXXXXXXXXXXXX XXXXXXXXXXXXXXXXXX   XXX   XXXXXXXXXXXXXXXXXX   XXX   XXX     XX  XXX  XX  XX           XX'.ascii3 := '    XXXXXXX       XXXXXXXXX     XXXXXXXXXXX   XXXXXXXXXXXXX XXXX  XXX  XXXXXXXXXXXXXXXXXXX    XX   XX      XX  XXX  XX  XX  XX   XX  XX'.b := [	monsterAscii := (Array with: ascii1 with: ascii2 with: ascii3) at: 3 atRandom.	color := (Array with: Color blue with: Color black with: Color yellow with: Color red) at: 4 atRandom.	size := 20 atRandom + 10.	monster := ROExample new monsterFrom: monsterAscii color: color size: size.	monster translateTo:  600 atRandom @ (monster position y negated).	rawView add: monster.	ROLinearMove new 		nbCycles: 200 atRandom;		for:  monster to: 600 atRandom @ 600;		after: [ monster remove. b value ]	].b value; value; value.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>Processing</category><body package="Roassal-Core">arrayOfObjects	| view |	view := ROView new.	self arrayOfObjectsOn: view.	view open</body><body package="Roassal-Core">arrayOfObjectsOn: rawView	| module unit b |		"Inspired from Processing code, ArrayObjects"	unit := 40.		1 to: (500 / unit) asInteger do: [ :x | 		1 to: (500 / unit) asInteger do: [ :y |			module := ROElement new + (ROEllipse size: 8).			module translateTo:  (x * unit + ( unit / 2)) @ (y * unit + ( unit / 2)).			module attributeAt: #speed put: (200 atRandom / 100) asFloat.			module attributeAt: #direction put: (1 @ 1).			module attributeAt: #originalPosition put: ((x * unit) @ (y * unit)).			rawView add: module. 			] ].		b := [		rawView elementsDo: [ :element | 			| px dx |			px := (element attributeAt: #originalPosition) x.			dx :=  (module attributeAt: #direction) x.			element translateBy: ((element attributeAt: #speed) *dx) @ 0.						(((element position x - px) &gt;= unit) or: [ 				(element position x - px) &lt;= 0 ]) ifTrue: [					module attributeAt: #direction put: (dx negated @ 0 ) ].		]	].	ROPluggableAnimation new		nbCycles: 20000;		block: b;		on: rawView.</body><body package="Roassal-Core">clock	"	self new clock	"	| view |	view := ROView new.	self clockOn: view.	view open</body><body package="Roassal-Core">clockOn: rawView	| radius secondsRadius minutesRadius hoursRadius clockDiameter cx cy now s m h center secondElement minuteElement hourElement b |	radius := 250.	secondsRadius := radius * 0.72.	minutesRadius := radius * 0.60.	hoursRadius := radius * 0.50.	clockDiameter := radius * 1.8.		cx := 250.	cy := 250.		center := ROElement new. 	center translateTo: (cx @ cy).  	secondElement := ROElement new zIndex: 2.	rawView add: ((ROLine gray width: 2) elementFrom: center to: secondElement).	minuteElement := ROElement new zIndex: 2.	rawView add: ((ROLine gray width: 3) elementFrom: center to: minuteElement).	hourElement := ROElement new zIndex: 2.	rawView add: ((ROLine gray width: 5) elementFrom: center to: hourElement).	"Points"		1 to: 360 by: (360 / 12) do: [ :a | 		| ra el |		ra := (a * 3.1415 / 180) asFloat.		el := ROBox red element translateTo: (cx + (ra cos * secondsRadius)) @ (cy + (ra sin * secondsRadius)).		rawView add: el.	].	b := 	[		now := Time now.		s := now second / 60 * (3.1415 * 2) - (3.1415 / 2).		m := (now minute + (now second / 60)) / 60  * (3.1415 * 2) - (3.1415 / 2).		h := (now hour + (now minute / 60)) / 60  * (3.1415 * 2) - (3.1415 / 2).		minuteElement translateTo: (cx + (m cos * minutesRadius)) @ (cy + (m sin * minutesRadius)).		secondElement translateTo: (cx + (s cos * secondsRadius)) @ (cy + (s sin * secondsRadius)).	 	hourElement translateTo: (cx + (h cos * hoursRadius)) @ (cy + (h sin * hoursRadius)).	 	rawView signalUpdate ].	b value.	ROPluggableAnimation new		nbCycles: 2000;		block: b;		on: rawView.</body><body package="Roassal-Core">constraint	"	self new constraint	"	| view |	view := ROView new.	self constraintOn: view.	view open </body><body package="Roassal-Core">constraintOn: rawView	| outter inner |	outter := ROBox element extent: 100 @ 80.	inner := (ROEllipse color: Color gray) element size: 20. 	outter add: inner.	outter resizeStrategy: (ROFixedSizedParent new).	ROConstraint constraintInItsParent: inner.		rawView add: outter.	rawView add: inner.		outter translateTo: 80 @ 20.		inner @ RODraggable.</body><body package="Roassal-Core">enteringCharacter	"	self new enteringCharacter	"	| rawView |	rawView := ROView new.	self enteringCharacterOn: rawView.	rawView open</body><body package="Roassal-Core">enteringCharacterOn: rawView	| label labelElement |	label := 'Press keys :'.	labelElement := ROLabel elementOn: label.	labelElement @RODraggable .	rawView add: labelElement. 	rawView on: ROKeyDown do: [ :event | 		label := label, event character asString. 		labelElement model: label.		rawView signalUpdate ].</body><body package="Roassal-Core">moose1D	"	self new moose1D	"	| rawView |	rawView := ROView new.	self moose1DOn: rawView.	rawView open</body><body package="Roassal-Core">moose1DOn: rawView	| el1 el2 |	el1 := ROBox element.	el2 := ROBox element.	el1 forward.	el2 forward.	rawView add: el1; add: el2.		rawView on: ROMouseMove do: [ :event |		el1 translateTo: ( 250 + (event position x / 2)) @ (event position x / 2).		el2 translateTo: ( 250 - (500 - (event position x))) @ (event position x / 2).				el1 extent: (event position x @ event position x).		el2 extent: ((500 @ 500) - (event position x @ event position x)).		rawView signalUpdate	].</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>nesting</category><body package="Roassal-Core">nesting	"	self new nesting	"	| view innerNode outterNode |	view := ROView new.		innerNode := ROElement new 					extent: 40@30; 					+ (ROBox new color: Color green);					@ RODraggable.		outterNode := 		ROElement new 			addInteraction: RODraggable;			extent: 190@190;			translateBy: 20@20;			+ (ROBorder new color: Color red).	view add: outterNode.	outterNode add: innerNode.			view open.	</body><body package="Roassal-Core">nesting2	"	self new nesting2	"	| view nodes |	view := ROView new.	view add: (ROElement sprite				addAll: (nodes := ROElement spritesOn: (1 to: 20))).	nodes do: [:n | n addShape: ROLabel].	ROCircleLayout on: nodes. 	view open.	</body><body package="Roassal-Core">nesting3	"	self new nesting3	"		| view elements edges outterElement |	view := ROView new.			elements := ROElement spritesOn: (1 to: 5).	outterElement := ROElement new.	outterElement addAll: elements.	outterElement addAll: (edges := ROEdge linesFor: (Array with: elements first -&gt; elements second with: elements second -&gt; elements fifth with: elements second -&gt; elements third )).	ROTreeLayout on: elements edges: edges.	view add: outterElement.		view open.</body><body package="Roassal-Core">nestingOn: rawView	| innerNode outterNode |	innerNode := ROElement new 					extent: 40@30; 					+ (ROBox new color: Color green);					@ RODraggable.		outterNode := 		ROElement new 			addInteraction: RODraggable;			extent: 190@190;			translateBy: 20@20;			+ (ROBorder new color: Color red).	rawView add: outterNode.	outterNode add: innerNode.</body><body package="Roassal-Core">stack	"	self new stack	"		| view1 label1 stack view2 label2 view3 label3 |	view1 := ROView new.	label1 := (ROElement on: 'view 2') + ROLabel @ ROLightlyHighlightable.	label1 on: ROMouseClick do: [ :event | stack replaceFirstBy: view2 ].	view1 add: label1.	view1 addAll: (ROGridLayout on: (ROElement spritesOn: (1 to: 20))).		view2 := ROView new.	label2 := (ROElement on: 'view 3') +ROLabel @ ROLightlyHighlightable.	label2 on: ROMouseClick do: [ :event | stack replaceFirstBy: view3 ].	view2 add: label2.	view2 addAll: (ROCircleLayout on: (ROElement spritesOn: (1 to: 20))).	view3 := ROView new.	label3 := (ROElement on: 'view 1') +ROLabel @ ROLightlyHighlightable.	label3 on: ROMouseClick do: [ :event | stack replaceFirstBy: view1 ].	view3 add: label3.	view3 addAll: (ROHorizontalLineLayout on: (ROElement spritesOn: (1 to: 20))).	stack := ROViewStack new addFirst: view1.	stack open</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>free style</category><body package="Roassal-Core">drawCircle: view x: x radius: radius level: level	| tt |	tt := 126 * level / 4.	view  add: ((ROElement new center: x asInteger @100 radius: radius asInteger )						addShape: (ROEllipse new color: (Color gray256: tt) )).	(level &gt; 1) ifTrue: 		[			self drawCircle: view x: (x - (radius / 2)) radius: radius / 2 level: level - 1.			self drawCircle: view x: (x + (radius / 2)) radius: radius / 2 level: level - 1.		]</body><body package="Roassal-Core">embeddedIteration"	From Processing	self new embeddedIteration"	| view boxSize elements tmpEltos windowExtent cantBoxes layout height gap originalBoxSize |	originalBoxSize := 10.	boxSize := 10.	windowExtent := 200.	view := ROView new.	elements := OrderedCollection new.	cantBoxes := windowExtent / boxSize .	height  := 0.	[ boxSize &gt; 0 ] whileTrue: [		gap := (originalBoxSize - boxSize) / 2.			tmpEltos := ROElement forCollection: (1 to: cantBoxes).		tmpEltos do: [ :e |			e + ROBox .			e size: boxSize ].				layout := ROHorizontalLineLayout withGap: gap.		layout applyOn: tmpEltos.		tmpEltos do: [ :e | e translateBy: 0 @ height ].		elements addAll: tmpEltos .		height := height + boxSize + 1.		boxSize := boxSize - 0.5.		].	view addAll: elements .		view openInWindowSized: windowExtent @ windowExtent .</body><body package="Roassal-Core">pointillism"	Idea from  Pointillism	by Daniel Shiffman	at Prossesing	self new pointillism "	|view elto|	view := ROView new.	self pointillismOn: view.		view open.</body><body package="Roassal-Core">pointillismOn: rawView	| elto |	rawView on: ROMouseMove do: [ :event | 		5 timesRepeat: [			elto := ROElement new.			elto size: (event position x / 10).			elto + (ROEllipse color: (Color r: (155 atRandom / 255) g: (155 atRandom / 255) b: (155 atRandom / 255) alpha: 0.5)).			elto translateTo: (500 atRandom @ 500 atRandom).			rawView add: elto.			rawView signalUpdate.		]	].</body><body package="Roassal-Core">recursionProcessing	"	self new recursionProcessing	"	| view b |	view := ROView new.	b := [:x :radius :level | 		| tt |		tt := 126 * level / 4.0.		view  add: ((ROElement new center: x@100 radius: radius)							addShape: (ROEllipse new color: (Color gray256: tt) )).		(level &gt; 1) ifTrue: 			[				b value: (x - (radius / 2)) value: radius / 2 value: (level - 1).				b value: (x + (radius / 2)) value: radius / 2 value: (level - 1).			]	].	b value: 126 value: 170 value: 6.	view open </body><body package="Roassal-Core">recursionProcessing2	"	self new recursionProcessing2	"	| view b |	view := ROView new.	self drawCircle: view x: 126 radius: 170 level: 6.	view open</body><body package="Roassal-Core">recursionProcessingOn: rawView	| b |	b := [ :x :radius :level | 		| tt |		tt := 126 * level / 4.0.		rawView  add: ((ROElement new center: x@100 radius: radius)							addShape: (ROEllipse new color: (Color gray256: tt) )).		(level &gt; 1) ifTrue: 			[				b value: (x - (radius / 2)) value: radius / 2 value: (level - 1).				b value: (x + (radius / 2)) value: radius / 2 value: (level - 1).			]	].	b value: 126 value: 170 value: 6.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>software</category><body package="Roassal-Core">classHierarchyOn: rawView"We insert the classes"ROShape withAllSubclasses do: [ :c |	| el |	el := ROElement on: c.	el @ RODraggable.	el + ROBorder + ROLabel.	rawView add: el ].ROShape withAllSubclasses do: [ :c |	| subclass superclass |	subclass := rawView elementFromModel: c.	superclass := rawView elementFromModel: c superclass.	(subclass notNil and: [ superclass notNil ])		ifTrue: [  			| edge |			edge := ROEdge from: superclass to: subclass. 			edge + (ROOrthoVerticalLineShape new add: (ROReversedVerticalArrow new offset: 1 ); attachPoint: ROVerticalAttachPoint instance). 			rawView add: edge ]	].ROTreeLayout on: (rawView elementsNotEdge) edges: (rawView elements select: #isEdge).</body><body package="Roassal-Core">latentSemanticIndexing	"	self new latentSemanticIndexing	"	| documentsToProcess matrix words v elements view tIndexing elementsGraphical nativeUtil stack |	documentsToProcess := OrderedCollection new.	nativeUtil := RONativeExampleUtility current.	ROElement withAllSubclasses do: [ :cls | documentsToProcess addAll: ((nativeUtil getMethodsForClass: cls) collect: #sourceCode) ].		"Matrix is a dictionary of dictionaries. The outter key is a word of the documents. The value is a dictionary is a method source code. In this dictionary of method source code, the value is the number of occurence of the word in the source code.    | w1 | w2 | w3 | w4|s0| s1|s2|(w1, s0) occurence of the word w1 in the source code s0....	"	matrix := Dictionary new.	documentsToProcess do: [ :source | 		words := nativeUtil substringsFor: source .		words do: [ :w |  			matrix at: w ifAbsentPut: [ Dictionary new ].			v := (matrix at: w) at: source ifAbsentPut: [ 0 ].			(matrix at: w) at: source put: (v + 1) ] ].	elements := OrderedCollection new.	matrix associationsDo: [ :assoc|		| wordToConsider sourceAndOccurrences |		wordToConsider := assoc key.		sourceAndOccurrences := assoc value.				sourceAndOccurrences associationsDo: [ :assoc2|			| sourceCodeForWord wordOccurrence|			sourceCodeForWord := assoc2 key.			wordOccurrence := assoc2 value.			elements add: (Array 							with: wordToConsider							with: (documentsToProcess indexOf: sourceCodeForWord) 							with: wordOccurrence							with: sourceCodeForWord) ] ].	tIndexing := (elements collect: #first) asSet asSortedCollection.	elements := elements collect: [ :tupple |			Array 				with: (tIndexing indexOf: tupple first) 				with: tupple second 				with: tupple third				with: tupple fourth				with: tupple first ].		"We build the view"		stack := ROViewStack new.	view := ROView new backgroundColor: Color black.	elementsGraphical := ROElement forCollection: elements.	elementsGraphical do: [:el | 										el 						addShape: (ROEllipse green);						addInteraction: (ROPopup new 											text:  [:e | 												'Word: ', e fifth, Character cr,												'Occurrence: ', e third printString, Character cr,												'Source Code: ', Character cr, e fourth printString] ;											receivingView: stack);						size: (el model third) ].							view addAll: elementsGraphical.	ROScatterplotLayout new 		x: #first ; y: #second;		applyOn: elementsGraphical.		view 		on: ROMouseLeftClick		do: [ :event | 			ROZoomInMove new on: view ].	view 		on: ROMouseRightClick		do: [ :event | 			ROZoomOutMove new on: view ].			view @ RODraggable @ RODraggableWithVelocity.		stack addView: view.	stack open.</body><body package="Roassal-Core">memoryProfiling	"	self new memoryProfiling	"	"| spaceItems builder |	spaceItems := SpaceTally new spaceTally: (Array with: ByteString with: Process with: RPackage with: Bitmap).		builder := ROMondrianViewBuilder new.	builder shape rectangle logWidth: #instanceCount; logHeight: #spaceForInstances.	builder nodes: (spaceItems asSorted: #spaceForInstances).	builder open	.	"</body><body package="Roassal-Core">punchChart	"inspired from http://raphaeljs.com/github/dots.html	self new punchChart	"	| rawView |	rawView := ROView new.	self punchChartOn: rawView.	rawView @ RODraggable.	rawView open</body><body package="Roassal-Core">punchChartOn: rawView	| classes metrics maxMetrics rx ry elements initialX initialY spaceX spaceY spaceYFromAxis spaceXFromAxis |	"inspired from http://raphaeljs.com/github/dots.html"	"Gathering the data"	classes := OrderedCollection new.	classes add: Object; add: Behavior; add: Metaclass; add: Collection; add: OrderedCollection.	metrics :=  #(#numberOfMethods #numberOfVariables #numberOfSubclasses).		"Visualzing the data"	maxMetrics := metrics collect: [ :m | classes inject: 0 into: [:max :el | max max: (m roValue: el) ] ].	initialX := 30.	initialY := 60.	spaceX := 100.	spaceY := 30.	spaceYFromAxis := 20.	spaceXFromAxis := 20.	rx := initialX.	ry := initialY.	elements := OrderedCollection new.		classes do: [:cls | 		ry := initialY.		rx := rx + spaceX.				metrics with: maxMetrics do: [ :m :mMax |						| v |						ry := ry + spaceX.						v := m roValue: cls.						elements add: 							((ROElement on: cls)															translateTo: rx @ ry;								+ (ROEllipse color: ((Color green mix: Color red shades: 30) at: (v max: mMax in: (1 to: 30))));								@ (ROPopup text: v printString);								 radius: ((m roValue: cls) max: mMax in: (5 to: 10))) ].		ry := ry + spaceYFromAxis.		elements add: ((ROLabel elementOn: cls name) center: rx @ ry). ].		ry := initialY.	rx := rx + spaceX.	rx := rx + spaceXFromAxis.	metrics do: [ :m | 		ry := ry + spaceX.		elements add: ((ROLabel elementOn: m) center: rx @ ry) ].					rawView addAll: elements.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>util</category><body package="Roassal-Core">monsterFrom: string color: aColor 	"Check spaceInvaderOn: for example of usage"	^ self monsterFrom: string color: aColor size: 10</body><body package="Roassal-Core">monsterFrom: string color: aColor size: sizeAsInteger	"Check spaceInvaderOn: for example of usage"		| monster x y cr |	cr := '' first.	monster := ROElement new.	monster @ RODraggable.	x := 0.	y := 0.	string do: [ :char | 		char = 'X' first ifTrue: [			| el |			el := ROElement new + (ROBox new color: aColor).			el extent: sizeAsInteger @ sizeAsInteger.			el translateBy: (x * sizeAsInteger) @ (y * sizeAsInteger).			monster add: el.			el forward.		].		char = cr ifTrue: [ 			y := y + 1.			x := -1.		].		x := x + 1	].	^ monster</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>keypressing</category><body package="Roassal-Core">keyPressing"	self new keyPressing"	|view elto elements|	view := ROView new.	view on: ROKeyDown  do: [:evt |		|keyValue|		keyValue  := evt keyValue.		keyValue = 30 "up arrow"			ifTrue: [view  translateBy: 0@1].		keyValue = 31 "down arrow"			ifTrue: [view  translateBy: 0@(-1)].		keyValue = 29 "right arrow"			ifTrue: [view  translateBy: (-1)@0].		keyValue = 28 "left arrow"			ifTrue: [view  translateBy: 1@0]	].	elements := ROElement spritesOn: (1 to: 100).	ROGridLayout new applyOn: elements.	view  addAll: elements .	view open.</body><body package="Roassal-Core">keyPressing2"	self new keyPressing2"	|view elto element|	view := ROView new.	element := ROElement spriteOn: 'me'.	view on: ROKeyDown  do: [:evt |		| keyValue |		keyValue  := evt keyValue.		keyValue = 30 "up arrow"			ifTrue: [element  translateBy: 0@(-2)].		keyValue = 31 "down arrow"			ifTrue: [element  translateBy: 0@(2)].		keyValue = 29 "right arrow"			ifTrue: [element  translateBy: (2)@0].		keyValue = 28 "left arrow"			ifTrue: [element  translateBy: (-2)@0].		element signalUpdate.	].	view add: element.	view open.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>resizing</category><body package="Roassal-Core">stretchHorizontalyOn: rawView	| container1 container2 |		container1 := ROBorder elementOn: 'container1'.	container2 := ROBorder elementOn: 'container2'.	rawView add: container1.	rawView add: container2.	container1 extent: 20 @ 20.	ROVerticalLineLayout new			gapSize: 0;			on: rawView elements.	ROResize stretchHorizontally: rawView elements.</body><body package="Roassal-Core">stretchVerticalyOn: rawView	| container1 container2 |		container1 := ROBorder elementOn: 'container1'.	container2 := ROBorder elementOn: 'container2'.	rawView add: container1.	rawView add: container2.	container1 extent: 20 @ 20.	ROHorizontalLineLayout new			gapSize: 0;			on: rawView elements.	ROResize stretchVertically: rawView elements.</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>dynamic edges</category><body package="Roassal-Core">dynamicEdgeSimpleOn: rawView| element1 element2 |element1 := ROBox blue element.element1 extent: 50 @ 50.element1 @ RODraggable.element2 := ROBox green element.element2 extent: 50 @ 50.element2 @ RODraggable.element1 on: ROMouseEnter do: [ :event | 	element1 @ (RODynamicEdge to: element2). 	ROWiggle on: element2 ].rawView add: element1; add: element2.ROHorizontalLineLayout on: (Array with: element1 with: element2).</body></methods><methods><class-id>Roassal.ROExample</class-id> <category>popup</category><body package="Roassal-Core">popupViewOn: rawView	| popupView |		popupView := ROView new.	popupView add: (ROBox new extent: 40 @ 40) element.	popupView add: (ROBox new extent: 40 @ 40) element.	ROHorizontalLineLayout on: popupView elements.	rawView add: ((ROElement spriteOn: 'world')				+ (ROLabel text: 'hello')				@ (ROPopupView new view: popupView)).</body></methods><methods><class-id>Roassal.ROExample class</class-id> <category>easel</category><body package="Roassal-Core">postScript	^ '"-------------""-------------""Below is the initiation of the menu and opening the visualization"ROEaselMorphic new populateMenuOn: view.view noLayout.view open'</body><body package="Roassal-Core">preamble	^ 'rawView := ROView new.view := ROMondrianViewBuilder view: rawView.'</body><body package="Roassal-Core">preambleVariables	^ #('view' 'rawView')</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>events</category><body package="Roassal-Core">testAnnouncerInView	self assert: (view instVarNamed: 'eventHandler') class == ROAnnouncer</body><body package="Roassal-Core">testEvents	| t |	t := 0.	view announce: RORefreshNeeded.	self assert: t isZero.		view on: RORefreshNeeded do: [ :event | t := t + 1 ].	view announce: RORefreshNeeded.	self assert: t = 1.</body><body package="Roassal-Core">testResizingViewAndEvent	|  e oldExtent |	view := ROView new.	view on: ROWindowResized do: [ :event | e := event ].	self assert: e isNil.		oldExtent := view camera windowSize.	view windowSize: 40 @ 60.	self assert: e notNil.	self assert: e class == ROWindowResized.	self assert: e oldExtent = oldExtent.	self assert: e extent = (40 @ 60)</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>rendering</category><body package="Roassal-Core">testRemovingAllElementToRender	emptyView add: ROElement sprite.	emptyView add: ROElement sprite.	self assert: emptyView numberOfElementsToRender = 2.	self assert: emptyView numberOfElements = 2.	emptyView removeAllElementsToRender.	self assert: emptyView numberOfElementsToRender = 0.	self assert: emptyView numberOfElements = 2</body><body package="Roassal-Core">testRemovingNestedRenderingElements	| spr spr2 |	spr := ROElement sprite.	spr2 := ROElement sprite.	spr add: spr2.	emptyView add: spr.		self assert: emptyView numberOfElementsToRender = 2.	self assert: emptyView numberOfElements = 1.		spr remove.	self assert: emptyView numberOfElementsToRender = 0.	self assert: emptyView numberOfElements = 0.</body><body package="Roassal-Core">testRemovingRenderingElements	| spr |	spr := ROElement sprite.	emptyView add: spr.		self assert: emptyView numberOfElementsToRender = 1.	self assert: emptyView numberOfElements = 1.		spr remove.	self assert: emptyView numberOfElementsToRender = 0.	self assert: emptyView numberOfElements = 0.</body><body package="Roassal-Core">testRemovingRenderingElementsAndPopup	| spr |	spr := ROElement sprite.	spr @ ROPopup.	self assert: emptyView numberOfElements = 0.	emptyView add: spr.		spr announce: ROMouseEnter.	"Because the popup has two elements"	self assert: emptyView numberOfElementsToRender = 3.	self assert: emptyView numberOfElements = 2.		spr announce: ROMouseLeave.	self assert: emptyView numberOfElementsToRender = 1.	self assert: emptyView numberOfElements = 1.</body><body package="Roassal-Core">testRenderingElements	emptyView add: ROElement sprite.	self assert: emptyView numberOfElementsToRender = 1</body><body package="Roassal-Core">testRenderingElements2	emptyView add: (ROElement sprite add: ROElement sprite).	self assert: emptyView numberOfElementsToRender = 2</body><body package="Roassal-Core">testRenderingElements3	| spr |	spr := ROElement sprite.	emptyView add: spr.	spr add: ROElement sprite.	self assert: emptyView numberOfElementsToRender = 2.</body><body package="Roassal-Core">testRenderingElements4	self deny: (ROElement sprite isRendered)</body><body package="Roassal-Core">testRenderingElements5	| spr |	spr := ROElement sprite.	emptyView add: spr.	self assert: emptyView numberOfElementsToRender = 1.	spr setAsNotRendered.	self assert: emptyView numberOfElementsToRender = 1.	self assert: spr isRendered.		spr view cleanRenderingElement.	self assert: emptyView numberOfElementsToRender = 0.	self deny: spr isRendered.		spr setAsRendered.	self assert: emptyView numberOfElementsToRender = 0.	self deny: spr isRendered.	spr view cleanRenderingElement. 	self assert: emptyView numberOfElementsToRender = 1.	self assert: spr isRendered.	</body><body package="Roassal-Core">testRenderingElements6	| spr1 spr2 edge |	spr1 := ROElement sprite.	spr2 := ROElement sprite.	edge := ROEdge lineFrom: spr1 to:  spr2.	emptyView add: spr1; add: spr2; add: edge.	self assert: emptyView numberOfElementsToRender = 3.	edge setAsNotRendered.	self assert: emptyView numberOfElementsToRender = 3.	self assert: edge isRendered.	edge view cleanRenderingElement.	self assert: emptyView numberOfElementsToRender = 2.	self deny: edge isRendered.		edge setAsRendered.	self assert: emptyView numberOfElementsToRender = 2.	self deny: edge isRendered.	edge view cleanRenderingElement.	self assert: emptyView numberOfElementsToRender = 3.	self assert: edge isRendered.	</body><body package="Roassal-Core">testRenderingElements7	| spr1 spr2 canvas |	canvas := ROTracingCanvas new.	emptyView add: (spr1 := ROElement sprite).	emptyView add: (spr2 := ROElement sprite). 	self assert: emptyView numberOfElementsToRender = 2.		spr1 setAsNotRendered.	spr2 setAsNotRendered.		emptyView drawOn: canvas.	self assert: emptyView numberOfElementsToRender = 0</body><body package="Roassal-Core">testRenderingElements8	| spr1 spr2 |	emptyView add: (spr1 := ROElement sprite).	emptyView add: (spr2 := ROElement sprite). 	emptyView drawOn: ROTracingCanvas new.	spr1 setAsNotRendered.	spr2 setAsNotRendered.	emptyView drawOn: ROTracingCanvas new.	self assert: emptyView numberOfElementsToRender = 0.		emptyView makeAllElementAsRendered.	self assert: emptyView numberOfElementsToRender = 2.</body><body package="Roassal-Core">testRenderingElements9	| spr1 spr2 |	emptyView add: (spr1 := ROElement sprite).	emptyView add: (spr2 := ROElement sprite). 	emptyView drawOn: ROTracingCanvas new.	spr1 setAsNotRendered.	emptyView drawOn: ROTracingCanvas new.	self assert: emptyView numberOfElementsToRender = 1.		emptyView makeAllElementAsRendered.	self assert: emptyView numberOfElementsToRender = 2.</body><body package="Roassal-Core">testRenderingElementsTesting	| el |	emptyView add: (el := ROElement sprite).	self assert: (emptyView numberOfElementsToRender = 1).	self assert: (emptyView isRendered: el).	self assert: (el isRendered)</body><body package="Roassal-Core">testRenderingEmptyViewOnCanvas	| canvas |	canvas := ROTracingCanvas new.	ROView new drawOn: canvas.	self assert: canvas trace size = 1.	self assert: canvas trace first  = #(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white')</body><body package="Roassal-Core">testRenderingNestedElementOnCanvas	| canvas |	canvas := ROTracingCanvas new.	view := ROView new.	view add: (ROElement sprite add: ROElement sprite).		view drawOn: canvas.	self assert: canvas trace size = 9.	self assert: canvas trace asArray = 	 #(		#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') 		#(#line '(0@0)' '(60@0)' 1 'Color red') 		#(#line '(60@0)' '(60@60)' 1 'Color red') 		#(#line '(60@60)' '(0@60)' 1 'Color red') 		#(#line '(0@60)' '(0@0)' 1 'Color red') 		#(#line '(5@5)' '(55@5)' 1 'Color red') 		#(#line '(55@5)' '(55@55)' 1 'Color red') 		#(#line '(55@55)' '(5@55)' 1 'Color red') 		#(#line '(5@55)' '(5@5)' 1 'Color red')	)	</body><body package="Roassal-Core">testRenderingOnCanvas	| canvas |	canvas := ROTracingCanvas new.	view := ROView new.	view add: ROElement sprite.	view drawOn: canvas.	self assert: canvas trace size = 5.	self assert: canvas trace first  = #(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white').	self assert: canvas trace second  = #(#line '(0@0)' '(50@0)' 1 'Color red').	self assert: canvas trace third  = #(#line '(50@0)' '(50@50)' 1 'Color red').	self assert: canvas trace fourth  = #(#line '(50@50)' '(0@50)' 1 'Color red').	self assert: canvas trace fifth  =  #(#line '(0@50)' '(0@0)' 1 'Color red').</body><body package="Roassal-Core">testRenderingWithoutElement	self assert: emptyView numberOfElementsToRender = 0.	self assert: emptyView elementsToRender = #()</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>animations</category><body package="Roassal-Core">testAnimationWithDefaultStrategy	| animation1 animation2 |	animation1 := ROMotionMove new.	animation2 := ROMotionMove new.	view := ROView new.	view addAnimation: animation1.	view addAnimation: animation2.	self assert: view numberOfAnimations = 2</body><body package="Roassal-Core">testAnimationWithExclusiveStrategy	| animation |	view := ROView new.	ROMotionMove new for: view initialSpeed: 5 @ 5.	animation := ROMotionMove new.	animation strategy: (ROAnimationExclusive instance).	animation for: view initialSpeed: 15 @ 15.	self assert: view numberOfAnimations = 1.	self assert: view animations asArray = (Array with: animation)</body><body package="Roassal-Core">testNumberOfAnimation	self assert: ROView new numberOfAnimations = 0.	self assert: (ROView new addAnimation: ROMotionMove new; numberOfAnimations) = 1.	</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>running</category><body package="Roassal-Core">setUp	node1 := ROElement on: 'hello'.	node1 extent: 40 @ 30.	node1		addShape: (ROBox new color: Color yellow);		addShape: ROBorder new.	node1 addInteraction: RODraggable.	node2 := ROElement on: 'world'.	node2 extent: 40 @ 30.	node2		addShape: (ROBox new color: Color green).	node2 translateBy: 100@30.		view := self viewClass new.	view add: node1.	view add: node2.		emptyView := ROView new.</body><body package="Roassal-Core">testRenderingElementAndDraggingView	| el |	view := ROView new.	view add: (el := ROElement sprite).	view windowSize: 500 @ 500.	view @ RODraggable.	view drawOn: RONullCanvas new.		self assert:  el isRendered.		view announce: (ROMouseDragging step: -100 @ -100).	view drawOn: RONullCanvas new.		self assert:  el isRendered not.	view announce: (ROMouseDragging step: 100 @ 100).	view drawOn: RONullCanvas new.		self assert:  el isRendered.</body><body package="Roassal-Core">viewClass	^ ROView</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>camera</category><body package="Roassal-Core">testCameraHeight	| camera alts |	camera := view camera.	self assert: camera position = (0@0).	self assert: camera altitude asInteger = 229.		"Due to the rounding"	camera altitude: 230.	alts := Array with: 229 with: 230.	self assert: (alts includes: camera altitude asInteger).			</body><body package="Roassal-Core">testDraggingView	| camera |	camera := view camera.		self assert: camera bounds = ( 0@0 corner: 500@500).		camera translateByRealStep: 15 @ 10.	self assert: camera bounds = ( 15@10 corner: 515@510).	"camera translateByRealStep: -15 @ -10.	self assert: camera bounds = ( 0@0 corner: 500@500)."</body><body package="Roassal-Core">testTranslatingCamera	| camera |	camera := view camera.		self assert: camera bounds = ( 0@0 corner: 500@500).		camera translateBy: 15 @ 10.	self assert: camera bounds = ( 15@10 corner: 515@510).	camera translateBy: -15 @ -10.	self assert: camera bounds = ( 0@0 corner: 500@500).</body><body package="Roassal-Core">testVisibleBounds	| window |	self assert: view camera bounds = ( 0@0 corner: 500@500).	window := view open.	window delete.	self assert: view camera bounds = ( 0@0 corner: 500@500).	</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>tests</category><body package="Roassal-Core">testAddingNode	self assert: emptyView numberOfElements isZero.	emptyView add: ROElement new.	self assert: emptyView numberOfElements = 1.		emptyView add: ROElement new.	self assert: emptyView numberOfElements = 2</body><body package="Roassal-Core">testAddingNodes	| element |	element := ROElement new.	self assert: emptyView elements isEmpty.	3 timesRepeat: [ emptyView add: element ].	self assert: emptyView elements size = 1.</body><body package="Roassal-Core">testCamera	self assert: (view camera class == ROCamera)</body><body package="Roassal-Core">testDefaultWindowSize	self assert: (self viewClass new defaultWindowSize class == Point)</body><body package="Roassal-Core">testElementAt	self assert: (view elementAt: node1 bounds center) == node1.	self assert: (view elementAt: node2 bounds center) == node2.	self assert: (view elementAt: node2 bounds bottomRight + (1 @ 1)) == view </body><body package="Roassal-Core">testElementAt2	node1 translateBy: (-20 @ -20).	self assert: (view elementAt: (node1 bottomRight - (5@5))) == node1.	</body><body package="Roassal-Core">testElementAt3	| node aPoint |	node := ROElement sprite 				extent: (100@100);				add: (ROElement sprite).	view add: node.	self assert: (view elementAt: (node bottomRight - (5@5))) == node.		node translateBy: -20 @ -20.	aPoint := node bottomRight - (5@5).	self assert: (node contains: aPoint).	self assert: (view elementAt: aPoint) == node.</body><body package="Roassal-Core">testEncompassingRectangle	self assert: view encompassingRectangle = ((0@0) corner: (140@60)).		node1 translateBy: 6@9.	self assert: view encompassingRectangle = ((6@9) corner: (140@60)).</body><body package="Roassal-Core">testSortingElements	| nodes nodes2 |		nodes := ROElement forCollection: #(1 2 3).	emptyView addAll: nodes.		nodes2 := emptyView elementsSuchThat: [ :v | true ].	self assert: (nodes2 collect: #model) asArray = #(1 2 3).		emptyView sortElementsWith: [ :a :b | a model &gt; b model ].	nodes2 := emptyView elementsSuchThat: [ :v | true ].	self assert: (nodes2 collect: #model) asArray = #(3 2 1).</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>dragging</category><body package="Roassal-Core">testDraggingElement	| el t |	el := ROElement sprite.	node1 add: el.	t := false.	view on: RORefreshNeeded do: [ :event | t := true. ].	self deny: t.		el announce: (ROMouseDragging step: 5 @ 3).	self assert: t</body><body package="Roassal-Core">testDraggingElement2	| el t |	el := ROElement sprite.	node1 add: el.	t := false.	"view := self viewClass new.	view add: node1; add: node2."	view on: RORefreshNeeded do: [ :event | t := true ].	self deny: t.		"Check signalUpdate, since this is what is used to update the view"	self assert: el view == node1 view.	el signalUpdate.	self assert: t.	t := false.		el announce: (ROMouseDragging step: 5 @ 3).	self assert: t</body><body package="Roassal-Core">testDraggingViewAndPopupOnElement	"	self debug: #testDraggingViewAndPopupOnElement	"		| el popup |	view := ROView new.	el := ROElement spriteOn: 12.	el @ ROPopup.	view add: el.	view 			@ RODraggable;			@ RODraggableWithVelocity.	view camera windowSize: 500 @ 500.		el announce: (ROMouseEnter new position: 0@0).	self assert: view elements size = 2.	popup := view elements second.	self assert: popup position =  (10@10).	el announce: ROMouseLeave.		"We do a drag and drop of the view, and we mouse enter again"	view translateBy: 50@60.	el announce: (ROMouseEnter new realPosition: 50@60).	popup := view elements second.	self assert: popup position =  (10@10).	el announce: ROMouseLeave.			"	view open	"</body><body package="Roassal-Core">testTranslatingView	| camera e |	view := ROView new.	camera := view camera.	view @ RODraggable.	view add: (e := ROBox element extent: 20 @ 20).	self assert: camera position = (0 @ 0).	self assert: ((camera virtualToRealPoint: e position) = (0 @ 0)).	view translateByRealPoint: 20 @ 30.		self assert: ((camera virtualToRealPoint: e position) = (20 @ 30)).</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>opening</category><body package="Roassal-Core">testOpenInWindow	| window |	window := view open.	window delete</body><body package="Roassal-Core">testOpenInWindowSized	| window |	[ window := view openInWindowSized: 400@30.	 self assert: window extent &gt;= (400@30).]		ensure: [ window delete ]</body><body package="Roassal-Core">testWindowTitle	| window |	window := (view := self viewClass titled: 'Hello World') open.	[ self assert: window labelString = 'Hello World'.	  self assert: view title = 'Hello World' ]		ensure: [ window delete ]</body><body package="Roassal-Core">testWindowTitleDefault	| window |	window := self viewClass new open.	[ self assert: window labelString = ROView defaultWindowTitle ]		ensure: [ window delete ]</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>zOrdering</category><body package="Roassal-Core">testChangingToBasicOrdering	view zOrdering: (ROBasicZOrdering new).	self assert: node1 zIndex = 0.	self assert: node2 zIndex = 0.		view zOrdering: (ROZOrdering new							setZIndex: 1 if: [ :el | el == node1 ];							setZIndex: 2 if: [ :el | el == node2 ];							yourself).	self assert: node1 zIndex = 1.	self assert: node2 zIndex = 2.</body><body package="Roassal-Core">testChangingZOrdering	view zOrdering: (ROZOrdering new							setZIndex: 1 if: [ :el | el == node1 ];							setZIndex: 2 if: [ :el | el == node2 ];							yourself).	self assert: node1 zIndex = 1.	self assert: node2 zIndex = 2.		view zOrdering: (ROZOrdering new							setZIndex: 1 if: [ :el | el == node2 ];							setZIndex: 2 if: [ :el | el == node1 ];							yourself).	self assert: node1 zIndex = 2.	self assert: node2 zIndex = 1.</body><body package="Roassal-Core">testDefaultZOrdering	self assert: node1 zIndex = 0. 	self assert: node2 zIndex = 0.</body><body package="Roassal-Core">testElementsToRenderDo	| t |	t := OrderedCollection new.	view elementsToRenderDo: [ :el | t add: el ].		self assert: t asArray = view elements.</body><body package="Roassal-Core">testElementsToRenderReverseDo	| t |	t := OrderedCollection new.	view elementsToRenderReverseDo: [ :el | t add: el ].		self assert: t asArray = view elements reverse</body><body package="Roassal-Core">testRendering	| el1 el2 canvas |	view := ROView new.	el1 := ROElement new + ROBox.	el1 extent: 30 @ 30.	el2 := ROElement new + ROEllipse blue.	el2 extent: 30 @ 30.		view add: el1; add: el2.	canvas := ROTracingCanvas new.	view drawOn: canvas.		self assert: canvas trace =   #(			#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') 			#(#frameAndFillRectangle: '(0@0) corner: (30@30)' 'Color veryLightGray' 0 'Color black') 			#(#fillOval: '(0@0) corner: (30@30)' 0 'Color blue'))</body><body package="Roassal-Core">testSortedCollection	"We are just testing a property of the sorted collection. This is useful when migrating to other platform to see whether this important invariant is preserved or not"		| col el1 el2 el3 |	col := SortedCollection sortBlock: [ :a :b | a model &lt; b model ].	col add: (el1 := ROElement on: 1).	col add: (el2 := ROElement on: 2).	self assert: (col indexOf: el1) = 1.	self assert: (col indexOf: el2) = 2.			col add: (el3 := ROElement on: 2).	self assert: (col indexOf: el1) = 1.	self assert: (col indexOf: el3) = 2.		self assert: (col indexOf: el2) = 3.	</body><body package="Roassal-Core">testzOrderingError	self assert: (view numberOfElements &gt; 0).	self shouldnt: [ view zOrdering: ROZOrdering new ] raise: Error</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>mondrian</category><body package="Roassal-Core">testMondrian	| rawView |	view := ROMondrianViewBuilder new.	view node: 'foo' forIt: [ 		view nodes: (1 to: 2).		view edgeFromAssociation: 1 -&gt; 2.	].	view applyLayout.		rawView := view raw.	self assert: rawView numberOfElementsToRender = 4.</body></methods><methods><class-id>Roassal.ROViewTest</class-id> <category>overlapping</category><body package="Roassal-Core">testOverlapping	| greenNode |	"greenNode is overlapping node1"	greenNode := ROElement spriteOn: 'green node'.	greenNode setBounds: (node1 bounds translateBy: 5@6 ).	view add: greenNode.	 	"-----"	self assert: (view elementAt: node1 bounds topLeft) == node1. 	self assert: (view elementAt: greenNode bounds topLeft) == greenNode	</body></methods><methods><class-id>Roassal.ROViewStackTest</class-id> <category>tests</category><body package="Roassal-Core">testNestingView	| newView el mouseClickPosition |	newView := ROView new.	newView add: (el := ROElement sprite translateTo: 0@60).	view := ROViewStack new.	view addFirst: newView.		self assert: (view elementAtRealPosition: 23@85) == el.	self assert: (newView elementAtRealPosition: 23@85) == el.	(ROZoomOutMove new on: newView).	self assert: newView hasAnimation.	newView doAllAnimationCycles.	self assert: (view elementAtRealPosition: (53@103)) == el.	self assert: (newView elementAtRealPosition: (53@103)) == el.		ROZoomOutMove new on: newView.	newView doAllAnimationCycles.	ROZoomOutMove new on: newView.		newView doAllAnimationCycles.	self assert: (view elementAtRealPosition: (140@160)) == el."	view openInWindow"</body><body package="Roassal-Core">testOpening	|  window |	view := ROViewStack new.	view add: (ROElement on: 'hello').	window := view open.	window delete</body><body package="Roassal-Core">testZoomInAndDragAndDrop	| newView el originalCameraBounds step |	newView := ROView new.	el := ROElement new extent: (5 @ 5).	el + (ROBox new color: Color red).	el @ RODraggable.	newView add: el.	el translateTo: 150 @ 100.	view := ROViewStack new.	view addFirst: newView.	self assert: (el bounds = ( (150@100) corner: (155@105))).	self assert: newView camera bounds = ( (0@0) corner: (500@500)).	self assert: (newView camera virtualToRealPointNoTrunc: el position ) = (150 @ 100).			"We simulate the zoom in"	originalCameraBounds := newView camera bounds.	step := 100 @ 100.	newView camera bounds: ((originalCameraBounds topLeft + step) corner: (originalCameraBounds bottomRight - step)).	newView signalUpdate.	self assert: (el bounds = ( (150@100) corner: (155@105))).		self assert: (((newView camera virtualToRealPointNoTrunc: el position ) -  (83.33333333333333@0.0)) &lt; (0.1 @ 0.1)).	self assert: newView camera bounds = ( (100@100) corner: (400@400)).			el announce: (ROMouseDragging step: 20 @ 20 ).	self assert: (el bounds = ( (162.0@112.0) corner: (167.0@117.0))).	self assert: ((newView camera virtualToRealPointNoTrunc: el position ) - (103.33333333333333@20.0)) &lt; (0.1 @ 0.1)</body></methods><methods><class-id>Roassal.ROViewStackTest</class-id> <category>animation</category><body package="Roassal-Core">testDoAnimationCycle	| stack animation |	stack := ROViewStack new.	animation := ROLinearMove for: stack by: 50 @ 50.	self assert: stack numberOfAnimations = 1.	animation nbCycles timesRepeat: [ stack doAnimationCycle ].	self assert: stack numberOfAnimations = 0.</body><body package="Roassal-Core">testDrawOn	| stack animation nullCanvas |	stack := ROViewStack new.	animation := ROLinearMove for: stack by: 50 @ 50.	self assert: stack numberOfAnimations = 1.	nullCanvas := RONullCanvas new.	animation nbCycles timesRepeat: [ stack drawOn: nullCanvas ].	self assert: stack numberOfAnimations = 0.</body><body package="Roassal-Core">testNumberOfAnimations	self assert: ROViewStack new numberOfAnimations = 0.</body></methods><methods><class-id>Roassal.ROShrinkingParent</class-id> <category>testing</category><body package="Roassal-Core">isShrinking	^ true</body></methods><methods><class-id>Roassal.ROShrinkingParent</class-id> <category>action</category><body package="Roassal-Core">on: element	ROShrikingSize on: element</body></methods><methods><class-id>Roassal.ROScatterplotLayout</class-id> <category>accessing</category><body package="Roassal-Core">offset: anInt	xOffset := anInt.	yOffset := anInt.</body><body package="Roassal-Core">outGap		^ self xOutGap @ self yOutGap</body><body package="Roassal-Core">outGap: anObject		self xOutGap: anObject.	self yOutGap: anObject</body><body package="Roassal-Core">scaleFactor: aValue	scaleFactorX := aValue.	scaleFactorY := aValue</body><body package="Roassal-Core">scaleFactorX: aValue	scaleFactorX := aValue.</body><body package="Roassal-Core">scaleFactorY: aValue	scaleFactorY := aValue.</body><body package="Roassal-Core">scaledToHeight	^ scaledToHeight</body><body package="Roassal-Core">scaledToHeight: anInteger	"Set the maximum width taken by the nodes"	scaledToHeight := anInteger</body><body package="Roassal-Core">scaledToWidth	^ scaledToWidth</body><body package="Roassal-Core">scaledToWidth: anInteger	"Set the maximum width taken by the nodes"	scaledToWidth := anInteger</body><body package="Roassal-Core">upSideDown	upSideDown := upSideDown not</body><body package="Roassal-Core">x: aBlock	xBlock := aBlock</body><body package="Roassal-Core">xOutGap		^horizontalPadding</body><body package="Roassal-Core">xOutGap: anObject		horizontalPadding := anObject</body><body package="Roassal-Core">y: aBlock	yBlock := aBlock</body><body package="Roassal-Core">yOutGap		^verticalPadding</body><body package="Roassal-Core">yOutGap: anObject		verticalPadding := anObject</body></methods><methods><class-id>Roassal.ROScatterplotLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	horizontalPadding := 5.	verticalPadding := 5.	xOffset := 0.	yOffset := 0.	scaleFactorX := 1.	scaleFactorY := 1.	upSideDown := false.	xBlock := yBlock := [:aNode | aNode ]</body></methods><methods><class-id>Roassal.ROScatterplotLayout</class-id> <category>adjusting</category><body package="Roassal-Core">defaultAdjustHeightFor: childrenBounds and: myBounds		| deltaY |	deltaY := childrenBounds top - myBounds top.	^childrenBounds height + deltaY + self yOutGap</body><body package="Roassal-Core">defaultAdjustWidthFor: childrenBounds and: myBounds		| deltaX |	deltaX := childrenBounds left - myBounds left.	^childrenBounds width + deltaX + self xOutGap</body></methods><methods><class-id>Roassal.ROScatterplotLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: elements	| maxWidth maxHeight nodesToLayout x y origin newX newY |	maxWidth := 0.	maxHeight := 0.	nodesToLayout := affectedNodes isNil ifTrue: [ elements ] ifFalse: [ affectedNodes ].	nodesToLayout		do: [ :node | 			| m |			m := node model isNil ifTrue: [ 0 ] ifFalse: [ node model ].			x := (xBlock value: m) * scaleFactorX.			y := (yBlock value: m) * scaleFactorY.			maxWidth := maxWidth max: x.			maxHeight := maxHeight max: y.	"x = #centered ifTrue: [ x := 0 ]."			x := x + xOffset.			y := upSideDown				ifTrue: [ y - yOffset ]				ifFalse: [ y + yOffset ].			translator translate: node to: x @ y ].	"We scale them to the width and height"	elements		do: [ :node | 			origin := node bounds origin.			newX := origin x.			newY := origin y.			scaledToWidth isNil ifFalse: [ newX := (origin x / maxWidth * scaledToWidth) asInteger ].			scaledToHeight isNil ifFalse: [ newY := (origin y / maxHeight * scaledToHeight) asInteger ].			translator translate: node to:  newX @ newY.			self step ].	scaledToHeight isNil ifFalse: [ maxHeight := scaledToHeight ].	upSideDown		ifFalse: [ ^ self ].	"We need to inverse the plots"	nodesToLayout		do: [ :node | 			y := node bounds origin y.			node translateBy: 0 @ (maxHeight - (2 * y)) ]</body></methods><methods><class-id>Roassal.ROPluggableAnimation</class-id> <category>initialization</category><body package="Roassal-Core">initialize	super initialize.	nbIterations := 0.	nbIterationsBeforeRefresh := 0</body></methods><methods><class-id>Roassal.ROPluggableAnimation</class-id> <category>hooks</category><body package="Roassal-Core">doStep	nbIterations := nbIterations + 1.	nbIterations &gt;= nbIterationsBeforeRefresh  		ifTrue: [ block value. nbIterations := 0 ]</body></methods><methods><class-id>Roassal.ROPluggableAnimation</class-id> <category>public</category><body package="Roassal-Core">on: aView	aView addAnimation: self</body></methods><methods><class-id>Roassal.ROPluggableAnimation</class-id> <category>accessing</category><body package="Roassal-Core">block	^ block</body><body package="Roassal-Core">block: anObject	block := anObject</body><body package="Roassal-Core">nbIterations	^ nbIterations</body><body package="Roassal-Core">nbIterations: anObject	nbIterations := anObject</body><body package="Roassal-Core">nbIterationsBeforeRefresh	^ nbIterationsBeforeRefresh</body><body package="Roassal-Core">nbIterationsBeforeRefresh: anObject	nbIterationsBeforeRefresh := anObject</body></methods><methods><class-id>Roassal.ROPluggableAnimationT</class-id> <category>as yet unclassified</category><body package="Roassal-Core">block	^ block</body><body package="Roassal-Core">block: aOneArgBlock	block := aOneArgBlock</body><body package="Roassal-Core">doStep	block cull: self</body><body package="Roassal-Core">on: aView	aView addAnimation: self</body></methods><methods><class-id>Roassal.ROFlowLayoutTest</class-id> <category>tests</category><body package="Roassal-Core">testLayout	| result resultVW computed |	ROFlowLayout on: elements.		result := ((Array new: 20) at: 1 put: ((5@5)); at: 2 put: ((65@5)); at: 3 put: ((5@65)); at: 4 put: ((65@65)); at: 5 put: ((5@125)); at: 6 put: ((65@125)); at: 7 put: ((5@185)); at: 8 put: ((65@185)); at: 9 put: ((5@245)); at: 10 put: ((65@245)); at: 11 put: ((5@305)); at: 12 put: ((65@305)); at: 13 put: ((5@365)); at: 14 put: ((65@365)); at: 15 put: ((5@425)); at: 16 put: ((65@425)); at: 17 put: ((5@485)); at: 18 put: ((65@485)); at: 19 put: ((5@545)); at: 20 put: ((65@545)); yourself).		self assert: (elements collect: #position) = result</body><body package="Roassal-Core">testLayoutASet	| set |	set := Set new. 	set addAll: elements.	ROFlowLayout on: set</body></methods><methods><class-id>Roassal.ROMiniMapDisplayer</class-id> <category>initialize</category><body package="Roassal-Core">defaultFactor	^0.2</body><body package="Roassal-Core">initialize		super initialize.	factor := self defaultFactor.	canvasWrapper := RONoTextCanvasWrapper new.</body><body package="Roassal-Core">installedOn: element	|rect max1 max2 e|	super installedOn: element.	self setCameraRealExtentFor: element.	self setViewAnnouncementsFor: element.</body><body package="Roassal-Core">setCameraRealExtentFor: element	| rect max1 max2 e |	rect := view encompassingRectangle.	e := element extent.	max1 := e x max: e y.	max2 :=  rect extent x max: rect extent y.	camera realExtent: (originalCameraRealExtent * (max1/max2)) asIntegerPoint.</body></methods><methods><class-id>Roassal.ROMiniMapDisplayer</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| previousOffset previousCamera rect|			previousOffset := aCanvas offset.	previousCamera := aCanvas camera.	aCanvas offset: (aROElement position).	aCanvas camera: camera.	canvasWrapper canvas: aCanvas.	view drawWithoutSettingCameraElementsOn: canvasWrapper.	aCanvas offset: previousOffset.	aCanvas camera: previousCamera.</body></methods><methods><class-id>Roassal.ROMiniMapDisplayer</class-id> <category>accessing</category><body package="Roassal-Core">camera	^ camera</body><body package="Roassal-Core">camera: anObject	camera := anObject</body><body package="Roassal-Core">factor	^factor</body><body package="Roassal-Core">factor: aNumber	factor := aNumber</body><body package="Roassal-Core">view: aView	"Take a roassal view as argument"		view := aView.	camera := aView camera copy."	camera scale: (1@1) * self factor."	originalCameraRealExtent := camera realExtent.</body></methods><methods><class-id>Roassal.ROMiniMapDisplayer</class-id> <category>events</category><body package="Roassal-Core">setViewAnnouncementsFor: element		view 		on: ROWindowResized 		do: [:event |			element extent: view camera windowSize.			element signalUpdate.		].</body></methods><methods><class-id>Roassal.RODecoratorTest</class-id> <category>tests</category><body package="Roassal-Core">testAddLast	box addLast: box2.	box2 addLast: label.	self assert: box next == box2.	self assert: label next class == RONullShape.</body><body package="Roassal-Core">testExample	| el view | 	view := ROView new.	view add: ((el := ROElement on: 10) + (ROBox new color: Color red; borderColor: Color blue)+ ROLabel).	"	view open	"	self assert: el shapes second borderColor = Color blue.	self assert: el numberOfShapes = 3.	 </body><body package="Roassal-Core">testLinked	"	self debug: #testLinked	"					self assert: box next class == RONullShape.	self assert: label next class == RONullShape.	element 		addShape: box;		addShape: label.		self assert: label next == box.	self assert: box next class ==  RONullShape</body></methods><methods><class-id>Roassal.RODecoratorTest</class-id> <category>running</category><body package="Roassal-Core">setUp	box := ROBox new.	box2 := ROBox new color: Color blue.	label := ROLabel new.	element := ROElement new.</body></methods><methods><class-id>Roassal.RODynamicFadingEdge</class-id> <category>hooks</category><body package="Roassal-Core">processCreatedEdge: element	ROColorAlphaFading new for: element nbCycles: 60</body></methods><methods><class-id>Roassal.ROSaveViewCommand</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	name := 'Save view'</body></methods><methods><class-id>Roassal.ROSaveViewCommand</class-id> <category>accessing</category><body package="Roassal-Core">view: aROView	view := aROView </body></methods><methods><class-id>Roassal.ROSaveViewCommand</class-id> <category>running</category><body package="Roassal-Core">execute	ROPlatform current serializerClass new interactiveExportView: view</body></methods><methods><class-id>Roassal.ROSaveViewCommand class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">on: aROView 	^self new view: aROView </body></methods><methods><class-id>Roassal.ROAbstractFlowLayout</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize		super initialize.	maxWidth := 100.	gapSize := 5</body></methods><methods><class-id>Roassal.ROAbstractFlowLayout</class-id> <category>accessing</category><body package="Roassal-Core">gapSize		^gapSize</body><body package="Roassal-Core">gapSize: anObject		gapSize := anObject</body><body package="Roassal-Core">maxWidth: anObject		maxWidth := anObject</body></methods><methods><class-id>Roassal.ROAbstractFlowLayout</class-id> <category>private</category><body package="Roassal-Core">maxWidth		^maxWidth</body></methods><methods><class-id>Roassal.ROAbstractFlowLayout class</class-id> <category>instance creation</category><body package="Roassal-Core">withMaxWidth: anInteger		^(self new)		maxWidth: anInteger;		yourself</body><body package="Roassal-Core">withMaxWidth: anInteger withGap: anotherInteger		^(self new)		maxWidth: anInteger;		gapSize: anotherInteger;		yourself</body></methods><methods><class-id>Roassal.ROAbstractFlowLayout class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">isAbstract	^ self name = #ROAbstractFlowLayout</body></methods><methods><class-id>Roassal.ROBottomFlowLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeElements 	| x y maxLastLineHeight lineHeights lineNumber |	x := self gapSize.	y := self gapSize.	maxLastLineHeight := 0.	lineHeights := OrderedCollection new.	lineNumber := 1.	nodeElements do: 		[ :aNodeFigure | 		x := x + aNodeFigure width + (2 * self gapSize).		maxLastLineHeight := maxLastLineHeight max: aNodeFigure height.		x &gt; self maxWidth ifTrue: 			[ lineHeights addLast: maxLastLineHeight.			x := self gapSize.			maxLastLineHeight := 0 ] ].	lineHeights addLast: maxLastLineHeight.	x := self gapSize.	nodeElements do: 		[ :aNodeFigure | 		| lineHeight |		lineHeight := lineHeights at: lineNumber.		translator translate: aNodeFigure to: x @ (y + lineHeight - aNodeFigure height).		x := x + aNodeFigure width + (2 * self gapSize).		x &gt; self maxWidth ifTrue: 			[ x := self gapSize.			y := y + (2 * self gapSize) + lineHeight.			lineNumber := lineNumber + 1 ].		self step ]</body></methods><methods><class-id>Roassal.RONullCanvas</class-id> <category>rendering</category><body package="Roassal-Core">drawString: aByteString at: aPoint </body><body package="Roassal-Core">drawString: aByteString at: aPoint color: color</body><body package="Roassal-Core">drawString: aByteString at:  p font: f color: color	</body><body package="Roassal-Core">fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 </body><body package="Roassal-Core">fillRectangle: aRectangle color: fillColor </body><body package="Roassal-Core">frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor </body><body package="Roassal-Core">line: aPoint to: aPoint2 width: aSmallInteger color: aColor </body><body package="Roassal-Core">paintImage: aForm at: aPoint</body></methods><methods><class-id>Roassal.RONullCanvas</class-id> <category>util</category><body package="Roassal-Core">form</body></methods><methods><class-id>Roassal.RONullCanvas class</class-id> <category>public</category><body package="Roassal-Core">onCamera: camera	self error: 'Should not be called'</body></methods><methods><class-id>Roassal.ROVerticalLaggeredTree</class-id> <category>positioning</category><body package="Roassal-Core">compareContourOf: aNode with: another	"return the number of pixel the subtree induced by aNode must be displaced to be separated by a predefined distance (horizontalGap) from the one induced by anotherNode"	| difference max nodeA nodeB |	nodeB := aNode.	"the right one"	nodeA := another.	"the left one"	max := aNode = another		ifTrue: [ 0 ]		ifFalse: [ horizontalGap / 4 - (nodeB x - (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)) ].			nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.	nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1.	[ nodeB isNil not &amp; nodeA isNil not ]		whileTrue: [ 			difference := horizontalGap - ((self getAbcissaOf: nodeB inSubtreeFromLayer: aNode layer - 1) - (self getAbcissaOf: nodeA inSubtreeFromLayer: aNode layer - 1)).			max := max max: difference.			nodeB := self followLeftContour: nodeB toLayer: nodeB layer + 1.			nodeA := self followRightContour: nodeA toLayer: nodeA layer + 1 ].	^ max</body><body package="Roassal-Core">computePosition: aNode"compute the position of the given node and of his sons recursively"	| children neighbor nodeA |		children := self childrenFor: aNode.	neighbor := self leftSiblingOf: aNode.		children isEmpty ifTrue: [ neighbor isNil ifTrue: [ aNode x: 0; mod: 0.]  											 ifFalse: [ aNode x: (neighbor x + (horizontalGap /4)); mod: (neighbor mod); top: neighbor top not;													  pointer: (self followRightContour: neighbor toLayer: (aNode layer + 1)) ] ]					 					 ifFalse: [aNode leftContour: children first;									rightContour: children last.							  children do: [:e | self computePosition: e].							      aNode x: (aNode leftContour x + aNode rightContour x + aNode rightContour mod ) /2;										mod: 0. 								neighbor isNil ifFalse: [ aNode mod: (self compareContourOf: aNode with: neighbor);																top: neighbor top not.																						  nodeA := (self followLeftContour: (aNode father) toLayer: (aNode layer)).													  [(self followLeftContour: nodeA toLayer: (nodeA layer + 1)) isNil ] whileFalse: [ nodeA := self followLeftContour: nodeA toLayer: (nodeA layer + 1) ].													 nodeA pointer: (self followLeftContour: aNode toLayer: (nodeA layer + 1)).																										 nodeA := self followRightContour: aNode toLayer: (aNode layer + 1).													 [(self followRightContour: nodeA toLayer: (nodeA layer +1)) isNil ] whileFalse: [ nodeA := self followRightContour: nodeA toLayer: (nodeA layer +1) ].													nodeA pointer: (self followRightContour: neighbor toLayer: (nodeA layer +1) ) ] ]</body><body package="Roassal-Core">draw: aNode withMod: aFloat	"draw the subtree induced by the given node, translating it with the given modifier"	| children height |		height := aNode top ifTrue: [ verticalGap  / 4 ] ifFalse: [ 0 ]. 		aNode translateTo: (Point x: (aNode x + aFloat + aNode mod) y: (aNode layer * verticalGap - height ) ).		children := self childrenFor: aNode.		children do: [:e | self draw: e withMod: (aNode mod + aFloat). self step ]</body><body package="Roassal-Core">initialize 	super initialize.		verticalGap := 80.</body></methods><methods><class-id>Roassal.ROAbsorbLayoutTranslator</class-id> <category>hook</category><body package="Roassal-Core">translate: element to: newPosition	"Does not perform the translation. Used in testing essentially"</body></methods><methods><class-id>Roassal.ROAddNameTest</class-id> <category>tests</category><body package="Roassal-Core">testAddThenRemove	ROAddName toElement: element.	ROAddName removeFrom: element.		self assert: view numberOfElements = 1.	self assert: view elements first == element</body><body package="Roassal-Core">testAddTwice	ROAddName toElement: element.	ROAddName toElement: element.		self assert: view numberOfElements = 2.</body><body package="Roassal-Core">testAddition	self assert: element view numberOfElements = 1.	ROAddName toElement: element.	self assert: element view numberOfElements = 2.	 	ROAddName toElement: element.	self assert: element view numberOfElements = 2.	 </body><body package="Roassal-Core">testBlock	| addedElement |	ROAddName new 		block: [ :el | 2 printString ];		toElement: element.	addedElement := element view elements last.	self assert: addedElement model = '2'</body><body package="Roassal-Core">testColorAddition	| newElement |	ROAddName new color: Color red; toElement: element.	self assert: element view numberOfElements = 2.	 	newElement := view elements last.	self assert: (newElement getShape: ROLabel) color = Color red.</body><body package="Roassal-Core">testRemoveFromEmpty	self assert: element view numberOfElements = 1.	ROAddName removeFrom: element.	self assert: element view numberOfElements = 1.</body><body package="Roassal-Core">testRemoveTwice	ROAddName removeFrom: element.	ROAddName removeFrom: element.		self assert: view numberOfElements = 1.</body></methods><methods><class-id>Roassal.ROAddNameTest</class-id> <category>running</category><body package="Roassal-Core">setUp	super setUp.	element := ROElement on: 42.	view := ROView new.	view add: element</body></methods><methods><class-id>Roassal.ROSelection</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize 	super initialize.	filter := [ :source :target | false ].	selectedElements := OrderedCollection new.</body></methods><methods><class-id>Roassal.ROSelection</class-id> <category>printing</category><body package="Roassal-Core">printOn: aStream	super printOn: aStream.	aStream nextPutAll: '[' .	selectedElements do: 	[	:el |		aStream nextPutAll: el model asString.		aStream nextPutAll: ' '.	].	aStream nextPutAll: ']' .	</body></methods><methods><class-id>Roassal.ROSelection</class-id> <category>events-triggering</category><body package="Roassal-Core">add: targetElement	targetElement ifNotNil: 	[ 			selectedElements add: targetElement .		inclusionAction ifNotNil: [ inclusionAction value: targetElement ].	].</body><body package="Roassal-Core">clear	exclusionAction ifNotNil: [ selectedElements do: [ :element | exclusionAction value: element ] ].	selectedElements := OrderedCollection new.</body><body package="Roassal-Core">source: sourceElement target: targetElement	(filter value: sourceElement value: targetElement) ifTrue:	[		self add: targetElement.	]</body></methods><methods><class-id>Roassal.ROSelection</class-id> <category>events-registering</category><body package="Roassal-Core">for: aBlock 	filter := aBlock.	</body><body package="Roassal-Core">onExclusion: aBlock 	exclusionAction := aBlock.	</body><body package="Roassal-Core">onInclusion: aBlock 	inclusionAction := aBlock.	</body></methods><methods><class-id>Roassal.ROSelection</class-id> <category>comparing</category><body package="Roassal-Core">contains: aROElement 	selectedElements do: [ :element | (element = aROElement) ifTrue: [ ^true] ].	^false.</body></methods><methods><class-id>Roassal.ROMondrianScatterLayoutTest</class-id> <category>tests</category><body package="Roassal-Core">testScatterplotLayout		| nodes |	view := ROMondrianViewBuilder new.			nodes := view		nodes: #(#(10 20) #(30 40)).	view layout: (ROScatterplotLayout new 						x: [:entity | entity first ];						y: [:entity | entity last ]).	window := view open.	self assert: nodes first bounds topLeft x = 10.	self assert: nodes first bounds topLeft y = 20.	self assert: nodes last bounds topLeft x = 30.	self assert: nodes last bounds topLeft y = 40.</body><body package="Roassal-Core">testScatterplotLayoutBounds	"	self debug: #testScatterplotLayoutBounds	"	| nodes |	view := ROMondrianViewBuilder new.			view node: #foo forIt: [		view layout: (ROScatterplotLayout new 							x: #first ;							y: #last).		nodes := view nodes: #(#(10 20) #(30 40)).	].	window := view open.	self assert: nodes first bounds topLeft x = 10.	self assert: nodes first bounds topLeft y = 20.	self assert: nodes last bounds topLeft x = 30.	self assert: nodes last bounds topLeft y = 40.</body><body package="Roassal-Core">testScatterplotLayoutOffset		| nodes |	view := ROMondrianViewBuilder new.			nodes := view		nodes: #(#(10 20) #(30 40)).			view layout: (ROScatterplotLayout new 						offset: 2;						x: [:entity | entity first ];						y: [:entity | entity last ]).	window := view open.	self assert: nodes first bounds topLeft x = 12.	self assert: nodes first bounds topLeft y = 22.	self assert: nodes last bounds topLeft x = 32.	self assert: nodes last bounds topLeft y = 42.</body><body package="Roassal-Core">testScatterplotLayoutScalled	|  nodes |	view := ROMondrianViewBuilder new.			view node: #foo forIt: [		view layout: (ROScatterplotLayout new 							x: #first ;							y: #last							;							scaledToWidth: 20;							scaledToHeight: 15 ).		nodes := view nodes: #(#(10 20) #(30 40)).	].	window := view open.	self assert: nodes first bounds topLeft x &gt;= 6.	self assert: nodes first bounds topLeft x &lt;= 7.	self assert: nodes first bounds topLeft y &gt;= 7.	self assert: nodes first bounds topLeft y &lt;= 8.		self assert: nodes last bounds topLeft x = 20.	self assert: nodes last bounds topLeft y = 15.</body></methods><methods><class-id>Roassal.ROMondrianScatterLayoutTest</class-id> <category>running</category><body package="Roassal-Core">tearDown 	window ifNotNil: [ window delete ]</body></methods><methods><class-id>Roassal.ROCenteredLabelTest</class-id> <category>hooks</category><body package="Roassal-Core">classToTest	^ ROCenteredLabel</body><body package="Roassal-Core">drawOnMultilineForTrace	^ #(#(#drawStringColor 'First line' '(-23@-47)' 14 'Color black') 		#(#drawStringColor 'Second line' '(-33@-30)' 14 'Color black') 		#(#drawStringColor 'Third line' '((-51/2)@-13)' 14 'Color black') 		#(#drawStringColor 'Fourth line' '(-29@4)' 14 'Color black') 		#(#drawStringColor 'Fifth line' '(-23@21)' 14 'Color black') 		#(#drawStringColor 'Sixth line' '(-25@38)' 14 'Color black'))</body><body package="Roassal-Core">drawOnMultilineForTraceVW	^ #(#(#drawStringColor 'First line' '((-45 / 2)@-47)' 14 'Color black') #(#drawStringColor 'Second line' '((-63 / 2)@-30)' 14 'Color black') #(#drawStringColor 'Third line' '(-24@-13)' 14 'Color black') #(#drawStringColor 'Fourth line' '(-28@4)' 14 'Color black') #(#drawStringColor 'Fifth line' '((-45 / 2)@21)' 14 'Color black') #(#drawStringColor 'Sixth line' '((-49 / 2)@38)' 14 'Color black'))</body><body package="Roassal-Core">drawOnMultilineWithTextPaddingForTrace	^ self drawOnMultilineForTrace</body><body package="Roassal-Core">drawOnMultilineWithTextPaddingForTraceVW 	^ #(#(#drawStringColor 'First line' '((-45 / 2)@-47)' 14 'Color black') #(#drawStringColor 'Second line' '((-63 / 2)@-30)' 14 'Color black') #(#drawStringColor 'Third line' '(-24@-13)' 14 'Color black') #(#drawStringColor 'Fourth line' '(-28@4)' 14 'Color black') #(#drawStringColor 'Fifth line' '((-45 / 2)@21)' 14 'Color black') #(#drawStringColor 'Sixth line' '((-49 / 2)@38)' 14 'Color black'))</body></methods><methods><class-id>Roassal.ROGrow class</class-id> <category>public</category><body package="Roassal-Core">on: element by: integer	element setBounds: (element bounds extendBy: ((integer * 2) @ (integer * 2))).	element translateBy: integer @ integer</body></methods><methods><class-id>Roassal.ROZOrdering</class-id> <category>accessing-computing</category><body package="Roassal-Core">defaultZIndex	^ 0</body><body package="Roassal-Core">zIndexOf: aComponent	mapping		do: [ :assoc | 			(assoc value roValue: aComponent)				ifTrue: [ ^ assoc key roValue: aComponent ] ].	^ aComponent zIndex"	^ self defaultZIndex roValue: aComponent"</body></methods><methods><class-id>Roassal.ROZOrdering</class-id> <category>action</category><body package="Roassal-Core">setZIndex: integerOrValue 	"integerOrValue is evaluated against the graphical element of Roassal.	aBlockOrAValue has to return a boolean. The block takes one argument, which is the element."	self setZIndex: integerOrValue if: true</body><body package="Roassal-Core">setZIndex: integerOrValue if: aBlockOrAValue	"integerOrValue is evaluated against the graphical element of Roassal.	aBlockOrAValue has to return a boolean. The block takes one argument, which is the element."		mapping add: (integerOrValue -&gt; aBlockOrAValue)</body><body package="Roassal-Core">setZindexOf: aGraphicalComponent	aGraphicalComponent zIndex: (self zIndexOf: aGraphicalComponent)</body></methods><methods><class-id>Roassal.ROZOrdering</class-id> <category>accessing</category><body package="Roassal-Core">numberOfEntries	^ mapping size</body></methods><methods><class-id>Roassal.ROZOrdering</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	mapping := OrderedCollection new</body></methods><methods><class-id>Roassal.ROTriangle</class-id> <category>accessing</category><body package="Roassal-Core">borderColor	^ borderColor</body><body package="Roassal-Core">borderColor: aBlockOrSymbolOrObject	borderColor := aBlockOrSymbolOrObject.</body><body package="Roassal-Core">borderWidth	^ borderWidth</body><body package="Roassal-Core">borderWidth: anInteger	borderWidth := anInteger.</body></methods><methods><class-id>Roassal.ROTriangle</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| b w bc c |	b := self absoluteBoundsFor: aROElement.	w := borderWidth roValue: aROElement.	bc := borderColor roValue: aROElement.	c := color roValue: aROElement.		aCanvas 		drawPolygon: (Array with: b topCenter with: b bottomRight with: b bottomLeft)		color: c 		borderWidth: w 		borderColor: bc. "	aCanvas line: b topCenter to: b bottomRight width: w color: bc.	aCanvas line: b bottomRight to: b bottomLeft width: w color: bc.	aCanvas line: b bottomLeft to: b topCenter width: w color: bc.	"</body></methods><methods><class-id>Roassal.ROTriangle</class-id> <category>initialize</category><body package="Roassal-Core">initialize	super initialize.	borderWidth := 0. 	borderColor := Color black.</body></methods><methods><class-id>Roassal.ROHorizontalDominanceTreeLayout</class-id> <category>hook-private</category><body package="Roassal-Core">computeChildrenFor: aNode	^ self childrenWithHighestNestingLevelFor: aNode</body></methods><methods><class-id>Roassal.RORefreshNeeded class</class-id> <category>public creation</category><body package="Roassal-Core">instance	Instance ifNil: [ Instance := self new ].	^ Instance</body></methods><methods><class-id>Roassal.ROAbstractCanvasTest</class-id> <category>tests</category><body package="Roassal-Core">testTransformationBijection	| canvas camera |	camera := ROCamera new realExtent: 100@50; extent: 200@100.	canvas := self canvasClass onCamera: camera.	self assert: (canvas realToVirtualPoint: (canvas virtualToRealPoint: 0@0)) = (0 @ 0).	self assert: (canvas realToVirtualPoint: (canvas virtualToRealPoint: -100 @ -50)) = (-100 @ -50).	self assert: (canvas realToVirtualPoint: (canvas virtualToRealPoint: 100 @ 50)) = (100 @ 50).		self assert: (canvas realToVirtualPoint: (canvas virtualToRealPoint: -10@ -6)) = (-10 @ -6).	self assert: (canvas realToVirtualPoint: (canvas virtualToRealPoint: 40 @ 50)) = (40 @ 50).	self assert: (canvas realToVirtualRectangle: (canvas virtualToRealRectangle: (-10 @ -6 corner: 40 @ 50))) =					 (-10 @ -6 corner: 40 @ 50).</body></methods><methods><class-id>Roassal.ROAbstractCanvasTest</class-id> <category>hooks</category><body package="Roassal-Core">canvasClass	^ ROAbstractCanvas</body></methods><methods><class-id>Roassal.ROAbstractCanvasTest class</class-id> <category>testing</category><body package="Roassal-Core">isAbstract	^ self name == #ROAbstractCanvasTest </body></methods><methods><class-id>Roassal.ROFlowLayout</class-id> <category>hook</category><body package="Roassal-Core">doExecute: nodeElements 	| x y maxLastLineHeight |	x := self gapSize.	y := self gapSize.	maxLastLineHeight := 0.	nodeElements do: 		[ :aNodeFigure | 		translator translate: aNodeFigure to: x @ y.		x := x + aNodeFigure width + (2 * self gapSize).		maxLastLineHeight := maxLastLineHeight max: aNodeFigure height.		x &gt; self maxWidth ifTrue: 			[ x := self gapSize.			y := y + (2 * self gapSize) + maxLastLineHeight.			maxLastLineHeight := 0 ].		self step ]</body></methods><methods><class-id>Roassal.ROCellLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	ROCellLayout on: elements.		result := ((Array new: 20) at: 1 put: ((5@5)); at: 2 put: ((65@5)); at: 3 put: ((125@5)); at: 4 put: ((185@5)); at: 5 put: ((245@5)); at: 6 put: ((5@65)); at: 7 put: ((65@65)); at: 8 put: ((125@65)); at: 9 put: ((185@65)); at: 10 put: ((245@65)); at: 11 put: ((5@125)); at: 12 put: ((65@125)); at: 13 put: ((125@125)); at: 14 put: ((185@125)); at: 15 put: ((245@125)); at: 16 put: ((5@185)); at: 17 put: ((65@185)); at: 18 put: ((125@185)); at: 19 put: ((185@185)); at: 20 put: ((245@185)); yourself).		self assert: (elements collect: #position) = result</body></methods><methods><class-id>Roassal.ROCenteredLabel</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| runner tmpFont tmpColor tmpHeight |	tmpFont := self fontFor: aROElement with: aCanvas camera.	tmpHeight := 0 @ (self heightOfLineWithFont: tmpFont).	tmpColor := self colorFor: aROElement.	runner := aROElement absolutePosition + self offsetWhenDrawing 				+ (0 @ (aROElement height - (self heightFor: aROElement withFont: tmpFont) /2) )				+ (textHorizontalPadding @ textVerticalPadding).		runner := runner asIntegerPoint.	self linesOf: aROElement do: [ :line |		| lineOffset |		lineOffset := ( ( (aROElement width - (self widthOfLine: line withFont: tmpFont)) / 2 ) - textHorizontalPadding ) @ 0.		aCanvas drawString: line at: (runner + lineOffset) font: tmpFont color: tmpColor.		runner := runner + tmpHeight	]</body></methods><methods><class-id>Roassal.ROMenuElementTest</class-id> <category>test-rendering</category><body package="Roassal-Core">testRendering	self assert: menu numberOfElements = 0.	self assert: menu extent = ROMenuElement defaultBounds extent.		menu create.		self assert: menu numberOfElements = menu numberOfActions.	self assert: menu extent &gt;=  (50@50).		"ROView new add: menu; open "</body><body package="Roassal-Core">testRenderingEmpty	self assert: emptyMenu numberOfElements = 0.	self assert: emptyMenu extent = emptyMenu class defaultBounds extent.		emptyMenu create.		self assert: emptyMenu numberOfElements = 0.	self assert: emptyMenu extent = emptyMenu class defaultBounds extent.</body></methods><methods><class-id>Roassal.ROMenuElementTest</class-id> <category>test-initialization</category><body package="Roassal-Core">testInitialization	self assert: emptyMenu targetObject == emptyMenu.	</body></methods><methods><class-id>Roassal.ROMenuElementTest</class-id> <category>running</category><body package="Roassal-Core">setUp	emptyMenu := ROMenuElement new.		menu := ROMenuElement new.	menu item: 'reset' action: [ :v | counter := 0. ].	menu item: 'increase' action: [ :v | counter := counter + 1 ].</body></methods><methods><class-id>Roassal.ROMenuElementTest</class-id> <category>tests</category><body package="Roassal-Core">testEvaluateCallback	self assert: counter isNil.	menu evaluate: 'reset'.	self assert: counter = 0.		menu evaluate: 'increase'.	self assert: counter = 1.	menu evaluate: 'increase'.	menu evaluate: 'increase'.	self assert: counter = 3.</body><body package="Roassal-Core">testNumberOfActions	self assert: emptyMenu numberOfActions = 0.	self assert: menu numberOfActions = 2.</body></methods><methods><class-id>Roassal.RONormalizerTest</class-id> <category>explicit identity</category><body package="Roassal-Core">testExplicitIdentity	| normalizer colorOne colorTwo |		normalizer := RONExplicitIdentityNormalizer 						withCommand: #last 						withColors: (Array with: Color blue with: Color white with: Color red) 						withDefaultColor: Color green.							colorOne := normalizer roValue: 'alex'.	colorTwo := normalizer roValue: 'suffix'.	self assert: (colorOne = colorTwo)</body><body package="Roassal-Core">testExplicitIdentity2	| normalizer colorOne colorTwo |		normalizer := RONExplicitIdentityNormalizer					withCommand: #yourself					withColors: (Array with: Color blue with: Color white with: Color red) 					withDefaultColor: Color green.							self assert: (normalizer roValue: 1) = Color blue.	self assert: (normalizer roValue: 2) = Color white.	self assert: (normalizer roValue: 3) = Color red.	self assert: (normalizer roValue: -1) = Color green.	self assert: (normalizer roValue: 1000) = Color green.</body><body package="Roassal-Core">testExplicitIdentity3Initialization	| normalizer colorOne colorTwo colors |		colors := Array with: Color blue with: Color white with: Color red.	normalizer := RONExplicitIdentityNormalizer					withCommand: #yourself					withColors: colors					withDefaultColor: Color green.																		self assert: (normalizer roValue: 1) = Color blue.	self assert: (normalizer roValue: 2) = Color white.	self assert: (normalizer roValue: 3) = Color red.	self assert: (normalizer roValue: 4) = Color green.</body></methods><methods><class-id>Roassal.RONormalizerTest</class-id> <category>linear</category><body package="Roassal-Core">testGradient	| normalizer |	normalizer := RONColorLinearNormalizer inContext: #(0 1 2 3 4 5 6 7 8 9 10) lowColor: Color yellow highColor: Color red.	self assert: (normalizer maximumValue: nil) = 10.	self assert: (normalizer roValue: 10) =  (Color r: 1.0 g: 0.0 b: 0.0). 	self assert: (normalizer roValue: 1) = (Color r: 1.0 g: 0.900012 b: 0.0).	self assert: (normalizer roValue: 0) =  (Color r: 1.0 g: 1.0 b: 0.0)</body><body package="Roassal-Core">testNumberLinearNormalizer	| normalizer |	normalizer := RONumberLinearNormalizer inContext: (1 to: 10) withCommand: [:entity | entity * 1000 ].	self assert: (normalizer roValue: 100) = 10.		normalizer := RONumberLinearNormalizer inContext: (1 to: 100) withCommand: [:entity | entity * 1000 ].	self assert: (normalizer roValue: 100) = 1.		normalizer := RONumberLinearNormalizer inContext: (1 to: 100) withCommand: [:entity | entity ].	self assert: (normalizer roValue: 100) = 1.</body><body package="Roassal-Core">testValueLinearNormalizer	| normalizer |	normalizer := ROValueLinearNormalizer inContext: (0 to: 10) withCommand: [:entity | entity ].	self assert: (normalizer roValue: 10) = 1.		normalizer := ROValueLinearNormalizer inContext: (0 to: 10) withCommand: [:entity | entity * 1000 ].	self assert: (normalizer roValue: 100) = 10.		normalizer := ROValueLinearNormalizer inContext: (99 to: 100) withCommand: [:entity | entity ].	self assert: (normalizer roValue: 101) = 2.</body></methods><methods><class-id>Roassal.RONormalizerTest</class-id> <category>identity</category><body package="Roassal-Core">testBeginingAtBlue	| n |	n := RONIdentityNormalizer beginingAtBlue.	self assert: n nextColor = Color blue</body><body package="Roassal-Core">testBeginingAtRed	| n |	n := RONIdentityNormalizer beginingAtRed.	self assert: n nextColor = Color red</body><body package="Roassal-Core">testIdentity	| colorOne colorTwo normalizer |		normalizer := RONIdentityNormalizer new.	colorOne := normalizer roValue: 1.	colorTwo := normalizer roValue: 2.	self deny: colorOne = colorTwo.	colorOne := normalizer roValue: 12.	colorTwo := normalizer roValue: 12.	self assert: colorOne = colorTwo.</body><body package="Roassal-Core">testIdentityModulo	"This checks that there is no exception if there are more identities than colors"	1 to: 150 do: [:index | RONIdentityNormalizer new roValue: index]</body><body package="Roassal-Core">testIdentityWithCommand	| colorOne colorTwo normalizer |		normalizer := RONIdentityNormalizer withCommand: #last.	colorOne := normalizer roValue: 'bob'.	colorTwo := normalizer roValue: 'tom'.	self deny: colorOne = colorTwo.	colorOne := normalizer roValue: 'anna'.	colorTwo := normalizer roValue: 'maria'.	self assert: colorOne = colorTwo.</body></methods><methods><class-id>Roassal.RONormalizerTest</class-id> <category>multiple</category><body package="Roassal-Core">testMultipleLinearNormalizer	| normalizer |	normalizer := ROMultipleColorLinearNormalizer 					valueRange: #(5 10 15) colorRange: (Array with: Color blue with: Color white with: Color red) .		self assert: (normalizer roValue: 5) =   (Color r: 0.0 g: 0.0 b: 1.0).	self assert: (normalizer roValue: 6) =  ( (Color r: 0.2 g: 0.2 b: 1.0)). 	self assert: (normalizer roValue: 15) =  (Color r: 1.0 g: 0.0 b: 0.0)</body></methods><methods><class-id>Roassal.ROLine</class-id> <category>utility</category><body package="Roassal-Core">lineSegmentsFor: anEdge	| rawStartingPoint rawEndingPoint |	rawStartingPoint  := attachPoint startingPointOf: anEdge.	rawEndingPoint := attachPoint endingPointOf: anEdge.	^ Array with: rawStartingPoint with: rawEndingPoint</body><body package="Roassal-Core">unitFor: anEdge	| vector toPoint fromPoint u unit |	fromPoint := self startingPointOf: anEdge.	toPoint := self endingPointOf: anEdge.	vector := toPoint - fromPoint.	u := vector normal.	unit := vector / vector r.	^ unit</body></methods><methods><class-id>Roassal.ROLine</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: anEdge 	| rawStartingPoint rawEndingPoint |			rawEndingPoint  := attachPoint startingPointOf: anEdge.	rawStartingPoint := attachPoint endingPointOf: anEdge.	(rawStartingPoint = rawEndingPoint)		ifTrue: [ ^ self ].		"We draw a line before each arrow"	arrows do: [ :arrow | 		| arr |		arr := arrow drawOn: aCanvas for: anEdge line: self.		aCanvas 			line: rawStartingPoint 			to: arr first 			width: (self widthFor: anEdge) 			color: (self colorFor: anEdge).		rawStartingPoint := arr second.		 ].		"We draw a line after the arrow"	aCanvas line: rawStartingPoint to: rawEndingPoint width: (self widthFor: anEdge) color: (self colorFor: anEdge).</body></methods><methods><class-id>Roassal.ROLine</class-id> <category>enumerating</category><body package="Roassal-Core">lineSegmentsFor: anEdge do: aTwoArgBlock	| segments p |	segments := self lineSegmentsFor: anEdge.	p := segments first.	segments allButFirst do: [ :point| 		aTwoArgBlock value: p value: point.		p := point	]</body></methods><methods><class-id>Roassal.ROLine class</class-id> <category>public</category><body package="Roassal-Core">arrowed	"Return an arrowed line"	^ ROLine new add: (ROArrow new offset: 0)</body></methods><methods><class-id>Roassal.RONativeExampleUtilityTest</class-id> <category>as yet unclassified</category><body package="Roassal-Core">current	^ RONativeExampleUtility current </body><body package="Roassal-Core">testGetMethods	self assert: (self current getMethodsForClass: Object) isCollection</body><body package="Roassal-Core">testSubstrings	self assert: (self current substringsFor: 'ab cd ef') = #('ab' 'cd' 'ef')</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROMondrianViewBuilder new</body><body package="Roassal-Core">tearDown	super tearDown.	window ifNotNil: [window delete. window := nil]</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>interaction</category><body package="Roassal-Core">testChangeInteraction		| el |	el := ROElement new.	self deny: (el is: ROAbstractPopup).	self deny: (el is: ROPopup).	self deny: (el is: ROPopupView).	el changeInteraction: ROPopup for: (ROPopupView new).	self deny: (el is: ROPopup).	self assert: (el is: ROPopupView).		el changeInteraction: ROPopupView for: (ROPopup new).	self assert: (el is: ROPopup).	self deny: (el is: ROPopupView).</body><body package="Roassal-Core">testChangeInteraction2		| el |	el := ROElement new.	self deny: (el is: ROAbstractPopup).	self deny: (el is: ROPopup).	self deny: (el is: ROPopupView).	el changeInteraction: ROAbstractPopup for: (ROPopupView new).	self deny: (el is: ROPopup).	self assert: (el is: ROPopupView).		el changeInteraction: ROAbstractPopup for: (ROPopup new).	self assert: (el is: ROPopup).	self deny: (el is: ROPopupView).</body><body package="Roassal-Core">testForwarding	| t outterNode innerNode |		t := 0.	"Only the outter node should be a forwarder"	view interaction forwarder.	outterNode := view node: 'outter' forIt: [ 		innerNode := view node: 'inner'.	].	view raw on: ROEvent do: [ :e | t := t + 1 ].	self assert: t = 0.	outterNode announce: ROComponentEvent.	self assert: t = 1.	"Since the inner node is not declared has a forwarder, it should not forward"	innerNode announce: ROComponentEvent.	self assert: t = 1.</body><body package="Roassal-Core">testHighlight	| el |	view interaction highlightNodesWhenOver: [ :v | Array with: v  ].	view shape rectangle size: 50.	view nodes: (1 to: 20).		el := view raw elements first.	self assert: ((el getShape: ROBox) colorFor:  el) = Color white.		el announce: ROMouseEnter.	self assert: ((el getShape: ROBox) colorFor:  el) = Color red.		el announce: ROMouseLeave.	self assert: ((el getShape: ROBox) colorFor:  el) = Color white.</body><body package="Roassal-Core">testInteraction		| t nodes |	t := OrderedCollection new.	view interaction 		item: 'act' action: [ :v |  t add: t ].		nodes := view nodes: #(1 2).	</body><body package="Roassal-Core">testItemAction	| t nodes menuActivable block |		t := OrderedCollection new.	view interaction item: 'foo' action: [ :aModelObject | t add: aModelObject ].	nodes := view nodes: (1 to: 5).		menuActivable := nodes first getInteraction: ROMenuActivable.	block := (menuActivable actionNamed: 'foo').	block value value: nodes first.	self assert: t size = 1.	self assert: t first == nodes first model	</body><body package="Roassal-Core">testMenu	| nodes |		view node: 30 forIt: [ 		view interaction action: #inspect; action: #foo; action: #bar.		nodes := view nodes: (1 to: 20) ].	self assert: (nodes first getInteraction: ROMenuActivable) numberOfEntries = 3</body><body package="Roassal-Core">testMouseEvent	| nodes thirdNode secondNode |	nodes := view nodes: (1 to: 3) forEach: [ :v |		view nodes: (1 to: 30).		view gridLayout.	].	"For debugging purpose"	view raw on: ROMouseClick do: [ :event | event inspect  ]."view open"	view applyLayout.	thirdNode := nodes third.	secondNode := nodes second.	self assert: (thirdNode model = 3).	self assert: (thirdNode bounds = ( (145@5) corner: (205@56))).	self assert: (thirdNode bounds containsPoint: (166@49)).	self assert: (thirdNode contains: 166 @ 49).		self assert: (secondNode bounds = ( (75@5) corner: (135@56))).	self deny: (secondNode bounds containsPoint: (166@49)).	self assert: (91@44) = (166@49 - secondNode topLeft).	self deny: (secondNode shapes first boundsFor: secondNode containsPoint: 94@44).	self deny: (secondNode shapes second boundsFor: secondNode containsPoint: 94@44).	self deny: (secondNode contains: (166 @ 49)).					self assert: (view raw elementAt: (166@49)) == nodes third.	</body><body package="Roassal-Core">testNoDraggable	| el b |	view interaction nodraggable.	el := view node: 123.	b := el position.		self deny: (el is: RODraggable).		el announce: (ROMouseDragging step: 40@50).	self assert: el position = b</body><body package="Roassal-Core">testNoPopup	| el1 el2 el3 |	view interaction noPopup.	el1 := view node: 1.		el2 := view node: 2.	view interaction noPopup.	el3 := view node: 3.	self deny: (el1 is: ROPopupView).	self assert: (el2 is: ROPopupView).	self deny: (el3 is: ROPopupView).</body><body package="Roassal-Core">testPopupOnInnerInnerNodes	| node1 node2 node3 |	node1 := view node: 1 forIt: [ node2 := view node: 2 forIt: [ node3 := view node: 3 forIt: [  ] ] ].		self assert: (node1 is: ROPopupView).	self assert: (node2 is: ROPopupView).	self assert: (node3 is: ROPopupView).</body><body package="Roassal-Core">testPopupView	| t el |	t := false.	view interaction popupView: [ :myView :ell |  t := true ] delay: 0. 	el := view node: 'hello'.		el announce: ROMouseEnter.	self assert: t</body><body package="Roassal-Core">testPopupViewSize	| el popup elRef |	view interaction popupView: [ :ell :myView | 		myView shape rectangle fillColor: Color blue.		myView node: '' forIt: [  myView node: 'world' ] ] delay: 0. 	el := view node: 'hello'.		elRef := view node: 'h' forIt: [ view node: 'w' ].		view applyLayout.		self assert: view stack numberOfElements = 0.	el announce: ROMouseEnter.	self assert: view stack numberOfElements = 1.		popup := view stack elements first.	self assert: popup extent = (21 @ 21).</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>shapes</category><body package="Roassal-Core">testCircle	| element |	view shape circle.	element := view node: 'hello'.	self assert: (element isShapedAs: ROEllipse).	"view raw bitmap."</body><body package="Roassal-Core">testCircleWithBorderedColor	| element |	view shape circle borderColor: [ :v | Color r: 255 g: 255 b: v].	element := view node: 255.	self assert: (element isShapedAs: ROEllipse).	</body><body package="Roassal-Core">testColor		| model edge |	view shape rectangle.	view nodes: #(1 2).	view shape line color: [ :m | model := m. Color blue ].	edge := view edge: #edge from: 1 to: 2.	self assert: model == nil.	self assert: ((edge getShape: ROLine) colorFor: edge) = Color blue.	self assert: model = (1 -&gt; 2).</body><body package="Roassal-Core">testColor2		| model |	view shape rectangle color: [ :m | model := m. Color blue ].	node := view node: Object.	self assert: model == nil.	self assert: ((node getShape: ROBox) colorFor: node) = Color blue.	self assert: model == Object.</body><body package="Roassal-Core">testColorOfArrowedLine		| model edge |	view shape rectangle.	view nodes: #(1 2).	view shape arrowedLine color: [ :m | model := m. Color blue ].	edge := view edge: #edge from: 1 to: 2.	self assert: model == nil.	self assert: ((edge getShape: ROLine) colorFor: edge) = Color blue.	self assert: model = (1 -&gt; 2).</body><body package="Roassal-Core">testColorOfArrowedLineReversed		| model edge |	view shape rectangle.	view nodes: #(1 2).	view shape arrowedLineReversed color: [ :m | model := m. Color blue ].	edge := view edge: #edge from: 1 to: 2.	self assert: model == nil.	self assert: ((edge getShape: ROLine) colorFor: edge) = Color blue.	self assert: model = (1 -&gt; 2).</body><body package="Roassal-Core">testColorOfBezierLine		| model edge |	view shape rectangle.	view nodes: #(1 2).	view shape bezierLine color: [ :m | model := m. Color blue ].	edge := view edge: #edge from: 1 to: 2.	self assert: model == nil.	self assert: ((edge getShape: RORadialBezierCurve) colorFor: edge) = Color blue.	self assert: model = (1 -&gt; 2).</body><body package="Roassal-Core">testColorOfOrthoHorizontalLine		| model edge |	view shape rectangle.	view nodes: #(1 2).	view shape orthoHorizontalLine color: [ :m | model := m. Color blue ].	edge := view edge: #edge from: 1 to: 2.	self assert: model == nil.	self assert: ((edge getShape: ROOrthoHorizontalLineShape) colorFor: edge) = Color blue.	self assert: model = (1 -&gt; 2).</body><body package="Roassal-Core">testColorOfOrthoVerticalLine		| model edge |	view shape rectangle.	view nodes: #(1 2).	view shape orthoVerticalLine color: [ :m | model := m. Color blue ].	edge := view edge: #edge from: 1 to: 2.	self assert: model == nil.	self assert: ((edge getShape: ROOrthoVerticalLineShape) colorFor: edge) = Color blue.	self assert: model = (1 -&gt; 2).</body><body package="Roassal-Core">testFixedSize	| variableNode fixedSizedNode |	view shape rectangle width: 50; height: 50.	variableNode := view node: 'Variable size' forIt: [ view nodes: (1 to: 100). view gridLayout ].	view shape rectangle width: 50; height: 50; fixedSize.	fixedSizedNode := view node: 'Fixed size' forIt: [ view nodes: (1 to: 100). view gridLayout ].	self assert: fixedSizedNode resizeStrategy isFixed.	self assert: variableNode extent &gt;= (50 @ 50).	self assert: fixedSizedNode extent = (50 @ 50).</body><body package="Roassal-Core">testFontColor		| model |	view shape label 		fontColor: [ :m | model := m. Color black ].	node := view node: Object.	self assert: model == nil.	self assert: ((node getShape: ROLabel) colorFor: node) = Color black.	self assert: model == Object.</body><body package="Roassal-Core">testFontSize		| node |	view shape label 		text: [ :o | o name, ' class'];		fontSize: 10.	node := view node: Object.	self assert: ((node getShape: ROLabel) fontSizeFor: node) = 10.</body><body package="Roassal-Core">testIfborderColor	| nodes result |	view shape rectangle 		if: #odd borderColor: Color red;		if: #even borderColor: Color blue.	nodes := view nodes: #(1 2 3 4).		result :=  ((Array new: 4) at: 1 put: Color red; at: 2 put: Color blue; at: 3 put: Color red; at: 4 put: Color blue; yourself).	self assert: (nodes collect: [ :n | (n getShape: ROBox) borderColorFor: n]) = result</body><body package="Roassal-Core">testLabel	| builder element | 	builder := ROMondrianViewBuilder titled: 'Finding nodes'.		builder shape label.	node := builder node: 'hello'.	self assert: ((node getShape: ROLabel) textFor: node) = 'hello'.		view := builder raw.	self assert: view numberOfElements = 1.		element := view elementDetect: [ :el | true ].	self assert: (element isShapedAs: ROLabel).		self assert: node bounds extent = (ROLabel new preferedExtentFor: node)</body><body package="Roassal-Core">testLabelLinearFontSize	"MOViewRendererTest&gt;&gt;testLabel1"	| nodes |		view shape label		linearFontSize: #yourself within: (1 to: 40).	nodes := view nodes: (1 to: 40).		window := view open.		self assert: (((nodes at: 10) getShape: ROLabel) fontSizeFor: (nodes at: 10)) = 14.	self assert: (((nodes at: 20) getShape: ROLabel) fontSizeFor: (nodes at: 20)) = 24.	</body><body package="Roassal-Core">testLabelText		| node |	view shape label text: [:o | o name, ' class'].	node := view node: Object.	self assert: ((node getShape: ROLabel) textFor: node) = 'Object class'.</body><body package="Roassal-Core">testLabelWithTwoNodes	"Just to make sure that the view does not initialize a shape that later stays one"		| node1 node2 |	view shape label text: #printString.	node1 := view node: Object.	self assert: (node1 shapes size = 2).		view shape label text: #printString.	node2 := view node: Object.	self assert: (node1 shapes size = 2)</body><body package="Roassal-Core">testLinearFillColor	self shouldnt:  		[view shape rectangle 			linearFillColor: #foo within: #().		view nodes: #()]	raise: Error.</body><body package="Roassal-Core">testLinearFillColor2	| nodes colors |	view shape rectangle 			linearFillColor: #yourself within: #(0 0 0);			size: 50.	nodes := view nodes: #(0 0 0).	self assert: nodes size = 3.	colors := (nodes collect: [ :e | (e getShape: ROBox) colorFor: e ]) asSet.	self assert: colors size = 1.</body><body package="Roassal-Core">testLinearFillColor3	| nodes colors |	view shape rectangle 			linearFillColor: #yourself within: #(1 2 3);			size: 50.	nodes := view nodes: #(1 2 3).	self assert: nodes size = 3.	colors := (nodes collect: [ :e | (e getShape: ROBox) colorFor: e ]) asSet.	self assert: colors size = 3.</body><body package="Roassal-Core">testLinearFillColor4	| nodes colors colorsAfter |	"We compute the colors"	view shape rectangle 			linearFillColor: #yourself within: #(1 2 3).	nodes := view nodes: #(1 2 3).	colors := nodes collect: [ :e | (e getShape: ROBox) colorFor: e ].		"We do the same view, but we do not use the within: clause"	view shape rectangle 			linearFillColor: #yourself.	nodes := view nodes: #(1 2 3).	colorsAfter := nodes collect: [ :e | (e getShape: ROBox) colorFor: e ].		"The two should be the same"	self assert: colors = colorsAfter</body><body package="Roassal-Core">testShapeAreProperlyInitialized	| node1 node2 |		view shape rectangle width: 20.	node1 := view node: 123.	self assert: node1 bounds width = 20.	node2 := view node: 1234.		self assert: node1 bounds width = 20.	self assert: node2 bounds width = 5.</body><body package="Roassal-Core">testSize	| element |	view shape rectangle size: 30.	element := view node: 'hello'.		self assert: element extent = (30 @ 30)</body><body package="Roassal-Core">testWithBorderWidth	"Related to http://code.google.com/p/objectprofile/issues/detail?id=198"	| classesToDraw |		classesToDraw := Collection withAllSubclasses.	view shape rectangle 		borderWidth: 1; 		borderColor: Color blue.	view nodes: classesToDraw.	view gridLayout.	self shouldnt: [ view raw drawOn: RONullCanvas new ]  raise: Error </body><body package="Roassal-Core">testWithCenteredText	view shape rectangle withCenteredText.	node := view node: Object.	self assert: ((node getShape: ROCenteredLabel) textFor: node) = 'Object'.</body><body package="Roassal-Core">testWithCenteredText2	view shape rectangle withCenteredText: [:o | o name, ' class'].	node := view node: Object.	self assert: ((node getShape: ROCenteredLabel) textFor: node) = 'Object class'.</body><body package="Roassal-Core">testWithCenteredText3	| el1 el2 |	view shape rectangle; withCenteredText;  width: 180; height: 15.	el1 := view node: 'centered text'.	view shape rectangle; withText;  width: 180; height: 15.	el2 := view node: 'left text'.		self assert: el1 bounds width = 180.	self assert: el2 bounds width = 180.		self assert: el1 bounds height &gt; 5.	self assert: el2 bounds height &gt; 5.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>initializing</category><body package="Roassal-Core">testInitialization	| builder |	builder := ROMondrianViewBuilder new.	self assert: (builder raw class == ROView)</body><body package="Roassal-Core">testInitializationWithView	| builder v |	v := ROView new.	builder := ROMondrianViewBuilder titled: 'hello' view: v .		self assert: (builder raw == v).	self assert: (builder raw class == ROView).</body><body package="Roassal-Core">testNumberOfDefinedInteractions	self assert: view interaction numberOfDefinedInteractions = 1</body><body package="Roassal-Core">testNumberOfDefinedInteractions2	view nodes: (1 to: 20).	self assert: view interaction numberOfDefinedInteractions = 1.</body><body package="Roassal-Core">testNumberOfDefinedInteractions3	view interaction action: #inspect.	self assert: view interaction numberOfDefinedInteractions = 2.	view nodes: (1 to: 20).	self assert: view interaction numberOfDefinedInteractions = 1.</body><body package="Roassal-Core">testNumberOfDefinedInteractions4	view interaction 		if: #odd popupText: 'hello';		if: #even popupText: 'world'.	self assert: view interaction numberOfDefinedInteractions = 3.	view nodes: (1 to: 20).	self assert: view interaction numberOfDefinedInteractions = 1.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>edges</category><body package="Roassal-Core">testColoredEdges	| edge1 edge2 |	view nodes: #(1 2 3).	edge1 := view edgeFromAssociation: 1 -&gt; 2.		view shape line color: Color red.	edge2 := view edgeFromAssociation: 2 -&gt; 3.		view treeLayout.	self assert: (edge1 numberOfShapes = 2).	self assert: (edge2 numberOfShapes = 2)</body><body package="Roassal-Core">testColoredEdges2	| edges |	view shape rectangle size: 50.	view nodes: (1 to: 5).	view shape line color: [ :assoc | (assoc key + assoc value) odd ifTrue: [ Color red ] ifFalse: [ Color black ] ].	edges := view edgesFromAssociations: (Array with: 1 -&gt; 5 with: 1 -&gt; 2 with: 3 -&gt; 4).	view treeLayout.	self assert: ((edges first getShape: ROLine) color roValue: edges first) = Color black.	self assert: ((edges second getShape: ROLine) color roValue: edges second) = Color red.</body><body package="Roassal-Core">testColoredEdgesUponCondition	| edges firstEdge secondEdge |	view nodes: (1 to: 3).	view shape line 		color: [ :model | 					(model = 1) 								ifTrue: [ Color red ] 								ifFalse: [ Color lightGray ] ].	edges := view edges: (1 to: 3) from: #yourself to: [ :v | v + 1 ].	view circleLayout.  		self assert: edges size = 2.	"First edge"	firstEdge := edges first.	self assert: firstEdge model = 1.	self assert: firstEdge from model = 1.	self assert: firstEdge to model = 2.	self assert: ((firstEdge getShape: ROLine) colorFor: firstEdge) = Color red.		"Second edge"	secondEdge := edges second.	self assert: secondEdge model = 2.	self assert: secondEdge from model = 2.	self assert: secondEdge to model = 3.	self assert: ((secondEdge getShape: ROLine) colorFor: secondEdge) = Color lightGray.</body><body package="Roassal-Core">testColoredEdgesWithoutLayout	| edge1 edge2 |	view nodes: #(1 2 3).	edge1 := view edgeFromAssociation: 1 -&gt; 2.		view shape line color: Color red.	edge2 := view edgeFromAssociation: 2 -&gt; 3.	self assert: (edge1 numberOfShapes = 2).	self assert: (edge2 numberOfShapes = 2)</body><body package="Roassal-Core">testDefaultShapeForEdge	| edge |	view nodes: #(1 2 3).	edge := view edgeFromAssociation: 1 -&gt; 2.		self assert: (edge isShapedAs: ROLine)</body><body package="Roassal-Core">testEdgeAndInteraction	|  edge |	view := ROMondrianViewBuilder new.	view shape rectangle size: 30.	view nodes: (1 to: 2).	edge := view edgeFromAssociation: 1 -&gt; 2.	self assert: edge numberOfInteractions = 1.</body><body package="Roassal-Core">testEdgeAndInteraction2LowLevel	|  edge |	view := ROMondrianViewBuilder new.	view shape line.	edge := view buildEdgeFrom: (ROElement on: 1) to: (ROElement on: 2) for: 'zork'.	self assert: edge numberOfInteractions = 1.</body><body package="Roassal-Core">testEdgeFromAllTo	|  edges |	view nodes: #(1 2).	view edges: #(1 2) fromAll: [ :v | Array with: 1 ] to: #yourself.	self assert: (view raw elementsSuchThat: [ :n | n class == ROElement ]) size = 2.	edges := view raw elementsSuchThat: [ :n | n class == ROEdge ].	self assert: edges size = 1.	self assert: edges first source model = 1.	self assert: edges first target model = 2.</body><body package="Roassal-Core">testEdgeFromAndToItself	"	self debug: #testEdgeFromAndToItself	"		| edges |	view nodes: #(1 2).	view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 2 with: 1 -&gt; 1).	self assert: (view raw elementsSuchThat: [ :n | n class == ROElement ]) size = 2.	edges := view raw elementsSuchThat: [ :n | n class == ROEdge ].	self assert: edges size = 1.	self assert: edges first source model = 1.	self assert: edges first target model = 2.	</body><body package="Roassal-Core">testEdgeFromAndToItself2	"	self debug: #testEdgeFromAndToItself2	"		| edges |	view nodes: #(1 2).	view edges: #(1 2) from: #yourself toAll: [ :v | Array with: 1 ].	self assert: (view raw elementsSuchThat: [ :n | n class == ROElement ]) size = 2.	edges := view raw elementsSuchThat: [ :n | n class == ROEdge ].	self assert: edges size = 1.	self assert: edges first source model = 2.	self assert: edges first target model = 1.</body><body package="Roassal-Core">testEdgeFromAssociation	| nodes edges ass m |	nodes := view nodes: #(1 2 3 4).	 view edge: (1 -&gt; 2) from: #key to:  #value.	edges := view root edges.		self assert: edges size = 1.	self assert: edges first from = nodes first.	self assert: edges first to = nodes second.</body><body package="Roassal-Core">testEdgeFromAssociation2	| nodes edges ass m |	nodes := view nodes: #(1 2 3 4).	 view edge: (1 -&gt; 20) from: #key to:  #value.	edges := view root edges.		self assert: edges isEmpty</body><body package="Roassal-Core">testEdgeFromTo	| edge |	view nodes: (1 to: 5).	edge := view edge: #edge from: 1 to: 2. 	self assert: edge source model = 1.	self assert: edge target model = 2.	self assert: edge model = (1 -&gt; 2).</body><body package="Roassal-Core">testEdgesAndInnerNodes	"Node extremities should be looked up with the nesting"		| outterNode1 edges innerNode1 innerNode2 innerNode3 |	outterNode1 := view node: 'outter1' forIt: [ innerNode1 := view node: 1 ].	view node: 'outter2' forIt: [ innerNode2 := view node: 2 ].	view node: 'outter3' forIt: [ innerNode3 := view node: 3 ].		view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3 with: 1 -&gt; 3).	self assert: (view nestedLookup: 1 in: outterNode1) = innerNode1.	self assert: (view nestedLookup: 2 in: outterNode1) isNil.			self assert: (view lookup: 1) == innerNode1.	self assert: (view lookup: 2) == innerNode2.	self assert: (view lookup: 3) == innerNode3.		edges := view root edges.	self assert: edges size = 3.	self assert: (edges last from == innerNode1).	self assert: (edges last to == innerNode3).</body><body package="Roassal-Core">testEdgesFrom	view := ROMondrianViewBuilder new.	view interaction on: ROMouseClick do: [ :event |		view shape rectangle.		view interaction on: ROMouseClick do: [ :otherEvent |			view shape rectangle.			view nodes: otherEvent model subclasses.			view edgesFrom: #superclass.			view treeLayout.			view applyLayout ].		view nodes: event model subclasses.		view edgesFrom: #superclass.		view treeLayout.		view applyLayout ].	node := view node: Collection.	view applyLayout.	node announce: ROMouseClick.	self should: [ view raw elements first announce: ROMouseClick ] raise: Exception.</body><body package="Roassal-Core">testEdgesFromAssociation	| nodes edges  m |	nodes := view nodes: #(1 2 3 4).	 view edges: (Array with: 1 -&gt; 2 with: 2 -&gt; 10 with: 10 -&gt; 3) from: #key to:  #value.	edges := view root edges.		self assert: edges size = 1.	self assert: edges first from = nodes first.	self assert: edges first to = nodes second.</body><body package="Roassal-Core">testEdgesFromTo	| edges |	view nodes: (1 to: 5).	edges := view edgesFrom: 1 to: 2. 	self assert: edges size = 1.	self assert: edges first source model = 1.	self assert: edges first target model = 2.	self assert: edges first model = 1.</body><body package="Roassal-Core">testEdgesFromTo2	| edges |	view nodes: (1 to: 5).	edges := view edgesFrom: #yourself to: 1. 	self assert: edges size = 4.	self assert: (edges collect: [ :edge | edge from model ]) asArray = #(2 3 4 5).	self assert: (edges collect: [ :edge | edge to model ]) asArray = #(1 1 1 1).	self assert: (edges collect: [ :edge | edge model ]) asArray = #(2 3 4 5).</body><body package="Roassal-Core">testEdgesFromTo3	| edges |	view nodes: (1 to: 5).	edges := view edges: #edges from: 1 to: 2. 	self assert: edges size = 1.	self assert: edges first source model = 1.	self assert: edges first target model = 2.	self assert: edges first model = $e.</body><body package="Roassal-Core">testEdgesFromToHaveNonNilModel	| edges |	view nodes: #(4 2).	edges := view edges: (Array with: 42) from: 4 to: 2.		self assert: edges first model = 42</body><body package="Roassal-Core">testEdgesFromToWithSameModelsAsTheNodes	| edges |	view nodes: (Array with: 4 with: 2).	self shouldnt: [edges := view edges: (Array with: 4 with: 2) from: 4 to: 2] raise: Error.	self assert: edges size = 1.	self assert: edges first from model = 4.	self assert: edges first to model = 2.	</body><body package="Roassal-Core">testEdgesToAll	view shape rectangle.	view nodes: #(1 2 3).	self assert: view edges size equals: 0.		view shape arrowedLine.	view edgesToAll: #(2).	self assert: view edges size equals: 2.	(view edges collect: #target) do: [ :eachTarget |		self assert: eachTarget model equals: 2 ].	(view edges collect: #source) do: [ :eachSource |		self deny: eachSource model = 2 ].</body><body package="Roassal-Core">testFromInsideToOutside	| node1 node2 edge attachPoint points |	node1 := view node: 'zork'.	view node: 'foo' forIt: [ 		node2 := view node: 'bar'. 		view raw add: (edge := ROEdge lineFrom: node1 to: node2). ].	view applyLayout.		attachPoint := edge shapes first attachPoint.	points := Array with: (10@7) with: (25@12).	self assert: (points includes: (attachPoint startingPointOf: edge)).	self assert: (points includes: (attachPoint endingPointOf: edge)).		node2 translateTo: 100 @ 50.	points := Array with:  (10@7) with: 5@3.	self assert: (points includes: (attachPoint startingPointOf: edge)).	points := Array with: 100@52 with: (120@57).	self assert: (points includes: (attachPoint endingPointOf: edge)).</body><body package="Roassal-Core">testFromInsideToOutside2	| edge attachPoint edges points |	view node: 'foo' forIt: [		view node: 'bar' forIt: [			view nodes: #(1 2).			edges := view edgesFrom: 1 to: 2.		 ]	].	view applyLayout.	edge := edges first.	attachPoint := edge shapes first attachPoint.	points := Array with:   (20@17) with:  (30@17).	self assert: (points includes: (attachPoint startingPointOf: edge)).	self assert: (points includes: (attachPoint endingPointOf: edge)).		view applyLayout.		points := Array with: 20@17 with: 20@18.	self assert: (points includes: (attachPoint startingPointOf: edge)).	points := Array with: 30@17 with: 30@18.	self assert: (points includes: (attachPoint endingPointOf: edge)).</body><body package="Roassal-Core">testGraph	"No error should be raised"		view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout</body><body package="Roassal-Core">testNilKeyOrValue	"	self debug: #testNilKeyOrValue	"		view nodes: #(1 2).	view edgesFromAssociations: (Array with: 1 -&gt; 2 with: nil -&gt; 2 with: 1 -&gt; nil).	view edgeFromAssociation: nil -&gt; nil.	view edges: #(1 2) from: #yourself to: [ :v | nil ].	view edges: #(1 2) from: [ :v | nil ] to: [ :v | nil ].	view edges: #(1 2) from: [ :v | nil ] to: #yourself.	self assert: (view root raw elementsSuchThat: [ :n | n class == ROElement ]) size = 2.	self assert: (view root raw elementsSuchThat: [ :n | n class == ROEdge ]) size = 1.</body><body package="Roassal-Core">testOddLine	view node: 4.	view edges: (Array with: 4) from: #yourself toAll: [ :m | #() ].	self assert: view root raw numberOfElements = 1.</body><body package="Roassal-Core">testPopupWithEdges2	| rawView nodes firstNode secondNode virtualPoint outterNode edge |	 	outterNode := view node: 'foo' forIt: [ 		nodes := view nodes: #(1 2).		edge := view edge: 1 from: 1 to: 2.		view treeLayout.	].	view applyLayout."	view open."		self assert: (view raw elementAt: 14 @ 39) == nodes second.</body><body package="Roassal-Core">testRawEdgesFrom	| nodes edges ass m assoc |	nodes := view nodes: #(1 2 3 4).	self assert: view raw numberOfElements = 4.	assoc := 1 -&gt; 2.	edges := view rawEdges: (Array with: assoc) from: #key to: #value.	self assert: edges size = 1.	self assert: edges first from = nodes first.	self assert: edges first to = nodes second.</body><body package="Roassal-Core">testRawEdgesFrom2	| nodes edges assoc |	nodes := view nodes: #(1 2 3 4).	self assert: view raw numberOfElements = 4.	assoc := 1 -&gt; 1.	edges := view rawEdges: (Array with: assoc) from: #key to: #value.	self assert: edges size = 0.</body><body package="Roassal-Core">testRawEdgesFromTo	| edges assoc |	view nodes: #(1 2 3 4).	self assert: view raw numberOfElements = 4.	assoc := 1 -&gt; 2.	edges := view rawEdges: (Array with: assoc) from: #key to: #value.	self assert: edges size equals: 1.	self assert: edges first from model equals: 1.	self assert: edges first to model equals: 2.	self assert: edges first model = assoc.</body><body package="Roassal-Core">testRawEdgesFromTo2	| edges assoc |	view nodes: #(1 2 3 4).	self assert: view raw numberOfElements = 4.	assoc := 1 -&gt; 1.	edges := view rawEdges: (Array with: assoc) from: #key to: #value.	self assert: edges size equals: 0.</body><body package="Roassal-Core">testRawEdgesToAll	| edges |	view nodes: #(1 2 3 4).	self assert: view raw numberOfElements = 4.	edges := view rawEdgesToAll: #(1 2 3 4).	self assert: edges size equals: 12.	edges do: [ :eachEdge | self deny: eachEdge source == eachEdge target ].</body><body package="Roassal-Core">testRemoveAllEdgesFromNode		view nodes: (1 to: 2).	view edgesFromAssociations: (Array with: 1-&gt;2).	self assert: (view raw numberOfElements = 3).		view removeAllEdgesFrom: 1.	self assert: (view raw numberOfElements = 2).</body><body package="Roassal-Core">testRemoveAllEdgesFromNodes		view nodes: (1 to: 3).	view edgesFromAssociations: (Array with: 2-&gt;1 with: 3-&gt;2).	self assert: (view raw numberOfElements = 5).	view removeAllEdgesFromNodes: (2 to: 3).	self assert: (view raw numberOfElements = 3).</body><body package="Roassal-Core">testRemoveAllEdgesToNode		view nodes: (1 to: 2).	view edgesFromAssociations: (Array with: 2-&gt;1).	self assert: (view raw numberOfElements = 3).		view removeAllEdgesTo: 1.	self assert: (view raw numberOfElements = 2).</body><body package="Roassal-Core">testRemoveAllEdgesToNodes		view nodes: (1 to: 3).	view edgesFromAssociations: (Array with: 2-&gt;1 with: 3-&gt;2).	self assert: (view raw numberOfElements = 5).	view removeAllEdgesToNodes: (1 to: 2).	self assert: (view raw numberOfElements = 3).</body><body package="Roassal-Core">testShapeAndEdges	| edges |	view nodes: (1 to: 5).	view shape line color: Color blue.	edges := view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.			self assert: edges size = 5.	edges do: [ :edge | 		self assert: ((edge getShape: ROLine) colorFor: edge) = Color blue. 	]</body><body package="Roassal-Core">testTwiceDefiningEdges	view nodes: (1 to: 20).	view shape line 		color: [ :edge | (edge from model = 2) 								ifTrue: [ Color red. ] 								ifFalse: [ Color lightGray ] ].			view edgeFromAssociation: 2 -&gt;  18.	self shouldnt: [view edgesToAll: [ :v | Array with: v + 3 with: v + 5 with: v *2 ] ] raise: Error</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>accessing</category><body package="Roassal-Core">testElementFromModel	| nodes edges |	view shape rectangle size: 30.	nodes := view nodes: (Array with: Collection with: Collection superclass).	edges := view edgesFrom: #superclass.	self assert: edges size = 1.	self assert: nodes size = 2.		self assert: (view raw elementFromModel: Collection) == nodes first.	self assert: (view raw elementFromModel: Collection superclass) == nodes second.</body><body package="Roassal-Core">testElementsFromModels	"	self debug: #testElementsFromModels	"	| container node1To6 node7 nodeInner10To20 node8 nodeInner1To6 |	node1To6 := view nodes: (1 to: 6).	node7 := view node: 7 forIt: [ nodeInner10To20 := view nodes: (10 to: 20) ].	node8 := view node: 8 forIt: [ nodeInner1To6 := view nodes: (100 to: 106) ].		container := view raw.	"Looking up individual nodes"	self assert: (container elementFromModel: 1) == node1To6 first.	self assert: (container elementFromModel: 7) == node7.	self assert: (container elementFromModel: 8) == node8.	self assert: (node7 elementFromModel: 7) == node7.	self assert: (node7 elementFromModel: 70) isNil.		"------"	"Group of nodes"	"Checking the outter nodes"	self assert: (container elementsFromModels: (1 to: 6)) asArray = node1To6.	self assert: (container elementsFromModels: (Array with: 7)) asArray first == node7.	self assert: (container elementsFromModels: (Array with: 8)) asArray first == node8.	"Looking up the inner nodes"	self assert: (container elementsFromModels: (10 to: 20)) asArray = nodeInner10To20. 		"Looking up unexisting nodes"	self assert: (container elementsFromModels: (Array with: 2000)) isEmpty	</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>instantiating</category><body package="Roassal-Core">testDefaultTitle	| builder |	builder := ROMondrianViewBuilder new.	window := builder open.		[		self assert: window labelString = ROView defaultWindowTitle.	] ensure: [ window delete ]</body><body package="Roassal-Core">testTitle	| builder |	builder := ROMondrianViewBuilder titled: 'hello world'.	window := builder open.		[		self assert: window labelString = 'hello world'.	] ensure: [ window delete ]</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>dynamic edges</category><body package="Roassal-Core">testDynamicEdges	| firstNode |	view interaction 		dynamicEdgeToAll: [ :model | (Array with: 10 with: 20 with: 30) copyWithout: model ]		using: (ROLine arrowed color: Color red).	view shape rectangle size: 20.	view nodes: (Array with: 10 with: 20 with: 30).	view circleLayout.	view applyLayout.		self assert: view raw numberOfElements = 3.	self assert: (view raw elementsSuchThat: #isEdge) isEmpty.		firstNode := view raw elements first.	self assert: firstNode numberOfInteractions = 3.	self assert: (firstNode is: RODynamicEdge).		firstNode announce: ROMouseEnter.	self assert: view raw numberOfElements = 5.	self assert: (view raw elementsSuchThat: #isEdge) size = 2.</body><body package="Roassal-Core">testDynamicEdgesMultiple	| firstNode |	view interaction 		dynamicEdgeToAll: [ :model | ((Array with: 10 with: 20 with: 30) copyWithout: model) allButFirst ] using: (ROLine arrowed color: Color red);		dynamicEdgeToAll: [ :model | ((Array with: 30 with: 20 with: 10) copyWithout: model) allButFirst ] using: (ROLine arrowed color: Color blue).	view shape rectangle size: 20.	view nodes: (Array with: 10 with: 20 with: 30).	view circleLayout.	view applyLayout.		self assert: view raw numberOfElements = 3.	self assert: (view raw elementsSuchThat: #isEdge) isEmpty.		firstNode := view raw elements first.	self assert: firstNode numberOfInteractions = 3.	self assert: (firstNode is: RODynamicEdge).		firstNode announce: ROMouseEnter.	self assert: view raw numberOfElements = 5.	self assert: (view raw elementsSuchThat: #isEdge) size = 2.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>using model</category><body package="Roassal-Core">testBorderColor	| nodes b |	view shape rectangle borderColor: (b := [ :model | model + 1]).	nodes := view nodes: #(2 3 4).		self assert: (nodes collect: [ :n | (n getShape: ROBox) borderColorFor: n]) = #(3 4 5)</body><body package="Roassal-Core">testBorderColorWithNormalizer	view shape rectangle borderColor: (RONIdentityNormalizer new).	view nodes: (1 to: 10).	self shouldnt: [view raw drawOn: RONullCanvas new]  raise: Error</body><body package="Roassal-Core">testBorderWidth	| nodes b |	view := ROMondrianViewBuilder new.	view shape rectangle borderWidth: (b := [ :model | model + 1 ]).	nodes := view nodes: #(2 3 4).		self assert: (nodes collect: [ :n | (n getShape: ROBox) borderWidthFor: n]) = #(3 4 5)</body><body package="Roassal-Core">testFillColor	| nodes |	view shape rectangle fillColor: [ :model | model + 1].	nodes := view nodes: #(2 3 4).		self assert: (nodes collect: [ :n | (n getShape: ROBox) colorFor: n]) = #(3 4 5)</body><body package="Roassal-Core">testHeight	| nodes heightBlock shape |	heightBlock := [ :model | model + 1 ].	view shape rectangle height: heightBlock.	"self assert: view height == heightBlock."	nodes := view nodes: #(2 30 40).		shape := nodes first getShape: ROBox.	self assert: (shape height roValue: nodes first) = 3.	self assert: (shape height roValue: nodes second) = 31.	self assert: (nodes collect: [ :n | n height ]) =  #(5 31 41)</body><body package="Roassal-Core">testIfBorderColor	| nodes |	view shape rectangle 		if: #odd borderColor: [ :model | model + 1];		if: #even borderColor: [ :model | model + 10].	nodes := view nodes: #(2 3 4 5 6).		self assert: (nodes collect: [ :n | (n getShape: ROBox) borderColorFor: n]) = #(12 4 14 6 16)</body><body package="Roassal-Core">testIfFillColor	| nodes |	view shape rectangle 		if: #odd fillColor: [ :model | model + 1];		if: #even fillColor: [ :model | model + 10].	nodes := view nodes: #(2 3 4 5 6).		self assert: (nodes collect: [ :n | (n getShape: ROBox) colorFor: n]) = #(12 4 14 6 16)</body><body package="Roassal-Core">testLogHeight	| nodes |	view shape rectangle logHeight: [ :model | model + 1].	nodes := view nodes: #(2 30 40).		(nodes do: [ :n | self assert: n height class == Float ]) 	 </body><body package="Roassal-Core">testLogWidth	| nodes |	view shape rectangle logWidth: [ :model | model + 1].	nodes := view nodes: #(2 30 40).		(nodes do: [ :n | self assert: n width class == Float ]) 	 </body><body package="Roassal-Core">testWidth	| nodes |	view shape rectangle width: [ :model | model + 1].	nodes := view nodes: #(2 30 40).		self assert: (nodes collect: [ :n | n width ]) =  #(5 31 41)</body><body package="Roassal-Core">testWithText	| nodes |	view shape rectangle withText: [ :model | model + 1].	nodes := view nodes: #(2 30 40).		self assert: (nodes collect: [ :n | (n getShape: ROLabel) textFor: n]) =  #('3' '31' '41')</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>nodes</category><body package="Roassal-Core">testAddingNode	view node: 123.	self assert: (view raw numberOfElements = 1)</body><body package="Roassal-Core">testAddingNodes	view nodes: (1 to: 20).	self assert: (view raw numberOfElements = 20)</body><body package="Roassal-Core">testNodeSizeNotSmallerThan5	| sizes |	view shape rectangle size: #yourself.	view nodes: (0 to: 10).	view applyLayout.		sizes := (view raw elements copyFrom: 1 to: 5) 					collect: [ :e | e extent x  ].	self assert: sizes asSet asArray = (Array with: 5)</body><body package="Roassal-Core">testPositionRelativeTo	| outterNode1 innerNode1 innerNode2 innerNode3 |	outterNode1 := view node: 'outter1' forIt: 		[ innerNode1 := view node: 1 forIt: [ innerNode2 := view node: 2] ].	view applyLayout.		self assert: innerNode2 bounds = ( (5@5) corner: (10@10) ).	self assert: (innerNode2 positionRelativeTo: innerNode2) = (0 @ 0).	self assert: (innerNode2 positionRelativeTo: innerNode1) = innerNode2 topLeft.	self assert: (innerNode2 positionRelativeTo: outterNode1) = (innerNode2 topLeft + innerNode1 topLeft).</body><body package="Roassal-Core">testRemoveAndAddNode	view nodes: (1 to: 4).	self assert: view raw numberOfElements = 4.	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 4.			view removeNodes: (2 to: 4).	self assert: view raw numberOfElements = 1.	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 1.		view nodes: (2 to: 4).	self assert: view raw numberOfElements = 4.	self assert: view numberOfFrames = 1.	self assert: view currentFrame numberOfElements = 4.		</body><body package="Roassal-Core">testRemoveNode	|node|			node := view node: 1.	self assert: (view raw numberOfElements = 1).	self assert: ((view elementFromModel: 1) = node).		view removeNode: 1.	self assert: (view raw numberOfElements = 0).</body><body package="Roassal-Core">testRemoveNodes	view nodes: (1 to: 3).	self assert: (view raw numberOfElements = 3).		view removeNodes: (1 to: 3).	self assert: (view raw numberOfElements = 0).</body><body package="Roassal-Core">testlookup	| nodes |	nodes := view nodes: #(1 2 3 4).	self assert: (view lookup: 1) == nodes first.	self assert: (view lookup: 4) == nodes fourth.	self assert: (view lookup: 6) == nil</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>inner nodes</category><body package="Roassal-Core">testAbsolutePosition		| inner2 outter inner |	outter := view node: 'outter' forIt: [		inner := view node: 'inner' forIt: [			inner2 := view node: 'inner2'		]	].	view applyLayout.	self assert: outter absolutePosition = outter position.	self assert: outter absolutePosition = (5@5).		self assert: inner absolutePosition = (inner position + outter position).	self assert: inner absolutePosition = (10@10).	self assert: inner2 absolutePosition = (inner2 position + outter position + inner position).	self assert: inner2 absolutePosition = ( 15@15).</body><body package="Roassal-Core">testAbsolutePositionAfterTranslation		| inner2 outter inner |	outter := view node: 'outter' forIt: [		inner := view node: 'inner' forIt: [			inner2 := view node: 'inner2'		]	].	view applyLayout.	outter translateBy: 10@3.	self assert: outter absolutePosition = outter position.	self assert: outter absolutePosition = (5@5 + (10@3)).		self assert: inner absolutePosition = (inner position + outter position).	self assert: inner absolutePosition = (10@10 + (10@3)).	self assert: inner2 absolutePosition = (inner2 position + outter position + inner position).	self assert: inner2 absolutePosition = ( 15@15 + (10@3)).</body><body package="Roassal-Core">testForItAndShape	| n |		view shape rectangle width: [ :v | v ].	view node: 50.		view shape rectangle withoutBorder.	n := view node: Object new.		self assert: n width = view defaultWidth.	self assert: n height = view defaultHeight.</body><body package="Roassal-Core">testInnerNodesAndEvents	| outter inner inner2 |	outter := view node: 'outter' forIt: [		inner := view node: 'inner' forIt: [			inner2 := view node: 'inner2'		]	].	view applyLayout.	self assert: (view raw elementAt: outter absolutePosition) == outter.	self assert: (view raw elementAt: inner absolutePosition) == inner.	self assert: (view raw elementAt: inner2 absolutePosition) == inner2.	self assert: (view raw elementAtRealPosition: outter absolutePosition) == outter.	self assert: (view raw elementAtRealPosition: inner absolutePosition) == inner.	self assert: (view raw elementAtRealPosition: inner2 absolutePosition) == inner2.		self assert: (view raw elementAtRealPosition: 18@18) == inner2.	"We simulate a drag and drop"	outter translateTo: 67@32.	self assert: (view raw elementAtRealPosition: 80@45) == inner2.	</body><body package="Roassal-Core">testInnerNodesAndLayout	| nodes |	nodes := view nodes: #(1 10) forEach: [ :v |		view nodes: (Array with: v +1 with: v + 2) ].	view applyLayout.	self assert: (nodes collect: #bounds) =  (Array with: (5@5 corner: 35@20) with: (45@5 corner: 75@20)).	self assert: (nodes first elementsCollect: #bounds) asArray =  (Array with: (5@5 corner: 10@10) with: (20@5 corner: 25@10)).	self assert: (nodes second elementsCollect: #bounds) asArray =  (Array with: (5@5 corner: 10@10) with: (20@5 corner: 25@10))</body><body package="Roassal-Core">testInnerNodesAndLayout2	| nodes |	nodes := view nodes: #(1 10) forEach: [ :v |		view nodes: (Array with: v +1 with: v + 2).		view verticalLineLayout ].	view applyLayout.	self assert: (nodes collect: #bounds) =  (Array with: (5@5 corner: 20@35) with: (30@5 corner: 45@35)).	self assert: (nodes first elementsCollect: #bounds) asArray =  (Array with: (5@5 corner: 10@10) with: (5@20 corner: 10@25)).	self assert: (nodes second elementsCollect: #bounds) asArray =  (Array with: (5@5 corner: 10@10) with: (5@20 corner: 10@25))</body><body package="Roassal-Core">testInnerNodesAndLayout3	| nodes |	nodes := view nodes: #(1 10) forEach: [ :v |		view nodes: (Array with: v+ 1 with: v +2).	 ].	view verticalLineLayout.	view applyLayout.	self assert: (nodes collect: #bounds) =  (Array with: (5@5 corner: 35@20) with: (5@30 corner: 35@45)).	self assert: (nodes first elementsCollect: #bounds) asArray =  (Array with: (5@5 corner: 10@10) with: (20@5 corner: 25@10)).	self assert: (nodes second elementsCollect: #bounds) asArray =  (Array with: (5@5 corner: 10@10) with: (20@5 corner: 25@10))</body><body package="Roassal-Core">testInnerNodesAndLayout4	| nodes |	nodes := view nodes: #(1 10) forEach: [ :v |		view nodes: (Array with: v +1 with: v + 2 with: v + 3).		view shape line.		view edgesFrom: [ :el | v + 1 ].		view treeLayout ].	view horizontalLineLayout.	view applyLayout.		"Sanity check begin"	self deny: ((nodes second elementFromModel: 13) isShapedAs: ROLine).	self assert: (nodes first elementsSuchThat: #isEdge) size = 2.	"Sanity check end"		self assert: (nodes collect: #bounds) =  (Array with: (5@5 corner: 28.0@45) with: (38.0@5 corner: 61.0@45)).		self assert: (((Array new: 5) at: 1 put: (9.0@5 corner: 14.0@10); at: 2 put: (5.0@30 corner: 10.0@35); at: 3 put: (13.0@30 corner: 18.0@35); at: 4 put: (0@0 corner: 5@5); at: 5 put: (0@0 corner: 5@5); yourself) includesAll: (nodes first elementsNotEdge collect: #bounds) asArray).	self assert: (((((Array new: 5) at: 1 put: (9.0@5 corner: 14.0@10); at: 2 put: (5.0@30 corner: 10.0@35); at: 3 put: (13.0@30 corner: 18.0@35); at: 4 put: (0@0 corner: 5@5); at: 5 put: (0@0 corner: 5@5); yourself))) includesAll: (nodes second elementsNotEdge collect: #bounds) asArray)</body><body package="Roassal-Core">testNesting	| firstNode |	view nodes: (1 to: 20) forEach: [ :v | view nodes: (1 to: 2) ].		view applyLayout.	firstNode := (view raw elementsSuchThat: [:el | el model = 1]) first.		self assert: firstNode extent = (30@15)</body><body package="Roassal-Core">testNestingForIt	| firstNode |	view node: 123 forIt: [ view nodes: (1 to: 2). ].	view applyLayout.		firstNode := (view raw elementsSuchThat: [:el | el model = 123]) first.		self assert: firstNode extent = ( 30@15)</body><body package="Roassal-Core">testNestingWithExplicitLayout	| firstNode |	view nodes: (1 to: 20) forEach: [ :v | view nodes: (1 to: 2) . view treeLayout ].	view applyLayout.		self assert: (view raw numberOfElements = 20).		firstNode := (view raw elementsSuchThat: [:el | el model = 1]) first.	self assert: firstNode numberOfElements = 2.		self assert: firstNode extent = ( 23@15).</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>interaction updating</category><body package="Roassal-Core">testInteraction1	"	self debug: #testInteraction1	"		| nodes firstNode |	view interaction highlightWhenOver: [ :e | (Array with: 123) ].	view shape rectangle size: 60; fillColor: Color green.	nodes := view nodes: #(123 456 789).	firstNode := nodes first.	self assert: ((firstNode getShape: ROBox) colorFor: firstNode) = Color green.	nodes first announce: ROMouseEnter.	self assert: ((firstNode getShape: ROBox) colorFor: firstNode) = Color red.	nodes first announce: ROMouseLeave.	self assert: ((firstNode getShape: ROBox) colorFor: firstNode) = Color green.</body><body package="Roassal-Core">testInteraction2	"	self debug: #testInteraction2	"		| nodes firstNode |	view node: 'foo' forIt: [		view interaction highlightWhenOver: [ :e | (Array with: 123) ].		view shape rectangle size: 60; fillColor: Color green.		nodes := view nodes: #(123 456 789) ].	firstNode := nodes first.	self assert: ((firstNode getShape: ROShape) colorFor: firstNode) = Color green.	nodes first announce: ROMouseEnter.	self assert: ((firstNode getShape: ROShape) colorFor: firstNode) = Color red.	nodes first announce: ROMouseLeave.	self assert: ((firstNode getShape: ROShape) colorFor: firstNode) = Color green.	</body><body package="Roassal-Core">testInteraction2HighlightWhenOver	"	self debug: #testInteraction2HighlightWhenOver	"	| nodes shape1 shape2 t aNode node5 node2 |		t := 0.	view interaction highlightWhenOver: [ :v | t := t + 1. ((Array new: 4) at: 1 put: v - 1; at: 2 put: v + 1; at: 3 put: v + 4; at: 4 put: v - 4; yourself)].	view interaction highlightWhenOver: [ :v | Array with: v ] color: Color blue.	view shape rectangle 		width: 40;		height: 30.	nodes := view nodes: (1 to: 16).	view gridLayout gapSize: 2.		aNode := nodes first.	node5 := nodes fifth.	node2 := nodes second.	shape1 := aNode getShape: ROBox.	self assert: (shape1 borderColor == Color black). 	nodes first announce: (ROMouseEnter new).		self assert: (aNode getShape: ROBox) == shape1.	self assert: (shape1 color = Color blue).		shape2 := aNode getShape: ROBox.	self assert: (t = 1).	self assert: (shape1 == shape2).	self assert: ((node2 getShape: ROBox) color = Color red).	self assert: ((node5 getShape: ROBox) color = Color red).	nodes first announce: (ROMouseLeave new).	self assert: ((Array with: aNode with: node2 with: node5) allSatisfy: [ :n | ((n getShape: ROBox) colorFor: n) = Color white ]).</body><body package="Roassal-Core">testInteraction2HighlightWhenOverOnInnerNodes	"	self debug: #testInteraction2HighlightWhenOverOnInnerNodes	"	| nodes shape1 shape2 t aNode node5 node2 |		t := 0.	view node: 'outterNode' forIt: [		view interaction highlightWhenOver: [ :v | t := t + 1. ((Array new: 4) at: 1 put: v - 1; at: 2 put: v + 1; at: 3 put: v + 4; at: 4 put: v - 4; yourself)].		view interaction highlightWhenOver: [ :v | Array with: v ] color: Color blue.		view shape rectangle 			width: 40;			height: 30.		nodes := view nodes: (1 to: 16).		view gridLayout gapSize: 2	].		aNode := nodes first.	node5 := nodes fifth.	node2 := nodes second.	shape1 := aNode getShape: ROBox.	self assert: (shape1 borderColor == Color black). 		nodes first announce: (ROMouseEnter new).	self assert: (aNode getShape: ROBox) == shape1.	self assert: (shape1 color = Color blue).		shape2 := aNode getShape: ROBox.	self assert: (t = 1).	self assert: (shape1 == shape2).	self assert: ((node2 getShape: ROBox) color = Color red).	self assert: ((node5 getShape: ROBox) color = Color red).	nodes first announce: (ROMouseLeave new).	self assert: ((Array with: aNode with: node2 with: node5) allSatisfy: [ :n | ((n getShape: ROBox) colorFor: n) == Color white ]).</body><body package="Roassal-Core">testInteraction3	"	self debug: #testInteraction2	"		| nodes firstNode shape secondNode |	view node: 'foo' forIt: [		view interaction highlightWhenOver: [ :e | (Array with: 123) ].		view shape rectangle 			size: 60;			if: true fillColor: Color green.		nodes := view nodes: #(123 456 789) ].	firstNode := nodes first .	secondNode := nodes second .	shape := firstNode getShape: ROShape.		self assert: (shape color roValue: firstNode) = Color green.	firstNode announce: ROMouseEnter.	self assert: (shape color roValue: firstNode) = Color red.	firstNode announce: ROMouseLeave.	self assert: (shape color roValue: firstNode) = Color green.	"----"	self assert: (shape color roValue: firstNode) = Color green.	secondNode announce: ROMouseEnter.	self assert: (shape color roValue: firstNode) = Color red.	secondNode announce: ROMouseLeave.	self assert: (shape color roValue: firstNode) = Color green.</body><body package="Roassal-Core">testInteraction4	"	self debug: #testInteraction4	"		| firstNode shape secondNode nodes1 nodes2 firstShape secondShape |	view node: 'foo' forIt: [		view interaction highlightWhenOver: [ :e | Array with: 123 with: 123  ].		view shape rectangle 			size: 60;			if: true fillColor: Color green.		nodes1 := view nodes: #(456 789) ].	view node: 'bar' forIt: [		view shape rectangle 			size: 60;			if: true fillColor: Color green.		nodes2 := view nodes: #(123) ].		firstNode := nodes1 first .	secondNode := nodes2 first .	firstShape := firstNode getShape: ROBox.	secondShape := secondNode getShape: ROBox.		"----"	self assert: (secondShape color roValue: secondNode) = Color green.	firstNode announce: ROMouseEnter.	self assert: (secondShape color roValue: secondNode) = Color red.	firstNode announce: ROMouseLeave.	self assert: (secondShape color roValue: secondNode) = Color green.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>layout</category><body package="Roassal-Core">testExtensibleSizeWithPaddingGap	| element1 element2 |	view extensibleSizeWithPaddingGap: 0.	element1 := view node: 100 forIt: [ 		view shape rectangle size: 50.		element2 := view node: 10.	].	self assert: element1 padding = (0 @ 0).	self assert: element1 width = element2 width.	self assert: element1 height = element2 height.</body><body package="Roassal-Core">testLayoutAfterRemoveAndAddNode	|result|			view nodes: (1 to: 4).	view gridLayout.	view applyLayout .	result := ((Array new: 4) at: 1 put: ((5@5)); at: 2 put: ((14@5)); at: 3 put: ((5@14)); at: 4 put: ((14@14)); yourself).	self assert: ((view raw elements collect: #position) = result).			view removeNodes: (2 to: 4).		view nodes: (2 to: 4).	view gridLayout.	view applyLayout.	self assert: ((view raw elements collect: #position) = result).</body><body package="Roassal-Core">testSugiyamaLayout 	| nodes result |	view node: 'foo' forIt: [		view node: 'foo' forIt: [			nodes := view nodes: (1 to: 5).			view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 3 -&gt; 5 with: 2-&gt; 5).			view sugiyamaLayout 		]	].	view applyLayout.		result := ((Array new: 5) at: 1 put: ((24.0@3.0) corner: (29.0@8.0)); at: 2 put: ((20.0@28.0) corner: (25.0@33.0)); at: 3 put: ((28.0@28.0) corner: (33.0@33.0)); at: 4 put: ((28.0@53.0) corner: (33.0@58.0)); at: 5 put: ((20.0@53.0) corner: (25.0@58.0)); yourself).	self assert: (nodes collect: #bounds) = result.</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>zOrdering</category><body package="Roassal-Core">testOverlappingObjects	| canvas |	view shape rectangle size: 30.	view node: 'foo'.	view shape circle size: 30; fillColor: Color blue.	view node: 'bar'.	view noLayout.		canvas := ROTracingCanvas new.	view raw drawOn: canvas.		self assert: canvas trace =	 #(	#(#frameAndFillRectangle: '(0@0) corner: (40@30)' 'Color white' 0 'Color white') 		#(#frameAndFillRectangle: '(0@0) corner: (30@30)' 'Color white' 1 'Color black') 		#(#fillOval: '(0@0) corner: (30@30)' 1 'Color blue'))</body><body package="Roassal-Core">testZOrderingAndNesting"(ROZOrdering new						at: [:edge | ((edge source depth * 2) max: (edge target depth * 2)) - 1 ] put: #isEdge;						at: [ :element | element depth * 2 ] put: #isNotEdge)."		| map |	view node: 1 forIt: [ view node: 11 ].	view node: 2 forIt: [ view node: 22 ].	view node: 3 forIt: [ view node: 33 ].	view edgeFromAssociation: 11 -&gt; 33.		map := OrderedCollection new		add: 1 -&gt; 2;		add: 11 -&gt; 4;		add: 2 -&gt; 2;		add: 22 -&gt; 4;		add: 3 -&gt; 2;		add: 33 -&gt; 4;		yourself.			self assert: (view elementFromModel: 11) parent == (view raw elementFromModel: 1).	self assert: view zOrdering numberOfEntries = 2.		map do: [ :assoc | 		self assert: (view elementFromModel: assoc key) zIndex = assoc value ].		self assert: (view edgeFromModel: (11 -&gt; 33)) zIndex = 3	</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>constraining inner nodes</category><body package="Roassal-Core">testConstrainingInnerNodes	node := view node: 1 forIt: [  		view nodes: (1 to: 9).		view gridLayout ].		view horizontalLineLayout 		on: ROLayoutEnd 		do: [ :event |  view raw elementsDo: [ :el | el resizeStrategy: (ROFixedSizedParent instance) ] ].		view applyLayout.		self assert: node extent =  (33@33).	node elements first translateBy: 100 @ 100.		"The size does not change"	 self assert: node extent =  (33@33).</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>open</category><body package="Roassal-Core">testOpenInWindowSized	[ window := view openInWindowSized: 400@30.	 self assert: window extent &gt;= (400@30).]		ensure: [ window delete ]</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>labels</category><body package="Roassal-Core">testHomogenerizeShapeOf	| shape1 shape2 el |	shape2 := ROBox new.	shape2 extent: 20 @ 20.	shape1 := ROBox new + shape2.	el := ROElement new.	el + shape1.	self assert: el extent = (5 @ 5).		view homogenerizeShapeOf: el.	self assert: el extent = (20 @ 20).</body><body package="Roassal-Core">testRectangleWithText	view shape rectangle withText: 'Hello'.	node := view node: #one.	view applyLayout.		self assert: node bounds extent &gt; (5 @ 5)</body></methods><methods><class-id>Roassal.ROMondrianViewBuilderTest</class-id> <category>statusbar</category><body package="Roassal-Core">testCreateStatusBar	self		deny: (view stack hasAttribute: #statusBar).	self assert: view stack numberOfElements = 0.	view interaction createStatusBarIfNecessary.	self		assert: (view stack hasAttribute: #statusBar).	self assert: view stack numberOfElements = 1</body><body package="Roassal-Core">testDefaultStatusBar	| nodes statusBarElement |	statusBarElement := view interaction statusBar.	nodes := view nodes: (1 to: 4).	self assert: view stack numberOfElements = 1.	self assert: view stack firstView numberOfElements = 4.	self assert: (statusBarElement getShape: ROLabel) text = ''.	nodes first announce: ROMouseEnter.	self assert: (statusBarElement getShape: ROLabel) text = '1'</body><body package="Roassal-Core">testNoStatusBar	view		nodes: (1 to: 4).	self assert: view stack numberOfElements = 0.	self assert: view stack firstView numberOfElements = 4</body><body package="Roassal-Core">testStatusBar	| nodes statusBar |	statusBar := view interaction				statusBar: [ :aNumber | aNumber + 10 ].	nodes := view				nodes: (1 to: 4).	self assert: view stack numberOfElements = 1.	self assert: view stack firstView numberOfElements = 4.	nodes first announce: ROMouseEnter.	self assert: (statusBar getShape: ROLabel) text = '11'.	nodes first announce: ROMouseLeave.	self assert: (statusBar getShape: ROLabel) text = '11'.	nodes second announce: ROMouseEnter.	self assert: (statusBar getShape: ROLabel) text = '12'</body><body package="Roassal-Core">testStatusBarWithEdge	| nodes statusBar edges |	statusBar := view interaction				statusBar: [ :t4 | t4 + 10].	nodes := view				nodes: (1 to: 4).					view interaction		statusBar: [ :assoc | assoc key + 20].	edges := view				edgesFromAssociations: (Array with: 1 -&gt; 2).	self assert: view stack numberOfElements = 1.	self assert: view stack firstView numberOfElements = 5.	nodes first announce: ROMouseEnter.	self assert: (statusBar getShape: ROLabel) text = '11'.	edges first announce: ROMouseEnter.	self assert: (statusBar getShape: ROLabel) text = '21'</body></methods><methods><class-id>Roassal.ROPopupMondrianTest</class-id> <category>popupText per default</category><body package="Roassal-Core">testInteractionAndPopup2	| nodes node |	view shape rectangle size: 15.	nodes := view nodes: (Array with: 10).		node := nodes first.	self assert: (node is: RODraggable).	self deny: (node is: ROMenuActivable).	self assert: (node is: ROPopupView)	</body><body package="Roassal-Core">testInteractionAndPopup3	| nodes node |	view interaction action: #browse; noPopup.	view shape rectangle size: 15.	nodes := view nodes: (Array with: 10).		node := nodes first.	self assert: (node is: RODraggable).	self assert: (node is: ROMenuActivable).	self deny: (node is: ROPopupView)	</body><body package="Roassal-Core">testInteractionAndPopup4	| nodes node node1 node2 |	view interaction action: #browse; noPopup.	view shape rectangle size: 15.	node1 := view node: 10.	node2 := view node: 20.		self assert: (node1 is: RODraggable).	self assert: (node1 is: ROMenuActivable).	self deny: (node1 is: ROPopupView).	self assert: (node2 is: RODraggable).	self deny: (node2 is: ROMenuActivable).	self assert: (node2 is: ROPopupView)	</body><body package="Roassal-Core">testInteractionAndPopup5	| node1 node2 |	view interaction action: #browse; noPopup.	view shape rectangle size: 15.	node1 := view node: 10 forIt: [		node2 := view node: 20 ].		self assert: (node1 is: RODraggable).	self assert: (node1 is: ROMenuActivable).	self deny: (node1 is: ROPopupView).	self assert: (node2 is: RODraggable).	self deny: (node2 is: ROMenuActivable).	self assert: (node2 is: ROPopupView)	</body></methods><methods><class-id>Roassal.ROPopupMondrianTest</class-id> <category>running</category><body package="Roassal-Core">setUp	view := ROMondrianViewBuilder new.</body></methods><methods><class-id>Roassal.ROPopupMondrianTest</class-id> <category>tests</category><body package="Roassal-Core">testIfPopupText	| nodes targetView |	view interaction 		if: #odd popupText: 'hello';		if: #even popupText: 'world'.	nodes := view nodes: #(1 2 3).		targetView := view stack.		self assert: (nodes allSatisfy: [ :node | node is: ROPopupView ]).		self assert: targetView numberOfElements isZero.	 	nodes first announce: ROMouseEnter.	self assert: targetView numberOfElements = 1.	nodes first announce: ROMouseLeave.	self assert: targetView numberOfElements isZero.	nodes third announce: ROMouseEnter.	self assert: targetView numberOfElements = 1.	nodes third announce: ROMouseLeave.	self assert: targetView numberOfElements isZero.			nodes second announce: ROMouseEnter.	self assert: targetView numberOfElements = 1.	nodes second announce: ROMouseLeave.	self assert: targetView numberOfElements isZero.</body><body package="Roassal-Core">testInteractionAndPopup	| nodes node |	view interaction action: #browse.	view shape rectangle size: 15.	nodes := view nodes: (Array with: 10).		node := nodes first.	self assert: (node is: RODraggable).	self assert: (node is: ROMenuActivable).	self assert: (node is: ROPopupView)	</body><body package="Roassal-Core">testNoTwoPopupAtTheSameTime	| nodes |	nodes := view nodes: #(1 2).		"We have done nothing so far, so there is only two nodes"	self assert:  view raw numberOfElements = 2.	self assert:  view stack numberOfElements = 0.		"We enter one node, a popup appears in the stack"	nodes first announce: ROMouseEnter.	self assert:  view raw numberOfElements = 2.	self assert:  view stack numberOfElements = 1.		"We enter the second node, a popup appears, but the first popup should diseapear"	nodes second announce: ROMouseEnter.	self assert:  view raw numberOfElements = 2.	self assert:  view stack numberOfElements = 1.</body></methods><methods><class-id>Roassal.ROLayoutSteppingTest</class-id> <category>tests</category><body package="Roassal-Core">testLayout	| classesToExclude |	classesToExclude := OrderedCollection new.	classesToExclude 		add: ROTreeMapLayout;		add: RONullLayout;		add: RONarrowRadialTreeLayout;		add: ROForceBasedLayout;		add: ROSugiyamaLayout;		add: ROVerticalLaggeredTree;		add: RORectanglePackLayout;		add: RORectanglePackingLayout.		(Smalltalk includesKey: #ROGraphVizLayout)		ifTrue: [ classesToExclude add: (Smalltalk at: #ROGraphVizLayout) ].		(ROLayout withAllSubclasses copyWithoutAll: classesToExclude) do: [ :cls | 		cls isNotAbstract ifTrue: [ self assertLayout: cls new ] ]</body></methods><methods><class-id>Roassal.ROLayoutSteppingTest</class-id> <category>running</category><body package="Roassal-Core">setUp	elements := ROElement forCollection: (1 to: ROLayout new iterationsToSendEvent * 3).	view := ROView new.	view addAll: elements.	</body></methods><methods><class-id>Roassal.ROLayoutSteppingTest</class-id> <category>converting</category><body package="Roassal-Core">assertLayout: layout	| events |	events := OrderedCollection new.	layout on: ROLayoutStep do: [ :evt | events add: evt ].	self assert: events size = 0.	layout on: elements.	self assert: events size = (elements size // layout iterationsToSendEvent).	self assert: events size &gt; 0.	self assert: (events allSatisfy: [ :evt | evt maxInterations = elements size ]).	self assert: (events collect: #currentIteration) asArray = #(100 200 300)</body></methods><methods><class-id>Roassal.ROConstraint class</class-id> <category>public</category><body package="Roassal-Core">constraintInItsParent: element		element		on: ROElementTranslated		do: [ :event | 			element translateTo: ((element position max: (0 @ 0)) min: (element parent extent - element extent)) ]</body><body package="Roassal-Core">stick: element above: anotherElement	self move: element above: anotherElement.	anotherElement		on: ROElementEvent		do: [ :event | self move: element above: anotherElement ]</body><body package="Roassal-Core">stick: element below: anotherElement	self move: element below: anotherElement.	anotherElement		on: ROElementEvent		do: [ :event | self move: element below: anotherElement ].	</body><body package="Roassal-Core">stick: element between: el1 and: el2	self move: element between: el1 and: el2.	el1		on: ROElementEvent		do: [ :event | self move: element between: el1 and: el2. ].	el2		on: ROElementEvent		do: [ :event | self move: element between: el1 and: el2. ].</body><body package="Roassal-Core">stick: element onTheCenterOf: anotherElement	self move: element onTheCenterOf: anotherElement.	anotherElement		on: ROElementEvent		do: [ :event | self move: element onTheCenterOf: anotherElement ].</body><body package="Roassal-Core">stick: element onTheLeftOf: anotherElement	self move: element onTheLeftOf: anotherElement.	anotherElement		on: ROElementEvent		do: [ :event | self move: element onTheLeftOf: anotherElement ].</body><body package="Roassal-Core">stick: element onTheRightOf: anotherElement	self move: element onTheRightOf: anotherElement.	anotherElement		on: ROElementEvent		do: [ :event | self move: element onTheRightOf: anotherElement ].</body></methods><methods><class-id>Roassal.ROConstraint class</class-id> <category>util</category><body package="Roassal-Core">move: element above: anotherElement	^ element translateTo: anotherElement position - (0 @ element height)</body><body package="Roassal-Core">move: element below: anotherElement	^ element translateTo: anotherElement position + (0 @ anotherElement height)</body><body package="Roassal-Core">move: element between: el1 and: el2	^ element translateTo: ((el1 position + el2 position) / 2)</body><body package="Roassal-Core">move: element onTheCenterOf: anotherElement	|p|	p := ((anotherElement width - element width) /2) @ ((anotherElement height - element height ) /2).	^ element translateTo: anotherElement position + p.</body><body package="Roassal-Core">move: element onTheLeftOf: anotherElement	^ element translateTo: anotherElement position - (element width @ 0)</body><body package="Roassal-Core">move: element onTheRightOf: anotherElement	^ element translateTo: anotherElement position + (anotherElement width @ 0)</body></methods><methods><class-id>Roassal.ROConstraint class</class-id> <category>public - window</category><body package="Roassal-Core">stickAtBottomRightOfTheWindow: element 	self moveAtBottomRightOfTheWindow: element.	element view		on: ROWindowResized		do: [ :event | self moveAtBottomRightOfTheWindow: element ]</body><body package="Roassal-Core">stickAtCenterOfTheWindow: element 	self moveAtCenterOfTheWindow: element.	element view		on: ROWindowResized		do: [ :event | self moveAtCenterOfTheWindow: element ]</body><body package="Roassal-Core">stickAtTheBottomOfTheWindow: element 	self moveAtTheBottomOfTheWindow: element.	element view		on: ROWindowResized		do: [ :event | self moveAtTheBottomOfTheWindow: element ]</body><body package="Roassal-Core">stickAtTheTopRightOfTheWindow: element 	self moveAtTheTopRightOfTheWindow: element.	element view		on: ROWindowResized		do: [ :event | self moveAtTheTopRightOfTheWindow: element ]</body><body package="Roassal-Core">stickToBottomLeft: element 	^ self stickToBottomLeft: element offset: 0</body><body package="Roassal-Core">stickToBottomLeft: element offset: aNumber	element translateTo: (aNumber @ element view camera windowSize y - element height - aNumber).	element view		on: ROWindowResized		do: [ :event | element translateTo: (aNumber @ (event extent y - element height - aNumber)) ].</body><body package="Roassal-Core">stickToTopRight: element	^ self stickToTopRight: element offset: 0</body><body package="Roassal-Core">stickToTopRight: element offset: aNumber	element translateTo: ((element view camera windowSize x - element width) - aNumber @ aNumber).	element view		on: ROWindowResized		do: [ :event | element translateTo:  ((event extent x - element width) - aNumber @ aNumber)].</body></methods><methods><class-id>Roassal.ROConstraint class</class-id> <category>util - window</category><body package="Roassal-Core">moveAtBottomRightOfTheWindow: element	| windowSize |	windowSize := element view camera windowSize.	element translateTo: windowSize - (element extent)</body><body package="Roassal-Core">moveAtCenterOfTheWindow: element	| windowSize |	windowSize := element view camera windowSize.	element translateTo: ((windowSize / 2) asIntegerPoint - (element bounds extent / 2) asIntegerPoint )</body><body package="Roassal-Core">moveAtTheBottomOfTheWindow: element	| windowSize |	windowSize := element view camera windowSize.	element translateTo: (0 @ (windowSize y - element height))</body><body package="Roassal-Core">moveAtTheTopRightOfTheWindow: element	| windowSize |	windowSize := element view camera windowSize.	element translateTo: ((windowSize x - element width) @ 0)</body></methods><methods><class-id>Roassal.ROVWVisual</class-id> <category>accessing</category><body package="Roassal-VWSpecific">elementAtRealPosition: position	"evt contains a real position, since this is where the user click on the screen"		^ view elementAtRealPosition: position"	^ view elementAt: (view camera realToVirtualPoint: position)"		"| r |	view viewDo: [ :v | 		r := v localElementAt: (v camera realToVirtualPoint: position).		(r ~~ v) ifTrue: [ ^ r ]].	^ view"</body><body package="Roassal-VWSpecific">elementForRealPosition: position	"evt contains a real position, since this is where the user click on the screen"		^ view elementAtRealPosition: position"	^ view elementAt: (view camera realToVirtualPoint: position)"		"| r |	view viewDo: [ :v | 		r := v localElementAt: (v camera realToVirtualPoint: position).		(r ~~ v) ifTrue: [ ^ r ]].	^ view"</body><body package="Roassal-VWSpecific">extent	^extent</body><body package="Roassal-VWSpecific">extent: v		self bounds: (0@0 corner: v).	view windowSize: v.	"canvas extent: v."</body><body package="Roassal-VWSpecific">view	^ view</body></methods><methods><class-id>Roassal.ROVWVisual</class-id> <category>changing</category><body package="Roassal-VWSpecific">changed	self invalidate."	self container ifNotNil: [		self displayOn: self container graphicsContext copy.]"</body><body package="Roassal-VWSpecific">changedView	self getController.	controller := ROController view: self view visual: self.	self changed.</body></methods><methods><class-id>Roassal.ROVWVisual</class-id> <category>displaying</category><body package="Roassal-VWSpecific">canvas	"Return the canvas used by myself. The canvas knows how to draw boxes, lines, ..."	| c |	c := view canvasForRealSize: self bounds extent.	c extent: self extent.	^ c</body><body package="Roassal-VWSpecific">displayOn: aGraphicsContext	|e|	canvas := ROVWCanvas canvas: canvas camera: view camera.	canvas canvas: aGraphicsContext.	e := self clippingBox corner + self clippingBox origin.	canvas extent: e.	view drawOn: canvas."	canvas := ROVWCanvas onCamera: view camera. 	canvas canvas: aGraphicsContext.	canvas extent: self extent.	view drawOn: canvas."</body><body package="Roassal-VWSpecific">setView: aView	view := aView.	extent := view camera extent.</body></methods><methods><class-id>Roassal.ROVWVisual</class-id> <category>bounds accessing</category><body package="Roassal-VWSpecific">preferredBounds	"Answer a Rectangle that represents the receiver's preferred bounding	rectangle."	^self view camera bounds</body></methods><methods><class-id>Roassal.ROVWVisual</class-id> <category>private</category><body package="Roassal-VWSpecific">getController	controller ifNil: [		controller := ROController view: self view visual: self ].	^controller</body></methods><methods><class-id>Roassal.ROVWVisual class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">on: aRoView	^ self new setView: aRoView; yourself</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>aspects</category><body package="Roassal-VWSpecific">code	"Return a value holder"	^code isNil		ifTrue: 			[ code := self defaultSourceCode asValue]		ifFalse: [ code ]</body><body package="Roassal-VWSpecific">drawing	^drawing ifNil: 			[ drawing := ROPlatform current hostVisualElement new ]</body><body package="Roassal-VWSpecific">drawingWrapper	^drawingWrapper ifNil: [		self defineView.		drawingWrapper := Wrapper on: self drawing	]</body><body package="Roassal-VWSpecific">isCairoCanvas	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^isCairoCanvas isNil		ifTrue:			[isCairoCanvas := true asValue]		ifFalse:			[isCairoCanvas]</body><body package="Roassal-VWSpecific">platform	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^platform isNil		ifTrue:			[platform := nil asValue]		ifFalse:			[platform]</body><body package="Roassal-VWSpecific">resetDrawing	drawing := nil</body><body package="Roassal-VWSpecific">sourceCode	"Return a string"	^ self code value</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>private</category><body package="Roassal-VWSpecific">changedView	self drawing changedView.</body><body package="Roassal-VWSpecific">defineView	view := ROViewStack new.	self drawing setView: view.	self drawing changedView.	self drawing view windowSize: self mainWindow bounds extent.</body><body package="Roassal-VWSpecific">displayView	| block |	moView := ROMondrianViewBuilder new.	view := (ROViewStack new)				addView: moView raw;				title: moView raw title.	moView stack: view.	block := self getCompiledBlockFromSource.	block value: moView.	self populateMenuOn: moView.	moView applyLayout.	self drawing setView: view.	view canvasForRealSize: drawing bounds extent.	view windowSize: self drawing bounds extent.		self changedView.</body><body package="Roassal-VWSpecific">getCompiledBlockFromSource	^Compiler		evaluate: '[:view | ' , self code value , ']'		for: nil		in: Roassal		notifying: nil		logged: false</body><body package="Roassal-VWSpecific">license	^ 'Copyright (c) 2011-2012 ObjectProfile.com.Roassal is distributed under the MIT licensePermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'</body><body package="Roassal-VWSpecific">roassalDescription	^ 'Roassal graphically renders objects using short and expressive Smalltalk expressions. A large set of interaction are offered for a better user experience. Painting, brushing, interconnecting, zooming, drag and dropping will just make you more intimate with any arbitrary object model.Information about Roassal may be found online: http://objectprofile.com/pier/Products/RoassalFollow us on Twitter: @ObjectProfile'</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>populate menu</category><body package="Roassal-VWSpecific">exampleButtonOn: aview	| v |	aview addMenu: 'Example...' callBack: [ :stack |		v := ROView new.		v @RODraggable @ RODraggableWithVelocity.		self showExamplesOnView: v.		stack replaceFirstBy: v.		v translateBy: 0@30.	].</body><body package="Roassal-VWSpecific">exportButtonOn: aview		aview addMenu: 'Export' callBack: [ :stack | 		| exporters  keysList  menuItem |		exporters := SortedCollection  sortBlock: [ :a1 :a2 | a1 key &lt; a2 key ].		keysList := SortedCollection sortBlock: [ :a1 :a2 | a1 &lt; a2 ].		ROExportCommand commands do: [:cm | exporters add: cm name -&gt; cm. keysList add: cm name printString ] .		menuItem := Refactory.Browser.BrowserApplicationModel new 					choose: 'Find an element'					fromList: keysList					values: exporters					lines: 20					cancel: [nil].		menuItem isNil not ifTrue: [ 			menuItem value executeOn: aview raw.		]	]</body><body package="Roassal-VWSpecific">findButtonOn: aview	| menuItem |	aview addMenu: 'Find...' callBack: [ :stack | 				menuItem := Refactory.Browser.BrowserApplicationModel new 					choose: 'Find an element'					fromList: (stack firstView elements collect: [ :v | v model ])					values: (stack firstView elements)					lines: 20					cancel: [nil].		menuItem notNil ifTrue: [ 			ROFocusView on: menuItem ] ].</body><body package="Roassal-VWSpecific">infoButtonOn: aview	aview addMenu: 'Info...' callBack: [ :stack |		| v lbl1 lbl2 |		v := ROView new.		v add: (lbl1 := ((ROElement on: self roassalDescription) + (ROLabel new color: Color gray))).				v add: (lbl2 := ((ROElement on: self license) + (ROLabel new color: Color gray))).						ROVerticalLineLayout on: (Array with: lbl1 with: lbl2).				stack replaceFirstBy: v.				v translateBy: 0@30.			].</body><body package="Roassal-VWSpecific">populateMenuOn: aview"	self serializeButtonOn: aview."	self exportButtonOn: aview.	self zoomInButtonOn: aview.	self zoomOutButtonOn: aview.	self findButtonOn: aview.	self exampleButtonOn: aview.	self infoButtonOn: aview.	"We also do a small scrolling to not have the buttons over the nodes"	aview raw translateBy: self offsetForView</body><body package="Roassal-VWSpecific">serializeButtonOn: aview	| menuItem |	aview addMenu: 'Save/Open' callBack: [ :stack | 		| commands keysList saveCommand loadCommand |		commands := SortedCollection  sortBlock: [ :a1 :a2 | a1 key &lt; a2 key ].		keysList := SortedCollection sortBlock: [ :a1 :a2 | a1 &lt; a2 ].		saveCommand := ROSaveViewCommand on: aview.		loadCommand := ROLoadViewCommand new.		commands add: ('Save view as...' -&gt; [saveCommand execute] ).		keysList add: 'Save view as...'.		commands add: ('Open...' -&gt; [loadCommand execute. loadCommand view open]).				keysList add: 'Open...'.		menuItem := Refactory.Browser.BrowserApplicationModel new 					choose: 'Find an element'					fromList: keysList					values: commands					lines: 20					cancel: [nil].		menuItem isNil not ifTrue: [ 			menuItem value value.		]				]</body><body package="Roassal-VWSpecific">zoomInButtonOn: aview	aview addMenu: 'Zoom in' callBack: [ :stack | ROZoomInMove new on: stack firstView ].</body><body package="Roassal-VWSpecific">zoomOutButtonOn: aview	aview addMenu: 'Zoom out' callBack: [ :stack | ROZoomOutMove new on: stack firstView ].</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>interface opening</category><body package="Roassal-VWSpecific">postBuildWith: aBuilder 	self mainWindow label: 'Roassal Easel'.	view canvasForRealSize: (drawing bounds extent).	aBuilder window keyboardProcessor keyboardHook: [:kbEvent :c | self drawing getController processKeyboardEvent: kbEvent].</body><body package="Roassal-VWSpecific">postOpenWith: aBuilder 	self show.	builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new.</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>interface closing</category><body package="Roassal-VWSpecific">delete	self closeRequest</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>examples</category><body package="Roassal-VWSpecific">selectExampleNamed: aSymbol	| sourceCode completeSourceCode |		"Maybe something more pretty"	sourceCode := (ROVWMondrianExample compiledMethodAt: aSymbol ifAbsent: [ ROMondrianExample &gt;&gt; aSymbol ]) getSource.	sourceCode := sourceCode lines allButFirst inject: '' into: [ :sum :elo | sum , elo, (String with: Character cr) ].	completeSourceCode := sourceCode.	"code := completeSourceCode asValue."	code setValue: completeSourceCode.	(self widgetAt: #TextEditor1) editText: code value.	self displayView.</body><body package="Roassal-VWSpecific">showExamplesOnView: aview	| elements element examples title specialCategories selectors |	elements := OrderedCollection new.	specialCategories := OrderedCollection new.	specialCategories add: #'software visualization'.	specialCategories add: #tutorial.	ROMondrianExample organization  categories do: [ :cat | 		element := ROElement new.		element + ROBorder.		title := (ROElement on: cat printString).		title + (ROLabel new color: Color red).		element add: title.				examples := OrderedCollection new.		(specialCategories includes: cat )			ifTrue:[selectors := ROVWMondrianExample organization listAtCategoryNamed: cat] 			ifFalse:[selectors := ROMondrianExample organization listAtCategoryNamed: cat].		(selectors			select: [ :aSym | aSym endsWith: #'On:' ]) do: [ :exampleName |			| label |			label := ROElement on: exampleName.			label + ROLabel.			label @ ROLightlyHighlightable.			label on: ROMouseClick do: [ :event | self selectExampleNamed: event element model ]. 			examples add: label		].		element addAll: examples.		ROVerticalLineLayout on: ((Array with: title), examples).		title translateBy: 20@0.		elements add: element.	].	aview @ RODraggable.	aview addAll: elements.	ROGridLayout new		lineItemsCount:4;		 on: elements.</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>actions</category><body package="Roassal-VWSpecific">canvasTypeChanged	drawingWrapper component release.	drawing := nil.	self defineView.	drawingWrapper component: drawing.	self displayView.		"self drawing setView: view.	self drawing changedView."</body><body package="Roassal-VWSpecific">show	"Invoked when we press generate view in the easel"	self displayView.</body><body package="Roassal-VWSpecific">sourceCode: aString	"Set the source code"	 code := aString asValue</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>platform selection</category><body package="Roassal-VWSpecific">defaultPlatform	^ 'VW'</body><body package="Roassal-VWSpecific">selectPlatformMenu	| mb |	mb := MenuBuilder new.	ROPlatform allSubclasses do: [ :cls | 		mb add: cls new name -&gt; cls new name ].	^mb menu</body><body package="Roassal-VWSpecific">setPlatform	Transcript show: 'changing rendering to ', platform value; cr.	self resetDrawing.	ROPlatform setCurrent: platform value.	self canvasTypeChanged.</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>initialize-release</category><body package="Roassal-VWSpecific">initialize	super initialize.	platform := self defaultPlatform asValue.	platform onChangeSend: #setPlatform to: self.</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>configuration</category><body package="Roassal-VWSpecific">defaultSourceCode	^ 'view shape rectangle size: 20.view nodes: (1 to: 20).view shape line.view edgesFrom: [ :i | i \\ 3 ].view treeLayout.'</body><body package="Roassal-VWSpecific">offsetForView	"We also do a small scrolling to not have the buttons over the nodes"	^0 @ 30</body></methods><methods><class-id>Roassal.ROVWEasel</class-id> <category>accessing</category><body package="Roassal-VWSpecific">view	^ view</body></methods><methods><class-id>Roassal.ROVWEasel class</class-id> <category>images</category><body package="Roassal-VWSpecific">objectProfileIcon	^ Roassal.RoassalIcons objectProfileMediumRoassal</body><body package="Roassal-VWSpecific">roassalIcon	^ Roassal.RoassalIcons roassalIconMedium</body></methods><methods><class-id>Roassal.ROVWCanvas</class-id> <category>hooks</category><body package="Roassal-VWSpecific">drawString: aByteString at: aPoint 	"Render a string at a given position. No specification about the font is given. Use the default then"	"Implementation example:		canvas drawString: aByteString at:  (self virtualToRealPoint: aPoint) font: nil color: Color black	"	"|n|	n := 1.	aByteString linesDo:[:line |		canvas displayString: line at: (aPoint x @ (aPoint y * n)).		n := n +1.	]."	nativeCanvas displayString: aByteString at: ((self virtualToRealPoint: aPoint) + (1@10)).</body><body package="Roassal-VWSpecific">drawString: aByteString at: aPoint color: color	"Render a colored string at a given position. No specification about the font is given. Use the default then"	"Implementation example:			canvas drawString: aByteString at:  (self virtualToRealPoint: aPoint) font: nil color: color	"	"|n rp|	canvas paint: color.	n := 1.	rp := (self virtualToRealPoint: aPoint).	aByteString linesDo:[:line |		canvas displayString: line at: (rp x @ (rp y + -5*n)).		n := n +1.	]."	nativeCanvas paint: color.	nativeCanvas displayString: aByteString at: ((self virtualToRealPoint: aPoint) + (1@10)).</body><body package="Roassal-VWSpecific">drawString: aByteString at:  p font: f color: color	"Render a colored string at a given position using a particular font."	"Implementation example:		canvas drawString: aByteString at:  (self virtualToRealPoint: p) font: f color: color	"	nativeCanvas font: f.	nativeCanvas paint: color.	nativeCanvas displayString: aByteString at: ((self virtualToRealPoint: p) + (1@10)) .</body><body package="Roassal-VWSpecific">fillOval: aRectangle color: aColor borderWidth: aSmallInteger borderColor: aColor4 	"Render an oval"	"Implementation example		canvas		fillOval: (self virtualToRealRectangle: aRectangle)  color: aColor borderWidth: aSmallInteger borderColor: aColor4 	"	nativeCanvas paint: aColor."	canvas displayDotOfDiameter: diam at: (self virtualToRealRectangle: aRectangle) bounds origin."	nativeCanvas displayWedgeBoundedBy: (self virtualToRealRectangle: aRectangle) startAngle: 0 sweepAngle: 360.	nativeCanvas lineWidth: aSmallInteger.	nativeCanvas paint: aColor4.	"canvas displayGeneralArcBBoxOrigin: (self virtualToRealRectangle: aRectangle) bounds origin extent: (self virtualToRealRectangle: aRectangle) corner startAngle: 0 sweepAngle: 360."	nativeCanvas displayArcBoundedBy: (self virtualToRealRectangle: aRectangle) startAngle: 0 sweepAngle: 360.</body><body package="Roassal-VWSpecific">fillRectangle: aRectangle color: fillColor 	"Render a rectangle"	"Implementation example			canvas fillRectangle: (self virtualToRealRectangle: aRectangle) color: fillColor	"	nativeCanvas paint: fillColor.	nativeCanvas displayRectangle: (self virtualToRealRectangle: aRectangle).</body><body package="Roassal-VWSpecific">form	"Return a bitmap"	"Implementation example		^ canvas form	"	^form</body><body package="Roassal-VWSpecific">frameAndFillRectangle: aRectangle fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor	"Render a framed rectangle. Implementation example:	canvas 		frameAndFillRectangle: (self virtualToRealRectangle: aRectangle) fillColor: fillColor borderWidth: aSmallInteger borderColor: aColor.	"	| a |	nativeCanvas paint: fillColor.	nativeCanvas displayRectangle: (self virtualToRealRectangle: aRectangle).	nativeCanvas lineWidth: aSmallInteger.	nativeCanvas paint: aColor.	(aSmallInteger = 0) ifFalse: [		a := (Array new: 5)				at: 1 put: (self virtualToRealPoint: aRectangle topLeft);				at: 2 put: (self virtualToRealPoint: aRectangle topRight);				at: 3 put: (self virtualToRealPoint: aRectangle bottomRight);				at: 4 put: (self virtualToRealPoint: aRectangle bottomLeft);				at: 5 put: (self virtualToRealPoint: aRectangle topLeft);				yourself.		nativeCanvas displayPolyline: a	]		"canvas displayRectangularBorder: (self virtualToRealRectangle: aRectangle)."</body><body package="Roassal-VWSpecific">line: aPoint to: aPoint2 width: aSmallInteger color: aColor 	"Draw a line between two points"	"Implementation example		canvas line: (self virtualToRealPoint: aPoint) to: (self virtualToRealPoint: aPoint2) width: aSmallInteger color: aColor.	"	nativeCanvas lineWidth: aSmallInteger. 	nativeCanvas paint: aColor.	nativeCanvas displayLineFrom: (self virtualToRealPoint: aPoint) to: (self virtualToRealPoint: aPoint2).</body><body package="Roassal-VWSpecific">paintImage: aForm at: aPoint	"Render a bitmap on screen"	"Implementation example		canvas paintImage: aForm at:  (self virtualToRealPoint: aPoint) 	"	"canvas displayImage: aForm at: aPoint"	nativeCanvas displayPixelArray: aForm at: (self virtualToRealPoint: aPoint)</body></methods><methods><class-id>Roassal.ROVWCanvas</class-id> <category>accessing</category><body package="Roassal-VWSpecific">form: anObject	form := anObject</body></methods><methods><class-id>Roassal.ROVWCanvas</class-id> <category>cairo</category><body package="Roassal-VWSpecific">createPath: block	| p |	self canvas newCairoContextWhile: [:cr | 		block value: cr.		p := cr copyPath ].	^ p</body><body package="Roassal-VWSpecific">drawOn: aCairoContext 	path isNil ifTrue: [ ^ self ].	paint isNil ifTrue: [^ self ].	aCairoContext appendPath: path.	paint drawOn: aCairoContext.</body><body package="Roassal-VWSpecific">renderPath	self canvas newCairoContextWhile: [:cr | self drawOn: cr ].</body><body package="Roassal-VWSpecific">setPaint: aPaint	paint := aPaint.</body><body package="Roassal-VWSpecific">setPath: aPath	path := aPath.</body></methods><methods><class-id>Roassal.ROVWCanvas class</class-id> <category>hooks</category><body package="Roassal-VWSpecific">imageFromROView: aRoView	|b im canvas rocanvas |	b := aRoView bitmap.	im := CachedImage on: ( Image extent: b extent depth: b depth palette: (MappedPalette whiteBlack)).	rocanvas := ROVWCanvas onCamera:  aRoView camera.	canvas := ScreenGraphicsContext on: im asRetainedMedium.	rocanvas canvas: canvas.	aRoView drawOn: rocanvas.	^im asRetainedMedium asImage.</body><body package="Roassal-VWSpecific">onCamera: camera	| form canvas c pixMap |	form := Pixmap extent:  camera realExtent"  (camera virtualToRealPoint: camera realExtent)".	pixMap := form asRetainedMedium.	canvas := ScreenGraphicsContext on: pixMap.	c := (self canvas: canvas camera: camera).	c form: form.	^ c</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>interations</category><body package="Roassal-Core">addAndRemoveInteractivelyOn: view	|closed|	closed := true.	view shape rectangle withText size: 40.	view interaction 		item: 'open/close' action: [  						closed 				ifTrue: [					view shape rectangle withText size: 40.					view nodes: (2 to: 4).					view shape arrowedLine.					view edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;4); yourself) from: #key to: #value. 					view treeLayout.					view applyLayout.					closed := false.]				ifFalse: [ 						view removeNodesAndEdgesOf: (2 to: 4).					view treeLayout.					view applyLayout.					closed := true.					 ]							].			view node: 1.</body><body package="Roassal-Core">addingColoredNameOn: view"Hovering the mouse on a class give a name to its superclass"view shape rectangle size: 10. view interaction on: ROMouseEnter do: [ :event |  	| elSuperclass |	elSuperclass := view elementFromModel: event model superclass.	elSuperclass notNil 		ifTrue: [ ROAddName new color: Color red; toElement: elSuperclass ] ]. view interaction on: ROMouseLeave do: [ :event | 	| elSuperclass |	elSuperclass := view elementFromModel: event model superclass.	elSuperclass notNil 		ifTrue: [ ROAddName removeFrom: elSuperclass ] ]. view nodes: Collection withAllSubclasses.view edgesFrom: #superclass.view treeLayout.</body><body package="Roassal-Core">addingNameOn: view"Hovering the mouse on a class give a name to its superclass"view shape rectangle size: 10. view interaction on: ROMouseEnter do: [ :event |  	| elSuperclass |	elSuperclass := view elementFromModel: event model superclass.	elSuperclass notNil 		ifTrue: [ ROAddName toElement: elSuperclass ] ]. view interaction on: ROMouseLeave do: [ :event | 	| elSuperclass |	elSuperclass := view elementFromModel: event model superclass.	elSuperclass notNil 		ifTrue: [ ROAddName removeFrom: elSuperclass ] ]. view nodes: Collection withAllSubclasses.view edgesFrom: #superclass.view treeLayout.</body><body package="Roassal-Core">clickToFocus	"	self new clickToFocus	"		| builder | 	builder := ROMondrianViewBuilder titled: 'Finding nodes'.	self clickToFocusOn: builder.		builder open</body><body package="Roassal-Core">clickToFocusOn: view			view interaction 		on: ROMouseClick do:  [ :event |  			ROFocusView on: event element ].	view shape rectangle size: 30.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-Core">dynamicEdgeOn: view	view interaction 		dynamicEdgeToAll: [ :model | (Array with: 10 with: 20 with: 30) copyWithout: model ]		using: (ROLine arrowed color: Color red).	view shape rectangle size: 20.	view nodes: (Array with: 10 with: 20 with: 30).	view circleLayout.</body><body package="Roassal-Core">highlight	"	self new highlight	"	| view |	view := ROMondrianViewBuilder new.	self highlightOn: view.	view open. </body><body package="Roassal-Core">highlightEdgesOn: viewview shape rectangle size: 15.view interaction on: ROMouseEnter do: [ :evt | 	view raw elementsAsEdge do: [ :edg | (edg from == evt element) ifTrue: [ ROBlink on: edg ] ].	 ].view nodes: #(1 2).view shape line width: 4.view edgeFromAssociation: 1 -&gt; 2.</body><body package="Roassal-Core">highlightInnerNodes	" 	self new highlightInnerNodes	"	| view |	view := ROMondrianViewBuilder new.	self highlightInnerNodesOn: view.	view open</body><body package="Roassal-Core">highlightInnerNodesOn: view	view nodes: (1 to: 5) forEach: [:each |    		view interaction highlightNodesWhenOver: [ :node | Array with: node ].    		view shape rectangle withText; size: 20.    		view nodes: (1 to: each).    		view gridLayout ].	</body><body package="Roassal-Core">highlightOn: view	view interaction highlightWhenOver: [ :cls | cls allSubclasses ].		view shape rectangle size: 10.	view nodes: (Collection withAllSubclasses).	view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-Core">highlightSeveralNodes	"	self new highlightSeveralNodes	"	| view nodes |	view := ROMondrianViewBuilder new.	view interaction highlightWhenOver: [:v | ((Array new: 4) at: 1 put: v - 1; at: 2 put: v + 1; at: 3 put: v + 4; at: 4 put: v - 4; yourself)  ].	view shape rectangle 		width: 40;		height: 30;		borderColor: Color black; borderWidth: 2.	nodes := view nodes: (1 to: 16).	view gridLayout gapSize: 2.			view open.	</body><body package="Roassal-Core">highlightUsingBezierOn: view	view interaction on: ROMouseEnter do: [ :n | 		| nodes |		nodes := view raw elementsFromModels: n element model allSubclasses.		ROBlink highlightElements: nodes ].	view interaction on: ROMouseLeave do: [ :n | 		| nodes |		nodes := view raw elementsFromModels: n element model allSubclasses.		ROBlink unhighlightElements: nodes ].		view shape rectangle size: 10.	view nodes: (Collection withAllSubclasses).	view shape bezierLine.	view edgesFrom: #superclass.		view radialTreeLayout.</body><body package="Roassal-Core">menuOnNodes	"	self new menuOnNodes	Right click on a node gives a menu	"	| view |		view := ROMondrianViewBuilder new.	self menuOnNodesOn: view.	view open</body><body package="Roassal-Core">menuOnNodesOn: view	view shape rectangle size: 15.	view interaction 		item: 'inspect element' action: #inspect;		item: 'inspect model' action: [ :el | el model inspect ];		item: 'browse element class' action: [ :el | el model browse ].	view nodes: (1 to: 5).</body><body package="Roassal-Core">miniMap"	self new miniMap "	|view|		view := ROMondrianViewBuilder new.	self miniMapOn: view.		view open.</body><body package="Roassal-Core">miniMapOn: view	view raw @ (ROMiniMap new targetView: view stack).		"press m to open the view minimap "		view shape rectangle 		width:  [ :cls | cls numberOfVariables * 5 ];  		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within:  Collection withAllSubclasses.			view interaction popupText: [ :cls | 		cls name, (String with: Character cr), 		cls methods size printString, ' methods', (String with: Character cr), 		cls instVarNames size printString, ' variables', (String with: Character cr),		cls numberOfLinesOfCode printString, ' LOC' ].	view interaction action: #browse.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-Core">mouseMoveOn: view	|node|		view shape rectangle size: 50.	node := view node: 'Hola'.	view raw		on: ROMouseMove 		do: [:event | 			|position x y|			position := event position - node position.			(position x = 0)				ifTrue: [ x := 0 ]				ifFalse: [ x := (position x / (position x abs)) ].			(position y = 0)				ifTrue: [ y := 0 ]				ifFalse: [ y := (position y / (position y abs)) ].			node translateByRealPoint: x@y. 			view raw signalUpdate .].</body><body package="Roassal-Core">multilineLabel	"	self new multilineLabel	"	| view |	view := ROMondrianViewBuilder new.	self multilineLabelOn: view.	view open</body><body package="Roassal-Core">multilineLabelOn: view	view shape label text: [:m | 'line1	  line2		line3    ']; color: Color blue.	view node: 'a'.</body><body package="Roassal-Core">nodraggable 	"	self new nodraggable	"	| view |	view := ROMondrianViewBuilder new.	self nodraggableOn: view.		view open</body><body package="Roassal-Core">nodraggableOn: view	view interaction nodraggable.	view shape label.	view node: 'Cannot be dragged'.		view shape label.	view node: 'Can be dragged'.</body><body package="Roassal-Core">popupAndNoPopup	"	self new popupAndNoPopup	"		| view |	view := ROMondrianViewBuilder titled: 'Popup and No popup'.	view interaction noPopup.	view shape label.	view node: 'I have _no_ popup'.		view shape label.	view node: 'I have a popup'.	view interaction noPopup.	view shape label.	view node: 'I have _no_ popup'.	view open</body><body package="Roassal-Core">popupView	"	self new popupView	"		| view |	view := ROMondrianViewBuilder new.	view shape label.	view interaction popupView: [ :entity :myView | 		myView nodes: entity withAllSuperclasses.		myView nodes: entity allSubclasses.		myView edgesFrom: #superclass.		myView treeLayout.	].	(view nodes: (Array with: ROEvent with: Collection)).	view open</body><body package="Roassal-Core">popupViewOn: view	view shape label.	view interaction popupView: [ :entity :myView | 		myView nodes: entity withAllSuperclasses.		myView nodes: entity allSubclasses.		myView edgesFrom: #superclass.		myView treeLayout.	].	(view nodes: (Array with: ROEvent with: Collection)).	</body><body package="Roassal-Core">selectionOn: view| statusBar activeSelection |activeSelection := ROSelection new						onInclusion: [ :element | ROBlink highlight: element color: Color red ];	onExclusion: [ :element | ROBlink unhighlight: element ].statusBar := (ROElement on: activeSelection) + (ROLabel text: [ :el | el model asString ]) + ROBox white.view stack add: statusBar.statusBar translateTo: 0 @ 480.view shape label.view interaction on: ROMouseLeftClick do: [	:ann | 	ann shiftKeyPressed ifFalse: [ activeSelection clear ].	activeSelection add: ann element.						].view nodes: #(1 2 3 4 5).view gridLayout."TODO: Clicking on background should clear selection"</body><body package="Roassal-Core">semanticZoomOn: view|zoom|	zoom := ROZoomIntoElementOnClick new.	zoom 		stack: view stack; 		view: [:el | |v|			v := ROView new.			v addAll: (ROElement spritesOn: (el model subclasses )).			v elementsDo: [:el2 | el2 +ROLabel ].			ROGridLayout new on: v elements.			v translateBy: 0@30.			v						];		recursive: true.	view raw add: (ROElement sprite model: ROInteraction; + ROLabel; @zoom; yourself).</body><body package="Roassal-Core">shrikingSizeOn: view	| outterNode |		outterNode := view node: 'hello' forIt: [ 	view shape rectangle withText.	view interaction on: ROMouseClick do: [ :event | 		outterNode remove: event element. 		ROHorizontalLineLayout on: outterNode elements.				ROShrikingSize on: outterNode. 		event element signalUpdate  ].	 	view nodes: (1 to: 20).	].		"Make the outter node shrink when it can"	outterNode resizeStrategy:  ROShrinkingParent new.</body><body package="Roassal-Core">statusBarOn: view| statusBar |statusBar := ROElement new + ROLabel + ROBox white.view stack add: statusBar.ROConstraint stickAtTheBottomOfTheWindow: statusBar.view interaction on: ROMouseEnter do: [ :event | 	statusBar model: event element model.].view shape rectangle size: 10.view nodes: (Collection withAllSubclasses).view edgesFrom: #superclass.view treeLayout.</body><body package="Roassal-Core">temporaryEdges 	"	self new temporaryEdges	"	| view |	view := ROMondrianViewBuilder new.	self temporaryEdgesOn: view.		view open</body><body package="Roassal-Core">temporaryEdgesOn: view| addedEdges wrongDependencies classes inheritanceLinks |"My classes"classes := #('Object' 'Model' 'Database' 'Car')."My inheritance links"inheritanceLinks :=	Array with: 'Object' -&gt; 'Model'			with: 'Object' -&gt; 'Database'			with: 'Model' -&gt; 'Car'."My wrong dependencies"wrongDependencies := 	Array with: 'Object' -&gt; 'Database' 		with: 'Car' -&gt; 'Database'."Showing some (fake) dependencies"addedEdges := nil.view interaction on: ROMouseEnter do: [ :event |	view shape arrowedLineWithOffset: 0.5; color: Color red.	addedEdges := 		view edgesFromAssociations: 			wrongDependencies.	view raw signalUpdate.].view interaction on: ROMouseLeave do: [ :event | 	addedEdges ifNotNil: [ 		addedEdges do: #remove. 		addedEdges := nil.		view raw signalUpdate. ].]."My system is made of 4 classes"view shape rectangle withText.view nodes: classes."Showing UML like diagram"view shape arrowedLineReversed.view edgesFromAssociations:	inheritanceLinks.			view treeLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>layouts</category><body package="Roassal-Core">bottomFlowLayoutOn: view		view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.	view bottomFlowLayout.	 </body><body package="Roassal-Core">chooseLayoutOn: view	(ROGridLayout on: (	 ((OrderedCollection new) 		add: ROTreeLayout; 		add: ROGridLayout; 		add: ROForceBasedLayout; 		add: ROCircleLayout; 		add: ROHorizontalTreeLayout;		add: ROVerticalLineLayout; 		add: ROHorizontalLineLayout; 		add: ROSugiyamaLayout; 		add: ROBottomFlowLayout; 		add: ROFlowLayout; 		add: RONarrowRadialTreeLayout; 		add: ROScatterplotLayout;		yourself) collect: [ :layoutClass | 			| button |			button := ((ROElement on: layoutClass name)  + ROLabel @ ROLightlyHighlightable + ROBorder).			button on: ROMouseLeftClick do: [ :event | 				layoutClass new 					translator: (ROSmoothLayoutTranslator new nbCycles: 10);					applyOn: (view raw elementsFromModels: (1 to: 5)) ].			view stack firstView add: button.			button ])) do: [ :button | button translateBy: 0 @ 380 ].		"We start with a very simple graph"	view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edgesFromAssociations:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself).	"We use circle layout as default layout"	view circleLayout executeOnElements: (view raw elementsFromModels: (1 to: 5)).</body><body package="Roassal-Core">circleLayoutOn: view		view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.	view circleLayout.	 </body><body package="Roassal-Core">dynamicForceBasedLayoutOn: view	| layout |	"rawView resizeStrategy:(ROPermissiveParent instance)."  view interaction on: ROMouseEnter do: [ :n |       | nodes |      nodes := view raw elementsFromModels: n element model allSubclasses.		ROBlink highlightElements: nodes ].  view interaction on: ROMouseLeave do: [ :n |       | nodes |      nodes := view raw elementsFromModels: n element model allSubclasses.      ROBlink unhighlightElements: nodes ].	view interaction on: ROMouseClick do: [ :event | 		layout := ROForceBasedLayout new.		layout fix: event element at: event element position.		layout iterationsToSendEvent: 10.		layout on: ROLayoutStep do: [ :ev | view raw signalUpdate. World doOneCycle ].		 view layout: layout.		view applyLayout ].    view shape rectangle size: 10.  view nodes: (Collection withAllSubclasses).  view edgesFrom: #superclass.  layout := ROForceBasedLayout new.  layout fix: (view nodes last) at: 450@450;          gravityAt: 437@38 .   view layout: layout.</body><body package="Roassal-Core">flowLayoutOn: view		view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.	view flowLayout.	 </body><body package="Roassal-Core">forceBasedLayoutOn: view		view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.	view forceBasedLayout.	 </body><body package="Roassal-Core">gridLayoutOn: view		view shape rectangle size: 40.	view nodes: (1 to: 5).	view gridLayout.	 </body><body package="Roassal-Core">horizontalTreeLayoutLayeredOn: viewview shape rectangle width: #yourself.view nodes: (1 to: 100).view edgesFrom: [:x | x // 2  ].view horizontalTreeLayout layered.</body><body package="Roassal-Core">horizontalTreeLayoutNoLayeredOn: viewview shape rectangle width: #yourself.view nodes: (1 to: 100).view edgesFrom: [:x | x // 2  ].view horizontalTreeLayout.</body><body package="Roassal-Core">scatterLayoutOn: view	view node: 'scatter layout' forIt: [		view nodes: #(#(10 5) #(20 50) #(2 4) #(60 20)).		view layout: (ROScatterplotLayout new						upSideDown;						scaleFactor: 2;						x: #first;						y: #second) ].</body><body package="Roassal-Core">treeLayoutOn: view		view shape rectangle size: 40.	view nodes: (1 to: 5).	view shape arrowedLine.	view 		edges:  ((OrderedCollection new) add: (1-&gt;2); add: (1-&gt;3); add: (1-&gt;5); add: (2-&gt;4); add: (4-&gt;1); yourself)		from: #key 		to: #value.	view treeLayout.	 </body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>software visualization</category><body package="Roassal-Core">coloredSystemComplexity	"	self new systemComplexity	"	| view elements  edge |				view := ROMondrianViewBuilder new.	self coloredSystemComplexityOn: view.	view open.	^ view</body><body package="Roassal-Core">coloredSystemComplexityOn: view	view shape rectangle 		width:  [ :cls | cls numberOfVariables * 7 ];  		height: #numberOfMethods;		fillColor: (RONColorLinearNormalizer 					inContext: (Collection withAllSubclasses) 					withCommand: #numberOfLinesOfCode 					lowColor: Color green  highColor: Color red).			view interaction popupText: [ :cls | 		cls name, (String with: Character cr), 		cls methods size printString, ' methods', (String with: Character cr), 		cls instVarNames size printString, ' variables', (String with: Character cr),		cls numberOfLinesOfCode printString, ' LOC' ].	view interaction action: #browse.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-Core">methodComplexity	"	self new methodComplexity 	"	| view d connectedMethods disconnectedMethods methodShape |	view := ROMondrianViewBuilder titled: 'Method Complexity'.	self methodComplexityOn: view.	view open</body><body package="Roassal-Core">methodComplexityFor: classes on: view	| d connectedMethods disconnectedMethods |			view nodes: classes forEach: [ :cls |		d := IdentityDictionary new.		cls methods do: [ :cm | d at: cm selector put: cm messages ].		d copy keysAndValuesDo: [ :key :messages | d at: key put: (messages intersection: d keys) ].				connectedMethods := d keys select: [ :k | (d at: k) notEmpty ].		disconnectedMethods := d keys select: [ :k | (d at: k) isEmpty ].			"Connected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) sourceCode lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) sourceCode ].			view nodes: connectedMethods.			view edges: connectedMethods from: #yourself toAll: [ :cm | d at: cm ].			view sugiyamaLayout. 		].			"Disconnected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) sourceCode lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) sourceCode ].			view nodes: disconnectedMethods.			view gridLayout.		].	].	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-Core">methodComplexityOn: view	| classesToAnalyze |		"We analyze only the classes of Roassal"	classesToAnalyze := (Object allSubclasses select: [ :cls | cls name beginsWith: 'RO' ]).	view nodes: classesToAnalyze forEach: [ :cls |		| d connectedMethods disconnectedMethods nativeUtil |		d := IdentityDictionary new.		nativeUtil := RONativeExampleUtility current .		(nativeUtil getMethodsForClass: cls) do: [ :cm | d at: cm selector put: cm messages ].		d copy keysAndValuesDo: [ :key :messages | d at: key put: (messages intersection: d keys) ].				connectedMethods := d keys select: [ :k | (d at: k) notEmpty ].		disconnectedMethods := d keys select: [ :k | (d at: k) isEmpty ].			"Connected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) sourceCode lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) sourceCode ].			view nodes: connectedMethods.			view edges: connectedMethods from: #yourself toAll: [ :cm | d at: cm ].			view sugiyamaLayout. 		].			"Disconnected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) sourceCode lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) sourceCode ].			view nodes: disconnectedMethods.			view gridLayout.		].	].	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-Core">polymetricViewWithMethods	"	self new polymetricViewWithMethods	"	| view classes elements  edge nodes |	"Gathering the data"	classes := ROTest withAllSubclasses.		"Visualzing the data"	view := ROMondrianViewBuilder new.	view shape rectangle 		width: #numberOfVariables; 		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within: classes.	nodes := view nodes: classes.	nodes do: [:n | n @ ROZoomOnClick ].		view edgesFrom: #superclass.	view treeLayout.	view open</body><body package="Roassal-Core">systemComplexity	"	self new systemComplexity	"	| view elements  edge |				view := ROMondrianViewBuilder new.	self systemComplexityOn: view.	view open.</body><body package="Roassal-Core">systemComplexityFor: classes	"	self new systemComplexityFor: Morph withAllSubclasses	"	| view elements  edge |				view := ROMondrianViewBuilder new.	view shape rectangle 		width: #numberOfVariables; 		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within: classes.			view interaction popupText: [ :cls | 		cls name, String cr, 		cls methods size printString, ' methods', Character cr asString, 		cls instVarNames size printString, ' variables', Character cr asString,		cls numberOfLinesOfCode printString, ' LOC' ].	view interaction action: #browse.	view nodes: classes.	view edgesFrom: #superclass.	view treeLayout.	view open.	^ view</body><body package="Roassal-Core">systemComplexityOn: view	view shape rectangle 		width:  [ :cls | cls numberOfVariables * 5 ];  		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within:  Collection withAllSubclasses.			view interaction popupText: [ :cls | 		cls name, (String with: Character cr), 		cls methods size printString, ' methods', (String with: Character cr), 		cls instVarNames size printString, ' variables', (String with: Character cr),		cls numberOfLinesOfCode printString, ' LOC' ].	view interaction action: #browse.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-Core">uml	"	ROMondrianExample new uml	"	| view |	view := ROMondrianViewBuilder new.	self umlOn: view.	ROEaselMorphic new populateMenuOn: view.	view open</body><body package="Roassal-Core">umlOn: view	| classes categoriesToAnalyze |			"To visualize your own packages, modify the following line"	categoriesToAnalyze  := #('Roassal-*' 'RoassalMorphic' 'RoassalExtras').	"classes contains all the classes that will be visualized"	classes := Object withAllSubclasses select: [ :cls | cls isMeta not and: [ categoriesToAnalyze anySatisfy: [ :cat | cat match: cls category ] ] ].		view shape rectangle withoutBorder.	view nodes: classes forEach: [ :cls |		| title ivs methods |		view shape label.		view interaction forward: ROMouseDragging.		title := view node: cls name asString.				view shape rectangle borderColor: Color lightGray.		view interaction forward: ROMouseDragging.		ivs := view node: 'IVs' forIt: [			view shape label text: #asString. 			view interaction noPopup.			view interaction forward: ROMouseDragging.			view nodes: cls instVarNames asSortedCollection.			view verticalLineLayout gapSize: -3 ].				view shape rectangle borderColor: Color lightGray.		view interaction forward: ROMouseDragging.		methods := view node: 'methods' forIt: [			view shape label text: #asString. 			view interaction popupText: [ :k | (cls &gt;&gt; k) getSource ].			view interaction forward: ROMouseDragging.			view nodes: cls selectors asSortedCollection.						view shape label color: Color lightGray; text: #asString. 			view interaction popupText: [ :k | (cls class &gt;&gt; k) getSource ].			view interaction forward: ROMouseDragging.			view nodes: cls class selectors asSortedCollection.			view verticalLineLayout gapSize: -3 ].				ROResize stretchHorizontally: (Array with: ivs with: methods with: title).		view verticalLineLayout gapSize: -2.	 ].	view shape: (ROOrthoVerticalLineShape new add: (ROReversedVerticalArrow new offset: 1 )).	view edgesFrom: #superclass.	view treeLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>basic</category><body package="Roassal-Core">centeredText	"	self new centeredText	"	| view |	view := ROMondrianViewBuilder new.	self centeredTextOn: view.	view open</body><body package="Roassal-Core">centeredTextOn: view	view shape rectangle; withCenteredText;  width: 180; height: 20.	view node: 'centered text'.	view shape rectangle; withText;  width: 180; height: 20.	view node: 'left text'.</body><body package="Roassal-Core">command	"	self new command		An example that shows the commands that can be defined on the builder. Useful to add menus.	"	| view |	view := ROMondrianViewBuilder new.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.		view addMenu: 'Inspect stack' callBack: [ :stack | stack inspect.  ].	view addMenu: '+Node Background' callBack: [ :stack | 		stack firstView add: (ROElement sprite translateTo: 200 atRandom @ 200 atRandom).		stack signalUpdate ].	view addMenu: '+Node Foreground' callBack: [ :stack | 		| el |		el := ROElement sprite translateTo: 200 atRandom @ 200 atRandom.		(el getShape: ROBorder) color: Color blue. 		stack add:  el.		stack signalUpdate ].		view addMenu: 'Zoom in' callBack: [ :stack | ROZoomInMove new on: stack firstView ].	view addMenu: 'Zoom out' callBack: [ :stack | ROZoomOutMove new on: stack firstView ].	view open.</body><body package="Roassal-Core">fixedSizeNodeOn: view	view node: 1 forIt: [  		view shape rectangle size: 20.		view nodes: (1 to: 9).		view gridLayout ].		view horizontalLineLayout 		on: ROLayoutEnd 		do: [ :event |  view raw elementsDo: [ :el | el resizeStrategy: (ROFixedSizedParent instance) ] ].</body><body package="Roassal-Core">labeledCircle	"	self new labeledCircle	"		| view |	view := ROMondrianViewBuilder new.	self labeledCircleOn: view.	view open</body><body package="Roassal-Core">labeledCircleOn: view		view shape circle withText.	view node: 'With circle'.		view shape label.	view node: 'Without circle'.	view shape circle.	view node: 'Without text'.</body><body package="Roassal-Core">labeledRectangle	"	self new labeledRectangle	"		| view |	view := ROMondrianViewBuilder new.	self labeledRectangleOn: view.	view open</body><body package="Roassal-Core">labeledRectangleOn: view		view shape rectangle withText.	view node: 'With rectangle'.		view shape label.	view node: 'Without rectangle'.</body><body package="Roassal-Core">simpleHierarchy	"	self new simpleHierarchy 	"		| view |	view := ROMondrianViewBuilder new.	self simpleHierarchyOn: view.	view open</body><body package="Roassal-Core">simpleHierarchyOn: view		view shape rectangle size: 20.	view nodes: (1 to: 20).	view shape line.	view edgesFrom: [ :i | i \\ 3 ].	view treeLayout.	</body><body package="Roassal-Core">treesOn: viewview nodes: (1 to: 5) forEach: [ :each |	view nodes: ((each * 10) to: (each * 20)).	view edgesFrom: [ :x | 		((x - (each * 10)) // 2) + ((each * 10)) ].	view treeLayout ].view gridLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>edges</category><body package="Roassal-Core">attachPoint	"	self new attachPoint	"	| view |	view := ROMondrianViewBuilder new.	self attachPointOn: view.	view open</body><body package="Roassal-Core">attachPointOn: view	view nodes: (ROAttachPoint subclasses) forEach: [ :cls |		view shape rectangle size: 20.		view nodes: #(1 2 3).		view shape line attachPoint: cls new.		view edgesFromAssociations: (Array with: 1-&gt; 2 with: 2 -&gt; 3 with: 1 -&gt; 3).		view circleLayout	].</body><body package="Roassal-Core">bezierCurveOn: viewview shape circle size: 10.view nodes: (Collection withAllSubclasses).view shape bezierLine.view edgesFrom: #superclass.view radialTreeLayout.view center.</body><body package="Roassal-Core">coloredEdgesOn: viewview shape circle size: 10.view nodes: (1 to: 20).view shape line 	color: [ :edge | 				(#( 2 3 4) includes: edge from model) 						ifTrue: [ Color red. ] 						ifFalse: [ Color lightGray ] ].view edgesToAll: [ :v | Array with:  v + 3 with: v + 5 with: v *2  ].view circleLayout.</body><body package="Roassal-Core">edgesDefinedOutsideOn: view		"The edges is defined outside the inner nodes. The layout takes those edges into account"	view nodes: #(1 2) forEach: [ :each |		view shape label.		view nodes: (Array with: each * 10 with: (each * 100)). 		view treeLayout.		].	view edgesFromAssociations: (Array with: 10 -&gt; 100 with: 20 -&gt; 200).</body><body package="Roassal-Core">lineWidthOn: view	view shape rectangle size: 50.	view nodes: #( 1 2 ).	view shape line width: 4.		view interaction popupText: 'edge!'.	view edgeFromAssociation: 1 -&gt; 2.</body><body package="Roassal-Core">lines	"	self new lines	"	| view |	view := ROMondrianViewBuilder new.	self linesOn: view.	view open.</body><body package="Roassal-Core">linesOn: view	view shape label.	view nodes: #(1 2 3 4 5 6 7 8 9 10).	view edges: #(1 2 3 4 5 6 7 8 9 10) from: #yourself toAll: (#(1 2 3 4 5 6 7 8 9 10) select: #odd).	view circleLayout.</body><body package="Roassal-Core">makingInvisibleEdgesOn: view	"The mondrian builder adds a shape per default. But this can be easily bypassed by using the low level facilities of Roassal"	view nodes: Collection withAllSubclasses.	(view edgesFrom: #superclass) do: [ :edge | edge - ROEdge ].	view treeLayout.	</body><body package="Roassal-Core">orthoVerticalLineOn: view	view shape rectangle size: 20.	view nodes: (1 to: 20). 	view shape: (ROOrthoVerticalLineShape new).	view edgesFrom: [ :i | i \\ 3 ].	view treeLayout. </body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>arrowed edges</category><body package="Roassal-Core">middleArrowOnEdgesOn: view	view shape label.	view nodes: #(1 2 3 ). 		view shape arrowedLineWithOffset: 0.5.	view edgesFromAssociations: (Array with: 1 -&gt; 2 with: 2 -&gt; 3 with: 3 -&gt; 1).	view circleLayout.</body><body package="Roassal-Core">orthoHorizontalWithArrowLineOn: view	view nodes: 	( Array 		with: [ROHorizontalArrow new offset: 0]		with: [ROReversedHorizontalArrow new offset: 0]		with: [ROHorizontalArrow new offset: 1] 		with:  [ROReversedHorizontalArrow new offset: 1]	)	forEach: 	[ 	:exampleBlock | 		view shape rectangle size: 20.		view nodes: (1 to: 16). 		view shape: (ROOrthoHorizontalLineShape new add: exampleBlock value ).		view edgesFrom: [ :i | (i / 4) ceiling ].		view horizontalTreeLayout verticalGap: 10. 	].	view horizontalLineLayout.</body><body package="Roassal-Core">orthoVerticalWithArrowLineOn: view	view nodes: 	(Array 		with:  [ROVerticalArrow new offset: 0]		with: [ROReversedVerticalArrow new offset: 0]		with: [ROVerticalArrow new offset: 1]		with: [ROReversedVerticalArrow new offset: 1]	) 	forEach: 	[ 	:exampleBlock | 		view shape rectangle size: 20.		view nodes: (1 to: 16). 		view shape: (ROOrthoVerticalLineShape new add: exampleBlock value ).		view edgesFrom: [ :i | (i / 4) ceiling ].		view treeLayout horizontalGap: 10. 	].	view verticalLineLayout.</body><body package="Roassal-Core">umlAggregateOn: view	view shape rectangle withText.	view nodes: #( 'container' 'element' ).	view shape: (ROLine new add: (RODiamondDecoration new offset: 1 )).	view edgesFromAssociations: (Array with: 'container' -&gt; 'element' ).	view treeLayout verticalGap: 40.</body><body package="Roassal-Core">umlLikeOn: view	view shape rectangle withText.	view nodes: (ROShape withAllSubclasses). 	view shape: (ROOrthoVerticalLineShape new add: (ROReversedVerticalArrow new offset: 1 )).	view edgesFrom: #superclass.	view treeLayout. </body><body package="Roassal-Core">umlReallyUpSideDownLikeOn: view	view shape rectangle withText.	view nodes: (ROShape withAllSubclasses). 	view shape: (ROOrthoVerticalLineShape new add: (ROVerticalArrow new offset: 1 )).	view edgesFrom: #superclass.	view treeLayout. </body><body package="Roassal-Core">umlUpSideDownLikeOn: view	view shape rectangle withText.	view nodes: (ROShape withAllSubclasses). 	view shape: (ROOrthoVerticalLineShape new add: (ROVerticalArrow new offset: 0 )).	view edgesFrom: #superclass.	view treeLayout. </body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>tutorial</category><body package="Roassal-Core">step1CreatingNodesOn: view	"A mondrian view is composed of nodes and egdes. 	In this first step, we will have the simplest visualization possible. 	A list of nodes representing each subclass of the class Collection."	view nodes: Collection withAllSubclasses.	"Since no shape is defined, each node is represented as a small white square, with a black border.	The size of the square is 5 pixels wide.		No layout is specified, therefore the horizontal line layout is used per default.	All the nodes are lined up horizontally.		Wave the mouse over a node, a popup will tell you which node you are pointing to.	You can individually drag and drop each node.	The whole view may be move around by dragging and dropping where there is no node, in the background."</body><body package="Roassal-Core">step2AddingEdgesOn: view	"We will now add edges to represent the superclass hierarchy of the collection classes."	view nodes: Collection withAllSubclasses.		"The message #edgesFrom: tells Roassal to draw edges between each node. The message #superclass is sent to each nodes (i.e., each subclass of Collection). A line is draw for each couple (subclassOfCollection -&gt; subclassOfCollection superclass)."	view edgesFrom: #superclass.		"We need to provide a layout to structure the visualization. A tree layout is appropriate in Smalltalk since a class has only one superclass."	view treeLayout.	"The tree layout places a superclass aboves its subclasses.		The Easel offers a number of actions. Zoom in, zoom out and find objects. Really handy and you have many nodes and you are looking for a specific node.	"</body><body package="Roassal-Core">step3DefiningShapeOn: view	"Up to now, all the boxes have the same graphical aspect (i.e., a 5 pixels white square). 	Each node may particularize its shape depending on the object that is rendered."		"We will now define a new shape in which the height represents the amount of mehtods the class has,	Its width is the amount of variables the class defines."	view shape rectangle 		width: [ :cls | cls instVarNames size ]; 		height: [ :cls | cls methods size ].	view nodes: Collection withAllSubclasses.		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-Core">step4ColoringShapeOn: view	"Shapes may be colored in many different ways. "		"Let's paint with a blue border the classes for which the word Array appear in their name.	Classes with Hash in their name will have a green border."		"Classes are painted in veryLightGray. Classes with more than 20 methods are in gray.	 The one with more than 30 methods are in back"	view shape rectangle 		width: [ :cls | cls instVarNames size * 5 ]; 		height: [ :cls | cls methods size ];		if: [ :cls | '*Array*' match: cls name ] borderColor: Color blue;		if: [ :cls | '*Hash*' match: cls name ] borderColor: Color green;				fillColor: Color veryLightGray;		if: [ :cls | cls methods size &gt; 20 ] fillColor: Color gray;		if: [ :cls | cls methods size &gt; 30 ] fillColor: Color black.					view nodes: Collection withAllSubclasses.		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-Core">step5LinearFillColorOn: view	"In the previous step, we have related the amount of methods a class may have with the darkness of its color:	many methods is associated to black and few methods with light gray. In chromatography, the lightness (or darkness) of a color is called its 'value'.	Relating a metric (e.g., the number of methods) with the color value is a common behavior that deserves its own facilities. "	"In this example, we relate the number of lines of code a class has with its color value."	view shape rectangle 		width: [ :cls | cls instVarNames size * 5 ]; 		height: [ :cls | cls methods size ];		linearFillColor: #linesOfCode within: Collection withAllSubclasses.	view nodes: Collection withAllSubclasses.		view edgesFrom: #superclass.		view treeLayout.		"linearFillColor: aBlock within: aCollection computes for each node a numerical value using aBlock and associates a gray value.	The visualization we have obtained is well know in the field of software visualization. It is called 'System Complexity'. More description of this fantastic visualization may be found in the publication 'Polymetric Views -- A Lightweight Visual Approach to Reverse Engineering', TSE 29(9), 2003."</body><body package="Roassal-Core">step6NestingNodesOn: view	"Until now, the only relation between nodes that we have expressed is linking them with an edge. Another way to relate nodes is to nest them. A node acts as a view in which nodes and edges may be added."	"Methods may be added within a class using nodes:forEach:"	view nodes: Collection withAllSubclasses forEach: [ :aClass |		view nodes: aClass methods.	].		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-Core">step7GridLayoutOn: view	"Having a long horizontal list of methods is not that exciting. They can be ordered a little bit by using a grid layout"	view nodes: Collection withAllSubclasses forEach: [ :aClass |		view nodes: aClass methods.						"The amount of space between each nodes may be specified using gapSize:. "		view gridLayout gapSize: 2.	].		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-Core">step8PaintingMethodsOn: view	"We will now paint the methods according to their amount of lines of code "		view nodes: Collection withAllSubclasses forEach: [ :aClass |				"The color of an element may be conditionally picked. "		view shape rectangle				if: [ :cm | cm numberOfLinesOfCode &gt; 5 ] fillColor: Color green;				if: [ :cm | cm numberOfLinesOfCode &gt; 10 ] fillColor: Color red.						view nodes: (aClass methods 						asSortedCollection: [ :m1 :m2 | m1 numberOfLinesOfCode &gt; m2 numberOfLinesOfCode]).		view gridLayout gapSize: 2.	].		view edgesFrom: #superclass.		view treeLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>layout tree map</category><body package="Roassal-Core">viewCollectionSubclassesTreeMapsOn: view				view interaction 			item: 'Explore Class' action: #explore;			item: 'Browse Class' action: #browse;			popupText: [ :node | node ].				"Set size of all treemaps to 100 by 100."			view shape size: 100.		view nodes: Collection subclasses forEach: [ :each |			| subClasses |			subClasses := each allSubclasses.			subClasses notEmpty ifTrue: [								view nodes: subClasses.				view edgesFrom: #superclass.							view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model numberOfLinesOfCode ]).				].	].		view gridLayout. </body><body package="Roassal-Core">viewCollectionSubclassesTreesOn: view	view interaction 			item: 'Explore Class' action: #explore;			item: 'Browse Class' action: #browse;			popupText: [ :node | node ].		view shape size: 100.		view nodes: Collection subclasses forEach: [ :each |			| subClasses |			subClasses := each allSubclasses.			subClasses notEmpty ifTrue: [				view nodes: subClasses.				view edgesFrom: #superclass.							view treeLayout.				].	].		view gridLayout. </body><body package="Roassal-Core">viewCollectionTreeMapOn: view		"Adding basic interaction capabilities to nodes: 	 - Add a menu item which lets one explore the model of the node.	 - Another menu item which lets one browse the class represented by the node.	 - Show the node name on hover."	view interaction 			item: 'Explore Class' action: #explore;			item: 'Browse Class' action: #browse;			popupText: [ :node | node ].		"The treemap should have a dimension of 400 by 400."		view shape width: 400; height: 400.	"Our nodes are all subclasses of Collection."	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.		"The weights we use to draw the treemap are the classes lines of code (LOC)."	view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model numberOfLinesOfCode ]).	 </body><body package="Roassal-Core">viewMultipleTreeMapsOn: view		"Make every treemap have a size of 100x100."	view shape rectangle size: 100.	view nodes: (1 to: 4) forEach: [ :each |		| innerNodes innerEdges |					innerNodes := view nodes: (each*10 to: each*40 by: each*5) asOrderedCollection.		innerEdges := view edgesFromAssociations: 			(Array with: (each*10) -&gt; (each*10+each*5*1) 				    with: (each*10) -&gt; (each*10+each*5*2)				    with: (each*10) -&gt; (each*10+each*5*3)				    with: (each*10) -&gt; (each*10+each*5*4)				    with: (each*10) -&gt; (each*10+each*5*5)				    with: (each*10) -&gt; (each*10+each*5*6)			).		view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	].	view edgesFromAssociations: 		(Array with: 1 -&gt; 2 with: 1 -&gt; 3 with: 1 -&gt; 4).		view treeLayout.	 </body><body package="Roassal-Core">viewMultipleTreesOn: view		"Displays the same tree as displayed in viewMultipleTreeMapsOn but as normal tree."	view nodes: (1 to: 4) forEach: [ :each |		| innerNodes innerEdges |					innerNodes := view nodes: (each*10 to: each*40 by: each*5) asOrderedCollection.		innerEdges := view edgesFromAssociations: 			(Array with: (each*10) -&gt; (each*10+each*5*1) 				    with: (each*10) -&gt; (each*10+each*5*2)				    with: (each*10) -&gt; (each*10+each*5*3)				    with: (each*10) -&gt; (each*10+each*5*4)				    with: (each*10) -&gt; (each*10+each*5*5)				    with: (each*10) -&gt; (each*10+each*5*6)			).		view treeLayout.	].	view edgesFromAssociations: 		(Array with: 1 -&gt; 2 with: 1 -&gt; 3 with: 1 -&gt; 4).		view treeLayout.</body><body package="Roassal-Core">viewSimpleTreeMapOn: view		"Adding basic interaction capabilities: 	 - Add a menu item which lets one explore the model of a node	 - Show the node name on hover"		view interaction 		item: 'Explore Element' action: #explore;		popupText: [ :node | node ].		"The treemap should have a dimension of 400 by 400."	view shape width: 400; height: 400.		"The nodes we draw are simply the numbers from 0 to 76."	view nodes: (0 to: 76).	view edgesFrom: [ :each | each // 10 ].		"The weights we use to draw the treemap are the models itself: the numbers."	view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	 </body><body package="Roassal-Core">viewSimpleTreeOn: view	"Displays the same tree as displayed in viewSimpleTreeMap but as normal tree."	view shape rectangle.	view nodes: (0 to: 76).	view edgesFrom: [ :each | each // 10 ].	view treeLayout.</body><body package="Roassal-Core">viewTreeMapOn: view			"Adding basic interaction capabilities: 	 - Add a menu item which lets one explore the model of a node	 - Show the node name on hover"	view interaction 		item: 'Explore Element' action: #explore;		popupText: [ :node | node ].		"The treemap should have a dimension of 500 by 500."	view shape width: 500; height: 500.	"The nodes we draw are simply the numbers from 0 to 999."	view nodes: (0 to: 999).	view edgesFrom: [ :each | each // 10 ].			"The weights we use to draw the treemap are the models itself: the numbers."	view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	 </body><body package="Roassal-Core">viewVerySimpleTreeMapOn: view		"Draw a Treemap that ihas a size of 100x100."	view shape size: 100.		"The nodes we draw are simply the numbers from 0 to 6."	view nodes: 		(OrderedCollection new add: 1;  add: 2; add: 3; add: 4; add: 5; add: 6; yourself).		view edgesFromAssociations: 		(OrderedCollection new add: 1 -&gt; 2; add: 1 -&gt; 3; add: 3 -&gt; 4; add: 3 -&gt; 5; add: 4 -&gt; 6; yourself).		"The weights we use to draw the treemap are the models itself: the numbers."	view layout: (ROTreeMapLayout withWeightBlock: [ :e | e model ]).	 </body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>key pressing</category><body package="Roassal-Core">moveViewWithKeys"	self new keyPressingMondrian"	|view |	view := ROMondrianViewBuilder  new.	self moveViewWithKeysOn: view.	view open.</body><body package="Roassal-Core">moveViewWithKeysOn: view	view stack on: ROKeyDown  do: [:evt |		|keyValue|		keyValue  := evt keyValue.		keyValue = 30 "up arrow"			ifTrue: [view raw translateBy: 0@1].		keyValue = 31 "down arrow"			ifTrue: [view raw translateBy: 0@(-1)].		keyValue = 29 "right arrow"			ifTrue: [view raw translateBy: (-1)@0].		keyValue = 28 "left arrow"			ifTrue: [view raw translateBy: 1@0]	].	view shape rectangle size: 50; color: Color green.	view nodes: (1 to: 400).	view gridLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>normalizers</category><body package="Roassal-Core">explicitIdentityNormalizer2On: view	 			view shape rectangle size: 30; fillColor: 		(RONExplicitIdentityNormalizer 						withCommand: #yourself 						withColors: (Array with: Color blue with: Color white with: Color red)						withDefaultColor: Color pink).	view nodes: #(#foo #bar #zork #foo #bar #zork).</body><body package="Roassal-Core">explicitIdentityNormalizerOn: view	 			view shape rectangle size: 30; fillColor: ( RONExplicitIdentityNormalizer						withCommand: #yourself						withColors:  (Array with: Color blue with: Color white with: Color red)						withDefaultColor: Color pink).	view nodes: (5 to: 10).</body><body package="Roassal-Core">identityNormalizer2On: view	view shape rectangle size: 30; fillColor: RONIdentityNormalizer beginingAtRed.	view nodes: #(#foo #bar #zork).</body><body package="Roassal-Core">identityNormalizerOn: view	view shape rectangle size: 30; fillColor: RONIdentityNormalizer new.	view nodes: (1 to: 30) , (30 to: 1).</body><body package="Roassal-Core">linearNumberOn: view	view shape rectangle size: ((RONumberLinearNormalizer inContext: #(1 2 3 4 3 2 1)) scale: 50).	view nodes: #(1 2 3 4 3 2 1)."The script above has the same effect than:| maxPixel maxValue |maxPixel := 50.maxValue := 4.view shape rectangle size: [:v | (v * maxPixel / maxValue) asInteger ].view nodes: {1 . 2 . 3 . 4 . 3 . 2 . 1}"</body><body package="Roassal-Core">lowerBoundNormalizerOn: view	"Color normalizer use white as the lower bound. But it could be any color"	view shape rectangle size: 30;		fillColor: (RONColorLinearNormalizer 					inContext: (1 to: 10) lowColor: Color gray highColor: Color black).			view nodes: (1 to: 10).</body><body package="Roassal-Core">multipleColorLinearOn: view	view shape rectangle size: 60; fillColor: (ROMultipleColorLinearNormalizer 					valueRange: #(5 10 15) colorRange: (Array with: Color blue with: Color white with: Color red)).	view nodes: (5 to: 15).		</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>dynamic lines</category><body package="Roassal-Core">dynamicLines2On: view| dep |dep := Dictionary new.dep at: #Layer1 put: #(Layer2 Layer3 Layer5).dep at: #Layer2 put: #(Layer1 Layer3 Layer4 Layer5).dep at: #Layer3 put: #(Layer1 Layer2 Layer4 Layer5).view interaction 	dynamicEdgeToAll: [ :model | dep at: model ifAbsent: [ #() ] ]	using: (ROLine red).view shape rectangle withText.view nodes: #(Layer1 Layer2 Layer3 Layer4 Layer5).	 view circleLayout.</body><body package="Roassal-Core">dynamicLines3On: view| dep |dep := Dictionary new.dep at: #Layer1 put: #(Layer2 Layer3 Layer5).dep at: #Layer2 put: #(Layer1 Layer3 Layer4 Layer5).dep at: #Layer3 put: #(Layer1 Layer2 Layer4 Layer5).view interaction 	dynamicEdgeFromAll: [ :model | dep at: model ifAbsent: [ #() ] ]	using: (ROLine red add: ROArrow new).view shape rectangle withText.view nodes: #(Layer1 Layer2 Layer3 Layer4 Layer5).	 view circleLayout.</body><body package="Roassal-Core">dynamicLinesOn: viewview interaction 	dynamicEdgeToAll: [ :model | (1 to: model) collect: [ :v | v // 2 ] ]	using: (ROLine red attachPoint: ROCenteredAttachPoint instance).view shape rectangle size: 20.view nodes: (1 to: 20).	 view circleLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>zOrdering</category><body package="Roassal-Core">zOrderingOn: view"zOrdering tells about the order the objects have to be displayed. This example gives a zIndex of 5 to edges, and 10 to nodes. Edges will be displayed first as a consequence."view raw zOrdering: (ROZOrdering new 						setZIndex: 5 if: #isEdge;						setZIndex: 10 if: #isNotEdge).						view shape label text: #yourself.view nodes: (1 to: 20).view edges: (1 to: 20) from: [:x | x // 2] to: 1.view edges: (1 to: 20) from: [:x | x // 3] to: 2.view edges: (1 to: 20) from: [:x | x // 5] to: #yourself.view edges: (1 to: 20) from: [:x | x // 7] to: #yourself.view dominanceTreeLayout.</body><body package="Roassal-Core">zOrderingOnDepthOn: view"zOrdering tells about the order the objects have to be displayed. This example gives a zIndex of 5 to edges, and 10 to nodes. Edges will be displayed first as a consequence."view raw zOrdering: (ROZOrdering new 						setZIndex: [ :element | element depth ] if: true).						view shape label text: #yourself.view nodes: (1 to: 20).view edges: (1 to: 20) from: [:x | x // 2] to: 1.view edges: (1 to: 20) from: [:x | x // 3] to: 2.view edges: (1 to: 20) from: [:x | x // 5] to: #yourself.view edges: (1 to: 20) from: [:x | x // 7] to: #yourself.view dominanceTreeLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample</class-id> <category>alpha blending</category><body package="Roassal-Core">alpha2On: view| random nodes |random := Random new.view shape circle size: 80; fillColor: Color black. view interaction on: ROMouseEnter do: [ :event |	ROColorAlphaFading new for: event element nbCycles: 60 ].nodes := view nodes: (1 to: 50). nodes do: [:el | el translateTo: (random next * 400) @ (random next * 400) ].view noLayout.ROPluggableAnimation new	nbCycles: 20000;	block: [ ROColorAlphaFading new for: nodes atRandom nbCycles: 60 ];	on: view raw.</body><body package="Roassal-Core">alphaOn: viewview shape circle size: 80; fillColor: Color black. view interaction on: ROMouseEnter do: [ :event |	ROColorAlphaFading new for: event element nbCycles: 60 ].view nodes: (1 to: 50).view gridLayout.</body><body package="Roassal-Core">dynamicFadingEdgesOn: viewview interaction 	dynamicEdgeToAll: [ :model | (1 to: model) collect: [ :v | v // 2 ] ]	usingFading: (ROLine red width: 5; attachPoint: ROCenteredAttachPoint instance).view shape rectangle size: 20.view nodes: (1 to: 20).	 view circleLayout.</body></methods><methods><class-id>Roassal.ROMondrianExample class</class-id> <category>easel</category><body package="Roassal-Core">postScript	^ '"-------------""-------------""Below is the initiation of the menu and opening the visualization"ROEaselMorphic new populateMenuOn: view.view open'</body><body package="Roassal-Core">preamble	^ 'rawView := ROView new.view := ROMondrianViewBuilder view: rawView.'</body><body package="Roassal-Core">preambleVariables	^ #('view' 'rawView')</body></methods><methods><class-id>Roassal.ROVWMondrianExample</class-id> <category>tutorial</category><body package="Roassal-VWSpecific">step1CreatingNodesOn: view	"A mondrian view is composed of nodes and egdes. 	In this first step, we will have the simplest visualization possible. 	A list of nodes representing each subclass of the class Collection."	view nodes: Collection withAllSubclasses.	"Since no shape is defined, each node is represented as a small white square, with a black border.	The size of the square is 5 pixels wide.		No layout is specified, therefore the horizontal line layout is used per default.	All the nodes are lined up horizontally.		Wave the mouse over a node, a popup will tell you which node you are pointing to.	You can individually drag and drop each node.	The whole view may be move around by dragging and dropping where there is no node, in the background."</body><body package="Roassal-VWSpecific">step2AddingEdgesOn: view	"We will now add edges to represent the superclass hierarchy of the collection classes."	view nodes: Collection withAllSubclasses.		"The message #edgesFrom: tells Roassal to draw edges between each node. The message #superclass is sent to each nodes (i.e., each subclass of Collection). A line is draw for each couple (subclassOfCollection -&gt; subclassOfCollection superclass)."	view edgesFrom: #superclass.		"We need to provide a layout to structure the visualization. A tree layout is appropriate in Smalltalk since a class has only one superclass."	view treeLayout.	"The tree layout places a superclass aboves its subclasses.		The Easel offers a number of actions. Zoom in, zoom out and find objects. Really handy and you have many nodes and you are looking for a specific node.	"</body><body package="Roassal-VWSpecific">step3DefiningShapeOn: view	"Up to now, all the boxes have the same graphical aspect (i.e., a 5 pixels white square). 	Each node may particularize its shape depending on the object that is rendered."		"We will now define a new shape in which the height represents the amount of mehtods the class has,	Its width is the amount of variables the class defines."	view shape rectangle 		width: [ :cls | cls instVarNames size ]; 		height: [ :cls | cls methodDictionary size ].	view nodes: Collection withAllSubclasses.		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-VWSpecific">step4ColoringShapeOn: view	"Shapes may be colored in many different ways. "		"Let's paint with a blue border the classes for which the word Array appear in their name.	Classes with Hash in their name will have a green border."		"Classes are painted in veryLightGray. Classes with more than 20 methods are in gray.	 The one with more than 30 methods are in back"	view shape rectangle 		width: [ :cls | cls instVarNames size * 5 ]; 		height: [ :cls | cls methodDictionary size ];		if: [ :cls | '*Array*' match: cls name ] borderColor: Color blue;		if: [ :cls | '*Set*' match: cls name ] borderColor: Color green;				fillColor: Color veryLightGray;		if: [ :cls | cls methods size &gt; 20 ] fillColor: Color gray;		if: [ :cls | cls methods size &gt; 30 ] fillColor: Color black.					view nodes: Collection withAllSubclasses.		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-VWSpecific">step5LinearFillColorOn: view	"In the previous step, we have related the amount of methods a class may have with the darkness of its color:	many methods is associated to black and few methods with light gray. In chromatography, the lightness (or darkness) of a color is called its 'value'.	Relating a metric (e.g., the number of methods) with the color value is a common behavior that deserves its own facilities. "	"In this example, we relate the number of lines of code a class has with its color value."	view shape rectangle 		width: [ :cls | cls instVarNames size * 5 ]; 		height: [ :cls | cls methodDictionary size ];		linearFillColor: #linesOfCode within: Collection withAllSubclasses.	view nodes: Collection withAllSubclasses.		view edgesFrom: #superclass.		view treeLayout.		"linearFillColor: aBlock within: aCollection computes for each node a numerical value using aBlock and associates a gray value.	The visualization we have obtained is well know in the field of software visualization. It is called 'System Complexity'. More description of this fantastic visualization may be found in the publication 'Polymetric Views -- A Lightweight Visual Approach to Reverse Engineering', TSE 29(9), 2003."</body><body package="Roassal-VWSpecific">step6NestingNodesOn: view	"Until now, the only relation between nodes that we have expressed is linking them with an edge. Another way to relate nodes is to nest them. A node acts as a view in which nodes and edges may be added."	"Methods may be added within a class using nodes:forEach:"	view nodes: Collection withAllSubclasses forEach: [ :aClass |		view nodes: aClass methodDictionary.	].		view edgesFrom: #superclass.		view treeLayout.</body><body package="Roassal-VWSpecific">step7GridLayoutOn: view	"Having a long horizontal list of methods is not that exciting. They can be ordered a little bit by using a grid layout"	view nodes: Collection withAllSubclasses forEach: [ :aClass |		view nodes: aClass methodDictionary.		view gridLayout gapSize: 2.	].		view edgesFrom: #superclass.		view treeLayout.	"The amount of space between each nodes may be specified using gapSize:. "</body><body package="Roassal-VWSpecific">step8PaintingMethodsOn: view	"We will now paint the methods according to their amount of lines of code "		view nodes: Collection withAllSubclasses forEach: [ :aClass |				"The color of an element may be conditionally picked. "		view shape rectangle				if: [ :cm | cm linesOfCode &gt; 5 ] fillColor: Color orange;				if: [ :cm | cm linesOfCode &gt; 10 ] fillColor: Color red.						view nodes: (aClass methodDictionary 						asSortedCollection: [ :m1 :m2 | m1 linesOfCode &gt; m2 linesOfCode]).		view gridLayout gapSize: 2.	].		view edgesFrom: #superclass.		view treeLayout.</body></methods><methods><class-id>Roassal.ROVWMondrianExample</class-id> <category>software visualization</category><body package="Roassal-VWSpecific">methodComplexity	"	self new methodComplexity 	"	| view d connectedMethods disconnectedMethods methodShape |	view := ROMondrianViewBuilder titled: 'Method Complexity'.	self methodComplexityOn: view.	view open</body><body package="Roassal-VWSpecific">methodComplexityFor: classes on: view	| d connectedMethods disconnectedMethods methodShape |			view nodes: classes forEach: [ :cls |		d := IdentityDictionary new.		cls methods do: [ :cm | d at: cm selector put: cm messages ].		d copy keysAndValuesDo: [ :key :messages | d at: key put: (messages intersection: d keys) ].				connectedMethods := d keys select: [ :k | (d at: k) notEmpty ].		disconnectedMethods := d keys select: [ :k | (d at: k) isEmpty ].			"Connected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) getSource lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) getSource ].			view nodes: connectedMethods.			view edges: connectedMethods from: #yourself toAll: [ :cm | d at: cm ].			view sugiyamaLayout. 		].			"Disconnected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) getSource lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) getSource ].			view nodes: disconnectedMethods.			view gridLayout.		].	].	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-VWSpecific">methodComplexityOn: view	view nodes: ((Object allSubclasses select: [ :cls | cls name beginsWith: 'RO' ])) forEach: [ :cls |		| d connectedMethods disconnectedMethods methodShape |		d := IdentityDictionary new.		(cls methodDictionary) do: [ :cm | d at: cm selector put: cm messages ].		d copy keysAndValuesDo: [ :key :messages | d at: key put: (messages intersection: d keys) ].				connectedMethods := d keys select: [ :k | (d at: k) notEmpty ].		disconnectedMethods := d keys select: [ :k | (d at: k) isEmpty ].			"Connected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) getSource lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) getSource ].			view nodes: connectedMethods.			view edges: connectedMethods from: #yourself toAll: [ :cm | d at: cm ].			view sugiyamaLayout. 		].			"Disconnected methods"		view shape rectangle withoutBorder.		view node: cls forIt: [			view shape rectangle size: [ :sym | (cls &gt;&gt; sym) getSource lines size ].			view interaction popupText: [ :sym | (cls &gt;&gt; sym) getSource ].			view nodes: disconnectedMethods.			view gridLayout.		].	].	view edgesFrom: #superclass.	view treeLayout.</body><body package="Roassal-VWSpecific">polymetricViewWithMethods	"	self new polymetricViewWithMethods	"	| view classes elements  edge nodes |	"Gathering the data"	classes := ROTest withAllSubclasses.		"Visualzing the data"	view := ROMondrianViewBuilder new.	view shape rectangle 		width: #numberOfVariables; 		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within: classes.	nodes := view nodes: classes.	nodes do: [:n | n @ ROZoomOnClick ].		view edgesFrom: #superclass.	view treeLayout.	view open</body><body package="Roassal-VWSpecific">systemComplexity	"	self new systemComplexity	"	| view elements  edge |				view := ROMondrianViewBuilder new.	self systemComplexityOn: view.	view open.	^ view</body><body package="Roassal-VWSpecific">systemComplexityFor: classes	"	self new systemComplexityFor: Morph withAllSubclasses	"	| view elements  edge |				view := ROMondrianViewBuilder new.	view shape rectangle 		width: #numberOfVariables; 		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within: classes.			view interaction popupText: [ :cls | 		cls name, String cr, 		cls methodDictionary size printString, ' methods', String cr, 		cls instVarNames size printString, ' variables', String cr,		cls numberOfLinesOfCode printString, ' LOC' ].	view interaction action: #browse.	view nodes: classes.	view edgesFrom: #superclass.	view treeLayout.	view open.	^ view</body><body package="Roassal-VWSpecific">systemComplexityOn: view	view shape rectangle 		width: #numberOfVariables; 		height: #numberOfMethods;		linearFillColor: #numberOfLinesOfCode within:  Collection withAllSubclasses.			view interaction popupText: [ :cls | 		cls name, (String with: Character cr), 		cls methodDictionary size printString, ' methods', (String with: Character cr), 		cls instVarNames size printString, ' variables', (String with: Character cr),		cls numberOfLinesOfCode printString, ' LOC' ].	view interaction action: #browse.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.</body></methods><methods><class-id>Roassal.ROVWMondrianExample class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Roassal.ROShorterDistanceAttachPoint</class-id> <category>public - hooks</category><body package="Roassal-Core">endingPointOf: anEdge	^ self attachPointFor: anEdge on: (anEdge from) with: (self destinationAttachPointsFor: anEdge).</body><body package="Roassal-Core">startingPointOf: anEdge	^ self attachPointFor: anEdge on: (anEdge to) with: (self startingAttachPointsFor: anEdge).</body></methods><methods><class-id>Roassal.ROShorterDistanceAttachPoint</class-id> <category>util</category><body package="Roassal-Core">attachPointFor: anEdge on: anElement with: elementsPossibleAttachPoints	"Returns the attach point having the shortest route for given edge on given element."	| p dp t |	p := anElement absolutePosition + (anElement width @ anElement height).		"We get the list of dot products"	dp := elementsPossibleAttachPoints collect: [ :pp | 		t := p - pp.		Array with: (t dotProduct: t) with:  pp ].		"We look for the shortest path and return the point"	^ (dp inject: dp first into: [ :shorter :el | (shorter first &lt; el first) ifTrue: [ shorter ] ifFalse: [ el ]]) second</body><body package="Roassal-Core">attachPointsFor: anEdge on: anElement	"Return the four possible attach points for each of the four sides for given edge on given element."	^ Array 		"upper side"		with: (anElement absolutePosition) + (((anElement bounds width / 2) + offset) asInteger @ 0) 		 "right side"		with: (anElement absolutePosition) + (anElement bounds width @ ((anElement  bounds height / 2) + offset) asInteger)		"lower side"		with: (anElement absolutePosition) + (((anElement bounds width / 2) + offset) asInteger @ (anElement bounds height)) 		"left side"		with: (anElement absolutePosition) + (0 @ ((anElement bounds height / 2) + offset) asInteger) 			</body><body package="Roassal-Core">destinationAttachPointsFor: anEdge	"Return the four possible attach points for each of the four sides for this edges destination node."	^ self attachPointsFor: anEdge on: (anEdge to).			</body><body package="Roassal-Core">startingAttachPointsFor: anEdge	"Return the four possible attach points for each of the four sides for this edges starting node."	^ self attachPointsFor: anEdge on: (anEdge from).</body></methods><methods><class-id>Roassal.ROShorterDistanceAttachPoint</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	offset := 0.</body></methods><methods><class-id>Roassal.ROShorterDistanceAttachPoint</class-id> <category>accessing</category><body package="Roassal-Core">offset	^ offset.</body><body package="Roassal-Core">offset: aNumber	offset := aNumber.</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>interactions</category><body package="Roassal-Core">action: aBlockOrSymbol	^ self item: aBlockOrSymbol printString action: aBlockOrSymbol</body><body package="Roassal-Core">forward	self forwarder</body><body package="Roassal-Core">forward: event	selfDefinedInteraction add: [ :listOfNodes | listOfNodes do: [ :node | node forward: event ] ]</body><body package="Roassal-Core">forwarder	selfDefinedInteraction add: [ :listOfNodes | listOfNodes do: [ :node | node forward ] ]</body><body package="Roassal-Core">if: conditionBlock popupText: popupTextBlock	"If conditionBlock is evaluated at true, then popupTextBlock is used to for the popup"	^ self  popupView: [ :entity :myView | 		(conditionBlock roValue: entity) 			ifTrue:  		[ myView shape rectangle.	  	 myView node: entity forIt: [ 			myView shape label.			myView node: (popupTextBlock roValue: entity)		] ] ] "	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :node | 			| oldBlockOrValue |			oldBlockOrValue := 				(node is: ROPopupView)					ifTrue: [ node getInteraction: ROPopupView ] 					ifFalse: [ #printString ].			self popupText: [ :each |				(conditionBlock roValue: each)					ifTrue: [ popupTextBlock roValue: each ]					ifFalse: [ oldBlockOrValue roValue: each ] ] ] ] 			"</body><body package="Roassal-Core">item: titleAsString action: aBlockOrSymbol	"aBlockOrSymbol accepts an object model, and not the element	"	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :n | n @ (ROMenuActivable new item: titleAsString action: [ :element | aBlockOrSymbol roValue: element model ]) ] ]</body><body package="Roassal-Core">noPopup 	selfDefinedInteraction add: [ :listOfElements | 		listOfElements do: [ :element | element removeInteraction: ROAbstractPopup ] ].</body><body package="Roassal-Core">nodraggable	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :node | node removeInteraction: RODraggable ] ]</body><body package="Roassal-Core">on: event do: block	selfDefinedInteraction add: [ :listOfNodes | listOfNodes do: [ :node | node on: event do: block ] ]</body><body package="Roassal-Core">popupText	^ self popupText: [ :v | (v class == 'ab' class) ifTrue: [ v ] ifFalse: [ v printString ] ]</body><body package="Roassal-Core">popupText: aBlockOrSelector	^ self  popupView: [ :entity :myView | 		myView shape rectangle.		myView node: entity forIt: [ 			myView shape label.			myView node: (aBlockOrSelector roValue: entity)		] 	]"	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :node | 			| int |			int := ROPopup text: aBlockOrSelector.			int receivingView: stack.			int textColor: Color black.			node changeInteraction: ROAbstractPopup for: int.			 ] ]			"</body><body package="Roassal-Core">popupView: aTwoArgsBlock	"aTwoArgsBlock is in the form [ :entity :myView |  ... ]"		^ self popupView: aTwoArgsBlock delay: 100</body><body package="Roassal-Core">popupView: aTwoArgsBlock delay: delayAsInteger	"aTwoArgsBlock is in the form [ :entity :myView |  ... ]"	selfDefinedInteraction add: [ :listOfElements | 		listOfElements do: [ :element | 			element changeInteraction: ROAbstractPopup for: 				(ROPopupView new 					 receivingView: viewBuilder stack;					view: [ :entity | 						| v |						v := viewBuilder class new.						aTwoArgsBlock value: entity model value: v.						v applyLayout.						v ] ) ] ]</body><body package="Roassal-Core">withPopup 	shouldHavePopup := true</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>public</category><body package="Roassal-Core">applyToElement: element	self applyToElements: (Array with: element)</body><body package="Roassal-Core">applyToElements: elements	selfDefinedInteraction do: [:int | int value: elements ].</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>dynamic edges</category><body package="Roassal-Core">dynamicEdgeFromAll: aBlockOrSymbol using: aShape	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :n | 						n @ (RODynamicEdge 					fromAll: [ :element | (viewBuilder elementsFromModels: (aBlockOrSymbol roValue: element model)) ]					using: aShape) ] ]</body><body package="Roassal-Core">dynamicEdgeToAll: aBlockOrSymbol using: aShape	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :n | 						n @ (RODynamicEdge 					toAll: [ :element | (viewBuilder elementsFromModels: (aBlockOrSymbol roValue: element model)) ]					using: aShape) ] ]</body><body package="Roassal-Core">dynamicEdgeToAll: aBlockOrSymbol usingFading: aShape	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :n | 						n @ (RODynamicFadingEdge 					toAll: [ :element | 									| allElements |									allElements := (viewBuilder elementsFromModels: (aBlockOrSymbol roValue: element model)).									ROWiggle onAll: allElements.									allElements ]					using: aShape) ] ]</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>status bar</category><body package="Roassal-Core">createStatusBarIfNecessary	| statusBar labelShape |	(viewBuilder stack hasAttribute: #statusBar)		ifTrue: [^ viewBuilder stack attributeAt: #statusBar].	statusBar := ROElement new + (labelShape := ROLabel text: ' ') + ROBox white.	viewBuilder stack add: statusBar.	ROConstraint stickToBottomLeft: statusBar.	viewBuilder stack attributeAt: #statusBar put: statusBar.	labelShape text: ''.	^ statusBar</body><body package="Roassal-Core">statusBar	^ self statusBar: #yourself</body><body package="Roassal-Core">statusBar: aOneArgBlockOrSymbol	"Display a status bar when the mouse enter an element"	| statusBar |	statusBar := self createStatusBarIfNecessary.	selfDefinedInteraction add: [ :listOfNodes | 		listOfNodes do: [ :node | 			node on: ROMouseEnter do: [ :event | 				(statusBar getShape: ROLabel) text: (aOneArgBlockOrSymbol roValue: event model) printString ] ] ].	^ statusBar</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>updating</category><body package="Roassal-Core">highlightNodesWhenOver: aBlockOrSymbol	self highlightNodesWhenOver: aBlockOrSymbol color: Color red</body><body package="Roassal-Core">highlightNodesWhenOver: aBlockOrSymbol color: aColorAsBlockOrSymbol	self on: ROMouseEnter do: [ :n | 		| nodes |		nodes := (aBlockOrSymbol roValue: n element) . 		ROBlink 			highlightElements: nodes 			color: (aColorAsBlockOrSymbol roValue: n element model).		n element signalUpdate  ].	self on: ROMouseLeave do: [ :n | 		| nodes |		nodes := (aBlockOrSymbol roValue: n element).		ROBlink unhighlightElements: nodes.		n element signalUpdate  ].</body><body package="Roassal-Core">highlightWhenOver: aBlockOrSymbol	"(aBlockOrSymbol roValue: element) should return a collection of the models that should be highlighted"	self highlightWhenOver: aBlockOrSymbol color: Color red</body><body package="Roassal-Core">highlightWhenOver: aBlockOrSymbol color: aColorAsBlockOrSymbol	"We use 'nodes asSet' to make sure that we do not go twice over the same node, else it behaves strangely'"		self on: ROMouseEnter do: [ :n | 		| nodes |		nodes := viewBuilder elementsFromModels: (aBlockOrSymbol roValue: n element model) . 		ROBlink 			highlightElements: nodes asSet			color: (aColorAsBlockOrSymbol roValue: n element model) ].	self on: ROMouseLeave do: [ :n | 		| nodes |		nodes := viewBuilder elementsFromModels:  (aBlockOrSymbol roValue: n element model).		ROBlink  			unhighlightElements: nodes asSet ].</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	selfDefinedInteraction := OrderedCollection new.</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder</class-id> <category>accessing</category><body package="Roassal-Core">numberOfDefinedInteractions	"Used essentially for debugging purpose"	^ selfDefinedInteraction size</body><body package="Roassal-Core">viewBuilder: aViewBuilder	viewBuilder := aViewBuilder.</body></methods><methods><class-id>Roassal.ROMondrianInteractionBuilder class</class-id> <category>create Instance</category><body package="Roassal-Core">initializeOn: aViewBuilder	^self new viewBuilder: aViewBuilder.</body></methods><methods><class-id>Roassal.RODiamond</class-id> <category>accessing</category><body package="Roassal-Core">borderColor	^ borderColor</body><body package="Roassal-Core">borderColor: aBlockOrSymbolOrObject	borderColor := aBlockOrSymbolOrObject.</body><body package="Roassal-Core">borderWidth	^ borderWidth</body><body package="Roassal-Core">borderWidth: anInteger	borderWidth := anInteger.</body></methods><methods><class-id>Roassal.RODiamond</class-id> <category>initialize</category><body package="Roassal-Core">initialize	super initialize.	borderWidth := 1. 	borderColor := Color black.</body></methods><methods><class-id>Roassal.RODiamond</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aCanvas for: aROElement	| b w bc |	b := self absoluteBoundsFor: aROElement.	w := borderWidth roValue: aROElement.	bc := borderColor roValue: aROElement.	aCanvas line: b topCenter to: b rightCenter width: w color: bc.	aCanvas line: b rightCenter to: b bottomCenter width: w color: bc.	aCanvas line: b bottomCenter to: b leftCenter width: w color: bc.	aCanvas line: b leftCenter to: b topCenter width: w color: bc.</body></methods><methods><class-id>Roassal.ROHTMLAssets class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">import_zip: aFilename 	^ self importBytes: aFilename</body></methods><methods><class-id>Roassal.ROTreeLayoutTest</class-id> <category>test layout</category><body package="Roassal-Core">testLayout	| result |	ROTreeLayout on: elements.		result := ((Array new: 20) at: 1 put: ((482@5)); at: 2 put: ((5@75)); at: 3 put: ((58@75)); at: 4 put: ((111@75)); at: 5 put: ((164@75)); at: 6 put: ((217@75)); at: 7 put: ((270@75)); at: 8 put: ((323@75)); at: 9 put: ((376@75)); at: 10 put: ((429@75)); at: 11 put: ((482@75)); at: 12 put: ((535@75)); at: 13 put: ((588@75)); at: 14 put: ((641@75)); at: 15 put: ((694@75)); at: 16 put: ((747@75)); at: 17 put: ((800@75)); at: 18 put: ((853@75)); at: 19 put: ((906@75)); at: 20 put: ((959@75)); yourself).	self assert:  (result includesAll: (elements collect: #positionAsInteger))</body></methods><methods><class-id>Roassal.ROViewStack</class-id> <category>interactions</category><body package="Roassal-Core">on: eventClass do: aBlock	super on: eventClass do: aBlock.	self viewDo: [ :v | v on: eventClass do: aBlock ]</body></methods><methods><class-id>Roassal.ROViewStack</class-id> <category>accessing</category><body package="Roassal-Core">addFirst: aView	views addFirst: aView.	self announce: (ROViewChanged new newView: aView).</body><body package="Roassal-Core">addLast: aView	views addLast: aView.	self announce: (ROViewChanged new newView: aView).</body><body package="Roassal-Core">addView: aView	self addLast: aView</body><body package="Roassal-Core">elementAtRealPosition: aPoint	"Override of the superclass. If nothing is found in myself, then we look in the embedded views" 	| t el |		el := self elementAt: (self camera realToVirtualPoint: aPoint).	(el == self) 		ifTrue: [ self viewDo: [ :v | 					^ v elementAtRealPosition: aPoint ] ]		ifFalse: [ ^ el ].	^ self</body><body package="Roassal-Core">firstView	^ views first</body><body package="Roassal-Core">removeFirst	views removeFirst.	self announce: (ROViewChanged new newView: views first).</body><body package="Roassal-Core">replaceFirstBy: view	| size |	size := views first camera windowSize.	views removeFirst.	view camera windowSize: size.	self addFirst: view</body><body package="Roassal-Core">viewDo: aBlock	views isNil 		ifFalse: [ views do: [:v | aBlock value: v ] ]</body><body package="Roassal-Core">viewsSize	^views size</body><body package="Roassal-Core">windowSize: anExtent	super windowSize: anExtent.	views do: [ :v | v windowSize: anExtent ]</body></methods><methods><class-id>Roassal.ROViewStack</class-id> <category>opening</category><body package="Roassal-Core">viewReverseDo: aBlock	views reverseDo: [:v | aBlock value: v ].					</body></methods><methods><class-id>Roassal.ROViewStack</class-id> <category>rendering</category><body package="Roassal-Core">drawOn: aROCanvas	self viewReverseDo: [ :v | v drawOn: aROCanvas ].	self drawElementsOn: aROCanvas.	self doAnimationCycle.</body><body package="Roassal-Core">updateElementsToRender	self viewDo: [ :v | v updateElementsToRender ]</body></methods><methods><class-id>Roassal.ROViewStack</class-id> <category>initialize</category><body package="Roassal-Core">initialize	super initialize.	views := OrderedCollection new.	 </body></methods><methods><class-id>Roassal.ROViewStack</class-id> <category>buttons</category><body package="Roassal-Core">addMenu: aButtonTitle callBack: aBlock	| label |	label := ROLabel elementOn: aButtonTitle.	label @ ROLightlyHighlightable lightGray + ROBorder gray + ROBox white. 	label on: ROMouseLeftClick do: [ :event | 		ROBlink unhighlight: label.		label view signalUpdate.				aBlock roValue: self ].	self add: label.	ROHorizontalLineLayout on: self elements</body><body package="Roassal-Core">exportButton	self addMenu: 'Export' callBack: [ :stack | 		| exporters index|		exporters := SortedCollection  sortBlock: [ :a1 :a2 | a1 key &lt; a2 key ].		ROExportCommand commands do: [:cm | exporters add: cm name -&gt; cm ] .				index := UIManager default chooseFrom: (exporters collect: #key).		index &gt; 0 ifTrue: [ 	(exporters at: index) value executeOn: self firstView ]	]</body><body package="Roassal-Core">findButton	self addMenu: 'Find...' callBack: [ :stack | 		| allModels index element |		allModels := SortedCollection  sortBlock: [ :a1 :a2 | a1 value &lt; a2 value ].		stack firstView elementsDo: [ :el | 			el isNotEdge ifTrue: [ allModels add: el -&gt; el model printString ] ].				index := UIManager default chooseFrom: (allModels collect: #value).		index &gt; 0 ifTrue: [ 			element := (allModels at: index) key.			ROFocusView on: element ] ].</body><body package="Roassal-Core">moveFirstViewBelowButtons	self firstView translateBy: 0 @ 30	"We also do a small scrolling to not have the buttons over the nodes"</body><body package="Roassal-Core">serializeButton	self addMenu: 'Save/Open' callBack: [ :stack | 		| commands index saveCommand loadCommand|		commands := SortedCollection  sortBlock: [ :a1 :a2 | a1 key &lt; a2 key ].		saveCommand := ROSaveViewCommand on: self firstView.		loadCommand := ROLoadViewCommand new.		commands add: ('Save view as...' -&gt; [ saveCommand execute ] ).		commands add: ('Open...' -&gt; [loadCommand execute. 		loadCommand view ifNil: [ ^ self ].		loadCommand view open ]).						index := UIManager default chooseFrom: (commands collect: #key).		index &gt; 0 ifTrue: [ 	(commands at: index) value value ]	]</body><body package="Roassal-Core">zoomInButton	self addMenu: 'Zoom in' callBack: [ :stack | ROZoomInMove new on: stack firstView ].</body><body package="Roassal-Core">zoomOutButton	self addMenu: 'Zoom out' callBack: [ :stack | ROZoomOutMove new on: stack firstView ].</body></methods><methods><class-id>Roassal.ROMouseDragging class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">step: value	^ self new step: value</body></methods><methods><class-id>Roassal.RONIdentityNormalizer</class-id> <category>initialize-release</category><body package="Roassal-Core">colorNames	^ #(#black #veryVeryDarkGray #veryDarkGray #darkGray #gray #lightGray #veryLightGray #veryVeryLightGray #white #red #yellow #green #cyan #blue #magenta #brown #orange #lightRed #lightYellow #lightGreen #lightCyan #lightBlue #lightMagenta #lightBrown #lightOrange #transparent)</body><body package="Roassal-Core">initialize		super initialize.	colorIndex := 0.	dictionary := IdentityDictionary new.	command := #yourself</body></methods><methods><class-id>Roassal.RONIdentityNormalizer</class-id> <category>private</category><body package="Roassal-Core">nextColor		colorIndex := colorIndex \\ self colorNames size + 1.	^Color perform: (self colorNames at: colorIndex)</body><body package="Roassal-Core">setIndexTo: colorAsSymbol	"colorAsSymbol has to be one of Color colorNames. 	The method set the current index to the color given in parameter"		colorIndex := (self colorNames indexOf: colorAsSymbol) - 1</body></methods><methods><class-id>Roassal.RONIdentityNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">roValue: anEntity		^dictionary		at: (command roValue: anEntity)		ifAbsentPut: [ self nextColor ]</body></methods><methods><class-id>Roassal.RONIdentityNormalizer class</class-id> <category>instance creation</category><body package="Roassal-Core">beginingAtBlue	^ self new			setIndexTo: #blue;			yourself</body><body package="Roassal-Core">beginingAtRed	^ self new			setIndexTo: #red;			yourself</body><body package="Roassal-Core">withCommand: aBlock		^(self new)		command: aBlock;		yourself</body></methods><methods><class-id>Roassal.RONExplicitIdentityNormalizer</class-id> <category>accessing</category><body package="Roassal-Core">colors		^colors</body><body package="Roassal-Core">colors: anObject		colors := anObject</body><body package="Roassal-Core">defaultColor		^defaultColor</body><body package="Roassal-Core">defaultColor: anObject		defaultColor := anObject</body></methods><methods><class-id>Roassal.RONExplicitIdentityNormalizer</class-id> <category>private</category><body package="Roassal-Core">nextColor		colorIndex := colorIndex + 1.	^colorIndex &gt; self colors size		ifTrue: [ self defaultColor ]		ifFalse: [ self colors at: colorIndex ]</body></methods><methods><class-id>Roassal.RONExplicitIdentityNormalizer class</class-id> <category>instance creation</category><body package="Roassal-Core">withCommand: aBlock withColors: aCollection withDefaultColor: aColor		^(self withCommand: aBlock)		colors: aCollection;		defaultColor: aColor;		yourself</body></methods><methods><class-id>Roassal.ROAddName</class-id> <category>util</category><body package="Roassal-Core">getNewLabelFor: anElement	| label |	label := ROElement on: (block roValue: anElement).	label + self getNewLabelShape + ROBox white.	^ label</body><body package="Roassal-Core">getNewLabelShape	^ ROLabel new color: color</body></methods><methods><class-id>Roassal.ROAddName</class-id> <category>public</category><body package="Roassal-Core">toElement: anElement	| label |	"Do nothing if it has already a name"	(self hasName: anElement)		ifTrue: [ ^ self ].	label := self getNewLabelFor: anElement.	(anElement attributes includesKey: #addedName)		ifFalse: [ anElement attributes at: #addedName put: OrderedCollection new ].	(anElement attributes at: #addedName) add: label.	anElement view add: label.	ROConstraint stick: label below: anElement</body></methods><methods><class-id>Roassal.ROAddName</class-id> <category>configuration</category><body package="Roassal-Core">defaultBlock	^ [ :el | el model printString ]</body><body package="Roassal-Core">defaultColor	^ Color black</body></methods><methods><class-id>Roassal.ROAddName</class-id> <category>initialize-release</category><body package="Roassal-Core">initialize	super initialize.	color := self defaultColor.	block := self defaultBlock</body></methods><methods><class-id>Roassal.ROAddName</class-id> <category>accessing</category><body package="Roassal-Core">block	^ block</body><body package="Roassal-Core">block: aOneArgBlock	"The block is used to get the name of the element to add. It is initialized with the value defaultBlock"	block := aOneArgBlock</body><body package="Roassal-Core">color: aColor 	color := aColor</body></methods><methods><class-id>Roassal.ROAddName</class-id> <category>testing</category><body package="Roassal-Core">hasName: anElement	^ anElement attributes includesKey: #addedName</body></methods><methods><class-id>Roassal.ROAddName class</class-id> <category>public</category><body package="Roassal-Core">hasName: anElement	^ self new hasName: anElement</body><body package="Roassal-Core">removeFrom: anElement 	(anElement attributes includesKey: #addedName)		ifTrue: [ (anElement attributes at: #addedName) do: #remove.				anElement attributes removeKey: #addedName ]</body><body package="Roassal-Core">toElement: anElement	^ self new toElement: anElement</body></methods><methods><class-id>Roassal.ROCellMatrix</class-id> <category>accessing</category><body package="Roassal-Core">columnCount	^ ncols</body><body package="Roassal-Core">rowCount	^ nrows</body></methods><methods><class-id>Roassal.ROCellMatrix</class-id> <category>accessing rows/columns</category><body package="Roassal-Core">atColumn: column	| p |	p := (self indexForRow: 1 andColumn: column) - ncols.	^ (1 to: nrows) collect: [ :row | contents at: (p := p+ncols) ]</body><body package="Roassal-Core">atRow: row	(row between: 1 and: nrows)		ifFalse: [ self error: '1st subscript out of range' ].	^ contents copyFrom: (row - 1) * ncols + 1 to: row * ncols</body></methods><methods><class-id>Roassal.ROCellMatrix</class-id> <category>private</category><body package="Roassal-Core">indexForRow: row andColumn: column	(row between: 1 and: nrows)		ifFalse: [self error: '1st subscript out of range'].	(column between: 1 and: ncols)		ifFalse: [self error: '2nd subscript out of range'].	^ (row - 1) * ncols + column</body><body package="Roassal-Core">rows: rows columns: columns contents: anArray	(((rows isInteger and: [rows &gt;= 0]) and: 		[columns isInteger and: [columns &gt;= 0]]) and:			[ rows * columns = anArray size ]) ifFalse: [ self error: 'Wrong parameters' ].	nrows := rows.	ncols := columns.	contents := anArray</body></methods><methods><class-id>Roassal.ROCellMatrix class</class-id> <category>as yet unclassified</category><body package="Roassal-Core">rows: rows columns: columns contents: contents	^self new rows: rows columns: columns contents: contents</body></methods><methods><class-id>Roassal.ROAnimationExclusive</class-id> <category>hooks</category><body package="Roassal-Core">added: animation in: aView	"The animation for which I am associated with has been added in aView"	"We need to remove all other animation"	aView removeAnimationSuchThat: [ :ani | ani class == animation class ]</body></methods><methods><class-id>Roassal.ROAnimationExclusive</class-id> <category>testing</category><body package="Roassal-Core">isExclusive	^ true</body></methods><methods><class-id>Roassal.RORemoveNodeTest</class-id> <category>tests</category><body package="Roassal-Core">testBasic	| view el1 el2 el3 el4 el | 	view := ROView new.	view add: (el1 := ROElement on: 1).	view add: (el2 := ROElement on: 2).	view add: (el3 := ROElement on: 3).	view add: (el4 := ROElement on: 4).		view addAll: (ROEdge linesFor: (Array with: el1 -&gt; el2 with: el1 -&gt; el1 with: el3 -&gt; el1)).	self assert: view numberOfElements = 7.	RORemoveNode suchThat: [ :e | e == el1 ] in: view.	self assert: view numberOfElements = 3.</body></methods><methods><class-id>Roassal.ROSmoothLayoutTranslatorTest</class-id> <category>tests</category><body package="Roassal-Core">testLayout	| result |	layout translator: ROSmoothLayoutTranslator new.	self deny: view hasAnimation.	layout applyOn: elements.	self assert: view hasAnimation.	self assert: ((elements collect: #positionAsInteger) asSet asArray first = (0@0)).	self assert: layout translator hasCompleted not.		view doAllAnimationCycles.	self assert: layout translator hasCompleted.	result := ((Array new: 5) at: 1 put: (31@5); at: 2 put: (31@75); at: 3 put: (58@145); at: 4 put: (110@5); at: 5 put: (4@145); yourself).	self assert: ((result with: (elements collect: #positionAsInteger) collect: [ :v1 :v2 | v1 - v2 ]) allSatisfy: [ :v | v &lt;= (1 @ 1) ])</body></methods><methods><class-id>Core.Integer</class-id> <category>truncation and round off</category><body package="Roassal-VWUtil">atRandom	|aRan|	aRan := Random new.	^ (aRan next * (self + 1)) truncated</body></methods><methods><class-id>Core.String</class-id> <category>roassal-util</category><body package="Roassal-VWUtil">roSubstrings	|subs index prevIndex |	subs := OrderedCollection new.	index := 1.	prevIndex := 1.	[ index &lt;= self size ] whileTrue: [		[ (index &lt;= self size) and: [ (self at: index) ~= (Core.Character space) ] ]			whileTrue: [index := index + 1.].		subs add: (self copyFrom: prevIndex to: index - 1).		index := index + 1.		prevIndex := index.	].	"subs add: (self copyFrom: prevIndex to: index - 1)."	^subs asArray</body></methods><methods><class-id>Core.Collection</class-id> <category>copying</category><body package="Roassal-VWUtil">allButFirst		^self copyFrom: 2 to: self size.</body></methods><methods><class-id>Core.Collection</class-id> <category>accessing</category><body package="Roassal-VWUtil">anyOne	"Answer a representative sample of the receiver. This method can	be helpful when needing to preinfer the nature of the contents of 	semi-homogeneous collections."	self emptyCheck.	self do: [:each | ^ each]</body></methods><methods><class-id>Core.Collection</class-id> <category>copying</category><body package="Roassal-VWUtil">copyWithoutAll: aCollection	"Answer a copy of the receiver that does not contain any elements 	equal to those in aCollection."	^ self reject: [:each | aCollection includes: each]</body></methods><methods><class-id>Core.Collection</class-id> <category>accumulating</category><body package="Roassal-VWUtil">detectMax: aBlock	"Evaluate aBlock for each element of the receiver, and answer the element that	yields the largest result.  Assumes that all values respond to #max:."	| element max |	element := self any.	max := (aBlock value: element).	self do: [ :each |		max = (max := max max: (aBlock value: each)) ifFalse: [ element := each ].	].	^element</body></methods><methods><class-id>Core.Collection</class-id> <category>mathematical operations</category><body package="Roassal-VWUtil">difference: aSet	"Answer the set difference A \ B between the receiver A and aSet B. The set	difference is defined by A \ B = { x | x in A and x not in B }."	^self select: [ :each | (aSet includes: each) not ]</body></methods><methods><class-id>Core.Collection</class-id> <category>accessing</category><body package="Roassal-VWUtil">fifth	^self at:5</body><body package="Roassal-VWUtil">first	self emptyCheck.	^self basicAt: 1</body><body package="Roassal-VWUtil">fourth	 ^self at:4</body></methods><methods><class-id>Core.Collection</class-id> <category>comparing</category><body package="Roassal-VWUtil">includesAll: aCollection 	"Answer true if the receiver includes all elements of aCollection with at	least as many occurrences as in aCollection. For a less strict comparison	please refer to supersetOf: and its inverse subsetOf:."	^(aCollection isCollection) and: [		aCollection size &lt;= self size and: [			aCollection allSatisfy: [ :each | 				(aCollection occurrencesOf: each) &lt;= (self occurrencesOf: each) ]]]</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal-VWUtil">intersection: aCollection	"Answer the set theoretic intersection of two collections."	| set outputSet |		set := self asSet.	outputSet := Set new.		aCollection do: [ :each|		((set includes: each) and: [(outputSet includes: each) not])			ifTrue: [ 				outputSet add: each]].			^ self species withAll: outputSet asArray</body></methods><methods><class-id>Core.Collection</class-id> <category>testing</category><body package="Roassal-VWUtil">isCollection	"Answer true if the receiver is a collection, excluding character arrays, ie strings,	which are treated as non-collections. This choice has proven to be most practical."	^true</body></methods><methods><class-id>Core.Collection</class-id> <category>roassal - pharo compatibility</category><body package="Roassal-VWUtil">max	^ self inject: self anyOne into: [:max :each | max max: each]</body><body package="Roassal-VWUtil">min	^ self inject: self anyOne into: [:min :each | min min: each]</body></methods><methods><class-id>Core.Collection</class-id> <category>accessing</category><body package="Roassal-VWUtil">second	^self at:2</body></methods><methods><class-id>Core.Collection</class-id> <category>roassal - pharo compatibility</category><body package="Roassal-VWUtil">select: selectBlock thenCollect: collectBlock	"Utility method to improve readability."	^ (self select: selectBlock) collect: collectBlock</body></methods><methods><class-id>Core.Collection</class-id> <category>accumulating</category><body package="Roassal-VWUtil">sum: aBlock	"Evaluate aBlock for each element of the receiver, and answer the sum 	of all values. Assumes that all values respond to arithmetics."	^self inject: Number zero into: [ :sum :each | sum + (aBlock value: each) ]</body></methods><methods><class-id>Core.Collection</class-id> <category>accessing</category><body package="Roassal-VWUtil">third	^self at:3</body></methods><methods><class-id>Core.Collection</class-id> <category>enumerating</category><body package="Roassal-VWUtil">with: otherCollection collect: twoArgBlock 	"Collect and return the result of evaluating twoArgBlock with 	corresponding elements from this collection and otherCollection."	| result |	otherCollection size = self size ifFalse: [self error: 'otherCollection must be the same size'].	result := self species new: self size.	1 to: self size do:		[:index | result at: index put: (twoArgBlock value: (self at: index)									value: (otherCollection at: index))].	^ result</body></methods><methods><class-id>Core.Object</class-id> <category>controlling</category><body package="Roassal-VWUtil">assert: aBlock	aBlock value ifFalse: [ self error: 'Assertion failed' ]</body><body package="Roassal-VWUtil">assert: aBlock description: aString	aBlock value ifFalse: [ self error: aString]</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="Roassal-VWUtil">isCollection	^false</body><body package="Roassal-VWUtil">isFloat	"Overridden to return true in Float, natch"	^ false</body><body package="Roassal-VWUtil">isNumber	"Overridden to return true in Number, natch"	^ false</body><body package="Roassal-VWUtil">isRectangle	^false</body></methods><methods><class-id>Core.Announcer</class-id> <category>accessing</category><body package="Roassal-VWUtil">numberOfSubscriptions	self subscriptionRegistryOrNil ifNil:[ ^ 0 ].	^ self subscriptionRegistryOrNil allSubscriptions size</body></methods><methods><class-id>Core.Number</class-id> <category>comparing</category><body package="Roassal-VWUtil">closeTo: num	"are these two numbers close?"	num isFloat ifTrue: [^ num closeTo: self asFloat].	^[self = num] ifError: [false]</body></methods><methods><class-id>Core.Number</class-id> <category>testing</category><body package="Roassal-VWUtil">isNumber	^ true</body></methods><methods><class-id>Core.Point</class-id> <category>converting</category><body package="Roassal-VWUtil">asIntegerPoint	"	(5.6 @ 7.3) asIntegerPoint	"	^ Point x: self x asInteger y: self y asInteger</body></methods><methods><class-id>Core.Point</class-id> <category>point functions</category><body package="Roassal-VWUtil">closeTo: aPoint 	^ (x closeTo: aPoint x) and: [ y closeTo: aPoint y ]</body></methods><methods><class-id>Core.Point</class-id> <category>testing</category><body package="Roassal-VWUtil">nearestPointAlongLineFrom: p1 to: p2 	"Note this will give points beyond the endpoints.	Streamlined by Gerardo Richarte 11/3/97"	"Copied from Pharo"	| x21 y21 t x1 y1 |	p1 x = p2 x ifTrue: [ ^ p1 x @ y ].	p1 y = p2 y ifTrue: [ ^ x @ p1 y ].	x1 := p1 x asFloat.	y1 := p1 y asFloat.	x21 := p2 x asFloat - x1.	y21 := p2 y asFloat - y1.	t := ((y asFloat - y1) / x21 + ((x asFloat - x1) / y21)) / (x21 / y21 + (y21 / x21)).	^ (x1 + (t * x21)) @ (y1 + (t * y21))</body><body package="Roassal-VWUtil">onLineFrom: p1 to: p2 within: epsilon	"Answer true if the receiver lies on the given line segment between p1 and p2 within a small epsilon."	"is this point within the box spanning p1 and p2 expanded by epsilon? (optimized)"	p1 x &lt; p2 x		ifTrue: [			((x &lt; (p1 x - epsilon)) or: [x &gt; (p2 x + epsilon)]) ifTrue: [^ false]]		ifFalse: [			((x &lt; (p2 x - epsilon)) or: [x &gt; (p1 x + epsilon)]) ifTrue: [^ false]].	p1 y &lt; p2 y		ifTrue: [			((y &lt; (p1 y - epsilon)) or: [y &gt; (p2 y + epsilon)]) ifTrue: [^ false]]		ifFalse: [			((y &lt; (p2 y - epsilon)) or: [y &gt; (p1 y + epsilon)]) ifTrue: [^ false]].	"it's in the box; is it on the line?"	^ (self dist: (self nearestPointAlongLineFrom: p1 to: p2)) &lt;= epsilon</body></methods><methods><class-id>Core.Behavior</class-id> <category>roassal-util</category><body package="Roassal-VWUtil">linesOfCode 	"An approximate measure of lines of code.	Includes comments, but excludes blank lines."	| lines |	lines := self getMethodDictionary inject: 0 into: [:sum :each | sum + each linesOfCode]. 	^ self isMeta 		ifTrue: [lines]		ifFalse: [lines + self class linesOfCode]</body></methods><methods><class-id>Core.Behavior</class-id> <category>private</category><body package="Roassal-VWUtil">numberOfMethods	"count all methods that are local (not comming from a trait)"	| num |	num := self methodDictionary size.	^ self isMeta  		ifTrue: [ num ]		ifFalse: [ num + self class numberOfMethods ]</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>html</category><body package="Roassal-VWUtil">asHTMLColor	"	***This is decompiled code.*** 	The source was unavailable because the source pointer appears to point to 	an incorrect position in the file. The file may have been modified after this 	method was updated."	| t1 |	t1 := String new.	^t1 := '#' , ((self red * 255 / 16) truncated printStringRadix: 16) , ((self red * 255 rem: 16) truncated printStringRadix: 16) , ((self green * 255 / 16) truncated printStringRadix: 16) , ((self green * 255 rem: 16) truncated printStringRadix: 16) , ((self blue * 255 / 16) truncated printStringRadix: 16) , ((self blue * 255 rem: 16) truncated printStringRadix: 16)</body></methods><methods><class-id>Graphics.ColorValue</class-id> <category>groups of shades</category><body package="Roassal-VWUtil">mix: color2 shades: thisMany 	"Return an array of thisMany colors from self to color2. Very useful for displaying color based on a variable in your program.  "	"Color showColors: (Color red mix: Color green shades: 12)"	"From Pharo for compatibility. Author:"	| redInc greenInc blueInc out rr gg bb |	thisMany = 1 ifTrue: [ ^ Array with: color2 ].	redInc := (color2 red - self red) / (thisMany - 1).	greenInc := (color2 green - self green) / (thisMany - 1).	blueInc := (color2 blue - self blue) / (thisMany - 1).	rr := self red.	gg := self green.	bb := self blue.	out := (1 to: thisMany) collect: 		[ :num | | c | 		c := Color 			r: rr			g: gg			b: bb.		rr := rr + redInc.		gg := gg + greenInc.		bb := bb + blueInc.		c ].	out 		at: out size		put: color2.	"hide roundoff errors"	^ out</body></methods><methods><class-id>Graphics.Rectangle class</class-id> <category>instance creation</category><body package="Roassal-VWUtil">merging: listOfRects 	"A number of callers of merge: should use this method."	| minX minY maxX maxY |	listOfRects do: 		[ :r | 		minX 			ifNil: 				[ minX := r topLeft x.				minY := r topLeft y.				maxX := r bottomRight x.				maxY := r bottomRight y ]			ifNotNil: 				[ minX := minX min: r topLeft x.				minY := minY min: r topLeft y.				maxX := maxX max: r bottomRight x.				maxY := maxY max: r bottomRight y ] ].	^ minX @ minY corner: maxX @ maxY</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Roassal-VWUtil">extendBy: delta 	"Answer a Rectangle with the same origin as the receiver, but whose corner is offset by delta. delta is a 	Rectangle, Point, or scalar."	(delta isRectangle)		ifTrue: [^Rectangle 					origin: origin					corner: corner + delta corner]		ifFalse: [^Rectangle 					origin: origin					corner: corner + delta]</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>testing</category><body package="Roassal-VWUtil">isRectangle	^true</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>transforming</category><body package="Roassal-VWUtil">translateBy: aDelta 		"^Rectangle origin: origin + aDelta corner: corner + aDelta"	^self translatedBy: aDelta</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="Roassal-VWUtil">translateTo: aPoint		| currentExtent |	currentExtent := self extent.	origin := aPoint.	self extent: currentExtent</body></methods><methods><class-id>Core.Float</class-id> <category>comparing</category><body package="Roassal-VWUtil">closeTo: num 	"are these two numbers close?"	num isNumber ifFalse: [^[self = num] ifError: [false]].	self = 0.0 ifTrue: [^num abs &lt; 0.0001].	num = 0 ifTrue: [^self abs &lt; 0.0001].	^self = num asFloat		or: [(self - num) abs / (self abs max: num abs) &lt; 0.0001]</body></methods><methods><class-id>Core.Float</class-id> <category>testing</category><body package="Roassal-VWUtil">isFloat	^ true</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>enumerating</category><body package="Roassal-VWUtil">lineCount	"Answer the number of lines represented by the receiver, where every line delimiter CR, LF or CRLF pair adds one line."	| lineCount |	lineCount := 0.	self lineIndicesDo: [:start :endWithoutDelimiters :end |		lineCount := lineCount + 1].	^lineCount</body><body package="Roassal-VWUtil">lineIndicesDo: aBlock	"execute aBlock with 3 arguments for each line:	- start index of line	- end index of line without line delimiter	- end index of line including line delimiter(s) CR, LF or CRLF"		| cr lf start sz nextLF nextCR |	start := 1.	sz := self size.	cr := Character cr.	(nextCR := self nextIndexOf: cr from: 1 to: self size) ifNil:[nextCR:= 0].	lf := Character lf.	(nextLF := self nextIndexOf: lf from: 1 to: self size) ifNil:[nextLF := 0].	[ start &lt;= sz ] whileTrue: [		(nextLF = 0 and: [ nextCR = 0 ])			ifTrue: [ "No more CR, nor LF, the string is over"					aBlock value: start value: sz value: sz.					^self ].		(nextCR = 0 or: [ 0 &lt; nextLF and: [ nextLF &lt; nextCR ] ])			ifTrue: [ "Found a LF"					aBlock value: start value: nextLF - 1 value: nextLF.					start := 1 + nextLF.					(nextLF := self nextIndexOf: lf from: start to: self size) ifNil:[nextLF := 0]. ]			ifFalse: [ 1 + nextCR = nextLF				ifTrue: [ "Found a CR-LF pair"					aBlock value: start value: nextCR - 1 value: nextLF.					start := 1 + nextLF.					(nextCR := self nextIndexOf: cr from: start to: self size) ifNil:[nextCR := 0].					(nextLF := self nextIndexOf: lf from: start to: self size) ifNil:[nextLF := 0].]				ifFalse: [ "Found a CR"					aBlock value: start value: nextCR - 1 value: nextCR.					start := 1 + nextCR.					(nextCR := self nextIndexOf: cr from: start to: self size) ifNil:[nextCR := 0].]]]</body><body package="Roassal-VWUtil">lines	"Answer all lines of the receiver (uses CR as line break)"	| lines |	lines := OrderedCollection new.	self lineIndicesDo: [:start :endWithoutDelimiters :end |		lines add: (self copyFrom: start to: endWithoutDelimiters) ].	^lines</body><body package="Roassal-VWUtil">linesDo: aBlock	self lines do: [:line | aBlock value: line].</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>adding</category><body package="Roassal-VWUtil">at: index ifAbsentPut: block	"Return value at index, however, if value does not exist (nil or out of bounds) then add block's value at index (growing self if necessary)"	| v |	index &lt;= self size ifTrue: [		^ (v := self at: index)			ifNotNil: [v]			ifNil: [self at: index put: block value]	].	[self size &lt; index] whileTrue: [self add: nil].	^ self at: index put: block value</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>collection-arithmetic</category><body package="Roassal-VWUtil">max	^ self inject: self anyOne into: [:max :each | max max: each]</body><body package="Roassal-VWUtil">maxValue: aBlock	^ self inject: (aBlock value: self anyOne) into: [:max :each | max max: (aBlock value: each)]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="Roassal-VWUtil">roassalIcon	^ [ Tools.ToolbarIconLibrary visualFor: #roassalSmall ] on: Error do: [ :ex | 		 Tools.ToolbarIconLibrary visualFor: #canvas ]</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>roassal-core</category><body package="Roassal-VWUtil">linesOfCode	"An approximate measure of lines of code.	Includes comments, but excludes empty lines."	| lines |	lines := 0.	"It may happens that there is no source"	self getSource ifNil: [ ^ 0 ].	self getSource asString lineIndicesDo: [:start :endWithoutDelimiters :end |		endWithoutDelimiters &gt; start ifTrue: [lines := lines+1]].	^lines</body></methods><methods><class-id>Core.Interval</class-id> <category>testing</category><body package="Roassal-VWUtil">rangeIncludes: aNumber	"Return true if the number lies in the interval between start and stop."	step &gt;= 0		ifTrue: [^ aNumber between: start and: stop]		ifFalse: [^ aNumber between: stop and: start]</body></methods><methods><class-id>Core.Array</class-id> <category>*roassal-core</category><body package="Roassal-Core">@ interactionClassOrObject	| obj |	obj := interactionClassOrObject elementToBeAdded.	self do: [ :el | el addInteraction: obj ].	^ self</body></methods><methods><class-id>Core.Point class</class-id> <category>*roassal-core</category><body package="Roassal-Core">radius: radius theta: angle	^ (radius * angle cos) @ (radius * angle sin)</body></methods><methods><class-id>Core.Number</class-id> <category>*roassal-core</category><body package="Roassal-Core">max: max in: anInterval 	"	(0 max: 20 in: (1 to: 10)) == 1	(0 max: 20 in: (0 to: 10)) == 0	(0 max: 20 in: (1 to: 10)) == 1	(2 max: 20 in: (0 to: 10)) == 1 	(4 max: 20 in: (0 to: 10)) == 2	(20 max: 20 in: (0 to: 10)) == 10	"	^ self min: 0 max: max in: anInterval</body><body package="Roassal-Core">min: min max: max in: anInterval 	"	(0 max: 20 in: (1 to: 10)) == 1	(0 max: 20 in: (0 to: 10)) == 0	(0 max: 20 in: (1 to: 10)) == 1	(2 max: 20 in: (0 to: 10)) == 1 	(4 max: 20 in: (0 to: 10)) == 2	(19 max: 20 in: (0 to: 10)) == 10	"	min = max ifTrue: [ ^ min ].	^ (self - min) / (max - min) * (anInterval last - anInterval first) + anInterval first</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>*roassal-core</category><body package="Roassal-Core">reverseSortedAs: aSortBlockOrSymbol	^ (self sortedAs: aSortBlockOrSymbol) reverse</body><body package="Roassal-Core">roSwapElement: u withElement: v	| index1 index2 |	index1 := self indexOf: u.	index2 := self indexOf: v.	self at: index2 put: u.	self at: index1 put: v.</body><body package="Roassal-Core">sortedAs: aSortBlockOrSymbol	"Answer a SortedCollection whose elements are the elements of the 	receiver. The sort order is defined by the argument, aSortBlock."	"Return a new collection. This method does not do a side effect"	| aSortedCollection aSortBlock |	aSortedCollection := SortedCollection new: self size.	aSortBlock := 		aSortBlockOrSymbol isSymbol 			ifTrue: [ [:a :b | |t1 t2|							t1 := (a perform: aSortBlockOrSymbol).							t2 := (b perform: aSortBlockOrSymbol).							((t1 isKindOf: Boolean) and: [t2 isKindOf: Boolean])								ifTrue: [ t1 ]								ifFalse: [ t1 &lt; t2 ] ] ]			ifFalse: [ 				(aSortBlockOrSymbol numArgs = 1)					ifTrue: [ [ :v1 :v2 | (aSortBlockOrSymbol value: v1) &lt; (aSortBlockOrSymbol value: v2) ] ]					ifFalse: [ aSortBlockOrSymbol ] ].	aSortedCollection sortBlock: aSortBlock.	aSortedCollection addAll: self.	^ aSortedCollection</body></methods><methods><class-id>Core.Class</class-id> <category>*roassal-core</category><body package="Roassal-Core">numberOfSubclasses	^ self allSubclasses size</body><body package="Roassal-Core">numberOfVariables	^ self instVarNames size</body></methods><methods><class-id>Core.ClassDescription</class-id> <category>*roassal-core</category><body package="Roassal-Core">numberOfLinesOfCode 	"Return the amount of lines of code"		^ 5 + ((Roassal.RONativeExampleUtility current getMethodsForClass: self)  inject: 0 into: [:sum :el | sum + el linesOfCode ])</body></methods><methods><class-id>Core.Object</class-id> <category>*roassal-core</category><body package="Roassal-Core">roValue: anArgument 	^ self</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>*Roassal-Layout-rectangle functions</category><body package="Roassal-Core">areasOverlapingOutside: aRectangle 	"Answer an Array of maximazed Rectangles comprising (overlaped by each other) the parts of the receiver not 	intersecting aRectangle."	"Make sure the intersection is non-empty"	| areas |	(self intersects: aRectangle) ifFalse: [ ^ Array with: self ].	areas := OrderedCollection new.	aRectangle origin y &gt; origin y 		ifTrue: 			[ areas addLast: (origin corner: corner x @ aRectangle origin y) ].	aRectangle corner y &lt; corner y 		ifTrue: 			[ areas addLast: (origin x @ aRectangle corner y corner: corner) ].	aRectangle origin x &gt; origin x 		ifTrue: 			[ areas addLast: (origin corner: aRectangle origin x @ corner y) ].	aRectangle corner x &lt; corner x 		ifTrue: 			[ areas addLast: (aRectangle corner x @ origin y corner: corner) ].	^ areas</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>*Roassal-Layout-accessing</category><body package="Roassal-Core">halfPerimeter	^ self width + self height</body><body package="Roassal-Core">perimeter	^ self halfPerimeter * 2</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>*Roassal-Core</category><body package="Roassal-Core">roCorner: aPoint	"This method should not be. But the tree map layout works that way"	corner := aPoint</body><body package="Roassal-Core">roOrigin: aPoint	"This method should not be. But the tree map layout works that way"	origin := aPoint</body></methods><methods><class-id>Core.Symbol</class-id> <category>*roassal-core</category><body package="Roassal-Core">roValue: anObject 	^ anObject perform: self</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>roassal - pharo compatibility</category><body package="Roassal-VWSpecific">maxValue: aBlock	^ self inject: (aBlock value: self anyOne) into: [ :max :each | max max: (aBlock value: each) ]</body><body package="Roassal-VWSpecific">withIndexDo: elementAndIndexBlock 	"Just like with:do: except that the iteration index supplies the second argument to the block."	1 to: self size do:		[:index |		elementAndIndexBlock			value: (self at: index)			value: index]</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>evaluating</category><body package="Roassal-VWSpecific">ifError: errorHandlerBlock	"Evaluate the block represented by the receiver, and normally return it's value.  If an error occurs, the errorHandlerBlock is evaluated, and it's value is instead returned.  The errorHandlerBlock must accept zero, one, or two parameters (the error message and the receiver)."	"Examples:		[1 whatsUpDoc] ifError: [:err :rcvr | 'huh?'].		[1 / 0] ifError: [:err :rcvr |			'ZeroDivide' = err				ifTrue: [Float infinity]				ifFalse: [self error: err]]"	^ self on: Error do: [:ex |		errorHandlerBlock cull: ex description cull: ex receiver]</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>accessing</category><body package="Roassal-VWSpecific">receiver	"Return the object from which the block come from		[ self ] receiver == self	"self halt.	copiedValues isCollection ifFalse: [ ^ copiedValues ].	^ copiedValues at: 2</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>*roassal-core</category><body package="Roassal-VWSpecific">roValue: valueOrArray	self numArgs = 0 ifTrue: [ ^ self value ].  	self numArgs = 1 ifTrue: [ ^ self value: valueOrArray ].		"if I have more than 1 argument, then the valueOrArray is a collection"	valueOrArray isCollection ifFalse: [ self error: 'A block with more than one argument can only be evaluated with a collection ' ].		self numArgs = valueOrArray size ifTrue: [ ^ self valueWithArguments: valueOrArray ]. 		self error: 'Incorrect number of arguments'</body></methods><methods><class-id>Graphics.ImplementationFont</class-id> <category>accessing</category><body package="Roassal-VWSpecific">pointSize	^ self pixelSize</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Roassal-VWSpecific">roassalIcon	^ Tools.ToolbarIconLibrary visualFor: #roassalSmall</body></methods><methods><class-id>Roassal.RoassalUI class</class-id> <category>interface specs</category><body package="Roassal-VWSpecific">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 310 114 1062 602 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 1365 711 ) 					#name: #drawingWrapper 					#flags: 0 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} 1024 8191 1024 ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) 						#setSelectionForegroundColor: #(#{Graphics.ColorValue} #cyan ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 8191 4096 6143 ) ) 					#component: #drawingWrapper ) ) ) )</body></methods><methods><class-id>Roassal.RoassalIcons class</class-id> <category>instance creation</category><body package="Roassal-VWSpecific">objectProfileMediumRoassal2	"UIMaskEditor new openOnClass: self andSelector: #objectProfileMedium"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@75 depth: 11 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7098 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7516 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7130 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6424 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6777 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6135 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 4625 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5107 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6103 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5974 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 4657 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7644 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7291 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7259 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5203 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5267 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6103 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5171 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6777 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5749 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7548 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5878 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7034 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5428 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7130 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7548 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7130 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5621 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6167 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6135 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 4657 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6649 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7227 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7066 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6970 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6488 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5300 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6135 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7644 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7612 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7034 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6392 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5781 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5267 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5332 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6006 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7098 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6231 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6456 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5717 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7452 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7130 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5781 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7677 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7163 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7130 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6938 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6263 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6617 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5846 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6199 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4721 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6006 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7098 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7066 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7066 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6167 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7901 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6360 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5460 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5332 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 4721 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5653 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7034 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6327 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5460 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5267 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4721 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6231 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5974 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7837 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7163 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7195 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7420 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5589 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6231 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5460 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5235 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6488 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7163 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4753 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5492 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5203 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7644 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7002 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7130 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6360 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6327 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5332 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5267 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6360 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7901 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7066 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7227 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7034 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6681 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6809 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6295 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6263 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5846 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7066 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5942 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5139 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7323 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6327 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6809 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6841 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5524 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5460 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6295 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5300 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4786 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5878 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6135 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7130 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7323 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7227 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6327 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7002 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6392 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7677 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6681 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5524 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6295 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5557 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4850 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5396 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6327 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4882 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6649 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6392 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7098 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5781 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5492 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4882 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4850 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4818 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7130 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5139 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7773 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7130 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7291 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7163 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6327 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6360 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6327 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6360 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5396 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4850 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5846 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6360 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6424 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5460 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5589 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5653 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5428 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4882 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6327 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6360 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5717 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6424 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6038 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7612 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7195 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5653 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6360 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5589 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4882 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4914 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6231 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5300 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6681 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7163 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7163 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6809 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6713 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5589 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5621 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4882 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7452 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7002 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4914 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4850 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7580 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7163 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6841 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7195 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6809 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5428 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5942 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4978 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7227 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7066 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7163 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4946 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5267 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5300 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7195 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6231 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6392 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5492 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6424 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4914 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4946 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5653 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6456 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6424 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7773 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5300 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7966 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7130 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6070 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6713 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5492 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5653 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6360 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7644 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5524 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5685 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4946 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6103 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5460 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5814 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6488 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5396 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5010 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6649 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5428 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5685 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5685 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6070 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 8191 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6520 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7420 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5846 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6584 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6488 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5235 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4978 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5010 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 5043 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5589 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5685 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6520 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5396 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7612 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7677 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7195 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7130 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5846 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6649 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6970 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6584 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5043 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6520 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7612 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7677 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7323 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6552 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6263 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5749 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5717 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5010 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6070 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6520 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5524 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6649 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6552 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5428 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5942 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7355 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7998 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8191 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7612 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7677 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7259 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7355 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7323 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5524 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5332 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5589 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5043 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5075 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6874 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5428 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5653 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 8030 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7355 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5653 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6617 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5717 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6552 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6649 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 8030 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7355 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6745 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6938 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7130 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5267 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5653 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5717 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5075 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5781 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5107 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7677 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7420 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7259 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7580 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6231 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5814 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6167 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5075 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5460 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5107 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5974 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6713 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7644 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5492 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5878 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8062 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7966 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7355 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7259 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6617 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6649 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5107 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5139 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6006 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5171 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5878 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8030 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8062 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7709 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7259 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6424 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5781 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5139 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5300 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5846 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5524 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5621 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6231 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6135 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7934 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7098 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6745 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6777 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5139 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5814 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6135 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5300 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5974 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7934 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6745 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5685 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5878 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6167 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5878 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6006 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7098 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7130 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5203 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5139 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6681 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5878 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5910 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5235 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7259 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7291 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5557 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5910 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5653 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5171 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5685 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7966 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7227 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7420 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6809 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6809 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5685 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5910 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6135 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6809 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5589 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7677 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7259 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6520 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7291 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5846 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6745 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6360 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5203 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5396 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6231 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6777 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6841 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6745 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6231 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6295 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5942 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7098 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5235 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7130 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7387 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6584 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6809 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7195 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7259 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6841 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6809 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5235 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5332 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6745 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8030 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7355 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7387 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7420 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6777 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6809 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7998 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7291 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6360 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5428 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5621 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5235 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5300 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6584 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6745 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7323 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7163 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6906 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6745 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5749 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5492 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5685 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5267 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6777 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6809 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7291 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5332 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5878 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7066 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5653 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7291 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6938 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6874 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6038 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5781 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6809 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6777 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5267 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5910 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5846 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6006 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6456 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7163 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5332 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7098 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7966 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7323 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7612 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7259 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 8191 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7227 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6874 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6809 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6103 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7709 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7966 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7998 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7323 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6841 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7452 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7355 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6841 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6745 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6777 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7484 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6681 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7291 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7612 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7195 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7709 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6617 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6681 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7773 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5428 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6874 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5332 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6038 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6841 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5685 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7484 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7741 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6617 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7291 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7259 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5492 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6038 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6874 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5814 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5364 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5396 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5589 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5814 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5428 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6906 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6103 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7580 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6777 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7291 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6970 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6874 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6906 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5814 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5364 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6070 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6617 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6038 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7195 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6649 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6038 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7580 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7355 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6906 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6970 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6488 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7516 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5781 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6906 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5846 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5428 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7420 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5910 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7195 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8030 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7387 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7484 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7323 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6906 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6038 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6906 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5524 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5396 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5846 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6938 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5846 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6135 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6552 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6906 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5910 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7580 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6745 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7741 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7387 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7484 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7420 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7644 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6231 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5749 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6938 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5460 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5846 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6135 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5589 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5910 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6906 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5974 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6906 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5524 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6038 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8126 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7580 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7323 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7355 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7387 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7323 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6231 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6424 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6938 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5075 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7580 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6938 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7291 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7195 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 7002 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5814 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5814 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8126 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7355 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7387 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6970 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7452 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7323 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6070 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 7002 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6970 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5460 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5492 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5942 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5589 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6135 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7291 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6038 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6263 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6713 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7580 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7355 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7387 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6970 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7227 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6488 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5557 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5974 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5524 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5460 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5910 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6135 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5524 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7387 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6906 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7259 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6520 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 7034 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7002 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5524 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7420 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6938 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6874 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6199 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7034 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4914 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6006 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5557 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6006 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5621 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6617 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6681 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6713 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7709 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7420 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6713 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7773 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7677 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7195 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6070 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5814 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5524 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6167 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5974 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6006 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6874 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7773 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7452 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6809 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6649 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7323 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6231 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6167 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6295 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5557 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5589 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5621 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5524 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7741 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7452 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7484 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8158 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6745 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6777 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6199 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7066 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5621 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6713 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7098 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5589 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6070 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6392 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8158 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7484 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7420 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7227 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7805 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7066 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6263 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6167 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6295 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7741 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8191 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7355 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6809 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6167 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5171 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5589 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7098 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5653 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6263 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7484 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6713 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6424 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6295 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6231 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4914 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5171 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5075 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7130 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5653 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7420 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7098 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6970 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7227 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6970 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6327 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6103 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5235 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6231 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7163 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7452 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6070 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5685 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6263 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7805 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7773 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7484 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7098 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6135 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7452 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6167 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6103 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4914 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6263 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5846 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7516 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5685 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6777 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7773 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6167 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6070 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6038 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4946 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5203 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5685 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 4272 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5653 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7773 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7452 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6906 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5685 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5781 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6295 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6038 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6103 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6231 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8191 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7805 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7002 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7644 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7420 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7130 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6424 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7227 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5717 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6167 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6231 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6295 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 4336 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5685 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6713 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7741 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7709 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6360 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5749 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6231 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7227 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6006 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6938 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7773 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7709 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7034 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6167 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6167 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5589 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6874 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5749 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5075 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 4336 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6970 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7130 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6745 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7227 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7773 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6295 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5492 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4978 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5781 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5010 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7805 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7805 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6231 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5814 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7323 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6809 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6809 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7805 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7227 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5878 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5010 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5043 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4914 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5781 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7837 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6745 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6906 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7034 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7548 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6874 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6809 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5781 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5814 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6231 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7548 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6841 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7805 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7580 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6070 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6874 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5589 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6199 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6263 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7323 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7805 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7837 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6777 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7580 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6745 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7741 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6231 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5814 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5878 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6295 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6713 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5942 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6231 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7837 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7741 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7580 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7548 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7130 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7805 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6295 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5910 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5878 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5814 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6874 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5942 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7387 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7709 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7580 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7066 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7066 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6617 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6263 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5910 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5107 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6135 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6456 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6135 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6360 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6360 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6520 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7709 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6874 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6841 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7066 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7323 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7098 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5621 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5910 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4914 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5942 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6295 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6745 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5460 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5717 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6970 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7516 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7034 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6906 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7130 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6745 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5428 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5974 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7387 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7805 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7612 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7066 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7837 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6841 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7034 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6906 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5749 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5621 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5910 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5942 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5428 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5107 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6263 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7741 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7773 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6809 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7741 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6938 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5010 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5621 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4978 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 4529 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5878 64)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7548 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7066 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7098 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4978 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5974 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5428 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5107 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5942 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7548 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7066 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7098 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5428 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6617 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7837 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7387 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6970 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7002 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6874 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5235 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5974 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6006 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5781 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5589 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 4529 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6649 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7098 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7034 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7098 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7002 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5235 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5010 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6617 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5814 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7869 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7773 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7612 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7002 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6938 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6777 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7066 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6038 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5075 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5267 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5107 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6070 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7837 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7098 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7516 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7034 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5235 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6038 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5428 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5043 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6617 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6135 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7580 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7066 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6874 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6938 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6295 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6906 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6038 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6070 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5267 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5203 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5107 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6424 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7548 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7130 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6938 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7516 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7612 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6038 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6649 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5139 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5107 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6135 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7580 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7837 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7805 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7098 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6938 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7130 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6970 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7130 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7098 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7195 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7612 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6070 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 4593 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PDZ KTAT@B @JAAB0D[PP4@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@F7@M4D90R$AJ&lt;C10KC@FHC9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PDZ@O$@S4C_0KG@"TBIPIV@4,D6@O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PA20N5@,\BIPH%@#\D5PJQ@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@F @;TB10H%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AJ@DZ@Q(AF DZ@Q(@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AH&lt;DZ@Q(AF DQ0O$@YDC-PKG@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AJ@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PBR@N''@,\BIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AJ@C9@NO@,@B"0L-@6@ERPO$@&gt;PD(@O$@&gt;PC9@O$@&gt;PC9@A9@&gt;TDV@QIACXD=@O;@&gt;4B @H%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AJ@C9@M5@Y\BP Q_A\4AU@I*@B4C9@O$@&gt;PC9@O$AH&lt;C9@KA@+LCC@L_@4&lt;C @N(AR A6PH%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PDZ@O$@9DADPIL@2@D!P@]@G0BU N @&gt;PD(@O$@&gt;PC9@QHARXD)PH$@[8B@0HT@#XB@ FU@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AJ@D#0ROAJ@D(@R @&gt;PC9@O$@&gt;PC9@Q(@&gt;PCK F)@V0BK@N4AU@E2 P&amp;@7PC9@R @&gt;PC9@O$AA&lt;E!PT*@THAB0D2@U@A^@FV@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD(@O$@&gt;PC9@O$AF C9@M!@X AY H,@;PET@V9@?0C]@O$AJ@C9@O$@&gt;PDL VEAL\AP DK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AH&lt;C9@M6@#LB^ JP@((C80O$AJ@C9@O$@&gt;PDZ@O$@.@A*PG@@&amp;$C;@U8@D@C?@M^@&gt;PD#0R AH&lt;C9@P_AWTD6PEB@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@VB@*@CSPSW@CHAL0Q/@]PC9@RO@&gt;PC9@O$@&gt;PD=PDQAX$@;0H-AE0B-@NU@?\C9@O$@&gt;PC9@O$AI@E!PSG@THAB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@M(@&lt; GO@]8CS A''@,$A:@O$AF C9@O$@&gt;PC9@O$@&lt;TB%@W-@O&lt;BE LIA[HC9@MD@4PCQ@MD@7,B70T&amp;AQDAP DK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@RQ@&gt;PABPGC@% B6@Q1@M8CG0F!@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@NO@8&lt;C(PNN@? C9@C*@F B[0IW@''@B  J]@N8@.0C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AIDC9@DI@X$BNPJ6AB @*0LM@[$C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@OS@VTBA0UQAR$EPPURAYL@"@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD$PO$@P$A00IX@- DW C^@1&lt;A$ O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD(@R AJ@D#0O$@? B6 SH@D&lt;@T@A=@G4@,@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;P@2PC"@]4BA M&gt;@HLB2PG(@&gt;PDZ@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC&gt;@J^AE4@H @\@A0@O0BD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@U2@9\B(PQLAZ\@/@S9@\(C9@RO@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AH&lt;C9@O$@(\DWP@"@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PD$@O$@&gt;PC9@O$@&gt;PC9@RO@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@RO@&gt;PC:@H"@%DBXPJJAAHC9@R @&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AALB'' Q]@BH@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC5@PCA@LC&gt;@O$@&gt;PD(@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@R @&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@P_A@LD@0O8ACHCJ I1AGL@A @\@A0@O0BD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$@^XE:POJ@UDBY K[@$$BD@O$AH&lt;C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD#0ROAH&lt;D(@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@GU@*XB9 LJ@3DCYPL2A^8E. W1@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PA0PNAAJ @Z G/AULB 0AJ@&gt;PD#0O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@BR@K4BZ0M(@0,C% N&amp;@&gt;8E!0WKA]0@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@N6@_@A[PKHAFD@ZPL5ANTC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PDZ@O$AH@AI@WQATHEU@VTA\DE4 VYA\,E7@@\@A0@O0BD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AJ$AUPDN@%$DB @#@00EB0O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@Q(@&gt;PD0 DBAUTD:@S&lt;AUXEU U7AY$E20W\@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PE^ E;@P8BVPPJ@BLCC@S7@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AF C9@R4@PHEZ@S(AO0EU UVAW\E&amp;PWKA]0@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@CR@I(BV NCAO,AHPK:AMLC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD$PO$AJDC9@RO@&gt;PC9@O$@&gt;PC9@O$@&gt;PD(@O$AIDC9@O$AIDC9@O$@&gt;PC9@O$@&gt;PDZ@O$AKPA@ U(AN D?@UVAUXE]0VYA\,E7@@\@A0@O0A/@MPA/0F%@\8B@0H&amp;@#8A% F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AATD?PJWAJ(@BPFF@.$DMPO$AH&lt;C9@O$@&gt;PC9@RO@&gt;PC9@O$@&gt;PC9@O$@&gt;PD(@O$@&gt;PC9@O$@&gt;PD(@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@Q(@&gt;PD-@DBAV D:@S&lt;AUXEU U7AY$E20W\@A0@G@@1@MPE*0J3@00CG0MO@6$C*@HB@YTBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PC9@PD@T&lt;B#@K3@0XE1PO$@&gt;PC9@O$@&gt;PC9@O$@&gt;PE1 F#@(8C^PP$AKT@-@O$AH&lt;C9@O$@&gt;PD(@O$A@LE&gt;0I&gt;@1(CK0J/@M$DL O$@&gt;PC9@O$AF C9@R4@PHEZ@S(AO0EU UVAW\E&amp;PWKA]0@G@@\@I$D2PNT@1 DHPPEA@TD$ @A@?8B@ H%@"TBIPH7AK BY0O$@@@C9@Q)@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@R @&gt;PC0@K(@X(DCPU;@PLBB@OH@&gt;$C9@R @&gt;PC9@O$@&gt;PE50L6AN0D20S?AU,DX@I;@&gt;PDZ@O$@&gt;PDZ@O$AKPA@ U(AN D?@UVAUXE]0VYA\,E7@@\@DD@&lt;PJ$AHDC9@O$@&gt;PC9@O$@&gt;PDVPO-@,\BIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@P3AF DZ@Q(AG&lt;C9@O$@&gt;PC9@O$AH&lt;C9@J?@]0@3 K;AC0E40DL@ TA? O$AJ@C9@O$AIDC9@ITAL(DX N7@=(EE0T,AS8C9@O$@&gt;PC9@Q(@&gt;PD-@DBAV D:@S&lt;AUXEU U7AY$E20W\@A0@UP@E@I8A- O$AEXDZ@Q(ACHC9@IH@:\B10H%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD#0O$@,&lt;BF0T-@!$CM@TO@@\BE0HQ@&gt;PD(@O$@&gt;PD$PO$@-LD&amp; NX@+XB: P=AO&lt;E!@O$@&gt;PC9@O$AF C9@R4@PHEZ@S(AO0EU UVAW\E&amp;PWKA]0@G@AU@CD@U E!@&gt;PD#0O$@&gt;PC9@O$@[ C-PKG@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@RO@&gt;PB30H.AR4BFPL4AP&lt;@A0HW@!DC9@R @&gt;PC9@RQ@&gt;PB40RZ@9 B- K*AC4D?0U4@&gt;PC9@O$@&gt;PDZ@O$AKPA@ U(AN D?@UVAUXE]0VYA\,E7@@\@ET@LPA0@VDC9@RO@&gt;PC9@O$@&gt;PA.@N5@,\BIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AH&lt;C9@J?@X\ACPL8AGT@GPEC@](BDPO$AD\DZ@QWACLC9@JOAI(C&amp;@J6@.(DOPS?AT,C9@P3AF DZ@P @&gt;PD @DBAV D:@S&lt;AUXEU U7AY$E20W\@A0@UP@$@G@A- O$AD\DZ@Q(ACHC9@I#@:\B10H%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PD(@O$@=PD%0EG@=8ED0CO@]@D.PP2@&gt;PC9@O$@&gt;PC9@O$@:PD]@N9@+XB: Q#AN4@X0O$@&gt;PC9@O$@&gt;PC9@V3@PHE_0S(AO0EU UVAW\E&amp;PWKA]0@G@@3@ODB)@N/@&gt;PC9@O$@&gt;PC9@O$@6LC;PJ@@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@C9AKXD1@V"@@L@&gt;0GTACLBM@C:@S8AO D/@[(D\@T@@2DB- K*@&lt;$E% B8@'',A( GV@]XA3@JMABLBK0TCAM0D?@UVAUXE]0VYA\,E7@@\@A0@_PV&amp;@ ,AZ NR@1 CL@OBAF8C;PH?@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@R @&gt;PC9@O$@&gt;PC9@O$@&gt;PCA0JF@8HC&amp;PN8@=&lt;C&lt;@S,@, B!@J6@.(B;@N)A]&lt;EW@VWA[,E8@@I@@$@&amp;0SMAJXD3 S&lt;AUXEU U7AY$E20W\@A0@G@@1@K@@C0J%@-$B&gt; L_@3$C*@H#@YTBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@Q(@&gt;PC9@Q(@&gt;PC0PT2@P&lt;CG LN@3(CT N[@+\BSPJU@+XB: K9@.4C;0S]AN$ED@T3AU\E"@UXAHXD. SNAO0EU UVAW\E&amp;PWKA]0@G@@\@C&lt;@[0CA@[&lt;A;PG-@"\BP@H(@XLA)@H%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$AJ@C9@O9@GDEZ0G_@Z\A8PG1@!0BN IY@)TB- K*@/$CM@MS@90C20O[@?&lt;DF@QMAGXD&amp;@R:AL8D?@UVAUXE]0VYA\,E7@@\@A0@O0BD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@?$@D@UZ@]DA)0G!@_DBG@H:@%$B%PJ6@.(B&gt;PL4@5LC''@OK@=,C?0PXAC&lt;D] RXAK(D3 S&lt;AUXEU U7AY$E20W\@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PC9@O$AE\DZ@Q(AF DZ@Q(AF DZ@Q(AF DZ@Q(AF DZ@Q(AF DZ@Q(@&gt;PC0P@PAV,A4PF''@^DA&lt;PH\@#(BVPJU@+XB: K9@3PCT0O\AFPD]0R''AL&lt;D+PQ6AI D. SNAO0EU UVAW\E&amp;PWKA]0@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@E\EJ0G_@Z\A8PG1@!0BN IY@)TB- K*@/$CD@OM@) F@0@ @CX@Z0F&amp;AN(D! R:AL8D?@UVAUXE]0VYA\,E7@@\@A0@O0BD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$@&gt;PC9@J-@7\CX M"@7 C^@NS@:HC,@N0@;@C00OV@=XC5 O&amp;@?(C90PT@7(D.0@4@Z A)0G!@_DBG@H:@%$B%PJ6@.(B&gt;PN]@J4@! CJ@K$@20D?AAX@8@S.AK(D3 S&lt;AUXEU U7AY$E20W\@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;P@-PCU@C\AN@D8@UXA[0FH@Z$A8@HI@",BS0I,@)XB-PK+@0&lt;CM0NA@9(C3@D#@W0A_PF''@^DA&lt;PH\@#(BVPJU@+XB: M=@X,BF@G?@&gt;PD$@RPAI@D(@P8@M@E! S\AO0EU UVAW\E&amp;PWKA]0@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@BLAB(E[@U*AZ$E/@W^A^&lt;@G AB@ED@_0B.@K8AA@DP@TPAT0E,@X0A0 GD@V\A[ E=@Z\A8PG1@!0BN IY@)TB- K*AC4D?0WG@&gt;PC9@O$@&gt;PC9@O$AVLA@ VFAN D?@UVAUXE]0VYA\,E7@@\@A0@O0BD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AR8@ @QOAK0D6 S&gt;AQHEQPU-AZ E/PW!@@ @B@AR@F4@''@B?@M&lt;AA D6@UTAV@E.@W4A)0G!@_DBG@H:@%$B%PJ6@.(DX0S-@B0C9@Q(@&gt;PC9@Q(@&gt;PEBPDRATLD:@S&lt;AUXEU U7AY$E20W\@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PDO @HAD&lt;D*0R=AL0E@PTTAU4E%PVUA[8E8 XD@C @T BI@J0@3PC!@RTAM0EX@V8A_PF''@^DA&lt;PH\@#(BVPJU@+XB: Q#AO&lt;@@@O$AF C9@O$AF C9@TI@QHEP0S(AO0EU UVAW\E&amp;PWKA]0@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@PZ@@ DS0R+AK4D3@TAAQPE[PWLA^L@B @9@EL@N@AR@H$@+@CM@NDAIPD7@U A[ E=@Z\A8PG1@!0BN IY@)TB- K*AFLD;PA$@&gt;PDU0R AJ@DZ@O$ARHAD T4AN D?@UVAUXE]0VYA_H@A AP@GH@_PBD@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AA(@B@QOAJ,D/PSLAN,E[ W$A@0DF0QNAE@EW C#@DL@"PB,@L4@8PD%@S\AV@E.@W4A)0G!@_DBG@H:@%$B%PJ6@.(DJPT,AIPC9@O$@&gt;PC9@R @&gt;PD4PC AY(D7@S&lt;AUXEU VJ@C(EF@R?AR$EMPU)@P@@0PCL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PDF @HAD&lt;D*0R=AL0EK0P\@_LB[PI-@)LB&gt;@E:@*H@" A&gt;@J0@3PC!@RTAM0EX@V8A_PF''@^DA&lt;PH\@#(BVPJU@+XB: L3@-\D"@T&lt;AD\C0POTAALBXPE@@N@E @SNAO0EU UVAX,A8 D @"$BJ I[@$DB2 @O@OT@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@PZ@@ DS0R+AK4EEPTRA@8BT N-@1\CE0L+@.DA PJE@UL@+@CM@NDAIPD7@U A[ E=@Z\A8PG1@!0BN IY@)TB- K*@/$C!@F*@W@AZ@ER@U(A80TD@L@EFPR&amp;AL8D?@UVA_LA*0V!@5&lt;C# NN@88C1@M$AY,@=PDA@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AA(@B@QOAJ,D/PV?@S D%PO$@&gt;PC9@O$@&gt;PC9@KP@!4E3 C0@L4@8PD%@S\AV@E.@W4A)0G!@_DBG@H:@%$B%PJ6@.(B&gt;PLP@;(C7@G2@#,B[ IK@=4EF RFAK(D3 S&lt;AX0D+ C6@5&lt;C9@O$@&gt;PC9@O$@&gt;PECPTE@THAB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PDF @HAD&lt;D*0R=A_@@&lt;0DJ@&gt;PC9@ROAJ@C9@O$@0TC.0TV@O@@3PC!@RTAM0EX@V8A_PF''@^DA&lt;PH\@#(BVPJU@+XB: K9@3PCT0ONA@@DFPQ@AG D!@Q6AI D. SNAO0E#@QA@]LC] O$AH&lt;D(@RO@&gt;PDG0@/AFTAV0DK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@PZ@@ DS0R+AK4E&lt;@DE@J$C9@RQ@&gt;PC9@R @&gt;PB&lt; MTAU&lt;@&lt;@CM@NDAIPD7@U A[ E=@Z\A8PG1@!0BN IY@)TB- K*@/$CM@MS@90C20O[@?&lt;DF@P?AGXD&amp;@R:AL8D?@VLAELA&amp;@M6@&gt;PD(@O$@&gt;PC9@QHA_4D^PEB@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AA(@B@QOAJ,D/PW0@OL@:0O$@&gt;PD(@O$@&gt;PC9@K2@8TEQ C0@L4@8PD%@S\AV@E.@W4A)0G!@_DBG@H:@%$B%PJ6@.(B&gt;PL4@5LC''@OK@=,C?0PXAC&lt;D] RXAK(D3 S&lt;AX0DT0F-@7XC9@RO@&gt;PD(@O$AA&lt;@@ Q9@U,AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PDF @HAD&lt;D*0R=A^TAAPWZ@&gt;PC9@O$@&gt;PC9@O$@4TB? U&lt;@O@@3PC!@RTAM0EX@V8A_PF''@^DA&lt;PH\@#(BVPJU@+XB: K9@3PCT0N\@&lt;,C60O?AA DO0Q6AI D. SNAO0E#@Q&amp;@W$C+ O$@&gt;PC9@O$@&gt;PC9@V$AI$AP DK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@PZ@@ DS0R+AK4EL@R[@H,E-@R AAHDH@PRAI@EO0J#@UL@/0CM@NDAIPD7@U A[ E=@Z\A8PG1@!0BN IY@)TB- K*@/$CM@MS@90C20O[@?&lt;DF@P?AGXD&amp;@R:AL8D?@U/A]4A4 LF@&gt;PDG0QHAA&lt;C9@W9@BT@3@DA@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AA(@B@QOAJ,D/PSLAV@CZ0VX@D8@0 CU@TXEVPL"@@0@''@B,@L4@8PD%@S\AV@E.@W4A)0G!@_DBG@H:@%$B%PJ6@.(B&gt;PL4@5LC''@OK@=,C?0PXAC&lt;D] RXAK(D3 S&lt;AUXE#PS^AF\DV V%AYDE2PUNA_PE&amp;0DT@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PDF @HAD&lt;D*0R=AL0D:0U=APHA&lt;0HI@$LBS0MP@H(@[PBI@J0@3PC!@RTAM0EX@V8A_PF''@^DA&lt;PH\@#(BVPJU@+XB: K9@3PCT0N\@&lt;,C60O?AA DO0Q6AI D. SNAO0EU UVAZ0E0 N&lt;@1DC/PN&gt;@?D@!@CT@K,@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@PZ@@ DS0R+AK4D3@TAAQPE^PXE@A&lt;@Q@BM@F8@T AR@H$@+@CM@NDAIPD7@U A[ E=@Z\A8PG1@!0BN IY@)TB- K*@/$CM@MS@90C20O[@?&lt;DF@P?AGXD&amp;@R:AL8D?@UVAUXE]0V-@AD@Q BG@I\@&amp;PBO@I @3@C-@P,AL EP@W A 0F$@"TBIPH%@#\D.@I''@&gt;P@@@O$AA(@B@QOAJ,D/PSLAPDEE@U]AYTE%PV&gt;A^HFA@@8@EH@"PB,@L4@8PD%@S\AV@E.@W4A)0G!@_DBG@H:@%$B%PJ6@.(B&gt;PL4@5LC''@OK@=,C?0PXAC&lt;D] RXAK(D3 S&lt;AUXEU U7AY$E20W\@A0@G@@?@HP@&amp;@CL@N4AB0D2@U@A^@FC@ZPBIPH%@"TBM0R8@&amp;\C9@@@@&gt;PDF @HAD&lt;D*0SLAL0E@PT1AU4E%PVUA[8E8 XD@C @T BI@J0@3PC!@RTAM0EX@V8A_PF''@^DA&lt;PH\@#(BVPJU@+XB: K9@3PCT0N\@&lt;,C60O?AA DSPQ6AI D. S\AO0EU UVAX(E&amp;PWKA]0@G@@\@C&lt;@!@BX@L0@;PDK@SHAT@E8@XLA)@H%@"TBIPH7AK BY0O$@@@C9@PZ@EPE* WO@@4E/0S+@BD@''PB/@MD@B WP@@ AQPE1@Z0@+@E2@!8BG0IN@Y$A#PJ_@+HB?0J8@#0CUPN*@&lt;&lt;C4@L@@/$CM@M*@8XDJ0S_AN&lt;EQ@SOAGXE''@V.A^XE=PU/@D\@V@BP@I&lt;E&lt;PAP@RHAEPE\@R AWPD4@W8AJPEP@W A]0GY@,\B10K7@,TD.@I''@&gt;P@@@O$AK8D+@@K@HD@[@C4AW8AI DQ@U\AI0QQ@C$E0@HZ@ (BP CS@.,B%0K&lt;@/4D60BB@5DC7 O_AE&lt;A\0QRAH\D&amp; SK@#4CD L#@2LDB0AEA[,@C @I@L@D"PBN@K4@9@DSAN@AVPE4@X8A+ W1AO@BB@ID@&amp;(B2 K.AZ&lt;CU E+@STAX0GY@E$C&lt; P]AB0DK@S:@$(C9@@@@&gt;P@#@V]A] EYPA%@FXA[0K5@J\E?@W*@98C!0FOARP@!PW&gt;ASX@SPFS@D,AK MLADH@50A3@TDBMPW6@ILAGPEH@IP@V HL@60C8@XCAP8A.0C&lt;@%LA%@H0@M A/@G)@G(@9PD-@^(BD ALAODC4PI&lt;@&amp;HB8 TJA@ E?0M&lt;@8@A+0F0A @@F0MF@/PC5PSR@U8CU0O$@@@C9@Q:@E,B0 V^@$TCY A\AC\CV@E5@&gt;(E6PE6@[DB,@L;AT(B.PL,@%0@$PM''@QX@]@V#@''HEF0H AH,B\0F=@ @B$ T\@*\C[@N:@MXCO@L[@34@2@B6@] C[PQ[@Y(EY@V7AOX@60UOAHHARPBU@E4CVPV8@T(D8 LH@,PCCPH&amp;@ 4C;POFAS4EI0FB@IXC?PJ(@&gt;P@@@O$AI0@A@S&amp;AY&lt;@D S$@''PCFPW[@''4AX @=@\TA=@J"@+TA:0NJAO C50V5A^\B*PC=@VPC*0Q;@BXB* MZ@38C, O!@:0CD M[@,,D4@KQAVDD&lt; I?A DC,PP9A]PC''0MGA[\BUPGR@Q\AB@K#@N$C(0@.AX&lt;C[ PF@&amp;PA;@MO@*,B]PP-ALDB9@E)@JXA=PR0@)DC9@@@@&gt;PDU@B ANXD^ U0AJHBQ KR@M0BLPO+@K\@9 G6@!(A9@KUAIXCR@RC@C8A_0JW@J AF@LA@?LDUPL?AEHDIPQ,AL@C=@K9@5,C@ S3@_\B+ KLAVXD_@P8AXL@F@W:@4@BWPMA@WP@,PB:@)0@(PG8@8 C[0P''A@XB= F[@%8CZPN@A@&lt;DZ0W(@4$B7@@;AMTBY0O$@@@C9@XF@_$DH D_@G,DN0FDAC\B&amp;PQJ@LLB9PT7@4HA!PPI@4(A, T#@GT@90JZAT\AS0B"@]\C,0@Y@#(DG SEAP0D!0O4@/$CV0K/AKDC$@L\@+(A1 WC@A\E\0WD@C@D$0K]AOX@F M0A\TB.0D0@N0A''@I*@8$ES@A^AX8E2@W+@B\CD0S#@Q0DP0W,@14B90MC@&gt;P@@@O$@JLA&lt;0QKALLD_POX@U&lt;@* UMARTCE@I,@8(E- R7APX@J@B$AMPE$@U''@B$BHPT]@GXEN@@&lt;@_(AA0V0@?TDE0U1@50CEPM[@2LD@PD1AQ@@]0NK@#HE] T^@M@B&lt;@I%A]TE$ D^@P ANPNL@S(D#@V1@LPA10OY@ALB@PG''@[ A&gt;0R#AB8B3PHS@/PD1 AH@[LC9@@@@&gt;PDK0TG@S,AR0E6@Y4@J I6@ 8BQ0JW@Y$C8 J&lt;@2PCI@A_@%&lt;C70PPADPDL@CEAXDD, TSAQLE.0P1AH4AJ E AQ&lt;D3 S(AS$EU VK@Y8E(@A @D$@, NMADTAS@DY@.8AL R]@0LCNPM1@O\D'' F3@(DB&amp;0I7AB0CIPUHAB0EN U"@1XE=0WVA H@E@W7@X@D5 O$@@@C9@PG@O8AO@C8@LX@1 TR@JTASPEN@R,E/ B3@\ A9PG&lt;@Q,@)@I @*0B+@K1@\$BT@M2@7LC/0L&amp;@ &lt;A?PL''@54B"PKN@-8CA@L#@90D''0O6@=HDDPPBAR@EP0RNAJX@EPT!A_ @:@C(@R0@J0CG@G @E A!@K@A$@B;@Y&lt;B^@I8@+4A-@I9@2$CJPN%@[TD5 J&gt;@&gt;P@@@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PC9@O$@&gt;PEN0@@'))</body></methods><methods><class-id>Roassal.RoassalIcons class</class-id> <category>resources</category><body package="Roassal-VWSpecific">objectProfileMediumRoassal	"UIMaskEditor new openOnClass: self andSelector: #objectProfileMediumRoassal"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 90@85 depth: 9 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6906 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4047 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 4015 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 4047 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5107 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5653 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5621 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6713 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6809 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6231 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6360 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4272 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3019 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3276 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3565 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5139 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5685 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6199 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6584 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6809 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6906 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3051 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3051 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3565 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6199 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6938 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3597 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4657 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5203 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5717 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6231 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6327 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3115 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3083 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3629 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4143 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4689 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6906 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6777 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3115 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3661 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4175 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5203 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6809 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6584 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6777 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3147 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3693 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4207 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4753 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3661 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5814 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6327 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6906 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6584 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6327 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6199 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6906 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6295 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3180 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5814 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6327 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6327 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6295 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3180 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3726 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3758 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3212 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4272 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4786 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5846 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6167 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6584 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6295 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3212 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4786 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5332 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4818 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6874 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6552 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6295 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3758 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5910 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6552 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6295 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5396 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5910 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6681 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5460 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3308 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4336 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5396 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6874 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6584 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3854 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3340 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4368 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4946 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4882 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6874 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6552 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4914 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5974 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6874 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3372 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4432 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4946 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6681 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6552 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6424 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3404 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3950 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3918 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5010 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5524 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4978 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7098 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6938 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6681 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3404 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3437 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3950 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4464 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4497 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5524 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6938 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6681 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5589 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5557 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6809 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6681 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6392 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3469 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5075 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5589 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6841 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3501 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 4015 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4561 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6135 1959)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedStringamplt;@LD@0PCA@LD@0PGH@Y\A+@F,@Z0A+@F,@Z0A+@F,@Z0A%0F-@H$@0PCA@LD@0PC&amp;@U&lt;AQ0E_@U&lt;A @E_@Q,AG@FY@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@H$A!0AJ@B@@RPAI@D$@RPAI@D$@N@@^@C(@0PCA@LD@0PDL@E0A+@F,@Z0A+@F,@Z0A+@F,@Z0AX E&amp;@JL@0PCA@LD@0PC=@O\A @E_@U&lt;AW0E_@T\AH FU@CTA"PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PGJ@I8@N@AI@D$@RPAI@D$@RPAI@D$@N@@7@K8@0PCA@LD@0PAL@KXA+@F,@Z0A+@F,@Z0A+@F,@XLAR0FY@LD@0PCA@LD@0PAG@Q,AM E_@U&lt;AW0E_@U&lt;AM D#@T @L0FZ@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDAS0A6@C @RPAI@D$@RPAI@D$@RPAI@D$@RP@8@R@@0PCA@LD@0PCA@[@A1@F,@Z0A+@F,@Z0A+@F,@Z0A1@C?@LD@0PCA@LD@(0E @RLAW0E_@U&lt;AW0E_@U&lt;AW0E_@U&lt;AM0D"@GT@X CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@H$@9@@^@D$@RPAI@D$@RPAI@D$@RPAI@D$@RP@8@GX@^ CA@LD@0PCA@\ A 0F,@Z0A+@F,@Z0A+@F,@Z0@''PGI@LD@0PCA@LD@^@CL@X@AW0E_@U&lt;AW0E_@U&lt;AW0E_@U&lt;A @D#@I$@]0CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDA"PBF@C @RPAI@D$@RPAI@D$@RPAI@D$@RPAI@E8AS0CA@LD@0PCA@@(A PFC@Z0A+@F,@Z0A+@F,@XDA1 B#@LD@0PCA@LDAN0C6@U&lt;AW0E_@U&lt;AW0E_@U&lt;AW0E_@U&lt;A @D[@Z8A-PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PFI@D(@RPAI@D$@RPAI@D$@RPAI@D$@RPAI@D$@W0CA@LD@0PCA@LD@V0FA@Z0A+@F,@Z0A+@F,@Z&lt;AH@CA@LD@0PCA@LD@Q E_@U&lt;AW0E_@U&lt;AW0E_@U&lt;AW0E_@U&lt;AW0D:@\(@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@X$@W @7@D$@RPAI@D$@RPAI@D$@RPAI@C AZ@B#@LD@0PCA@LD@9PE$@Z0A+@F,@Z0A+@GD@A(@4@CA@LD@0PCA@V,AW0D6@U&lt;AW0E_@U&lt;AW0E_@U&lt;AW0D6@RHABPE*@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBI@D4@0PCA@LD@0PCA@LDAZ B^@@\@RPAI@D$@RPAI@D$@RPAI@D$@30@_@LD@0PCA@LDAO0DH@XLA+@F,@Z0A+@FC@CX@^ CA@LD@0PCA@K4AM E_@U&lt;AW0E_@U&lt;AW0E_@U&lt;AM C^@Q4AZ CA@LD@0PCA@LD@0PE)@FL@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCQ@JD@X0CA@LD@0PCA@LD@0PE*@GX@RPAI@D$@RPAI@D$@RPAI@C @N@FI@LD@0PCA@LD@0PGE@Y\A+@F,@Z0A+@FA@VT@0PCA@LD@0PCA@@TAH0E_@U&lt;AW0E_@U&lt;AW0E_@X@AF0FB@\$@0PCA@LD@0PCA@LD@W E=@K\@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDAT@A @F@@(PBI@LD@0PCA@LD@0PCA@S&lt;@N@AI@C @RPAI@D$@RPAI@C @BPB @LD@0PCA@LD@0PGG@VHA1@GD@\PA1@E"@[H@0PCA@LD@0P@_@NDAW0E_@U&lt;AW0E_@U&lt;A @F@@RLAGPGI@LD@0PCA@LD@0PCA@NPAWPD3@Z\A, CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@C(@!0A @F@@X@B!@G(@0PCA@LD@0PCA@LDAO0A^@C\@RPAI@D$@RPAI@D$@M0D=@JL@0PCA@LD@0PGJ@N\@?0C?@O&lt;@?0C''@FL@0PCA@LD@0PAK@@LAW0E_@U&lt;AW0E_@X@A @DF@Q0A-PCA@LD@0PCA@LD@0PEM@W4AP0D4@STA*0@J@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PB#@N @X@A @F@@X@A @K&lt;@S@CA@LD@0PCA@LD@0PD?@GX@M0AI@D$@RPAI@D$@G D @JL@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0P@"@YXARPF@@U&lt;AW0F@@X@@=0FX@[T@0PCA@LD@0PCA@LD@9PFR@TL@=PEC@SPAFP@5@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PF5@D,@X@A @F@@X@A @F@@/0A:@LD@0PCA@LD@0PCA@S&lt;@R AI@D$@RP@G@B@@(@AL@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBI@MHAY@CL@T(A @D6@S A!@GI@LD@0PCA@LD@0PCA@HTA_PEC@Q(AP0EC@SPAL0DY@[L@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@(0A9@F@@X@A @F@@X@A @F@@X@CQ@JL@0PCA@LD@0PCA@LDAHPAI@C @RPEN@FH@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PDJ@@PA @D#@O A-PCA@LD@0PCA@LD@0PC&lt;@W4AP0EC@TLAP0EC@TLAP0EC@E$@"PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDA@@A @F@@X@A @F@@X@A @F@@X@A @MD@"PCA@LD@0PCA@LD@0PD!@NTAHPCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@\$@.@EL@X$@0PCA@LD@0PCA@LDAS E=@SLAP0EC@TLAP0EC@TLAP0C5@TPAG CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@A&lt;@X@A @F@@X@A @F@@X@A @F@@X@A @F@@4PA#@LD@0PCA@LD@0PCA@H$@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0P@J@LD@0PCA@LD@0PCA@I&lt;A_PD3@OTAP0EC@TLAP0EC@TLAP0EC@TL@&amp; E+@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@N @X@A @F@@X@A @F@@X@A @F@@X@A @F@@X@CQ@H$@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PA6@W4AL0C5@TLAP0EC@TLAP0EC@TLAP0EC@TLAA@E''@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0P@_@H\@X@A @F@@X@A @F@@X@A @F@@X@A @F@@X@A @MD@(0CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBI@V(A,PCM@E$AG0DD@YL@ PB[@\XAZ BI@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDAOPE=@SLAP0EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAA@AE@FH@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PD?@F@@X@A @F@@X@A @F@@X@A @F@@X@A @F@@X@A @F@@4PB#@LD@0PCA@LD@0PCA@LD@0PCA@\$@?P@;@TLAA@EC@TLAA@DD@PPAA@EC@TLAP0A2@O0A2 CA@LD@0PCA@LD@0PCA@LD@0PCA@[HA_PD3@OTAP0EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAM@EC@@\@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@X0A9@F@@X@A @F@@X@A @F@@X@A @F@@X@A @F@@X@A @F@@^PBI@LD@0PCA@LD@0PCA@LD@0PEM@A AFPD3@PPAP0EC@TLAP0EC@TLAP0EC@OTAP0DD@TL@O@FZ@LD@0PCA@LD@0PCA@LD@0PCA@E4AL0D4@TLAP0EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAP0DD@@@@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@B A9@D,@X@A @F@@X@A @F@@X@A @F@@X@A @F@@X@A @D,A-PCA@LD@0PCA@LD@0PCA@LD@BPFT@Q$AP0D4@TLAP0EC@TLAP0EC@TLAP0EC@TLAP0D4@PPAP0E^@\X@0PCA@LD@0PCA@LD@0PCA@C(A*0D3@SPAP0EC@TLAP0EC@TLAP0EC@TLAP0D4@TLAA@EC@YH@(@CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@FHA"PB?@H\@^PA @F@@X@A @F@@X@A @F@@X@A @K&lt;@0PCA@LD@0PCA@LD@0PCA@[@AP0D3@OTAP0EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAM@C5@Q$AO@CA@LD@0PFH@FD@XPFH@LDAB0EE@TLAP0EC@TLAP0C5@PPAP0DY@PTA_ F''@Q,@&gt;PC&gt;@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@G(A2PEO@N @"@AK@F@@X@A @F@@X@A @C(@0PCA@LD@0PCA@LD@0P@G@TL@=PD4@TLAP0EC@TLAP0DY@SLAL0D3@SLAL0DY@TLAP0EC@TLAL0DZ@W0A$P@[@P8AK@AT@UP@1P@P@X @^ A2@PTAM@C5@TLAP0EC@Q$@\P@=@@X@.PF5@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@JL@X @J@V,@/0AK@D,@X@DM@LD@0PCA@LD@0PCA@LDAO E?@PP@=PEC@TLAP0EC@Q$AL0@2@CH@-@AX@L,@L F)@TXAFPD3@YD@L AX@AH@TP@N@J&lt;@&lt;PCE@LT@1PCE@[X@0P@9@Q(AL0EC@TLA00BC@R@@0@@:@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@(0BI@[TA@@AM@LD@0PCA@LD@0PCA@Y,AXPEC@SPAP0EC@TLAFPDY@U0@\@EA@LLA/PF=@[4@1@@Q@AT@L BW@\@@# FL@T@@&lt;PC1@PDA@PCE@LT@1PCE@FD@0PCA@BL@&amp;0C=@\$@X B#@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@@\AP0EC@TLAP0EC@Q$AL0CK@M @#@CB@OD@&lt;PC1@OD@&lt;PB-@LTA]@CF@H0@5@DA@LT@1PCE@LT@1PCE@LTAU@D%@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PA#@JPAA@C5@TLAP0DY@SL@Q@EV@H0@&lt;PCF@G,AT0GM@X,@#@CB@OD@+ C1@PD@1PCE@LT@1PCE@LT@1PCE@UPA[ CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PD&amp;@TLAM@EC@TLAP0DD@X(@10BL@PD@#@D.@W A4@AV@C@@UPCG@D@A@PDA@LT@1PCE@LT@1PCE@PD@&lt;P@,@[X@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PB5@PP@=PEC@TLAFPF)@B8@+PDA@G,@$@DY@Q$AL0D3@SLAFPDE@ZL@+PC1@LT@1PCE@LT@1PDA@ODAT0CJ@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PE&gt;@TLAP0EC@TLAL0AX@T@A@PCB@X&lt;A-0DY@Q$AP0EC@TLAP0DY@SL@_ C1@OD@1PCE@LTA@PC1@B4@,0F\@JL@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDAZ DY@OTAP0EC@Q$A$PDU@Q@@&lt;PBM@W,AL0EC@TLAP0EC@TLAP0EC@SL@V@@O@OD@1PCE@PD@5@CC@DLA[@EQ@JX@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@H DD@TLAP0EC@SLA''PFN@OD@1 CW@Q$AL0EC@TLAP0EC@TLAP0EC@SPA-0@.@Q@@1PDA@LH@S0C4@V0AL0E-@R@@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDA!0EC@TLAP0EC@SL@&gt; A=@ODAKPDB@U0AP0EC@TLAP0EC@TLAP0EC@Q$AW@EB@R&lt;A@PCF@F4@LPD3@SLAFPE-@H(@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDA!0DD@TLAP0EC@SL@_0@M@ODAT0F$@U0AP0EC@TLAP0EC@TLAP0EC@TLA" @0@T@@&lt;PBQ@U,AL0DY@TLAP0E-@I&lt;@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@X@DD@TLAP0EC@SL@7PA.@ODA@PCX@W0AP0EC@TLAP0EC@TLAP0EC@TLAW@C3@R&lt;@5@D0@H@AL0EC@TLAP0D_@RX@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@G0EC@SPAP0EC@SLA20GO@PD@1 A/@O,AP0EC@TLAP0EC@TLAP0EC@Q$@L E7@PD@1 CY@SLAP0EC@TLAP0E&gt;@JD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PGL@PPAP0EC@TLA$P@S@R4@&lt;PAO@Q AP0EC@TLAP0EC@TLAP0EC@SLA0PFM@ODAT0G@@U0AP0EC@TLAA@ER@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PFW@SLAM@EC@TLAL0C;@G0@&lt;PA+@X&lt;@_0FJ@SLAFPEC@Q$AFPEF@O(A^PCF@OD@&lt; @V@SLAP0EC@OTAA@AZ@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PA @Q$AP0EC@TLAFPFQ@PL@^0C1@G,AD BU@CHA$PFQ@YD@L F&amp;@L @1 C1@F0A$@@2@Q$AP0EC@SPAP0FG@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PA:@VDAL0C5@TLAP0D3@SL@T AA@LT@1 AB@X&lt;A0@BT@ET@[0CC@OD@&lt;P@*@SDAQ D3@Q$AP0C5@PP@70CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@O0AFPEC@TLAP0EC@Q$@&gt; D2@PD@&lt;PC1@OD@&lt;PCT@MP@&lt;PC1@OD@&lt;PEX@Q$AFPEC@TLAP0D3@TLAOPCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@C(@!@DY@SPAP0EC@TLAL0E\@Y@A]PE2@H0@0 CB@LH@#@E2@\8@K0FJ@SLAP0EC@TLAA@EC@L4@S@CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@4@@K@PP@=PEC@TLAFPD3@Z$@LPCI@EH@TPFO@\&lt;A/0B2@G&lt;A*PD3@Q$AP0EC@OTAA@@&gt;@NX@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0P@?@TLAA@C5@TLAP0EC@Q$AL0EF@SL@20BW@KPAFPEF@SLAFPEC@TLAP0D4@TLAP0@"@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@C&lt;A.@EC@PPAM@EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAP0EC@TLAI0DY@Q&lt;@H CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@X@D7@TLAA@D4@TLAP0EC@TLAP0EC@TLAP0EC@TLAP0C5@TLAFPC#@C&lt;@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PE*@L8AT DD@TLAP0EC@TLAP0EC@TLAP0EC@OTAP0DD@TP@]@E+@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@JLAZ0A[@Y8AP0EC@TLAA@EC@TLAA@EC@Q$ATP@Z@T&lt;@"PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LDA&amp; A3@GHAM0EG@U&ltlt;@+0B/@J&lt;@1PBX@LD@+0CE@J&lt;@+0B/@J&lt;@+0CE@Z@@0PCA@LD@0PCA@LD@% CE@B @FPCE@J&lt;@+0B/@J&lt;@+0ET@B @J@CE@LT@+0B/@J&lt;@+0B/@LTA[ AW@J&lt;@+0CE@LT@+0B/@ZH@XPCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBX@LTA[ @(@B @J@@(@W@@+0EW@LDA(@B/@FD@J@@(@B A.P@T@LT@0PCA@LD@0PCA@LD@7@CE@B @U0CE@B @J@@(@B @J@@(@LDAK@CE@J$@J@@(@B @J@@(@V8@XPA!@B @J@A(@UP@J@@(@W@A"@CA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBX@UPA\@CA@LD@0PCA@LDA(PDS@LDA(@B/@X @XPA!@FD@XP@P@UP@0PCA@LD@0PCA@LD@7@CE@B @U0CE@FD@XPA!@FD@XPA!@LDAK@ET@R,@0PCA@LD@0PCA@LD@0PCA@LDA"@@Y@UP@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBX@UPA\@CA@LD@0PCA@LDA(PDS@LDA(@CE@LT@1PCE@LT@1PCE@R0@0PCA@LD@0PCA@LD@7@CE@B @U0CE@LT@1PCE@LT@1PB/@[$AK@ET@R,@0PCA@LD@0PCA@LD@0PCA@LDA"@@Y@UP@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBX@UPA.PCA@LD@0PCA@LD@D@DS@LDA(@ET@R,A- F6@[XA- AT@LT@XPCA@LD@0PCA@LD@7@CE@B @U0CE@RTAIPD%@RT@;@F6@X AK@ET@R,@0PCA@LD@0PCA@LD@0PCA@LDA"@@Y@UP@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PBX@UPA- CA@LD@0PCA@LD@+0EW@LDA(@B/@LD@0PCA@LD@0PC\@LT@J@CA@LD@0PCA@LD@I0CE@W@@U0CE@LD@0PCA@LD@0PCA@LDAK@CE@RT@0PCA@LD@0PCA@N0@XPCA@LDA"@@Y@UP@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PC+@LT@1PCE@LT@1PCE@LT@1PAT@LDA(@CE@LT@1PCE@LT@1PCE@LTA.PDS@LT@1PCE@LT@1PET@LD@FPCE@LT@1PCE@LT@1PCE@B A. CE@LT@1PCE@LT@1PCE@LT@7@CA@LDA"@@Y@UP@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@M0@D@F!@U\AU0F!@A@@I0A!@LD@U@EW@U\AU0EW@ZDAU0@P@N0@XPAT@QLAU0EW@ZDAVPF6@LD@,@EW@U\AU0EW@U\AU0F @B @0PD,@A@AU0EW@U\AU0F!@F @XPCA@LDA"@B0@A@@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@X @0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@V&lt;A.0A(@F @Z@A(@I @7@@(@LD@7@BX@I @&amp;@BX@I @&amp;@AW@WX@0PFH@R0@&amp;@A(@F @Z@A(@I AK@FH@X @,@BX@F @Z@A(@F @I0D,@X @&amp;@D,@LD@U0B0@LD@0PCA@LD@0PCA@B A.0A(@F @Z@A(@F @I0D)@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PFH@K@@1PF @Z@A(@F @Z@@1P@P@LD@+0CE@Z@A(@F @Z@A(@CE@J&lt;A"@A$@LT@+0F @Z@A(@F @J&lt;@1PC\@X @D@CE@Z@A(@F @Z@A(@BX@FD@1PAT@LDAU@@P@LD@0PCA@LD@0PCA@[X@1PB/@Z@A(@F @Z@A(@C\@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PCA@LD@0PFH@N8AU@@(@FD@XPA!@FD@&ampamp;@BX@X @0PCA@LD@J@AT@EP@XPFH@M0@U@AT@EP@U@AT@EP@7@FH@X @% C\@LD@0PCA@LD@0PCA@X @U@A$@LD@&ampbody><body package="Roassal-VWSpecific">roassalIconMedium	"UIMaskEditor new openOnClass: self andSelector: #roassalIconMedium"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 70@97 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 2280 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5428 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 3469 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1509 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6006 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 4047 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4625 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4657 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 3276 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 3854 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3886 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1927 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 4464 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2505 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2505 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5043 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 3083 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 5043 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 3693 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 5621 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3661 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4272 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 4850 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 2890 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 2923 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6038 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1509 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 4079 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2120 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2730 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 3308 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5846 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5846 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1927 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1927 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2505 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2537 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 3115 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5653 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2344 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4882 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5460 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1573 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2152 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4689 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 2730 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 5267 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5846 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1959 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4497 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 4497 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5075 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3147 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 3726 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1734 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1798 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 4304 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2376 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5492 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6070 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 4111 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1573 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 3533 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2152 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2762 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 4111 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 3340 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5878 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 5107 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3147 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5685 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1798 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3726 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2376 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4914 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2376 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5492 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5492 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1606 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1606 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2184 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4721 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4721 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 5300 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1413 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3950 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2023 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4529 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2601 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5107 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 5717 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3758 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 4336 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 3565 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2216 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2794 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 3372 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1445 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 3983 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5910 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3950 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2023 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2601 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3180 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 5717 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5717 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1830 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 4946 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 2987 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5524 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4946 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 3565 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1638 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 4175 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4753 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 5332 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 3983 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3790 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1830 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 3019 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 5557 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3597 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3629 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 2248 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2826 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 5364 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 2826 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1477 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2055 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 5942 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2633 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 5171 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5781 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3212 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 3822 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1863 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2441 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 4978 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 5557 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1670 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4207 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4786 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5396 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 3437 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 5974 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1477 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 4015 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2055 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4593 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4593 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2055 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 5203 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 4400 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 4432 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2473 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 3051 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 3051 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3629 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2280 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 4818 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 2858 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 5396 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6006 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 4047 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2087 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4625 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2666 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 5781 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5814 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 3276 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 1895 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 5010 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 5621 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5621 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1702 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1702 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4240 4015)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: ',+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2VHD8ERJ0Q2^KV5M4#@&ampgt;7M[^/.;J2,+J2, @@,+J2,+J2,(I5L4-KR4-KR4,_O$J2,+J2,+J2,+J2,+J2,+J2,+J2,,MYR4-KR4-KR3^2,+J2,+I]0CT5MST50E62,+J2, @@,+J2,+J2S+MKR4-KR4-K,0ZJ,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+HQV$-KR4-KR7*2,+J2,%45MST5MST5MSU],+J2, @@,+J2,+JACT-KR4-KR79?"+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2QT-KR4-KR3&gt;2,+J2.&lt;@5MST5MST5MSW@.;J2, @@,+J2,,R]R4-KR4-K!''^2,+J2/*1*[Y]6,+J2,+J2,+J2,+J2,+J2,+J2FT-KR4-KR9&amp;2,+J2+3T5MST5MST5MST5+;J2, @@,+J2,+5KR4-KR0N+,+J2%\"S[4-KR4-.,+J2,+J2,+J2,+J2,+J2,+J2A@MKR4-KR9&amp;2,+J2-3T5MST5MST5MST5-;J2, @@,+J2FD-KR4-K&amp;YR2,+J2SCMKR4-KR4.%,+J2,+J2,+J2,+J2,+J2,+J2PZMKR4-KR2.2,+J20CT5MST5MST5MST50KJ2, @@,+J2O4-KR4.K];J2,+J2,"=KR4-KR4.K,+J2,+J2,+J2,+J2,+J2,+J2-$-KR4-KR1*2,+J2-3T5MST5MST5MST5-;J2, @@,+H\(4-KR9E'',+J2,+J2,"!KR4-KR4..,+J2,+J2,+J2,+J2,+J2,+J2X4-KR4-KR9:2,+J2+3T5MST5MST5MST5+;J2, @@,+J)R4-K^G.2,+J2,+J2,!=KR4-KR4.$,+J2,+J2,+J2,+J2,+J2,+J2N4-KR4-KL&lt;R2,+J2.&lt;@5MST5MST5MSW@.;J2, @@,+HVR4.#L+J2,+J2,+J2PZMKR4-KR4-9,+J2,+J2,+J2,+J2,+J2,+JOIT-KR4-K,KJ2,+J2,%45MST5MST5MSU],+J2, @@,+J214,J,+J2,+J2,+J2#T-KR4-KR3M1,+J2,+J2,+J2,+J2,+J2,+I=R4-KR4.#PKJ2,+J2,+I]0CT5MST50E62,+J2, @@,+J2)EUA,+J2,+J2,+J2ND-KR4-KR4Z2,+J2,+J2,+J2,+J2,+J2,(6PR4-KR4-?,+J2,+J2,+J2.:&lt;5MSV/.;J2,+J2, @@,+J2PW.2,+J2,+J2,+J2QT-KR4-KR2&amp;2,+J2,+J2,+J2,+J2,+J2/"-KR4-KR4&amp;2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2YD-KR4-KR;&ampamp;;J2G$-KR4-KR4-KR0LIU;J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,''-KR4-KR4,3$+KDK$-KR4-KR4-K"4:2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,*YKR4-KR4.:,+I0R4-KR4-KR4-K@7^2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,(!KR4-KR4.0,+HPR4-KR4-KR4-KR;F2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+5KR4-KR4.$,+JI!#,NRD-KR4-KR&lt;ZR,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2,,]KR4-KR4-9,+J2,+J2")EKR4-KR4,E,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2!4-KR4-KR3M1,+J2,+J2,$MKR4-KR4-8AKJ2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2)4-KR4-KR:"2,+J2,+J2,(J]R4-KR4-K ;J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2E4-KR4-KR;B2,+J2,+J2,+IER4-KR4-KOXJ2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2LT-KR4-KR8N2,+J2,+J2,+KD(4-KR4-KR0*2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J2OD-KR4-KR722,+J2,+J2,+J20T-KR4-KR5%7,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+KDR4-KR4-KL4*2,+J2,+J2,+J21JMKR4-KR4,:,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+J&lt;R4-KR4-K)[J2,+J2,+J2,+J2,,EKR4-KR4,3SKJ2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+H;R4-KR4-K!+J2,+J2,+J2,+J2,,R#R4-KR4-KK;"2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+H R4-KR4-K\+J2,+J2,+J2,+J2,+JHR4-KR4-KR4V2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,+IPR4-KR4-KUKJ2,+J2,+J2,+J2,+JR!T-KR4-KR6@,,+J2,+J2,+J2,+J2.KJ2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,,UKR4-KR4-KMKJ2,+J2,+J2,+J2,+J2*4-KR4-KR4/F@[J2,+J2,+J2,+H7)KJ2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,%1KR4-KR4-3,+J2,+J2,+J2,+J2,+J2,!AKR4-KR4-K$\V2,+J2,+J2,)&gt;#.[J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,%EKR4-KR4-:,+J2,+J2,+J2,+J2,+J2,''-YR4-KR4-KR&lt;I_,+J2,+J2AV=K0;J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,&amp;5KR4-KR4-!,+J2,+J2,+J2,+J2,+J2,+I)R4-KR4-KR4,C_\V2.KPPR4-[,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2,''!KR4-KR4,,,+J2,+J2,+J2,+J2,+J2,+J2^$-KR4-KR4-KR4/G[4-KR6CC,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2]4-KR4-KR4,#,+J2,+J2,+J2,+J2,+J2,+J2AJ5KR4-KR4-KR4-KR4-KR0*2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2W$-KR4-KR6J2,+J2,+J2,+J2,+J2,+J2,+J2,+&lt;_R4-KR4-KR4-KR4-K"KJ2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2!D-KR4-KR1.2,+J2,+J2,+J2,+J2,+J2,+J2,+J&gt;C4-KR4-KR4-KR&lt;X8,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2#$-KR4-KR8R2,+J2,+J2,+J2,+J2,+J2,+J2,+J2V@JPR4-KR4-K]AZ2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+J2&amp;T-KR4-KR;22,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J\[ AYT6*@,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+H*R4-KR4-KR:&amp;2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+HGR4-KR4-KR5Z2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+JDR4-KR4-KR9&gt;2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+H"R4-KR4.P-X62,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+H5MSV2,+J2,+J2, @@,+J2,+J2,+I9I)B%H@-7,+J2,+J2,+./-&lt;B7+;.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2* #@MSV*,+J2,+J2, @@,+J2,+J2,+J2,$F2,+J2,+J2,+J2W\@5MST5M\A],+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+.7MST5MST5-;.2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+I]MST5MST5MST5W[J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2&amp;D&lt;5MST5MST5MT&gt;X,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+/@MST5MST5MST50K.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2Y#T5MST5MST5MSU&amp;,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,*&lt;5MST5MST5MST5MZ&gt;2,+J2,+J2,+J2,+J2,+J2,+J2,+HLMST5MST5MST5MST5CKJ2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+\5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5T+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,,@5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5H[J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+\5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5T+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,*&lt;5MST5MST5MST5MZ&gt;2,+J2,+J2,+J2,+J2,+J2,+J2,+HLMST5MST5MST5MST5CKJ2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+/@MST5MST5MST50K.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2Y#T5MST5MST5MSU&amp;,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+I]MST5MST5MST5W[J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2&amp;D&lt;5MST5MST5MT&gt;X,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2W\@5MST5M\A],+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+.7MST5MST5-;.2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+./-&lt;B7+;.2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2* "7-0"*,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2,+J2, @@'))</body></methods><methods><class-id>Roassal.ROVWEasel class</class-id> <category>interface specs</category><body package="Roassal-VWSpecific">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 777 500 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 189 89 1555 801 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 5 0 0 0.721816 0 0.98736 ) 					#name: #drawingWrapper 					#flags: 0 					#component: #drawingWrapper ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.735725 55 0 -10 1 0 0.609551 ) 					#name: #TextEditor1 					#model: #code 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.735725 0 0.639437 ) 					#name: #Label3 					#label: 'view open.' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.735725 0 0.609551 ) 					#name: #Label4 					#label: 'ROVWEasel new populateMenuOn: view.' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} -130 1.0 0 0.668539 130 23 ) 					#name: #ActionButton1 					#model: #show 					#label: 'Generate view' 					#defaultable: true ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutSizedOrigin} 38 0 108 0 115 21 ) 							#name: #Label7 							#label: 'objectprofile.com' ) 						#(#{UI.LabelSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Graphics.LayoutOrigin} 0 0 2 0 ) 							#name: #Label5 							#label: #roassalIcon 							#hasCharacterOrientedLabel: false ) 						#(#{UI.LabelSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Core.Point} 92 0 ) 							#name: #Label6 							#label: #objectProfileIcon 							#hasCharacterOrientedLabel: false ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.817708 0 0.766854 171 129 ) 						#name: #Composite1 ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.734993 15 0 40 21 ) 					#name: #Label1 					#label: '| view |' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 0 0.735725 32 0 184 21 ) 					#name: #Label2 					#label: 'view := ROMondrianViewBuilder new.' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -24 0.916666 0 0.73 0 1 20 0.73 ) 					#name: #SelectPlatform 					#model: #platform 					#menu: #selectPlatformMenu ) ) ) )</body></methods><methods><class-id>Roassal.ROHTMLAssets class</class-id> <category>zip imports</category><body package="Roassal-VWSpecific">ROHTMLExporterLibraries	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'ROHTMLExporterLibraries.zip'&gt;	&lt;md5sum: #[25 78 87 121 7 159 162 238 65 207 99 87 140 153 139 167]&gt;	^[ByteArray fromNibbleStringonce</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Roassal-VWUtil">roassalSmall20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #roassalSmall20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 22@30 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 4207 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 4111 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1445 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1349 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2216 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 3469 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 4721 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2120 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2023 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4625 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 5781 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 3180 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1927 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 1638 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1573 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2794 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 4240 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3950 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1381 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1349 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1349 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 2441 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2344 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 2216 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 3469 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4721 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 2120 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4625 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2248 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1927 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 3115 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 5685 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 2923 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1573 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 4079 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 5332 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2730 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 5203 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1349 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1381 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2537 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 5300 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 2441 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1381 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 2344 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 4914 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 3597 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 3404 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2087 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 3212 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 1895 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 4561 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 1702 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 2858 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1606 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 5332 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1477 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1413 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 1413 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1413 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 3886 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1381 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 1509 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 5043 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 4304 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 2955 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 5428 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 1413 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 2666 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 3822 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2280 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2184 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 2216 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 4689 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 3340 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 2120 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 4497 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 3180 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 1830 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 3051 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 1702 1188)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedStringamp;@31JR$)JR%P8R @@R$)JR!HWWD)JR$(\E! .R$)JR%P8R @@R$)JR"@CB4)JR$)JUR=AV1MVR%P8R @@R$)JR#4CR$)JR$)JR$\V@1EJR%P8R @@R$)JCQX?R$)JR$)JR$(ASD)JR%P8R @@R$)JBCDJR$)JR$)JR$)JR$)JR#TLR @@R$)JR"QJR$("H$)JR$)JR$)JR"H"R @@R$)JR$)JR%(:V"HEAPTEAPTDH%(:A@@@R$)JR$)JR$=ZV$=JR$)JR$)JV"IZAP@@R$)JR$)JR$(EAT)JR$)JR$)JR PER @@R$)JR$)JR$)JR$)JR$)JR$)JR$)JR @@R$)JR$)JR$)JR$)JR$)JR$)JR$)JR @@'))</body><body package="Roassal-VWUtil">roassalSmall20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #roassalSmall20x20bw"	&lt;resource: #image&gt;	^(Image extent: 22@30 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 0 0 7 255 0 0 15 3 152 0 31 3 188 0 51 3 188 0 35 3 152 0 3 7 24 0 3 14 24 0 3 120 24 0 7 240 24 0 7 56 24 0 6 56 24 0 14 28 24 0 14 30 24 0 14 15 216 0 12 7 152 0 28 3 24 0 28 0 24 0 8 192 24 0 1 255 252 0 1 224 60 0 0 192 24 0 0 0 0 0 0 0 0 0])</body><body package="Roassal-VWUtil">roassalSmall20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #roassalSmall20x20mask"	&lt;resource: #image&gt;	^(Image extent: 22@30 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 252 0 0 7 255 0 0 15 3 152 0 31 3 188 0 51 3 188 0 35 3 152 0 3 7 24 0 3 14 24 0 3 120 24 0 7 240 24 0 7 56 24 0 6 56 24 0 14 28 24 0 14 30 24 0 14 15 216 0 12 7 152 0 28 3 24 0 28 0 24 0 8 192 24 0 1 255 252 0 1 224 60 0 0 192 24 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Roassal-VWSpecific">roassalEaselMenu	&lt;menuItem: 'Roassal Easel'		icon: #roassalIcon		nameKey: #hapaoIcon		menu: #(#launcherToolBar )		position: 81.8&gt;	&lt;menuItem: 'Roassal Easel'		icon: #roassalIcon		nameKey: nil		menu: #(#menuBar #tools )		position: 60.0&gt;	Roassal.ROVWEasel open.	^self"	^(MenuItem labeled: #_Hapao &lt;&lt; #menus &gt;&gt; '&amp;Hapao')		labelImage: SpyIcons hapaoSmallIcon;		value: [ HapaoTestCoverageUI open ];		helpText: #OpenANewWorkspace &lt;&lt; #labels &gt;&gt; 'Open the Hapao launcher';		yourself"</body></methods><initialize><class-id>Roassal.ROView</class-id></initialize><initialize><class-id>Color</class-id></initialize><initialize><class-id>Roassal.ROVWPlatform</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Collection</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>SequenceableCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>Array</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Float</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Point</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars>x y </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Interval</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start stop step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>ClassDescription</name><environment>Core</environment><super>Core.Behavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceVariables organization </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>ImplementationFont</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Fonts</category><attributes><package>Graphics-Fonts</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Announcer</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subscriptionRegistry </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Model-Observables</category><attributes><package>System-Announcements</package></attributes></class><class><name>Assets</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>lastDirectory </class-inst-vars><imports></imports><category>Assets</category><attributes><package>Assets</package></attributes></class><class><name>Symbol</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Announcement</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Announcements</category><attributes><package>System-Announcements</package></attributes></class><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>ColorValue</name><environment>Graphics</environment><super>Graphics.SimplePaint</super><private>false</private><indexed-type>none</indexed-type><inst-vars>red green blue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>Rectangle</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin corner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class></st-source>