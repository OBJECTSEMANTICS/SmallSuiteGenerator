<?xml version="1.0"?><st-source><!-- Name: SpyNotice: The public version of our tools is under the MIT License. A different license may apply for a customized version of them. Copyright (c) 2011 - 2013 Object ProfileCopyright (c) 2010 - 2011 Vanessa Pena, Alexandre BergelBundleName: SpyBundleStructure: a Store.BundleForParcelComment: The public version of our tools is under the MIT License. A different license may apply for a customized version of them. Copyright (c) 2011 - 2013 Object ProfileCopyright (c) 2010 - 2011 Vanessa Pena, Alexandre BergelInformation, tutorials, screencasts and more, can be found athttp://objectprofile.comContact and/or feedback at info@objectprofile.comFollow us on twitter: @ObjectProfileDevelopmentPrerequisites: #(#(#any 'Roassal' '') #(#any 'SUnit' '') #(#any 'SUnitToo' '') #(#any 'Method Wrapper Base' '') #(#any 'AT Profiling UI' '') #(#any 'StoreBase' ''))Parcel: nilParcelName: SpyPreReadBlock: [booleanExpression]PrerequisiteDescriptions: #(#(#name 'Roassal' #componentType #bundle) #(#name 'SUnit' #componentType #package) #(#name 'SUnitToo' #componentType #package) #(#name 'Method Wrapper Base' #componentType #package) #(#name 'AT Profiling UI' #componentType #package) #(#name 'StoreBase' #componentType #bundle))PrerequisiteParcels: #(#('Roassal' '') #('SUnit' '') #('SUnitToo' '') #('Method Wrapper Base' '') #('AT Profiling UI' '') #('StoreBase' ''))Version: 1.55VersionSelectionBlock:    [:parcelOrPundleName :actualVersion :versionFilter |   versionFilter isEmpty or: [versionFilter = actualVersion]] Pre-Load Block: 	[:package | ]Post-Load Block: 	[:package | ]Pre-Read Block: 	[booleanExpression]Version Selection Block: 	   [:parcelOrPundleName :actualVersion :versionFilter |   versionFilter isEmpty or: [versionFilter = actualVersion]] Date: 10:10:13 AM January 6, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10.1 (oct13.1) of October 3, 2013 on January 6, 2014 at 10:10:13 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Spy</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>currentTestCase currentTestMethod </class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>Spy-Core</package></attributes></class><class><name>MethodSpy</name><environment>Smalltalk</environment><super>Spy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instrumentedMethod originalMethod selector classSpy outgoingCalls incomingCalls executionTime localExecutionTime globalCounter staticOutgoingCalls spywrapper isExecuted messageTally </inst-vars><class-inst-vars>inMeta </class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>Spy-Core</package></attributes></class><class><name>KaiProfilingMethodSpy</name><environment>Smalltalk</environment><super>MethodSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberOfCalls receivers numberOfInvocations receiverTable performLocalSideEffect returnValueTable sameReturnValuePerReceiverBoolean returnSelf </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-KaiProfiler</category><attributes><package>Spy-KaiProfiler</package></attributes></class><class><name>ClassSpy</name><environment>Smalltalk</environment><super>Spy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>methods className allSubclassesCache packageSpy metaclassSpy originalClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>Spy-Core</package></attributes></class><comment><class-id>ClassSpy</class-id><body>ClassSpy has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables	allSubclassesCache	&lt;&gt; the list of subclasses	className	&lt;SequenceableCollection&gt; name of the class 	metaclassSpy	&lt;ClassSpy&gt;	 the spy of the metaclass	methods	&lt;Dictionary&gt;	 methods defined in ClassSpy	originalClass	&lt;Behavior&gt;	the class for which I am a metaobject of	packageSpy	&lt;ClassSpy | PackageSpy&gt;	description of packageSpy</body></comment><class><name>ThreadProfilerClass</name><environment>Smalltalk</environment><super>ClassSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-ThreadProfiler</package></attributes></class><class><name>TGCarExampleTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TPMainClass</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ThreadScenario</category><attributes><package>Spy-ThreadScenario</package></attributes></class><class><name>TGWheel</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TG4x4Wheel</name><environment>Smalltalk</environment><super>TGWheel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>AbstractSpyTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classesToDelete systemWindows packagesToClean </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Test</category><attributes><package>Spy-Test</package></attributes></class><class><name>ProfilerTest</name><environment>Smalltalk</environment><super>AbstractSpyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Test</category><attributes><package>Spy-Test</package></attributes></class><class><name>ThreadProfilerTest</name><environment>Smalltalk</environment><super>ProfilerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-ThreadProfiler</package></attributes></class><class><name>BoundedIdentityDictionaryTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>PackageSpy</name><environment>Smalltalk</environment><super>Spy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageName classes profiler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>Spy-Core</package></attributes></class><class><name>HapaoTestCoveragePackageSpy</name><environment>Smalltalk</environment><super>PackageSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage</package></attributes></class><class><name>HapaoMetricCalculator</name><environment>Smalltalk</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>booleanOperators numberOfStaticCalls numberOfStaticCallsToSelf sentMessages staticCallsToSelf staticSelfCalledMethods cyclomaticNumber coveredPaths isParentBlock inABlock outgoingCalls isBlockCovered isParentCovered </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage</package></attributes></class><class><name>BoundedIdentitySetTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>TGCar</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wheels carName carBrand driver d </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>BoundedAbstractSetTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>BoundedDictionaryTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>BoundedSet</name><environment>Smalltalk</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>maxSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>HapaoTestCoverageClassSpy</name><environment>Smalltalk</environment><super>ClassSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage</package></attributes></class><class><name>TGSportCar</name><environment>Smalltalk</environment><super>TGCar</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maximalVelocity </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TGPorsheCar</name><environment>Smalltalk</environment><super>TGSportCar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TGCarExampleSubClassTest</name><environment>Smalltalk</environment><super>TGCarExampleTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TGDriver</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>driverName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>BoundedOrderedCollection</name><environment>Smalltalk</environment><super>Core.OrderedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>maxSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>BoundedDictionary</name><environment>Smalltalk</environment><super>Core.Dictionary</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>maxSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>IdentityObjectSetTest</name><environment>Smalltalk</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>ThreadProfilerMethod</name><environment>Smalltalk</environment><super>MethodSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numberOfCreatedThreads invokedProcesses numberOfDirectlyCreatedThreads level visited </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-ThreadProfiler</package></attributes></class><class><name>TGFoo</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>counter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TGFooSubClass</name><environment>Smalltalk</environment><super>TGFoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>foo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>ThreadProfilerPackage</name><environment>Smalltalk</environment><super>PackageSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-ThreadProfiler</package></attributes></class><class><name>KaiProfilingPackageSpy</name><environment>Smalltalk</environment><super>PackageSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-KaiProfiler</package></attributes></class><class><name>KaiProfilingMethodTest</name><environment>Smalltalk</environment><super>AbstractSpyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-KaiProfiler-Test</package></attributes></class><class><name>TGLambCar</name><environment>Smalltalk</environment><super>TGSportCar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>BoundedIdentityDictionary</name><environment>Smalltalk</environment><super>Core.IdentityDictionary</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>maxSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>HapaoTestCoverageMethodSpy</name><environment>Smalltalk</environment><super>MethodSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>receivers numberOfExecutions cyclomaticComplexityCache staticOutgoingCallsCache coveredPathsCache staticSelfIncomingMethods staticSelfOutgoingMethods longestChainOfSelfOutgoingMethods </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage</package></attributes></class><class><name>BoundedSetTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>Profiler</name><environment>Smalltalk</environment><super>Spy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packages totalExecutionTime allClassesAsDictionaryCache allMethodsCache unitTestResult packagesToTest iterations maxTimeToRun myTimeProfiler messageTallyMethods allNonAbstractMethodsCache evaluatedMethods </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>Spy-Core</package></attributes></class><comment><class-id>Profiler</class-id><body>The main class of the framework. Subclassing it to create a new code execution profilerInstance Variables	allClassesAsDictionaryCache	&lt;Cache | DatabaseRow | Dictionary | ImageCache | KeyedCollection | LDMPerspective | LDMRelationship | PDPWeakDictionary | ProcessEnvironment | PublishSpecification | StoreClassEnvironment | StoreForGlorpBrowserEnvironment | StoreMethodDefinitionEnvironment | StoreProtocolEnvironment | StorePundleEnvironment | StoreSelectorEnvironment | TimedProxyReaper&gt;	description of allClassesAsDictionaryCache	allMethodsCache	&lt;IdentityObjectSetTest | Object | ProtoObject | WeakProxy&gt;	description of allMethodsCache	iterations	&lt;Integer&gt;	description of iterations	maxTimeToRun	&lt;Float | SmallInteger&gt;	description of maxTimeToRun	packages	&lt;OrderedCollection&gt;	description of packages	packagesToTest	&lt;IdentityObjectSetTest | Object | ProtoObject | WeakProxy&gt;	description of packagesToTest	totalExecutionTime	&lt;SmallInteger&gt;	description of totalExecutionTime	unitTestResult	&lt;Object&gt;	description of unitTestResult</body></comment><class><name>ThreadProfiler</name><environment>Smalltalk</environment><super>Profiler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxLevel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-ThreadProfiler</package></attributes></class><class><name>HapaoTestCoverageUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listAllPackages listSelectedPackages conditionInput packages selectedPackages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-HapaoTestCoverage</package></attributes></class><class><name>KaiProfiler</name><environment>Smalltalk</environment><super>Profiler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxNumberOfExecutions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-KaiProfiler</category><attributes><package>Spy-KaiProfiler</package></attributes></class><class><name>HapaoTestCoverage</name><environment>Smalltalk</environment><super>Profiler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testMethods </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage</package></attributes></class><class><name>SpyIcons</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-VWSpecific</package></attributes></class><comment><class-id>SpyIcons</class-id><body>Icons used for the VisualLauncherHere is the magic invocation to import an image:ImageReader imageFromFile: 'kaiMedium.png'  toClass: SpyIcons selector: #kaiMediumYou need to have the parcel ImageReader loaded.NOTE: The icons actually used in the VisualLauncher are in the ToolbarIconLibrary. We keep this class for future references.</body></comment><class><name>KaiProfilerUI</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>iterations profiledExpression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-KaiProfiler</package></attributes></class><comment><class-id>KaiProfilerUI</class-id><body>The user interface of KaiProfiler.Instance Variables	iterations	&lt;ValueModel&gt;	amount of time the expression has to be evaluated	profiledExpression	&lt;ValueModel&gt;	expression to evaluate</body></comment><class><name>TGSportWheel</name><environment>Smalltalk</environment><super>TGWheel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>SpyWrapper</name><environment>Smalltalk</environment><super>Refactory.Wrappers.MethodWrapper</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>count methodSpy previousMethod v originalMethod receiver listOfArguments </inst-vars><class-inst-vars>currentTestCase currentTestMethod </class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>Spy-Core</package></attributes></class><class><name>TGPerson</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample2</category><attributes><package>Spy-ScenarioExample2</package></attributes></class><class><name>TGTeacher</name><environment>Smalltalk</environment><super>TGPerson</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-ScenarioExample2</package></attributes></class><class><name>TGFooTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TGFemaleDriver</name><environment>Smalltalk</environment><super>TGDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>TGMaleDriver</name><environment>Smalltalk</environment><super>TGDriver</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>IdentityObjectSet</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dictionary </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>BoundedIdentitySet</name><environment>Smalltalk</environment><super>Core.IdentitySet</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>maxSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Util</category><attributes><package>Spy-Util</package></attributes></class><class><name>LatestPrerequisitePolicy</name><environment>Smalltalk</environment><super>Store.BasicPrerequisitePolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>As yet unclassified</category><attributes><package>Spy-VWSpecific</package></attributes></class><class><name>TGFooSubClass2</name><environment>Smalltalk</environment><super>TGFoo</super><private>false</private><indexed-type>none</indexed-type><inst-vars>foo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-ScenarioExample</category><attributes><package>Spy-ScenarioExample</package></attributes></class><class><name>HapaoTestCoverageUITest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ui </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage-Test</package></attributes></class><comment><class-id>HapaoTestCoverageUITest</class-id><body>testing the VW UI of HapaoInstance Variables	ui	&lt;&gt;	Instance of HapaoTestCoverageUI</body></comment><class><name>KaiProfilingTest</name><environment>Smalltalk</environment><super>AbstractSpyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-KaiProfiler-Test</package></attributes></class><class><name>KaiProfilingClassSpy</name><environment>Smalltalk</environment><super>ClassSpy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Spy-KaiProfiler</package></attributes></class><class><name>HapaoTest</name><environment>Smalltalk</environment><super>AbstractSpyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-HapaoTestCoverage</category><attributes><package>Spy-HapaoTestCoverage-Test</package></attributes></class><class><name>SpyTest</name><environment>Smalltalk</environment><super>AbstractSpyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Test</category><attributes><package>Spy-Test</package></attributes></class><shared-variable><name>CurrentMethod</name><environment>KaiProfilingMethodSpy</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Spy-KaiProfiler</package></attributes></shared-variable><shared-variable><name>CurrentMethod</name><environment>HapaoTestCoverageMethodSpy</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Spy-HapaoTestCoverage</package></attributes></shared-variable><shared-variable><name>CurrentMethod</name><environment>SpyWrapper</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Spy-Core</package></attributes></shared-variable><shared-variable><name>Registry</name><environment>Profiler</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Spy-Core</package></attributes></shared-variable><shared-variable><name>Service</name><environment>ThreadProfilerMethod</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Spy-ThreadProfiler</package></attributes></shared-variable><shared-variable><name>CurrentMethod</name><environment>ThreadProfilerMethod</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Spy-ThreadProfiler</package></attributes></shared-variable><methods><class-id>Spy</class-id> <category>visualization</category><body package="Spy-Core">nameAsString	^'Spy'</body><body package="Spy-Core">populateMenuOn: aview</body><body package="Spy-Core">visualize 	| view |	view := Roassal.ROMondrianViewBuilder titled: self nameAsString.	self visualizeOn: view.	self populateMenuOn: view	.	^ view open</body><body package="Spy-Core">visualizeOn: view	self subclassResponsibility</body></methods><methods><class-id>Spy</class-id> <category>assertion</category><body package="Spy-Core">assert: aBlock	aBlock value ifFalse: [ self error: 'Assertion failed' ]</body></methods><methods><class-id>Spy</class-id> <category>initialize-release</category><body package="Spy-Core">initialize</body></methods><methods><class-id>Spy class</class-id> <category>util</category><body package="Spy-Core">generate: profilerName category: aCategory	| profiler methodSpy classSpy packageSpy test |	self assert: [ profilerName first isUppercase ].	self assert: [ aCategory notEmpty ].		profiler := Profiler subclass: profilerName asSymbol		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: aCategory.			methodSpy := MethodSpy subclass: (profilerName, 'Method') asSymbol		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: aCategory.		classSpy := ClassSpy subclass: (profilerName, 'Class') asSymbol		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: aCategory.	packageSpy := PackageSpy subclass: (profilerName, 'Package') asSymbol		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: aCategory.			profiler class compile: 'spyClassForPackage', String cr, String tab, ' ^ ', packageSpy name classified: 'hooks'.	packageSpy class compile: 'spyClassForClass', String cr, String tab, ' ^ ', classSpy name classified: 'hooks'.	classSpy class compile: 'spyClassForMethod', String cr, String tab, ' ^ ', methodSpy name classified: 'hooks'.	methodSpy compile: 'beforeRun: methodName with: listOfArguments in: receiver' classified: 'hooks'.	profiler compile: 'registryName', String cr, String tab, '^ #', profilerName classified: 'hooks'. 		test := AbstractSpyTest subclass: (profilerName, 'Test') asSymbol		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: aCategory.	test compile: 'profilerClass', String cr, String tab,  '^  ', profilerName asSymbol classified: 'hooks'.	self generateVisualizationTemplateOn: profiler</body><body package="Spy-Core">generateVisualizationTemplateOn: profilerClass	profilerClass compile: 'visualizeOn: view	view nodes: self allClasses forEach: [ :each | 		view nodes: each methods.		view gridLayout gapSize: 2.	].	view edgesFrom: #superclass.	view treeLayout	' classified: 'visualization'</body></methods><methods><class-id>Spy class</class-id> <category>instance creation</category><body package="Spy-Core">new	^ super new initialize</body></methods><methods><class-id>MethodSpy</class-id> <category>accessing</category><body package="Spy-Core">addExecutionTime: v 	executionTime  := executionTime + v</body><body package="Spy-Core">addIncomingCalls: methodSpy	^ self incomingCalls add: methodSpy</body><body package="Spy-Core">addLocalExecutionTime: v 	localExecutionTime  := localExecutionTime + v</body><body package="Spy-Core">addOutgoingCalls: methodSpy	^ self outgoingCalls add: methodSpy</body><body package="Spy-Core">classSpy	^ classSpy</body><body package="Spy-Core">classSpy: anObject	classSpy := anObject</body><body package="Spy-Core">compiledMethod	^ self originalMethod</body><body package="Spy-Core">executionTime	^ executionTime</body><body package="Spy-Core">executionTime: v 	^ executionTime  := v</body><body package="Spy-Core">incomingCalls	^ incomingCalls ifNil: [ incomingCalls := self incomingAndOutgoingCallClass new ]</body><body package="Spy-Core">instrumentedMethod	^ instrumentedMethod</body><body package="Spy-Core">instrumentedMethod: aTemplateMethod	instrumentedMethod := aTemplateMethod</body><body package="Spy-Core">isExecuted	^isExecuted</body><body package="Spy-Core">isExecuted: anObject	isExecuted := anObject</body><body package="Spy-Core">localExecutionTime	^localExecutionTime</body><body package="Spy-Core">localExecutionTime: anObject	localExecutionTime := anObject</body><body package="Spy-Core">messageTally	^messageTally</body><body package="Spy-Core">messageTally: anObject	messageTally := anObject</body><body package="Spy-Core">originalMethod	"originalMethod isSpy ifTrue: [ ^ originalMethod originalMethod ]."	^ originalMethod</body><body package="Spy-Core">originalMethod: aCompiledMethod	"self assert: [ aCompiledMethod isSpy not ]."	originalMethod := aCompiledMethod</body><body package="Spy-Core">outgoingCalls	^ outgoingCalls ifNil: [ outgoingCalls := self incomingAndOutgoingCallClass new ]</body><body package="Spy-Core">selector	^ selector</body><body package="Spy-Core">spyWrapper	^spywrapper</body><body package="Spy-Core">spyWrapper: aSpyWrapper	spywrapper := aSpyWrapper.</body><body package="Spy-Core">staticOutgoingCallsToSelf	^ staticOutgoingCalls ifNil: [ staticOutgoingCalls := OrderedCollection new ]</body></methods><methods><class-id>MethodSpy</class-id> <category>hooks</category><body package="Spy-Core">afterRun: methodName with: listOfArguments in: receiver</body><body package="Spy-Core">beforeRun: methodName with: listOfArguments in: receiver</body><body package="Spy-Core">flushCache	"Tell the interpreter to remove all references to this method from its method lookup cache, if it has one.  This primitive must be called whenever a method is defined or removed.	NOTE:  Only one of two selective flush methods needs to be used.	Squeak 2.2 and earlier uses 119 (See Symbol flushCache).	Squeak 2.3 and later uses 116 (See CompiledMethod flushCache).""	&lt;primitive: 116&gt;"</body><body package="Spy-Core">incomingAndOutgoingCallClass	^ OrderedCollection</body><body package="Spy-Core">returnValue: value</body><body package="Spy-Core">run: methodName with: listOfArguments in: receiver	| v |	self classSpy ifNotNil: [		classSpy beforeEachExecution: methodName On: receiver with: listOfArguments ].	self beforeRun: methodName with: listOfArguments in: receiver.	"	v := originalMethod valueWithReceiver: receiver arguments: listOfArguments."	v := self spyWrapper clientMethod valueWithReceiver: receiver arguments: listOfArguments.	self classSpy ifNotNil: [ 		classSpy afterEachExecution: methodName On: receiver with: listOfArguments ].	self afterRun: methodName with: listOfArguments in: receiver.	self returnValue: v.	^ v</body><body package="Spy-Core">selector: aSelectorAsSymbol	selector := aSelectorAsSymbol</body><body package="Spy-Core">setReceivers: receivers	| tg tg_tmp method class |	receivers do:[:r |		tg := r method.		tg_tmp := tg.		[tg_tmp class == CompiledBlock ] whileTrue:[ tg_tmp := tg_tmp outerMethod].		class := (self profiler classAt: tg mclass name ifNone: [nil]).		class isNil			ifTrue:[method := nil.]			ifFalse: [method := class localMethodAt: tg_tmp selector ifAbsent: [nil]].		(method = nil)			ifFalse:[self addOutgoingCalls: method.					method addIncomingCalls: self].	].</body></methods><methods><class-id>MethodSpy</class-id> <category>testing</category><body package="Spy-Core">hasClassSpy 	^ self classSpy notNil</body><body package="Spy-Core">hasIncomingCalls	incomingCalls ifNil: [ ^ false ].	^ self incomingCalls size &gt; 0</body><body package="Spy-Core">hasLiteral: v	^ self originalMethod hasLiteral: v</body><body package="Spy-Core">hasNoIncomingCalls	^ self hasIncomingCalls not</body><body package="Spy-Core">hasOutgoingCalls	outgoingCalls ifNil: [ ^ false ].	^ self outgoingCalls size &gt; 0</body><body package="Spy-Core">isAbstract	^false</body><body package="Spy-Core">isMethodExisting"	self halt."	^ self theClass methodDictionary includesKey: self selector</body><body package="Spy-Core">isMethodNotExisting	^ self isMethodExisting not</body><body package="Spy-Core">isNotAMethodExtension	"True if I am a class extension"	^ self originalMethod category first = $*</body><body package="Spy-Core">isNotMethodExtension	"True if I am a class extension"	^ self originalMethod category first ~= $*</body><body package="Spy-Core">isRequired	^ self originalMethod isRequired</body><body package="Spy-Core">isRequired: marker	^ self originalMethod isRequired: marker</body><body package="Spy-Core">isSpy	^ true</body><body package="Spy-Core">isTest		^ ('#test*' match: self selector printString ) and: [(self classSpy isTestClass )]</body><body package="Spy-Core">notCovered	^ self isCovered not</body></methods><methods><class-id>MethodSpy</class-id> <category>delegation</category><body package="Spy-Core">= v	| vp |	(v isKindOf: MethodSpy)		ifTrue: [ vp := v originalMethod ]		ifFalse: [ vp := v ].		^ self originalMethod == vp</body><body package="Spy-Core">at: v	^ originalMethod at: v</body><body package="Spy-Core">endPC	^ originalMethod endPC</body><body package="Spy-Core">getSourceFor: sel in: class	^ originalMethod getSourceFor: sel in: class</body><body package="Spy-Core">hasLiteralSuchThat: v	^ originalMethod hasLiteralSuchThat: v</body><body package="Spy-Core">initialPC	^ originalMethod initialPC</body><body package="Spy-Core">isConflict	^ originalMethod isConflict</body><body package="Spy-Core">last	^ originalMethod last</body><body package="Spy-Core">literalAt: v	^ originalMethod literalAt: v</body><body package="Spy-Core">literals	^ originalMethod literals</body><body package="Spy-Core">methodClass	^ originalMethod methodClass</body><body package="Spy-Core">objectForDataStream: v	^ originalMethod objectForDataStream: v</body><body package="Spy-Core">pragmas	^ originalMethod pragmas</body><body package="Spy-Core">readDataFrom: v1 size: v2	^ originalMethod readDataFrom: v1 size: v2</body><body package="Spy-Core">refersToLiteral: v	^ originalMethod refersToLiteral: v</body><body package="Spy-Core">sourcePointer	^ originalMethod sourcePointer</body><body package="Spy-Core">storeDataOn: v	^ originalMethod storeDataOn: v</body><body package="Spy-Core">storeOn: s	^ originalMethod storeOn: s</body><body package="Spy-Core">theClass	^ spywrapper mclass</body><body package="Spy-Core">veryDeepCopyWith: v	^ originalMethod veryDeepCopyWith: v</body></methods><methods><class-id>MethodSpy</class-id> <category>accessing-computed</category><body package="Spy-Core">allIncomingCalls	| answer |	answer := OrderedCollection new.	answer addAll: self incomingCalls.	self incomingCalls do: [:c |		answer addAll: c allIncomingCalls ].	^ answer</body><body package="Spy-Core">allIncomingCallsRunning: collection	"collection addAll: self outgoingCalls."	self incomingCalls do: [:c |		(collection anySatisfy: [:v | v == c ] )			ifFalse: [ collection add: c. 						 c allIncomingCallsRunning: collection						 "collection addAll: (c allOutgoingCallsRunning: collection)" ] ].</body><body package="Spy-Core">allOutgoingCalls	| answer |	answer := OrderedCollection new.	self allOutgoingCallsRunning: answer.	^ answer</body><body package="Spy-Core">allOutgoingCallsRunning: collection	"collection addAll: self outgoingCalls."	self outgoingCalls do: [:c |		(collection anySatisfy: [:v | v == c ] )			ifFalse: [ collection add: c. 						 c allOutgoingCallsRunning: collection						 "collection addAll: (c allOutgoingCallsRunning: collection)" ] ].</body><body package="Spy-Core">callerClasses	"really slow method"	| sender callers |	sender := thisContext sender sender sender.	callers := OrderedCollection new.	[sender notNil] whileTrue: [ callers add: sender methodClass. sender := sender sender.].	^ callers</body><body package="Spy-Core">callingMethod	| t |	t := thisContext sender sender sender sender.	^ t method methodClass &gt;&gt; t selector</body><body package="Spy-Core">numberOfCalls	^ spywrapper originalMethod messages size</body><body package="Spy-Core">numberOfLinesOfCode	^4	"^ originalMethod  numberOfLinesOfCode"</body><body package="Spy-Core">overridingMethods	"Return the list of overriding methods"	|hasMethod|	hasMethod := self classSpy allSubclasses		select: [ :cls | cls hasMethodNamed: self selector ].	hasMethod collect: [ :cls | cls &gt;&gt; self selector ].	^ hasMethod collect: [ :cls | cls &gt;&gt; self selector ]."ORIGINAL""	^ self classSpy allSubclasses		select: [ :cls | cls hasMethodNamed: self selector ]		thenCollect: [ :cls | cls &gt;&gt; self selector ]"</body><body package="Spy-Core">package	^ self classSpy packageSpy</body><body package="Spy-Core">profiler	self package ifNil: [ ^ nil ].	^ self package profiler</body><body package="Spy-Core">sourceCode"	^ originalMethod getSourceFromFile"	^ originalMethod getSource</body><body package="Spy-Core">withAllIncomingCalls	| answer |	answer := OrderedCollection new.	answer add: self.	self allIncomingCallsRunning: answer.	^ answer</body><body package="Spy-Core">withAllOutgoingCalls	| answer |	answer := OrderedCollection new.	answer add: self.	self allOutgoingCallsRunning: answer.	^ answer</body></methods><methods><class-id>MethodSpy</class-id> <category>printing</category><body package="Spy-Core">printOn: stream	stream nextPut: $&lt;.	self classSpy ifNotNil:[ stream nextPutAll: (self theClass name asString).].	stream nextPutAll: ('&gt;&gt;').	self selector ifNotNil:[stream nextPutAll: (self selector asString).].	stream nextPut: $&gt;</body></methods><methods><class-id>MethodSpy</class-id> <category>utils</category><body package="Spy-Core">createTemplateForVisualizationNamed: aSymbol	self class compile: aSymbol asString, String cr, '	| view | 	view := MOViewRenderer new.	self ', aSymbol asString, 'On: view.	view open'.		self class compile: aSymbol, 'On: view	self error: ''Should define this method''	'.</body><body package="Spy-Core">useTime: aTally	"aTally time ifNil: [ ^ self ].		executionTime := aTally time."	aTally root tally  = 0 		ifFalse:[			self executionTime: ( self executionTime + (((0.1 * (1000.0 * aTally tally  / aTally root tally)) * self profiler totalExecutionTime/100.0 ) roundTo: 0.01)).			self executionTime &gt; self profiler maxTimeToRun ifTrue:[self profiler maxTimeToRun: self executionTime]		].	self messageTally: aTally.</body><body package="Spy-Core">useTime: aTally parents: parents	"aTally time ifNil: [ ^ self ].		executionTime := aTally time."	aTally root tally  = 0 		ifFalse:[			self executionTime: (((0.1 * (1000.0 * aTally tally  / aTally root tally)) * self profiler totalExecutionTime/100.0 ) roundTo: 0.01).			self executionTime &gt; self profiler maxTimeToRun ifTrue:[self profiler maxTimeToRun: self executionTime]		].	self messageTally: aTally.</body></methods><methods><class-id>MethodSpy</class-id> <category>contract</category><body package="Spy-Core">checkInvariant	self assert: [ selector notNil ].	self assert: [ selector isKindOf: Symbol ].	self assert: [ originalMethod isKindOf: CompiledMethod ].	self assert: [ self profiler notNil ].	self assert: [ self classSpy notNil ].	self assert: [ self classSpy profiler == self profiler ].	self assert: [ self classSpy profiler notNil ].		self assert: [ self classSpy profiler isKindOf: Profiler ].</body></methods><methods><class-id>MethodSpy</class-id> <category>action</category><body package="Spy-Core">browse	|rb | 	rb := Refactory.Browser.RefactoringBrowser open.	(rb navigator) selectClass: self classSpy originalClass; setSelector: self selector asSymbol; changed.</body><body package="Spy-Core">doesNotUnderstand: aMessageTranscript show: 'DNU: ', aMessage printString ; cr.	^ self originalMethod perform: aMessage selector withArguments: aMessage arguments</body></methods><methods><class-id>MethodSpy</class-id> <category>installing</category><body package="Spy-Core">install	"We do nothing if the method has been supressed"	"(self theClass methodDict includesKey: self selector) ifFalse: [ ^ self ].	self assert: [ (self theClass methodDict at: self selector) isSpy not ].	self assert: [ self originalMethod notNil ].	self assert: [ self instrumentedMethod notNil ].	self flushCache."		"We update the original method, it may have changed since the uninstall"	"originalMethod := self theClass methodDict at: self selector.	self theClass methodDict at: self selector put: self instrumentedMethod."	self spyWrapper install.</body><body package="Spy-Core">uninstall	"self theClass methodDict at: self selector put: self originalMethod."	(self spyWrapper) uninstall."	self originalMethod uninstall."	self flushCache</body></methods><methods><class-id>MethodSpy</class-id> <category>initialize-release</category><body package="Spy-Core">initialize	super initialize.	executionTime := 0.	localExecutionTime := 0.	outgoingCalls := nil.	"incomingCalls := nil."	incomingCalls := self incomingAndOutgoingCallClass new.	selector := #unamed.	"Set a mock method, the #initialize itself"	"This is to make the class invariant pass"	originalMethod := self class &gt;&gt; #initialize.	classSpy := ClassSpy nullObject</body></methods><methods><class-id>MethodSpy class</class-id> <category>public</category><body package="Spy-Core">isInMeta	^ inMeta</body><body package="Spy-Core">setInMeta	inMeta := true</body><body package="Spy-Core">setInNonMeta	inMeta := false</body></methods><methods><class-id>MethodSpy class</class-id> <category>hooks</category><body package="Spy-Core">spyClassForMethod	^ self</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>accessing-computed</category><body package="Spy-KaiProfiler">afterRun: methodName with: listOfArguments in: receiver</body><body package="Spy-KaiProfiler">hasSameReturnValuePerReceiver	^ sameReturnValuePerReceiverBoolean</body><body package="Spy-KaiProfiler">numberOfInvocations	^numberOfInvocations</body><body package="Spy-KaiProfiler">numberOfReceivers	^receivers size</body><body package="Spy-KaiProfiler">receiverTable	^ receiverTable ifNil: [		"receiverTable := Array new:  4096"		receiverTable := BoundedDictionary new.	]</body><body package="Spy-KaiProfiler">returnValueTable	^ returnValueTable ifNil: [		"returnValueTable := Array new:  4096"		returnValueTable := BoundedDictionary new.	]</body><body package="Spy-KaiProfiler">run: methodName with: listOfArguments in: receiver	| v receiverSnapshot identityHash receiverHash argAndReceiverSnapshot previousMethod |	"SETTING EXECUTION INFO"	numberOfInvocations := numberOfInvocations + 1.	receivers add: receiver.	"SIDE EFFECT"		performLocalSideEffect ifFalse: [		receiverSnapshot := receiver snapshotAsInteger.		identityHash := receiver identityHash.		receiverHash := identityHash+ 1.			argAndReceiverSnapshot := receiverHash bitXor: listOfArguments snapshotAsInteger.	"	(self receiverTable includesKey: receiverHash) 			ifTrue: [ (self receiverTable at: receiverHash) ~= argAndReceiverSnapshot						ifTrue: [ performLocalSideEffect := true ]]			ifFalse: [ self receiverTable at: receiverHash put: argAndReceiverSnapshot ]"	].	self classSpy ifNotNil: [		classSpy beforeEachExecution: methodName On: receiver with: listOfArguments ].	self beforeRun: methodName with: listOfArguments in: receiver.	CurrentMethod		ifNotNil: [ 			self addIncomingCalls: CurrentMethod.			CurrentMethod addOutgoingCalls: self ].	previousMethod := CurrentMethod.	CurrentMethod := self.	[v := self spyWrapper clientMethod valueWithReceiver: receiver arguments: listOfArguments.]		ensure:[CurrentMethod := previousMethod.].	self classSpy ifNotNil: [ 		classSpy afterEachExecution: methodName On: receiver with: listOfArguments ].	self afterRun: methodName with: listOfArguments in: receiver.	self returnValue: v.	"SIDE EFFECT"	performLocalSideEffect ifFalse:[		receiver snapshotAsInteger ~= receiverSnapshot			ifTrue: [ performLocalSideEffect := true ].		(argAndReceiverSnapshot ~= (receiverHash bitXor: listOfArguments snapshotAsInteger))				ifTrue: [ performLocalSideEffect := true ].	].		"RETURN VALUE"	"returnValueHash := v identityHash.	(self returnValueTable includesKey: receiverHash) 		ifTrue: [ (self returnValueTable at: receiverHash) ~= returnValueHash 					ifTrue: [ sameReturnValuePerReceiverBoolean := false ]].	self returnValueTable at: receiverHash put: returnValueHash."	(receiver == v) ifTrue: [ returnSelf := true ].	^ v</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>initialize-release</category><body package="Spy-KaiProfiler">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	numberOfCalls := 0.	numberOfInvocations := 0.	receivers := BoundedIdentitySet maxSize: 100.	performLocalSideEffect := false.	sameReturnValuePerReceiverBoolean := true.	returnSelf := false.	^self</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>configuration</category><body package="Spy-KaiProfiler">colorForMethodHavingASideEffect	^ Color gray</body><body package="Spy-KaiProfiler">colorForMethodHavingNoSideEffect	^ Color yellow</body><body package="Spy-KaiProfiler">maxSizeForMethod	^ 200</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>accessing</category><body package="Spy-KaiProfiler">performLocalSideEffect	"Return true if I change the state of the receiver"	^performLocalSideEffect</body><body package="Spy-KaiProfiler">performLocalSideEffect: aBoolean	"When called with true as argument means that the method performs at least one side effect"	performLocalSideEffect := aBoolean</body><body package="Spy-KaiProfiler">returnSelf	"True whether the method already return the 'self' object receiver"	^ returnSelf</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>visualization</category><body package="Spy-KaiProfiler">getEdges: methods	|edges|	edges := OrderedCollection new.	methods do: [:m |		(m outgoingCalls) do:[:om |			edges add: (Array with: m with: om).		].	].	^edges asSet</body><body package="Spy-KaiProfiler">setMouseOverInteractionForMethodOn: view	view interaction onMenuOpen: 					[:anEntity :aMenu |					aMenu addItemLabel: 'View Invocations' value: [anEntity visualize].					aMenu addItemLabel: 'Browse Method' value: [anEntity browse].					3 timesRepeat: [aMenu removeItem: (aMenu menuItemAt: 3 )]].</body><body package="Spy-KaiProfiler">sortMethods: methods	"Simply sort the methods"	| orderedMethods |	orderedMethods := SortedCollection sortBlock: [:a :b| a executionTime &lt; b executionTime]. 	methods do: [:m |		orderedMethods add: m.	].	^ orderedMethods</body><body package="Spy-KaiProfiler">viewTimeProfilerReport	|view aStream|	aStream :=  TextStream on: String new.	view := Roassal.ROMondrianViewBuilder titled: ('Time Profiler Report for ', self printString).	"self myTimeProfiler reportOn: aStream cutoffPercent: 7."		self messageTally isNil ifFalse:[			(self messageTally parent) fullPrintOn: aStream cutoff: 7.		view interaction noPopup.		view shape label.		view node: aStream collection .	].	view open.</body><body package="Spy-KaiProfiler">visualizeIncomingCalls	|methods view|		view := Roassal.ROMondrianViewBuilder titled: ('Incoming calls for', self printString).	methods := self withAllIncomingCalls asSet.	self visualizeMethods: methods on: view incoming: true.	view open.</body><body package="Spy-KaiProfiler">visualizeMethods: methods on: view incoming: shouldSeeIncomingBoolean	"If shouldSeeIncomingBoolean is false, then outgoing calls are seen"	|orderedMethods numberOfExecutions maxNumberOfExecutions |	numberOfExecutions := self profiler allMethods collect:[:m | m numberOfInvocations].	maxNumberOfExecutions := 0.	numberOfExecutions 		do: [:m | m &gt; maxNumberOfExecutions ifTrue:[maxNumberOfExecutions := m ] ].	maxNumberOfExecutions = 0 ifTrue:[ maxNumberOfExecutions := 1 ].		self visualizeLegendOn: view.	orderedMethods := self sortMethods: methods.	view interaction forwarder.	view shape rectangleWithoutBorder.	view node: 'all methods'  forIt:[		self profiler setInteractionForMethodOn: view.		view shape rectangle  width: [:el | ((el numberOfInvocations) * self maxSizeForMethod / maxNumberOfExecutions) ] ; 		height: [:el | (el executionTime) * self maxSizeForMethod   / self profiler maxTimeToRun] ;		linearFillColor: #numberOfReceivers within: self profiler allMethods;		borderColor: [:anEntity |anEntity = self ifTrue:[ Color cyan ] ifFalse: [ Color black ] ].		view nodes: orderedMethods.		 shouldSeeIncomingBoolean 			ifTrue: [ view edgesToAll: [ :cm | cm incomingCalls ] ]			ifFalse:[ view edges: methods from: #yourself toAll: #outgoingCalls ].		"This is strange, the tree layout does not give good result. However, for the state changes yes"		view treeLayout.		"view sugiyamaLayout"	].</body><body package="Spy-KaiProfiler">visualizeOn: view	| methods maxSize |	methods := self withAllOutgoingCalls asSet.	maxSize := 200.	self visualizeLegendOn: view.	self profiler setInteractionForMethodOn: view.	(view shape rectangle)		width: [ :el | el numberOfInvocations * maxSize / self profiler maxNumberOfExecutions ];		height: [ :el | el executionTime * maxSize / self profiler maxTimeToRun ];		linearFillColor: #numberOfReceivers within: self profiler allMethods;		borderColor: [ :el | self profiler borderColorFor: el ].	view nodes: methods.	view edgesToAll: [ :methodSpy | methodSpy incomingCalls ].	view treeLayout.	view evaluate</body><body package="Spy-KaiProfiler">visualizeOutgoingCalls	^ self visualizeOutgoingCallsThat: [ :m | true ]</body><body package="Spy-KaiProfiler">visualizeOutgoingCallsThat: aBlock	|methods view|		view := Roassal.ROMondrianViewBuilder titled: ('Outgoing calls for', self printString).	methods := self withAllOutgoingCalls asSet select: aBlock.	self visualizeMethods: methods on: view incoming: false.	view open.</body><body package="Spy-KaiProfiler">visualizeStateChanges	|methods view|		view := Roassal.ROMondrianViewBuilder titled: ('State changes for', self printString).	methods := self withAllOutgoingCalls asSet.	self visualizeStateChangesForMethods: methods on: view.	view open.</body><body package="Spy-KaiProfiler">visualizeStateChangesForMethods: methods on: view 		|orderedMethods maxSize maxNumberOfExecutions numberOfExecutions|	maxSize := 200.	numberOfExecutions := self profiler allMethods collect: [ :m | m numberOfInvocations ].	maxNumberOfExecutions := numberOfExecutions inject: 1 into: [:max :e | max max: e ].		self visualizeStateChangesLegendOn: view.	orderedMethods := self sortMethods: methods.	view interaction forwarder.	view shape rectangleWithoutBorder.	view node: 'all methods' forIt:[		self profiler setInteractionForMethodOn: view.		view shape rectangle  width: [:el | ((el numberOfInvocations) * maxSize / maxNumberOfExecutions) ] ; 		height: [:el | (el executionTime) * maxSize   / self profiler maxTimeToRun] ;		fillColor: [:el | el performLocalSideEffect 										ifTrue: [ self colorForMethodHavingASideEffect] 										ifFalse: [ self colorForMethodHavingNoSideEffect] ] .				view nodes: orderedMethods.		view edgesToAll: [ :cm | cm incomingCalls ].		view treeLayout.	].	view treeLayout.</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>hooks</category><body package="Spy-KaiProfiler">incomingAndOutgoingCallClass	^ IdentitySet</body></methods><methods><class-id>KaiProfilingMethodSpy</class-id> <category>visualization - legend</category><body package="Spy-KaiProfiler">mainLegendMessage	^ 'Squares are methodsEdges are invocationHeight of method is the time taken to executeWidth is the number of times the method has been executedColor is the amount of different receivers the method has been executed onCyan border indicates the the selected method'</body><body package="Spy-KaiProfiler">stateChangeLegendMessage	^ 'Squares are methodsEdges are invocationHeight of method is the time taken to executeWidth is the number of times the method has been executedYellow means the method does not do a side effectGray means it does a side effect on the receiverRed border marks the selected method'.</body><body package="Spy-KaiProfiler">visualizeLegendOn: view	self visualizeLegendOn: view legend: self mainLegendMessage</body><body package="Spy-KaiProfiler">visualizeLegendOn: view legend: aText	view interaction noPopup.	view shape rectangle.	view 		node: 'Legend' 		forIt: [			view interaction noPopup.			view shape label.			view node: aText.			view verticalLineLayout.		].</body><body package="Spy-KaiProfiler">visualizeStateChangesLegendOn: view	self visualizeLegendOn: view legend: self stateChangeLegendMessage</body></methods><methods><class-id>ClassSpy</class-id> <category>accessing-computed</category><body package="Spy-Core">&gt;&gt; aSymbol	^ self localMethodAt: aSymbol</body><body package="Spy-Core">allMethods	"Return the list of methods defined in myself and in my metaspy"	^ self methods , self metaclassSpy methods</body><body package="Spy-Core">allSubclasses	"Return all the subclasses of myself"	allSubclassesCache ifNotNil: [ ^ allSubclassesCache ].	^ allSubclassesCache := self subclasses inject: #() into: [ :sum :cls | sum, (Array with: cls), cls allSubclasses ]</body><body package="Spy-Core">coveredMethods	^ self methods select: #isCovered</body><body package="Spy-Core">downwardLookupMethodsNamed: aSelector	^ (self allSubclasses select: [:cls | cls hasMethodNamed: aSelector])			collect: [:cls | cls localMethodAt: aSelector ]</body><body package="Spy-Core">localMethodAt: aSelector	^ self localMethods at: aSelector</body><body package="Spy-Core">localMethodAt: aSelector ifAbsent: aBlock	^ self localMethods at: aSelector ifAbsent: aBlock</body><body package="Spy-Core">localMethodAt: aSelector put:  value	^ self localMethods at: aSelector put: value</body><body package="Spy-Core">lookupMethodNamed: aSelector	^ (self hasMethodNamed: aSelector)			ifTrue: [ self localMethodAt: aSelector ]			ifFalse: [ self superclass lookupMethodNamed: aSelector ]</body><body package="Spy-Core">methods 	"Return the list of spy representing a method"	^ methods values</body><body package="Spy-Core">nonMetaClassName	^ (self isMeta		ifTrue: [ self className copyFrom: 1 to: ((self className indexOf: $ ) - 1)] 		ifFalse: [ self className ]) asSymbol</body><body package="Spy-Core">numberOfAllMethods	^ self allMethods size</body><body package="Spy-Core">numberOfCoveredMethods	^ self coveredMethods size</body><body package="Spy-Core">numberOfMethods	^ self methods size</body><body package="Spy-Core">profiler	^ self package profiler</body><body package="Spy-Core">subclasses	^ self profiler allClassesSuchThat: [:cls | cls superclass == self]</body><body package="Spy-Core">theNonMetaClass 	"Return the non metaclass spy for the receiver"		self isMeta ifFalse: [ ^ self ].	^ self packageSpy &gt;&gt; self nonMetaClassName</body><body package="Spy-Core">withAllSubclasses	^ (Array with: self), self allSubclasses</body></methods><methods><class-id>ClassSpy</class-id> <category>contract</category><body package="Spy-Core">checkInvariant	self assert: [ className notNil ].	self assert: [ className isKindOf: Symbol ].	self assert: [ self profiler notNil ].	self assert: [ self methods notNil ].	self assert: [ self methods isCollection ].	self assert: [ self methods allSatisfy: [:m| m isKindOf: MethodSpy ] ].	self assert: [ self class spyClassForMethod == self profiler class spyClassForMethod ].	self assert: [ self class spyClassForMethod == self profiler class spyClassForMethod ].	self assert: [ self class == self profiler class spyClassForClass ].</body></methods><methods><class-id>ClassSpy</class-id> <category>accessing</category><body package="Spy-Core">addMethod: aMethod	"Useful for testing"	aMethod classSpy: self.	methods at: aMethod selector put: aMethod.</body><body package="Spy-Core">className	^ className</body><body package="Spy-Core">className: aSymbol	className := aSymbol</body><body package="Spy-Core">localMethods	^ methods</body><body package="Spy-Core">metaclassSpy	"Return the class spy for the metaclass."	^ metaclassSpy ifNil: 		[ metaclassSpy := self class new 							className: self theClass class name asSymbol;							originalClass: self theClass class; 							yourself ]</body><body package="Spy-Core">originalClass	^originalClass</body><body package="Spy-Core">originalClass: aClass	originalClass := aClass</body><body package="Spy-Core">package	^ packageSpy</body><body package="Spy-Core">packageSpy	^ packageSpy</body><body package="Spy-Core">packageSpy: anObject 	packageSpy := anObject.	metaclassSpy ifNotNil: [:v | metaclassSpy packageSpy: anObject ]</body><body package="Spy-Core">superclass	self theClass superclass ifNil: [^nil].	^ self profiler classAt: self theClass superclass name ifNone: [nil]</body><body package="Spy-Core">superclassesToRoot	|classes|	classes := OrderedCollection new.	(self superclass isNil) ifFalse: [classes add: self superclass. classes addAll: self superclass superclassesToRoot].	^ classes</body><body package="Spy-Core">theClass	^ originalClass</body></methods><methods><class-id>ClassSpy</class-id> <category>hooks</category><body package="Spy-Core">afterEachExecution: messageName On: aReceiver with: arguments</body><body package="Spy-Core">beforeEachExecution: messageName On: aReceiver with: arguments</body></methods><methods><class-id>ClassSpy</class-id> <category>testing</category><body package="Spy-Core">hasMethodNamed: aSelector	^ self localMethods includesKey: aSelector</body><body package="Spy-Core">isClassPresent"	^ Smalltalk globals includesKey: className"	^ Smalltalk organization includesElement: className</body><body package="Spy-Core">isMeta	^ self className includes: $ .</body><body package="Spy-Core">isPartiallyCovered	^ self methods anySatisfy: #isCovered</body><body package="Spy-Core">isPartiallyExecuted	| isPartiallyExecuted |	isPartiallyExecuted := false.	self allMethods do:[:m | m numberOfInvocations &gt; 0 ifTrue:[isPartiallyExecuted := true]].	^isPartiallyExecuted</body><body package="Spy-Core">isSubclassOf: aClassSpy	"True of I am a subclass of aClassSpy"		^ self == aClassSpy		ifTrue: [ true ]		ifFalse: [ 			self superclass ifNil: [ ^ false ].			self superclass isSubclassOf: aClassSpy ]</body><body package="Spy-Core">isTestClass		^ self superclass 			ifNil: [ self theClass superclass = SUnit.TestCase or:[self theClass superclass = XProgramming.SUnit.TestCase] ] 			ifNotNil: [ self superclass isTestClass ]</body><body package="Spy-Core">understandMethodNamed: aSelector	(self hasMethodNamed: aSelector)		ifTrue: [ ^ true ].		self superclass ifNil: [ ^ false ].		^ self superclass understandMethodNamed: aSelector</body></methods><methods><class-id>ClassSpy</class-id> <category>action</category><body package="Spy-Core">browse	self theClass browse</body></methods><methods><class-id>ClassSpy</class-id> <category>printing</category><body package="Spy-Core">printOn: stream	stream nextPut: $&lt;.	stream nextPutAll: (self className printString).	stream nextPut: $&gt;</body></methods><methods><class-id>ClassSpy</class-id> <category>installing</category><body package="Spy-Core">install		self allMethods do:[:m | m install]</body></methods><methods><class-id>ClassSpy</class-id> <category>initialize-release</category><body package="Spy-Core">initialize 	super initialize.	 methods := IdentityDictionary new.	packageSpy := PackageSpy nullObject</body></methods><methods><class-id>ClassSpy class</class-id> <category>hooks</category><body package="Spy-Core">spyClassForMethod	^ MethodSpy</body></methods><methods><class-id>ClassSpy class</class-id> <category>accessing</category><body package="Spy-Core">nullObject	^ self new</body></methods><methods><class-id>ThreadProfilerClass</class-id> <category>util</category><body package="Spy-ThreadProfiler">sumLevel	^self methods inject: 0 into: [:sum :each | sum + each level]</body></methods><methods><class-id>ThreadProfilerClass class</class-id> <category>hooks</category><body package="Spy-ThreadProfiler">spyClassForMethod	^ ThreadProfilerMethod</body></methods><methods><class-id>TGCarExampleTest</class-id> <category>tests</category><body package="Spy-ScenarioExample">testBasic	| car driver wheel1 wheel2 wheel3 wheel4 |	car := TGCar new.	driver := TGMaleDriver new.	wheel1 := TGWheel new.	wheel2 := TGWheel new.	wheel3 := TGWheel new.	wheel4 := TGWheel new.	car carName: 'Chevrolet'.	car driver: driver.	car addWheel: wheel1; addWheel: wheel2; addWheel: wheel3; addWheel: wheel4.	self assert: (car carName = 'Chevrolet').	self assert: (car hasDriver).	self assert: (car numberOfWheels = 4).	self assert: (car numberOfWheels = 4).	self assert: (car numberOfWheels = 4).	car carName: #Renault.		car carName: #Renault.	car carName: #Peugeot.</body><body package="Spy-ScenarioExample">testBasic2	| car sportCar wheel1 wheel2 |	car := TGCar new.	sportCar := TGSportCar new.	wheel1 := TGWheel new.	wheel2 := TGSportWheel new.	car addWheel: wheel1.	sportCar addWheel: wheel2.</body><body package="Spy-ScenarioExample">testDriver	| car1 car2 driver1 driver2 |	car1 := TGCar new.	car2 := TGSportCar new.		driver1 := TGMaleDriver new.	driver2 := TGFemaleDriver new.		car1 driver: driver1.	car2 driver: driver2.</body><body package="Spy-ScenarioExample">testDriver2	| car1 car2 driver1 driver2 |	car1 := TGCar new.	car2 := TGSportCar new.		driver1 := TGMaleDriver new.	driver2 := TGFemaleDriver new.		car1 driver: driver1.	car2 driver: driver2.		car1 addWheel: TG4x4Wheel new.	self assert: (driver1 returnString isKindOf: String)</body><body package="Spy-ScenarioExample">testDriver3	| car1 car2 driver1 driver2 |	car1 := TGCar new.	car2 := TGSportCar new.		driver1 := TGMaleDriver new.	driver2 := TGFemaleDriver new.		car1 driver: driver1.	car2 driver: driver2.		car1 addWheel: TG4x4Wheel new.</body><body package="Spy-ScenarioExample">testFactory	self assert: ((TGCar giveMeANewCarForDriver: TGMaleDriver new) isKindOf: TGLambCar)</body><body package="Spy-ScenarioExample">testFactory2	self assert: ((TGCar giveMeANewCarForDriver: TGMaleDriver new) isKindOf: TGLambCar).	self assert: ((TGCar giveMeANewCarForDriver: TGMaleDriver new) isKindOf: TGLambCar).</body><body package="Spy-ScenarioExample">testFoo	|aTGFoo aTGFooSubclass2|	aTGFoo := TGFoo new.	aTGFooSubclass2 := TGFooSubClass2 new.	aTGFoo foo7.	aTGFooSubclass2 foo5.</body><body package="Spy-ScenarioExample">testHash	"This test is about using TGCar&gt;&gt;hash"	| set car1 car2 wheel |	set := Set new.	set add: TGCar new.	set add: TGCar new.	set add: TGCar new.	self assert: set size = 3.		car1 := TGCar new.	car2 := TGCar new.	wheel := TGWheel new.	wheel returnHashOf: car1.	wheel returnHashOf: car1.	wheel returnHashOf: car2.	wheel returnHashOf: car2.</body></methods><methods><class-id>TPMainClass</class-id> <category>starting point</category><body package="Spy-ThreadScenario">createThreads: aNumber	aNumber timesRepeat: [ [ self sharedMethod ] fork ]</body><body package="Spy-ThreadScenario">indirect2CreateThreads: aNumber	self indirectCreateThreads: aNumber.	[ self sharedMethod ] fork</body><body package="Spy-ThreadScenario">indirectCreateThreads: aNumber	self createThreads: aNumber</body><body package="Spy-ThreadScenario">main	self createThreads: 20.</body><body package="Spy-ThreadScenario">sharedMethod	(Delay forMilliseconds: 1000) wait</body></methods><methods><class-id>TPMainClass</class-id> <category>initialize-release</category><body package="Spy-ThreadScenario">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>TPMainClass class</class-id> <category>instance creation</category><body package="Spy-ThreadScenario">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>TGWheel</class-id> <category>as yet unclassified</category><body package="Spy-ScenarioExample">returnHashOf: object	^ object hash</body></methods><methods><class-id>AbstractSpyTest</class-id> <category>utility</category><body package="Spy-Test">createClassNamed: aSymbol 	^ self createClassNamed: aSymbol  superclass: Object</body><body package="Spy-Test">createClassNamed: aSymbol instVarNames: instVarNames	^ self createClassNamed: aSymbol  superclass: Object instVarNames: instVarNames</body><body package="Spy-Test">createClassNamed: aSymbol superclass: aSuperclass	^ self createClassNamed: aSymbol superclass: aSuperclass instVarNames: ''</body><body package="Spy-Test">createClassNamed: aSymbol superclass: aSuperclass instVarNames: instVarNames	| cls |	cls := aSuperclass subclass: aSymbol				instanceVariableNames: instVarNames				classVariableNames: ''				poolDictionaries: ''				category: 'GeneratedBySpy'.	self classes add: cls.	^ cls</body><body package="Spy-Test">createTestNamed: aSymbol 	^ self createClassNamed: aSymbol  superclass: SUnit.TestCase</body><body package="Spy-Test">runErrorScenario	^ self runErrorScenarioForProfiler: self profilerClass</body><body package="Spy-Test">runErrorScenarioForProfiler: aProfilerClass	^ aProfilerClass 		profile: [TGCarExampleTest new popo] 		inClassCategory: 'Spy-ScenarioExample'</body><body package="Spy-Test">runScenario	^ self runScenarioForProfiler: self profilerClass</body><body package="Spy-Test">runScenarioForProfiler: aProfilerClass	^ aProfilerClass runTestsForClassCategory: 'Spy-ScenarioExample'</body></methods><methods><class-id>AbstractSpyTest</class-id> <category>running</category><body package="Spy-Test">clean: clss	clss do: [:cls |		cls hasSpy ifTrue: [ cls removeSpys ].		self deny: cls hasSpy ]</body><body package="Spy-Test">setUp	super setUp.	"systemWindows := self currentSystemWindows."	packagesToClean := nil</body><body package="Spy-Test">tearDown	super tearDown.	classesToDelete ifNotNil: [:clss | clss do: #removeFromSystem ].</body></methods><methods><class-id>AbstractSpyTest</class-id> <category>accessing</category><body package="Spy-Test">addPackageNameToClean: packageName	packagesToClean ifNil: [ packagesToClean := OrderedCollection new ].	packagesToClean add: packageName</body><body package="Spy-Test">classes	^ classesToDelete ifNil: [ classesToDelete := OrderedCollection new ]</body><body package="Spy-Test">isAbstract	^ true</body></methods><methods><class-id>AbstractSpyTest</class-id> <category>hooks</category><body package="Spy-Test">profilerClass	^ Profiler</body></methods><methods><class-id>AbstractSpyTest</class-id> <category>test soundness</category><body package="Spy-Test">testClassSpy	| cls classSpy prof |	cls := self createClassNamed: #FooBarZork."	self deny: cls hasSpy."	prof := self profilerClass forClass: cls.	self assert: (prof isKindOf: self profilerClass).	"since there is no method defined on the class""	self deny: cls hasSpy. "		"cls compileSilently: 'foo ^ 10'.	cls compileSilently: 'zork ^ self foo * 2'."	cls compile: 'foo ^ 10'.	cls compile: 'zork ^ self foo * 2'.	(self profilerClass forClass: cls) install.	"self assert: cls hasSpy. "		self assert: (cls new foo = 10).	self assert: (cls new zork = 20).		classSpy := (cls &gt;&gt; #foo) methodSpy classSpy.	self assert: (classSpy notNil).	self assert: (classSpy isKindOf: self profilerClass spyClassForClass).	self assert: (classSpy methods size = 2).	self assert: (classSpy profiler isKindOf: self profilerClass).	self assert: (classSpy profiler packages size = 1).	self assert: (classSpy profiler allClasses size = 1)</body><body package="Spy-Test">testError	| t packageSpy profiler |	t := false.	[ profiler := self runErrorScenario ]		on: Error do: [:ex | 			profiler isNil ifFalse:[ profiler allMethods do:[:m |			self deny: ((m classSpy originalClass) &gt;&gt; m selector) class== SpyWrapper.			]]		].</body><body package="Spy-Test">testSoundness	| packageSpy sportCarSpy profiler |	profiler := self runScenario.	self assert: (profiler isKindOf: self profilerClass).	self assert: (profiler packages allSatisfy: [ :p | p isKindOf: self profilerClass spyClassForPackage]).	packageSpy := profiler packages first.	sportCarSpy := (packageSpy &gt;&gt; #TGSportCar).		"Classes can directly be accessed from the profiler"	self assert: (profiler &gt;&gt; #TGSportCar) == sportCarSpy.	self assert: (profiler &gt;&gt; #'TGSportCar class') == sportCarSpy metaclassSpy.			self assert: (sportCarSpy isKindOf: self profilerClass spyClassForClass ).	self assert: ((sportCarSpy&gt;&gt; #addWheel:) isKindOf: self profilerClass spyClassForPackage spyClassForClass spyClassForMethod).	self assert: (sportCarSpy packageSpy == packageSpy).	self assert: (sportCarSpy hasMethodNamed: #addWheel:).	self deny: (sportCarSpy hasMethodNamed: #carName).	self assert: (sportCarSpy understandMethodNamed: #carName).	self assert: ((sportCarSpy &gt;&gt; #addWheel:) isKindOf: self profilerClass spyClassForMethod).		self assert: (sportCarSpy &gt;&gt; #addWheel:) classSpy == sportCarSpy.		"metaclass spy"	self assert: (sportCarSpy metaclassSpy notNil).	self assert: (sportCarSpy metaclassSpy theNonMetaClass == sportCarSpy).	self assert: (sportCarSpy metaclassSpy className ==  #'TGSportCar class').	self assert: (packageSpy hasClassNamed: #TGSportCar).	self deny: (packageSpy hasClassNamed: #'TGSportCar class').	self assert: (((packageSpy &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #named:) isKindOf: MethodSpy ).	self assert: (((packageSpy &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #named:) classSpy == 						((packageSpy &gt;&gt; #TGDriver) metaclassSpy)).		"no traits in packagespy"	self assert: (packageSpy classes allSatisfy: [:cls | (cls className asString = 'TGTExample') not]).		"Each method Spy knows about its classSpy"	packageSpy classesDo: [:classSpy | 		self assert: (classSpy packageSpy == packageSpy).		self assert: (classSpy localMethods allSatisfy: [:m | m classSpy == classSpy ]).		self assert: (classSpy metaclassSpy localMethods allSatisfy: [:m | m classSpy == classSpy metaclassSpy ]).		].		"Accessing a metaclass method"	self assert: (packageSpy &gt;&gt; #'TGCar class' &gt;&gt; #giveMeANewCarForDriver:) notNil.	self assert: (packageSpy &gt;&gt; #'TGCar class' &gt;&gt; #giveMeANewCarForDriver:) package == packageSpy.	self assert: (profiler packages first &gt;&gt; #'TGCar class' &gt;&gt; #giveMeANewCarForDriver:) profiler notNil.	self assert: (profiler packages first &gt;&gt; #'TGCar class' &gt;&gt; #giveMeANewCarForDriver:) profiler == profiler.			profiler uninstall.	^ packageSpy</body></methods><methods><class-id>ProfilerTest</class-id> <category>tests</category><body package="Spy-Test">testName	self assert: Profiler new nameAsString isString</body><body package="Spy-Test">testSpyForClass	| profiler spyClass |	profiler := Profiler new.	spyClass := profiler spyForClass: self class.	self assert: (spyClass className == self class name).	self assert: (spyClass methods size = self class selectors size)</body></methods><methods><class-id>ProfilerTest</class-id> <category>As yet unclassified</category><body package="Spy-Test">getInstrumentedPackages: reports		"	This method returns all the packages from the executed methods in the block that was profiled.	The reports are extracted from the MessageTally tree produced by the TimeProfiler.	All packages from the Kernel and from the Spy bundle are excluded, as they usually are not the method to inspect.	"	|packagesInfos tg baseClasses baseClassesNames |	self halt.		baseClasses := (Store.Registry bundleNamed: 'Base VisualWorks') allClasses .	baseClasses addAll: ((Store.Registry bundleNamed: 'Spy') allClasses).	baseClasses add: Object.	baseClassesNames := baseClasses collect:[:c | c name].	packagesInfos := OrderedCollection new.	reports do:[:p |		tg := p method.		(tg mclass isMeta) ifTrue:[ (baseClassesNames includes: tg mclass instanceBehavior name asString) ifFalse:[packagesInfos addAll: (Store.Registry packagesContaining: tg mclass instanceBehavior) ]]						ifFalse: [((baseClassesNames includes: tg mclass name asString) or:[(baseClassesNames includes: tg mclass name asString)]) ifFalse:[packagesInfos addAll: (Store.Registry packagesContaining: tg mclass) ].]	].	^packagesInfos asSet asOrderedCollection</body></methods><methods><class-id>ThreadProfilerTest</class-id> <category>threading</category><body package="Spy-ThreadProfiler">testA"	self new testA"	(ThreadProfiler profile: [ TPMainClass new indirectCreateThreads: 20 ] inClassCategory: 'Spy-ThreadScenario') visualize.</body><body package="Spy-ThreadProfiler">testBasic	| profiler |	profiler := (ThreadProfiler profile: [ TPMainClass new createThreads: 20 ] inClassCategory: 'Spy-ThreadScenario').	"profiler visualize."	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) hasCreatedThreads.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfInvokingThreads = 1.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) numberOfCreatedThreads = 0.	self deny: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) hasCreatedThreads.	self deny: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) numberOfInvokingThreads = 20.</body><body package="Spy-ThreadProfiler">testCallGraph	| profiler |	profiler := ThreadProfiler profile: [ TPMainClass new indirect2CreateThreads: 20 ] inClassCategory: 'Spy-ThreadScenario'.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirect2CreateThreads:) outgoingMethods size = 1.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirect2CreateThreads:) outgoingMethods anyOne = (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:)</body><body package="Spy-ThreadProfiler">testIndirectIndirectThreadCreation	| profiler |	profiler := ThreadProfiler profile: [ TPMainClass new indirect2CreateThreads: 20 ] inClassCategory: 'Spy-ThreadScenario'.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirect2CreateThreads:) numberOfCreatedThreads = 21.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirect2CreateThreads:) numberOfDirectlyCreatedThreads = 1.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:) numberOfCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:) numberOfDirectlyCreatedThreads = 0.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfDirectlyCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) numberOfCreatedThreads = 0.</body><body package="Spy-ThreadProfiler">testIndirectThreadCreation	| profiler |	profiler := ThreadProfiler profile: [ TPMainClass new indirectCreateThreads: 20 ] inClassCategory: 'Spy-ThreadScenario'.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:) numberOfCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:) numberOfDirectlyCreatedThreads = 0.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:) hasCreatedThreads.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #indirectCreateThreads:) numberOfInvokingThreads = 1.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfDirectlyCreatedThreads = 20.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) hasCreatedThreads.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #createThreads:) numberOfInvokingThreads = 1.	self assert: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) numberOfCreatedThreads = 0.	self deny: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) hasCreatedThreads.	self deny: (profiler &gt;&gt; #TPMainClass &gt;&gt; #sharedMethod) numberOfInvokingThreads = 20.</body></methods><methods><class-id>BoundedIdentityDictionaryTest</class-id> <category>tests</category><body package="Spy-Util">testBasic	| boundedDictionary |	boundedDictionary := BoundedIdentityDictionary new.	self assert: (boundedDictionary size = 0).	boundedDictionary at: #'hello' put: 1.	self assert: (boundedDictionary size = 1).	self assert: (boundedDictionary at: #'hello') = 1.		boundedDictionary at: #'hello' put: 2.	self assert: (boundedDictionary size = 1).	self assert: (boundedDictionary at: #'hello') = 2.		1 to: 10 do: [:i | boundedDictionary at: #'hello', i printString put: 2].	self assert: (boundedDictionary size = 11).	1 to: boundedDictionary maxSize + 4 do: [:i | boundedDictionary at: #'helloo', i printString put: false ].	self assert: (boundedDictionary size = boundedDictionary maxSize).</body><body package="Spy-Util">testMaxSize	self assert: (BoundedIdentityDictionary maxSize: 1000) maxSize = 1000</body><body package="Spy-Util">with0Arg	^ #metaObject		run: #selector		with: #()		in: self</body></methods><methods><class-id>PackageSpy</class-id> <category>accessing-computed</category><body package="Spy-Core">allCoveredMethods	^ self allMethods select: #isCovered</body><body package="Spy-Core">allMethods	| coll |	coll := OrderedCollection new.	self classes do: [:cls | coll addAll: cls methods. coll addAll: cls metaclassSpy methods ].	^ coll</body><body package="Spy-Core">coveredClasses	^ self classes select: #isCovered</body></methods><methods><class-id>PackageSpy</class-id> <category>testing</category><body package="Spy-Core">hasClassNamed: className	^ self classes includesKey: className asSymbol</body></methods><methods><class-id>PackageSpy</class-id> <category>accessing</category><body package="Spy-Core">&gt;&gt; aSymbol	"we are accessing a method defined in a metaclass"	(aSymbol includes: $ ) ifTrue: [ ^ (self &gt;&gt; aSymbol asString sunitSubStrings first asSymbol) metaclassSpy ].		^ self classAt: aSymbol</body><body package="Spy-Core">classAt: aSymbol	^ classes at: aSymbol ifAbsent: [ self error: 'Class ', aSymbol, ' not found']</body><body package="Spy-Core">classAt: aSymbol ifNone: aBlock	^ classes at: aSymbol ifAbsent: aBlock</body><body package="Spy-Core">classAt: aSymbol put: aClassType"	self assert: [aSymbol isSymbol]."		aClassType className: aSymbol.	aClassType packageSpy: self.	"self class globalTypesAt: aClassType className put: aClassType."	^ classes at: aSymbol put: aClassType</body><body package="Spy-Core">classes 	^ classes</body><body package="Spy-Core">packageName	^ packageName</body><body package="Spy-Core">packageName: nameAsString	packageName  := nameAsString</body><body package="Spy-Core">profiler	^ profiler</body><body package="Spy-Core">profiler: anObject	profiler := anObject</body></methods><methods><class-id>PackageSpy</class-id> <category>enumerating</category><body package="Spy-Core">allClassesSuchThat: aBlock	^ self classes select: aBlock</body><body package="Spy-Core">allMethodsSuchThat: aBlock	^ self allMethods select: aBlock</body><body package="Spy-Core">classesDo: aBlockOrSymbol	^ self classes do: aBlockOrSymbol</body></methods><methods><class-id>PackageSpy</class-id> <category>visualization</category><body package="Spy-Core">openInEasel	"MOEasel openOn: (Array with: #package -&gt; self with: #classes -&gt; self classes)"</body><body package="Spy-Core">viewBasicOn: view	view nodes: self classes forEach: [:each|		view shape rectangle			size: 15;			fillColor: [:method |				method isCovered 					ifTrue: [ Color lightGray ]					ifFalse: [ Color white ].				].		view nodes: (each methods sortedAs: #isCovered).		view gridLayout gapSize: 2].	view edgesFrom: #superclass.	view treeLayout</body><body package="Spy-Core">viewMethodOrdering	| view |	view := Roassal.ROMondrianViewBuilder new.	self viewMethodOrderingOn: view.	view open</body><body package="Spy-Core">viewMethodOrderingOn: view	| tcls allMethods |	tcls := self classes select: #isCovered.	allMethods := self allMethods.	view nodes: tcls forEach: [:each|		[		view shape rectangle			size: 15;			linearFillColor: #lastTimeStamp within: allMethods.		view interaction item: 'inspect' action: #inspect.		view nodes: (each methods).		view gridLayout gapSize: 2		] on: Error do: [:ex |  ex haltOnce ]].	view edgesFrom: #superclass.	view treeLayout</body></methods><methods><class-id>PackageSpy</class-id> <category>printing</category><body package="Spy-Core">printOn: stream	stream nextPutAll: '&lt;&lt;'.	self packageName ifNotNil:[ stream nextPutAll: (self packageName asString).].	stream nextPutAll: '&gt;&gt;'.</body></methods><methods><class-id>PackageSpy</class-id> <category>contract</category><body package="Spy-Core">checkInvariant	self assert: [ packageName notNil ].	self assert: [ packageName isKindOf: ByteString ].	self assert: [ self profiler notNil ].	self assert: [ self classes notNil ].	self assert: [ self classes allSatisfy: [ :c | c isKindOf: self class spyClassForClass ] ].	self assert: [ self classes allSatisfy: [ :c | c package == self ] ].	self assert: [ self classes allSatisfy: [ :c | c profiler == self profiler ]].		self classes do: [ :p | p checkInvariant ]</body></methods><methods><class-id>PackageSpy</class-id> <category>initialize-release</category><body package="Spy-Core">initialize 	super initialize.	classes := Dictionary new.	profiler := Profiler nullObject</body></methods><methods><class-id>PackageSpy class</class-id> <category>hooks</category><body package="Spy-Core">nullObject	^ self new</body><body package="Spy-Core">spyClassForClass	^ ClassSpy</body></methods><methods><class-id>HapaoTestCoveragePackageSpy class</class-id> <category>hooks</category><body package="Spy-HapaoTestCoverage">spyClassForClass	^ HapaoTestCoverageClassSpy</body></methods><methods><class-id>HapaoMetricCalculator</class-id> <category>accessing</category><body package="Spy-HapaoTestCoverage">computeStaticSelfCalledMethods: messageNode		|spyClass|	(messageNode receiver isVariable and: [ messageNode receiver name =  'self' ])		ifTrue: [ staticCallsToSelf add: messageNode selector.				spyClass := nil].</body><body package="Spy-HapaoTestCoverage">coveredPaths	^ coveredPaths</body><body package="Spy-HapaoTestCoverage">coveredPaths: anObject	coveredPaths := anObject</body><body package="Spy-HapaoTestCoverage">cyclomaticNumber		^cyclomaticNumber</body><body package="Spy-HapaoTestCoverage">cyclomaticNumber: anObject	cyclomaticNumber := anObject</body><body package="Spy-HapaoTestCoverage">numberOfStaticCalls		^numberOfStaticCalls</body><body package="Spy-HapaoTestCoverage">numberOfStaticCalls: anObject	numberOfStaticCalls := anObject</body><body package="Spy-HapaoTestCoverage">numberOfStaticCallsToSelf		^ staticCallsToSelf size</body><body package="Spy-HapaoTestCoverage">outgoingCalls	^ outgoingCalls</body><body package="Spy-HapaoTestCoverage">outgoingCalls: anObject	outgoingCalls := anObject</body><body package="Spy-HapaoTestCoverage">sentMessages		^sentMessages</body><body package="Spy-HapaoTestCoverage">staticOutgoingCallsToSelf	^ staticCallsToSelf</body></methods><methods><class-id>HapaoMetricCalculator</class-id> <category>compute</category><body package="Spy-HapaoTestCoverage">acceptMessageNode: aMessageNode "	super acceptMessageNode: aMessageNode."	"uses edited code from super class. Error when having a outgoing call repited in not-covered path"			|tempCovered|	tempCovered := false.	"self halt."		(self isDecisionNode: aMessageNode) ifTrue: [isParentBlock := inABlock. isParentCovered := isBlockCovered. inABlock := true. isBlockCovered := false.].	(inABlock and: (self isCovered: aMessageNode))		ifTrue: [	isBlockCovered := true.].		(aMessageNode isCascaded not or: [aMessageNode isFirstCascaded]) 		ifTrue: [self visitNode: aMessageNode receiver].		aMessageNode arguments do: [:each | 	"		self halt.	"		(self isDecisionNode: aMessageNode) ifTrue: [isBlockCovered := false].		self visitNode: each.		((self isDecisionNode: aMessageNode) and: isBlockCovered) ifTrue: [tempCovered := true].].		"if I am a decition node and at least  one of my arguments is covered, then I'm covered"	(tempCovered and: (self isDecisionNode: aMessageNode)) ifTrue: [isBlockCovered := tempCovered].	"if I'm covered and I'm a decision node I increase the number of covered paths"	(isBlockCovered and: (self isDecisionNode: aMessageNode)) ifTrue: [coveredPaths := coveredPaths + 1.].	"	(self isDecisionNode: aMessageNode) ifTrue: [inABlock :=  isParentBlock. isBlockCovered := isParentCovered]."		self computeCyclomaticNumber: aMessageNode.	self computeStaticCallsToSelf: aMessageNode.		self computeSendMessages: aMessageNode.</body><body package="Spy-HapaoTestCoverage">computeCoveredCyclomaticPaths: messageNode	"If I'm in a block, I'm going to count only once if there is one covered outgoing call"	"	(inABlock and: (self isCovered: messageNode))		ifTrue: [	isBlockCovered := true.] 		ifFalse: []."</body><body package="Spy-HapaoTestCoverage">computeCyclomaticNumber: messageNode	"The following equations defined McCabe Cyclomatic Complexity:	     1.The number of regions in a flow graph.      		2.V(G) = E - N + 2, where E are the edges and N are the nodes.      		3.V(G) = P + 1, where P are the predicate nodes. 	The score is basically the number of decision points in a routine + 1. Decision points 	are taken to be	conditionals and loops."		| branches loops sel |	sel := messageNode selector.	branches := #(#ifTrue: #ifFalse: #ifTrue:ifFalse: #ifFalse:ifTrue: #ifNil: #ifNil:ifNotNil: #ifNotNil:ifNil: #ifNotNil: #at:ifAbsent: #at:ifAbsentPut: #detect:ifNone: #on:do: #and: #or: #xor: #ifNotNilDo:ifNil: #ifNotNilDo:).	loops := #(#whileTrue: #whileTrue #whileFalse #whileFalse: #timesRepeat: #to:do: #do:separatedBy: #do: #collect: #select: #reject: #inject:into: #detect: #detect:ifNone: #anySatisfy: #allSatisfy: #piecesCutWhere: #keysAndValuesDo:).	"-- please not that #detect:ifNone: is listed twice because it is both loop and branch!!! -- akuhn"	(branches includes: sel)		ifTrue: [cyclomaticNumber := cyclomaticNumber + 1].	(loops includes: sel) ifTrue: [cyclomaticNumber := cyclomaticNumber + 1].	"-- HERE STARTS THE OLD ERRORFUL IMPL --"</body><body package="Spy-HapaoTestCoverage">computeSendMessages: messageNode	(messageNode receiver isVariable and: [ messageNode receiver name =  'self' ])		ifTrue: [ sentMessages add: messageNode selector ].</body><body package="Spy-HapaoTestCoverage">computeStaticCallsToSelf: messageNode	(messageNode receiver isVariable and: [ messageNode receiver name =  'self' ])		ifTrue: [ staticCallsToSelf add: messageNode selector.].</body><body package="Spy-HapaoTestCoverage">staticSelfCalledMethods	^staticSelfCalledMethods</body></methods><methods><class-id>HapaoMetricCalculator</class-id> <category>as yet unclassified</category><body package="Spy-HapaoTestCoverage">isCovered: aMessageNode	(outgoingCalls) do:[:each| 		(each selector match: (aMessageNode selector)) ifTrue: [ ^true].	].	^false.</body><body package="Spy-HapaoTestCoverage">isDecisionNode: messageNode	"The following equations defined McCabe Cyclomatic Complexity:	     1.The number of regions in a flow graph.      		2.V(G) = E - N + 2, where E are the edges and N are the nodes.      		3.V(G) = P + 1, where P are the predicate nodes. 	The score is basically the number of decision points in a routine + 1. Decision points 	are taken to be	conditionals and loops."		| branches loops sel |	sel := messageNode selector.	branches := #(#ifTrue: #ifFalse: #ifTrue:ifFalse: #ifFalse:ifTrue: #ifNil: #ifNil:ifNotNil: #ifNotNil:ifNil: #ifNotNil: #at:ifAbsent: #at:ifAbsentPut: #detect:ifNone: #on:do: #and: #or: #xor: #ifNotNilDo:ifNil: #ifNotNilDo:).	loops := #(#whileTrue: #whileTrue #whileFalse #whileFalse: #timesRepeat: #to:do: #do:separatedBy: #do: #collect: #select: #reject: #inject:into: #detect: #detect:ifNone: #anySatisfy: #allSatisfy: #piecesCutWhere: #keysAndValuesDo:).	"-- please not that #detect:ifNone: is listed twice because it is both loop and branch!!! -- akuhn"	(branches includes: sel)		ifTrue: [^true].	(loops includes: sel) ifTrue: [^true].	"-- HERE STARTS THE OLD ERRORFUL IMPL --"	^false</body></methods><methods><class-id>HapaoMetricCalculator</class-id> <category>initialize-release</category><body package="Spy-HapaoTestCoverage">initialize	super initialize.	self resetMetricValues.</body><body package="Spy-HapaoTestCoverage">resetMetricValues	booleanOperators := 0.	cyclomaticNumber := 1.	coveredPaths := 1.	numberOfStaticCallsToSelf := 0.	sentMessages := OrderedCollection new.	staticCallsToSelf := OrderedCollection new.	staticSelfCalledMethods := OrderedCollection new.	isParentBlock := false.	inABlock := false.	isBlockCovered := false.	outgoingCalls := OrderedCollection new.</body></methods><methods><class-id>BoundedIdentitySetTest</class-id> <category>as yet unclassified</category><body package="Spy-Util">boundedSetClass 	^ BoundedIdentitySet</body></methods><methods><class-id>BoundedIdentitySetTest</class-id> <category>tests</category><body package="Spy-Util">testBasic	| boundedSet |	boundedSet := self boundedSetClass new maxSize: 100.		self assert: (boundedSet size = 0).	boundedSet add: 'hello'.	self assert: (boundedSet size = 1).	boundedSet add: 'hello'.	self assert: (boundedSet size = 2).		1 to: 10 do: [:i | boundedSet add: 'hello', i printString].	self assert: (boundedSet size = 12).	1 to: boundedSet maxSize + 4 do: [:i | boundedSet add: 'helloo', i printString].	self assert: (boundedSet size = boundedSet maxSize).</body></methods><methods><class-id>TGCar</class-id> <category>accessing</category><body package="Spy-ScenarioExample">carName	^ carName</body><body package="Spy-ScenarioExample">carName: aString	carName := aString</body><body package="Spy-ScenarioExample">driver: aDriver	driver := aDriver.	^ aDriver</body><body package="Spy-ScenarioExample">getCarName	^ self carName</body></methods><methods><class-id>TGCar</class-id> <category>actions</category><body package="Spy-ScenarioExample">addWheel: aWheel	wheels ifNil: [ wheels := OrderedCollection new ].	wheels add: aWheel</body><body package="Spy-ScenarioExample">giveMeANewCarForDriver: aDriver	aDriver isMale		ifTrue: [ ^ TGLambCar new ].	aDriver isFemale		ifTrue: [ ^ TGPorsheCar new ].</body><body package="Spy-ScenarioExample">numberOfWheels	^ wheels size</body></methods><methods><class-id>TGCar</class-id> <category>testing</category><body package="Spy-ScenarioExample">hasDriver	^ driver notNil</body></methods><methods><class-id>TGCar</class-id> <category>comparing</category><body package="Spy-ScenarioExample">hash	^ super hash</body></methods><methods><class-id>TGCar class</class-id> <category>actions</category><body package="Spy-ScenarioExample">giveMeANewCarForDriver: aDriver	^ self new giveMeANewCarForDriver: aDriver</body></methods><methods><class-id>BoundedAbstractSetTest</class-id> <category>tests</category><body package="Spy-Util">testBasic	| boundedSet |	boundedSet := self boundedSetClass new.		self assert: (boundedSet size = 0).	boundedSet add: 'hello'.	self assert: (boundedSet size = 1).	boundedSet add: 'hello'.	self assert: (boundedSet size = 1).		1 to: 10 do: [:i | boundedSet add: 'hello', i printString].	self assert: (boundedSet size = 11).	1 to: boundedSet maxSize + 4 do: [:i | boundedSet add: 'helloo', i printString].	self assert: (boundedSet size = boundedSet maxSize).</body><body package="Spy-Util">with0Arg	^ #metaObject		run: #selector		with: #()		in: self</body></methods><methods><class-id>BoundedAbstractSetTest</class-id> <category>hooks</category><body package="Spy-Util">boundedSetClass 	^ self subclassResponsibility</body></methods><methods><class-id>BoundedAbstractSetTest class</class-id> <category>testing</category><body package="Spy-Util">isAbstract	^ true</body><body package="Spy-Util">with0Arg	^ #metaObject		run: #selector		with: #()		in: self</body></methods><methods><class-id>BoundedDictionaryTest</class-id> <category>tests</category><body package="Spy-Util">testBasic	| boundedDictionary |	boundedDictionary := BoundedDictionary new.		self assert: (boundedDictionary maxSize &gt; 0).	self assert: (boundedDictionary size = 0).	boundedDictionary at: 'hello' put: 1.	self assert: (boundedDictionary size = 1).	self assert: (boundedDictionary at: 'hello') = 1.		boundedDictionary at: 'hello' put: 2.	self assert: (boundedDictionary size = 1).	self assert: (boundedDictionary at: 'hello') = 2.	1 to: 10 do: [:i | boundedDictionary at: 'hello', i printString put: 2].	self assert: (boundedDictionary size = 11).	1 to: boundedDictionary maxSize + 4 do: [:i | boundedDictionary at: 'helloo', i printString put: false ].	self assert: (boundedDictionary size = boundedDictionary maxSize).</body><body package="Spy-Util">testMaxSize	self assert: (BoundedDictionary maxSize: 1000) maxSize = 1000</body><body package="Spy-Util">with0Arg	^ #metaObject		run: #selector		with: #()		in: self</body></methods><methods><class-id>BoundedDictionaryTest</class-id> <category>initialize-release</category><body package="Spy-Util">initialize	super initialize</body></methods><methods><class-id>BoundedDictionaryTest class</class-id> <category>instance creation</category><body package="Spy-Util">new	^ super new initialize; yourself</body></methods><methods><class-id>BoundedSet</class-id> <category>initialization</category><body package="Spy-Util">initialize: v	super initialize: v.	maxSize := 300</body></methods><methods><class-id>BoundedSet</class-id> <category>accessing</category><body package="Spy-Util">copyEmpty: aSize	"Answer a copy of the receiver that contains no elements.	This method should be redefined in subclasses that add	instance variables, so that the state of those variables	is preserved"	^(self class new: aSize) maxSize: self maxSize.</body><body package="Spy-Util">maxSize	^ maxSize</body><body package="Spy-Util">maxSize: integer	maxSize := integer</body></methods><methods><class-id>BoundedSet</class-id> <category>adding</category><body package="Spy-Util">add: anElement	(self size &gt;= self maxSize) ifTrue: [ ^ anElement ].		^ super add: anElement</body></methods><methods><class-id>BoundedSet class</class-id> <category>as yet unclassified</category><body package="Spy-Util">maxSize: integer	^ self new maxSize: integer; yourself</body></methods><methods><class-id>BoundedSet class</class-id> <category>instance creation</category><body package="Spy-Util">new	|tmp|	tmp := super new initialize.	^tmp</body></methods><methods><class-id>HapaoTestCoverageClassSpy</class-id> <category>testing</category><body package="Spy-HapaoTestCoverage">isFullyCovered	^ self allMethods allSatisfy: #isCovered</body><body package="Spy-HapaoTestCoverage">isPartiallyCovered	^ self allMethods anySatisfy: #isCovered</body></methods><methods><class-id>HapaoTestCoverageClassSpy</class-id> <category>metrics</category><body package="Spy-HapaoTestCoverage">coverage	"Return the % of executed methods, rounded at 0.01"	self numberOfAllMethods = 0 ifTrue: [ ^ 100 ].		^ (((self numberOfTestedMethods * 100) / self numberOfAllMethods) asFloat * 100) asInteger / 100.0</body><body package="Spy-HapaoTestCoverage">numberOfTestedMethods	| ntMethods tMethods coveredMethod |	ntMethods := self allMethods select:[:m | m isTest not].	coveredMethod := ntMethods select: [:m | m isCovered].	^ coveredMethod size</body></methods><methods><class-id>HapaoTestCoverageClassSpy</class-id> <category>printing</category><body package="Spy-HapaoTestCoverage">printOn: stream	super printOn: stream.	stream 		nextPut: $(;		nextPutAll: self coverage printString;	 	nextPut: $)</body></methods><methods><class-id>HapaoTestCoverageClassSpy class</class-id> <category>hooks</category><body package="Spy-HapaoTestCoverage">spyClassForMethod	^  HapaoTestCoverageMethodSpy</body></methods><methods><class-id>TGSportCar</class-id> <category>accessing</category><body package="Spy-ScenarioExample">addWheel: aWheel	^ super addWheel: aWheel</body><body package="Spy-ScenarioExample">brand	self subclassResponsibility</body><body package="Spy-ScenarioExample">driver: aDriver	^ driver :=  aDriver</body><body package="Spy-ScenarioExample">strangeMethod</body></methods><methods><class-id>TGDriver</class-id> <category>accessing</category><body package="Spy-ScenarioExample">driverName: aString	driverName := aString.</body><body package="Spy-ScenarioExample">isFemale	^false.</body><body package="Spy-ScenarioExample">isMale	^false.</body><body package="Spy-ScenarioExample">returnString	^'foo'</body></methods><methods><class-id>TGDriver class</class-id> <category>accessing</category><body package="Spy-ScenarioExample">dummy	^ self named: #Dummy</body><body package="Spy-ScenarioExample">named: aString	^ self new driverName: aString</body></methods><methods><class-id>BoundedOrderedCollection</class-id> <category>accessing</category><body package="Spy-Util">maxSize	^ maxSize</body><body package="Spy-Util">maxSize: integer	maxSize := integer</body></methods><methods><class-id>BoundedOrderedCollection</class-id> <category>initialization</category><body package="Spy-Util">initialize: v	super initialize: v.	maxSize := 100</body></methods><methods><class-id>BoundedOrderedCollection</class-id> <category>adding</category><body package="Spy-Util">add: anElement	(self size &gt;= self maxSize) ifTrue: [ ^ anElement ].		^ super add: anElement</body></methods><methods><class-id>BoundedOrderedCollection class</class-id> <category>as yet unclassified</category><body package="Spy-Util">maxSize: integer	^ self new maxSize: integer; yourself</body></methods><methods><class-id>BoundedDictionary</class-id> <category>accessing</category><body package="Spy-Util">at: key put: anObject 	(self includesKey: anObject) ifTrue: [ ^ super at: key put: anObject  ].	  	self size &gt;= self maxSize ifTrue: [ ^ anObject ].	^ super at: key put: anObject</body><body package="Spy-Util">maxSize	maxSize ifNil: [ maxSize := 300 ].	^ maxSize</body><body package="Spy-Util">maxSize: integer	maxSize := integer</body></methods><methods><class-id>BoundedDictionary</class-id> <category>initialize-release</category><body package="Spy-Util">initialize	super initialize.	maxSize := 300</body></methods><methods><class-id>BoundedDictionary</class-id> <category>copying</category><body package="Spy-Util">copyEmpty: aSize	"Answer a copy of the receiver that contains no elements.	This method should be redefined in subclasses that add	instance variables, so that the state of those variables	is preserved"	^(self class new: aSize) maxSize: self maxSize.</body></methods><methods><class-id>BoundedDictionary class</class-id> <category>instance creation</category><body package="Spy-Util">maxSize: integer	^ self new maxSize: integer; yourself</body><body package="Spy-Util">new	^ super new initialize; yourself</body><body package="Spy-Util">with1arg: v1 ^ #metaObject run: #selector with: (Array with: v1) in: self</body></methods><methods><class-id>IdentityObjectSetTest</class-id> <category>testing</category><body package="Spy-Util">testBasic	| set obj |	set := IdentityObjectSet new.	obj := Object new.	set add: obj.	self assert: (set includes: obj).	self deny: (set includes: Object new).</body></methods><methods><class-id>ThreadProfilerMethod</class-id> <category>accessing</category><body package="Spy-ThreadProfiler">level	^level</body><body package="Spy-ThreadProfiler">level: anObject	level := anObject</body><body package="Spy-ThreadProfiler">numberOfCreatedThreads	"Return the amount of threads created by this the method"	^ numberOfCreatedThreads</body><body package="Spy-ThreadProfiler">numberOfDirectlyCreatedThreads	^ self numberOfCreatedThreads - (self outgoingCalls inject: 0 into: [ :sum :m | sum + m numberOfCreatedThreads ])</body><body package="Spy-ThreadProfiler">numberOfInvokingThreads	^ invokedProcesses size</body><body package="Spy-ThreadProfiler">outgoingMethods	^ self outgoingCalls asOrderedCollection</body><body package="Spy-ThreadProfiler">visited	^visited</body><body package="Spy-ThreadProfiler">visited: anObject	visited := anObject</body></methods><methods><class-id>ThreadProfilerMethod</class-id> <category>hooks</category><body package="Spy-ThreadProfiler">incomingAndOutgoingCallClass	^ IdentitySet</body><body package="Spy-ThreadProfiler">run: methodName with: listOfArguments in: receiver	| v beforeNbThread previousMethod |	CurrentMethod		ifNotNil: [ 			self addIncomingCalls: CurrentMethod.			CurrentMethod addOutgoingCalls: self ].	previousMethod := CurrentMethod.	CurrentMethod := self.	beforeNbThread := self computeNumberOfThreads.	invokedProcesses add: Processor activeProcess.	[ v := originalMethod valueWithReceiver: receiver arguments: listOfArguments ]	ensure: [ CurrentMethod := previousMethod ].	numberOfCreatedThreads := numberOfCreatedThreads + (self computeNumberOfThreads - beforeNbThread).	^ v</body></methods><methods><class-id>ThreadProfilerMethod</class-id> <category>system</category><body package="Spy-ThreadProfiler">computeNumberOfThreads	^ Service processList size</body></methods><methods><class-id>ThreadProfilerMethod</class-id> <category>testing</category><body package="Spy-ThreadProfiler">hasCreatedThreads	^ numberOfCreatedThreads &gt; 0</body></methods><methods><class-id>ThreadProfilerMethod</class-id> <category>initialize-release</category><body package="Spy-ThreadProfiler">initialize	super initialize.	invokedProcesses := Set new.	numberOfCreatedThreads := 0.	numberOfDirectlyCreatedThreads := 0.	Service ifNil: [ Service := ProcessMonitorService new ].	visited := false.	level := -1.</body></methods><methods><class-id>TGFoo</class-id> <category>random methods</category><body package="Spy-ScenarioExample">anotherMethod	^ self</body><body package="Spy-ScenarioExample">bar	^self baz.</body><body package="Spy-ScenarioExample">baz	^'I am baz'</body><body package="Spy-ScenarioExample">callAnotherMethod	self anotherMethod</body><body package="Spy-ScenarioExample">constantMethod	^ counter factorial</body><body package="Spy-ScenarioExample">constantMethod2	^ counter factorial</body><body package="Spy-ScenarioExample">doNotCallAnotherMethod	false ifTrue: [ self anotherMethod ]</body><body package="Spy-ScenarioExample">foo	^self bar.</body><body package="Spy-ScenarioExample">foo1	^10</body><body package="Spy-ScenarioExample">foo2	false ifTrue: [self foo1] ifFalse: [self foo3]</body><body package="Spy-ScenarioExample">foo3	true ifTrue: [self foo1]</body><body package="Spy-ScenarioExample">foo4	self subclassResponsibility</body><body package="Spy-ScenarioExample">foo5	|aTGFooSubclass|	aTGFooSubclass := TGFooSubClass new.	^aTGFooSubclass foo5.</body><body package="Spy-ScenarioExample">foo7	|aTGFooSubclass|	aTGFooSubclass := TGFooSubClass new.	^aTGFooSubclass foo6.</body><body package="Spy-ScenarioExample">foo: aNumber with: secondNumber And: thirdNumber	^aNumber+secondNumber+thirdNumber</body><body package="Spy-ScenarioExample">fooDoubleTrueFalse	true ifTrue: [ false ifTrue: [self foo3] ifFalse: [self foo1]] ifFalse: [ true ifTrue: [10] ifFalse: []].</body><body package="Spy-ScenarioExample">fooTripleTrueFalse	true ifTrue: [ true 					ifTrue: [ false 								ifTrue: [] 								ifFalse: [self foo3]] 					ifFalse: [self foo1]] 			ifFalse: [ true 					ifTrue: [true 								ifTrue: [] 								ifFalse: [self foo1]] 					ifFalse: []].</body><body package="Spy-ScenarioExample">fooWithreturn	^ true ifTrue: [self foo1] ifFalse: [20]</body><body package="Spy-ScenarioExample">getRectangle	^ (counter @counter) extent: (20@34)</body><body package="Spy-ScenarioExample">notCalledMethod</body><body package="Spy-ScenarioExample">recursiveMethod	self recursiveMethod</body></methods><methods><class-id>TGFoo</class-id> <category>accessing</category><body package="Spy-ScenarioExample">counter	^ counter</body><body package="Spy-ScenarioExample">incrCounter	counter := counter + 1</body></methods><methods><class-id>TGFoo</class-id> <category>initialize-release</category><body package="Spy-ScenarioExample">initialize	counter := 0</body></methods><methods><class-id>TGFooSubClass</class-id> <category>random methods</category><body package="Spy-ScenarioExample">foo4	true ifTrue: [ ^self foo1 ]</body><body package="Spy-ScenarioExample">foo5	^10</body><body package="Spy-ScenarioExample">foo6	^10</body><body package="Spy-ScenarioExample">incrCounter	foo incrCounter</body><body package="Spy-ScenarioExample">initialize 	foo := TGFoo new</body></methods><methods><class-id>ThreadProfilerPackage class</class-id> <category>hooks</category><body package="Spy-ThreadProfiler">spyClassForClass	^ ThreadProfilerClass</body></methods><methods><class-id>KaiProfilingPackageSpy class</class-id> <category>hooks</category><body package="Spy-KaiProfiler">spyClassForClass	^ KaiProfilingClassSpy</body></methods><methods><class-id>KaiProfilingMethodTest</class-id> <category>initialize-release</category><body package="Spy-KaiProfiler-Test">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Spy-KaiProfiler-Test">profilerClass	^ KaiProfiler</body></methods><methods><class-id>KaiProfilingMethodTest</class-id> <category>testing</category><body package="Spy-KaiProfiler-Test">runScenarioBlock			| sunitClasses |	sunitClasses := self profilerClass unitTestFor: 'Spy-ScenarioExample'.	^ self profilerClass runningUnitTests: sunitClasses.</body><body package="Spy-KaiProfiler-Test">testBasic2	| cls profiler |	cls := Core.Object subclass: #TMPClass					instanceVariableNames: ''					classVariableNames: ''					poolDictionaries: ''.	"cls compileSilently: 'foo ^ 2 * self bar'.	cls compileSilently: 'bar ^ 10'."	cls compile: 'foo ^ 2 * self bar'.	cls compile: 'bar ^ 10'.	profiler := KaiProfiler new.	profiler iterations: 10.	profiler profile: [cls new foo] forClassNamed: #TMPClass.	self assert: (profiler allClasses size = 1).	self assert: (profiler allMethods size = 2).	self assert: (profiler &gt;&gt; #TMPClass &gt;&gt; #foo) numberOfInvocations = 1.	self assert: (profiler &gt;&gt; #TMPClass &gt;&gt; #bar) numberOfInvocations = 1.	self assert: (profiler &gt;&gt; #TMPClass &gt;&gt; #foo) numberOfReceivers = 1.	self assert: (profiler &gt;&gt; #TMPClass &gt;&gt; #bar) numberOfReceivers = 1.	cls removeFromSystem</body><body package="Spy-KaiProfiler-Test">testBasic3	| profiler |	profiler :=  self runScenario.	profiler uninstall.</body><body package="Spy-KaiProfiler-Test">testSelector	self assert: (KaiProfilingMethodSpy new selector notNil).	self assert: (KaiProfilingMethodSpy new selector notEmpty).	KaiProfilingMethodSpy new checkInvariant</body><body package="Spy-KaiProfiler-Test">testVisualization	| cls profiler view tmp|	cls := Core.Object subclass: #TMPClass					instanceVariableNames: ''					classVariableNames: ''					poolDictionaries: ''.	"cls compileSilently: 'foo ^ 2 * self bar'.	cls compileSilently: 'bar ^ 10'."	cls compile: 'foo ^ 2 * self bar'.	cls compile: 'bar ^ 10'.	tmp := cls new.	profiler := KaiProfiler new.	profiler iterations: 10.	profiler profile: [cls new foo] forClassNamed: #TMPClass.	tmp foo.	tmp foo.	tmp foo.	view := Roassal.ROMondrianViewBuilder new .		profiler visualizeOn: view.	window := view open.	cls removeFromSystem</body><body package="Spy-KaiProfiler-Test">testVisualization2	| profiler view |	profiler :=  self runScenario.	view := Roassal.ROMondrianViewBuilder new.		profiler visualizeOn: view.	window := view open.</body></methods><methods><class-id>KaiProfilingMethodTest</class-id> <category>running</category><body package="Spy-KaiProfiler-Test">tearDown	window ifNotNil: [ window closeRequest ]</body></methods><methods><class-id>KaiProfilingMethodTest class</class-id> <category>instance creation</category><body package="Spy-KaiProfiler-Test">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>TGLambCar</class-id> <category>accessing</category><body package="Spy-ScenarioExample">brand	^ 'Brand 1'</body></methods><methods><class-id>BoundedIdentityDictionary</class-id> <category>as yet unclassified</category><body package="Spy-Util">at: key put: anObject 	(self includesKey: anObject) ifTrue: [ ^ super at: key put: anObject  ].	self size &gt;= self maxSize ifTrue: [ ^ anObject ].	^ super at: key put: anObject</body><body package="Spy-Util">defaultMaxSize	^300</body><body package="Spy-Util">maxSize	maxSize ifNil: [maxSize := self defaultMaxSize].	^maxSize</body><body package="Spy-Util">maxSize: integer	maxSize := integer</body></methods><methods><class-id>BoundedIdentityDictionary class</class-id> <category>instance creation</category><body package="Spy-Util">maxSize: integer	^ self new maxSize: integer; yourself</body><body package="Spy-Util">with1arg: v1 ^ #metaObject run: #selector with: (Array with: v1) in: self</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>accessing</category><body package="Spy-HapaoTestCoverage">coverage	self isCovered ifFalse: [ ^ 0 ].	^ 100</body><body package="Spy-HapaoTestCoverage">coveredPaths 	| ast cal |	coveredPathsCache ifNotNil: [ ^ coveredPathsCache ].	[ast := Refactory.Browser.RBParser parseMethod: self sourceCode asString] on: Error do: [ :ex | ^ coveredPathsCache := 1 ].	cal := HapaoMetricCalculator new.	cal outgoingCalls: self outgoingCalls.	ast acceptVisitor: cal.	self setMetrics: cal.	^ coveredPathsCache</body><body package="Spy-HapaoTestCoverage">cyclomaticComplexity	| ast cal |	cyclomaticComplexityCache ifNotNil: [ ^ cyclomaticComplexityCache ].	[ast := Refactory.Browser.RBParser parseMethod: self sourceCode asString] on: Error do: [ :ex | ^ cyclomaticComplexityCache := 0 ].	cal := HapaoMetricCalculator new.	cal outgoingCalls: self outgoingCalls.	ast acceptVisitor: cal.	self setMetrics: cal.	^ cyclomaticComplexityCache</body><body package="Spy-HapaoTestCoverage">numberOfIncomingMethods	"number of methods that are statically calling me"	^ self staticSelfIncomingMethods size</body><body package="Spy-HapaoTestCoverage">numberOfSelfOutgoingMethods	"number of methods that I am statically calling"	^ self staticSelfOutgoingMethods size</body><body package="Spy-HapaoTestCoverage">staticOutgoingCallsToSelf	| ast cal |	staticOutgoingCallsCache ifNotNil: [ ^ staticOutgoingCallsCache ].	[ast := Refactory.Browser.RBParser parseMethod: self sourceCode asString]		on: Error do: [ :ex | ^ staticOutgoingCallsCache := #() ].	cal := HapaoMetricCalculator new.	cal outgoingCalls: self outgoingCalls.	ast acceptVisitor: cal.	self setMetrics: cal.	^ staticOutgoingCallsCache</body><body package="Spy-HapaoTestCoverage">staticSelfIncomingMethods	"Return the list of methods that call me."	"More especifically the list of methods defined in my classSpy that are statically calling myself"	staticSelfIncomingMethods ifNotNil: [ ^ staticSelfIncomingMethods ].		^ staticSelfIncomingMethods := 		self classSpy allMethods select: [:cm | cm staticSelfOutgoingMethods includes: self ].</body><body package="Spy-HapaoTestCoverage">staticSelfOutgoingMethods	"Return the list of methods that I am calling"	"More especifically the list of methods that statically self-call me"	| myClassSpy  |	staticSelfOutgoingMethods ifNotNil: [ ^ staticSelfOutgoingMethods ].		staticSelfOutgoingMethods := IdentitySet new.	myClassSpy := self classSpy.	self staticOutgoingCallsToSelf do: [ :aSymbol |		(myClassSpy hasMethodNamed: aSymbol)			ifTrue: [ (staticSelfOutgoingMethods add: (myClassSpy &gt;&gt; aSymbol ) )] ].	staticSelfOutgoingMethods remove: self ifAbsent: [].	^ staticSelfOutgoingMethods</body><body package="Spy-HapaoTestCoverage">withStaticSelfIncomingMethods	"Return the list of methods defined in my classSpy that are statically called by myself. Containg myself in the result"	|ret|	ret := self staticSelfIncomingMethods.	ret add: self.	^ ret</body><body package="Spy-HapaoTestCoverage">withStaticSelfOutgoingMethods	"Return the list of methods that call me. I am also included in the list."	"More especifically the list of methods defined in my classSpy that are statically calling myself"	|ret|	ret := self staticSelfOutgoingMethods.	ret add: self.	^ ret</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>testing</category><body package="Spy-HapaoTestCoverage">abstractMarkers	^ #(subclassResponsibility shouldNotImplement)</body><body package="Spy-HapaoTestCoverage">hasACoveredCallerAndIsUncovered	"True if at least one of the method I call is not covered, and I am covered"	^ (self staticSelfIncomingMethods anySatisfy: [ :m | m isCovered ]) and: [ self isNotCovered ]</body><body package="Spy-HapaoTestCoverage">hasCoveredBranch	"True if at least one of the method I call is not covered"	^ self staticSelfOutgoingMethods anySatisfy: [ :m | m isCovered ]</body><body package="Spy-HapaoTestCoverage">hasNoSelfIncomingCalls	"True if no method defined in the same class than me statically calls me. The method is considered as a root then"		^ self staticSelfIncomingMethods isEmpty</body><body package="Spy-HapaoTestCoverage">hasNoSelfOutgoingCalls	"True if I call no self method"		^ self staticSelfOutgoingMethods isEmpty</body><body package="Spy-HapaoTestCoverage">hasSelfIncomingCalls	"True If at least one method calls me"	^ self staticSelfIncomingMethods notEmpty</body><body package="Spy-HapaoTestCoverage">hasSelfOutgoingCalls	"True If I self call at least one method"	^ self staticSelfOutgoingMethods notEmpty</body><body package="Spy-HapaoTestCoverage">hasUncoveredBranch	"True if at least one of the method I call is not covered, and I am covered"	^ (self staticSelfOutgoingMethods anySatisfy: [ :m | m isNotCovered ]) and: [ self isCovered ]</body><body package="Spy-HapaoTestCoverage">isAbstract	| isAbstract |	isAbstract := false.	self originalMethod allSymbolLiterals do:[:l | isAbstract := isAbstract or: [self abstractMarkers includes: l ]].	^isAbstract</body><body package="Spy-HapaoTestCoverage">isCovered 	"True if I am executed at least once"	^ numberOfExecutions &gt; 0</body><body package="Spy-HapaoTestCoverage">isIsolated	"true if the receiver does not invoke myself, and if I do not perform a self-call"	^ self staticSelfOutgoingMethods isEmpty and: [ self staticSelfIncomingMethods isEmpty ]</body><body package="Spy-HapaoTestCoverage">isNotCovered 	"True if I am not covered"	^ self isCovered not</body><body package="Spy-HapaoTestCoverage">isPublic	(self incomingCalls) do: [:aMethod |		(aMethod isTest not and: [(aMethod classSpy == self classSpy superclass) not ]) ifTrue: [ ^ true].	].	^false.</body><body package="Spy-HapaoTestCoverage">isRoot	"True if the method is root"	^ self hasNoSelfIncomingCalls</body><body package="Spy-HapaoTestCoverage">isRootChain	"True if I am the root of a chain, i.e., I self-call at least one method"	^ (self isRoot and: [ self hasSelfOutgoingCalls ]) and: 		[ self staticSelfOutgoingMethods anySatisfy: [ :m | m isNotCovered ] ]</body><body package="Spy-HapaoTestCoverage">isRootOfUncoveredChain	"True if I am uncovered and I am the root of a an uncovered chain"	^ ((self isRoot and: [ self hasSelfOutgoingCalls ] ) and: 		[ self staticSelfOutgoingMethods anySatisfy: [ :m | m isNotCovered ] ])			and: [ self isNotCovered ]</body><body package="Spy-HapaoTestCoverage">isStaticallyCalling	"True if a method defined in the same class than me statically calls me"		^ self staticSelfOutgoingMethods notEmpty</body><body package="Spy-HapaoTestCoverage">isUncoveredCaller	"True if at least one of the method I call is covered and I am not covered"	"First pattern, figure 3, in the Hapao paper"	^ self hasCoveredBranch and: [ self isNotCovered ]</body><body package="Spy-HapaoTestCoverage">isUncoveredIsolated	"true if I am isolated and uncovered"		^ self isIsolated and: [ self isNotCovered ]</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>metrics</category><body package="Spy-HapaoTestCoverage">longestChainOfSelfOutgoingMethods	"Return the size of the longuest chain of self outgoing calls"	longestChainOfSelfOutgoingMethods ifNotNil: [ ^ longestChainOfSelfOutgoingMethods ].	^ longestChainOfSelfOutgoingMethods := self longestChainOfSelfOutgoingMethodsWithAccumulator: 1 previousPath: #()</body><body package="Spy-HapaoTestCoverage">longestChainOfSelfOutgoingMethodsWithAccumulator: anInteger previousPath: path	"Terminal case"	|tmp max |	self hasSelfOutgoingCalls ifFalse: [ ^ anInteger ].	(path includes: self) ifTrue: [ ^ anInteger ].	tmp := self staticSelfOutgoingMethods 		collect: [ :v | v longestChainOfSelfOutgoingMethodsWithAccumulator: anInteger + 1 previousPath: ((Array with: self), path)].	max := 0.	tmp do:[:n |		n &gt; max ifTrue:[max := n]	].	^max</body><body package="Spy-HapaoTestCoverage">numberOfCallers	^ self incomingCalls size.</body><body package="Spy-HapaoTestCoverage">numberOfDifferentReceivers	^ receivers size</body><body package="Spy-HapaoTestCoverage">numberOfExecutions	"Number of times the method is executed"	^ numberOfExecutions</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>hooks</category><body package="Spy-HapaoTestCoverage">incomingAndOutgoingCallClass	^ IdentitySet</body><body package="Spy-HapaoTestCoverage">increaseNumberOfExecutions	numberOfExecutions := numberOfExecutions + 1</body><body package="Spy-HapaoTestCoverage">run: methodName with: listOfArguments in: receiver	| previousMethod v |	self increaseNumberOfExecutions.	receivers add: receiver.	CurrentMethod		ifNotNil: [ 			self addIncomingCalls: CurrentMethod.			CurrentMethod addOutgoingCalls: self ].	previousMethod := CurrentMethod.	CurrentMethod := self.	[ v := originalMethod valueWithReceiver: receiver arguments: listOfArguments ]		ensure: [ CurrentMethod := previousMethod ].	^ v</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>call flow</category><body package="Spy-HapaoTestCoverage">completeCallFlow	"Return the list of all the incoming methods"	| myView methods tempMethods |	methods := IdentitySet new.		"Terminal case"	self isTest ifTrue: [ ^ methods ].	methods add: self.	self incomingCalls do:[:each | 		(methods includes: each) ifFalse:[			tempMethods:= each completeCallFlowWith: methods ]].	methods remove: self.	^ methods</body><body package="Spy-HapaoTestCoverage">completeCallFlowWith: aCollectionOfMethods	| myView methods tempMethods |	self isTest  ifTrue: [ aCollectionOfMethods add: self ].	(aCollectionOfMethods includes: self) ifTrue: [ ^ aCollectionOfMethods ].	aCollectionOfMethods add: self.	self incomingCalls do:[:each | 			(aCollectionOfMethods includes: each) ifFalse:[			tempMethods:= each completeCallFlowWith: aCollectionOfMethods ] ].	^aCollectionOfMethods</body><body package="Spy-HapaoTestCoverage">incomingTests	|incomingTests|	incomingTests := OrderedCollection new.	self incomingCalls do:[:each | 		each isTest ifTrue:[incomingTests add: each]		].	^incomingTests</body><body package="Spy-HapaoTestCoverage">setMetrics: cal	staticOutgoingCallsCache := cal staticOutgoingCallsToSelf.	cyclomaticComplexityCache := cal cyclomaticNumber.	coveredPathsCache := cal coveredPaths.</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>initialize-release</category><body package="Spy-HapaoTestCoverage">initialize	super initialize.	numberOfExecutions := 0.	receivers := BoundedIdentitySet maxSize: 100.	cyclomaticComplexityCache := nil.	staticOutgoingCallsCache := nil.	staticSelfOutgoingMethods := nil</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>visualization</category><body package="Spy-HapaoTestCoverage">viewBasicOn: view	| methods |		methods := self withAllOutgoingCalls asSet.	view shape rectangle 			height: #numberOfLinesOfCode;			width: [:m | (m numberOfDifferentReceivers + 1) log * 30];			linearFillColor: [ :m | ((m numberOfExecutions + 1) log  * 30) asInteger ] within: self package allMethods;			borderColor: [:m | m isCovered ifTrue: [ Color black ] ifFalse: [ Color red ]].		view interaction action: #inspect.	view nodes: methods.	view shape arrowedLine width: 2.	view edges: methods from: #yourself toAll: #outgoingCalls.	view treeLayout</body><body package="Spy-HapaoTestCoverage">visualizeIncomingCalls	|methods view|		view := Roassal.ROMondrianViewBuilder titled: ('Incoming calls for', self printString).	methods := self withAllIncomingCalls asSet.	self visualizeMethods: methods on: view incomingCalls: true.	view open.</body><body package="Spy-HapaoTestCoverage">visualizeMethods: methods on: view incomingCalls: aBoolean		view shape rectangleWithoutBorder.	view node: 'all methods' forIt:[		"self profiler setMouseOverInteractionForMethodOn: view."		self profiler setInteractionForMethodOn: view.		self shapeForMethod: view.		view nodes: methods "using: self shapeForMethod".		 aBoolean 			ifTrue: [view edgesToAll: [ :cm | cm incomingCalls]]			ifFalse:[view edges: methods from: #yourself toAll: #outgoingCalls].		view treeLayout	].	view evaluate.</body><body package="Spy-HapaoTestCoverage">visualizeOutgoingCalls	|methods view|		view := Roassal.ROMondrianViewBuilder titled: ('Outgoing calls for', self printString).	methods := self withAllOutgoingCalls asSet.	self visualizeMethods: methods on: view incomingCalls: false.	view open.</body></methods><methods><class-id>HapaoTestCoverageMethodSpy</class-id> <category>shapes</category><body package="Spy-HapaoTestCoverage">shapeForMethod: view	view shape rectangle  width: [:m | (m numberOfCallers + 1) log * 10]; 		height: [ :m | m cyclomaticComplexity * 5];		linearFillColor: [:entity | ((entity numberOfExecutions + 1) log  * 10) asInteger] within: self profiler allMethods.	view shape borderColor: [:m | self profiler borderColorForMethod: m ].</body></methods><methods><class-id>HapaoTestCoverageMethodSpy class</class-id> <category>util</category><body package="Spy-HapaoTestCoverage">reset	CurrentMethod := nil</body></methods><methods><class-id>BoundedSetTest</class-id> <category>hooks</category><body package="Spy-Util">boundedSetClass 	^ BoundedSet</body></methods><methods><class-id>BoundedSetTest</class-id> <category>tests</category><body package="Spy-Util">testBasic	| boundedSet |	boundedSet := self boundedSetClass new maxSize: 100.		self assert: (boundedSet size = 0).	boundedSet add: 'hello'.	self assert: (boundedSet size = 1).	boundedSet add: 'hello'.	self assert: (boundedSet size = 1).		1 to: 10 do: [:i | boundedSet add: 'hello', i printString].	self assert: (boundedSet size = 11).	1 to: boundedSet maxSize + 4 do: [:i | boundedSet add: 'helloo', i printString].	self assert: (boundedSet size = boundedSet maxSize).</body></methods><methods><class-id>Profiler</class-id> <category>accessing</category><body package="Spy-Core">evaluatedMethods	^evaluatedMethods</body><body package="Spy-Core">iterations	^iterations</body><body package="Spy-Core">iterations: anObject	iterations := anObject</body><body package="Spy-Core">maxTimeToRun	^maxTimeToRun</body><body package="Spy-Core">maxTimeToRun: anObject	^maxTimeToRun := anObject</body><body package="Spy-Core">myTimeProfiler	^myTimeProfiler</body><body package="Spy-Core">myTimeProfiler: anObject	myTimeProfiler := anObject</body><body package="Spy-Core">packages	^ packages ifNil: [ packages := OrderedCollection new ]</body><body package="Spy-Core">packagesToTest: aCollectionOfStrings	packagesToTest := aCollectionOfStrings</body><body package="Spy-Core">totalExecutionTime	^totalExecutionTime</body><body package="Spy-Core">totalExecutionTime: anObject	totalExecutionTime := anObject</body><body package="Spy-Core">unitTestResult	^ unitTestResult</body><body package="Spy-Core">unitTestResult: testResult	unitTestResult := testResult</body></methods><methods><class-id>Profiler</class-id> <category>hooks</category><body package="Spy-Core">afterProfiling</body><body package="Spy-Core">beforeProfiling 	MethodSpy setInNonMeta</body><body package="Spy-Core">getTimeAndCallGraph	^ false</body></methods><methods><class-id>Profiler</class-id> <category>actions</category><body package="Spy-Core">remove	^ self class remove</body><body package="Spy-Core">removeFromRegistry	self class registry removeKey: (self class registry keyAtValue: self )</body></methods><methods><class-id>Profiler</class-id> <category>testing</category><body package="Spy-Core">allNonAbstractMethods	"Return the list of non abstract methods"		allNonAbstractMethodsCache ifNotNil: [ ^ allNonAbstractMethodsCache ].	^ allNonAbstractMethodsCache := self allMethods select: [:element | element isAbstract == false].</body><body package="Spy-Core">hasUnitTestResult	^ unitTestResult notNil</body></methods><methods><class-id>Profiler</class-id> <category>gathering</category><body package="Spy-Core">fillClassType: classType with: methodDictionary	"This method is that the core of the instrumentation of Spy. 	It wraps all the methods with a wrappers "	"Enhanced by Philippe Van Langenhove"	| cm metaObject spyWrapper |	classType theClass == Profiler class		ifTrue: [ ^ self ].	methodDictionary keys do:		[:k|			cm := methodDictionary at: k.				spyWrapper := SpyWrapper on: k inClass: classType originalClass.				spyWrapper ifNotNil: [					metaObject := self class spyClassForMethod new initialize											originalMethod: cm; 											selector: k; 											instrumentedMethod: spyWrapper;											classSpy: classType;											yourself.						spyWrapper	methodSpy: metaObject.					metaObject spyWrapper: spyWrapper.										classType localMethodAt: k put: metaObject ].		].</body><body package="Spy-Core">gather	^ self gatherForClasses: self class nonDangerousClasses.</body><body package="Spy-Core">gatherForClassCategories: categoriesNames inNamespace: aNamespace	"Return a profiler"	categoriesNames do:[:nameAsString |		| package |		package := self packageForClassesInCategory: nameAsString inNamespace: aNamespace.		package packageName: nameAsString.		self addPackage: package.	].	^ self</body><body package="Spy-Core">gatherForClassCategory: nameAsString	"Return a profiler"	| package cls classNames classType answer |	package := self packageForClassCategory: nameAsString.	package packageName: nameAsString.	self addPackage: package.	^ self</body><body package="Spy-Core">gatherForClasses: classes	| package classType profiler |	package := self class spyClassForPackage new.	package packageName: 'Global profiling'.	classes do: [:cls |		classType := self spyForClass: cls.		classType packageSpy: package.		package classAt: cls name put: classType].		self addPackage: package.	^ package</body><body package="Spy-Core">gatherForPackageNamed: nameAsString	"Return a profiler"		| classes classType package |	package := self class spyClassForPackage new.	package packageName: nameAsString.	self addPackage: package.	"	classes := ((PackageInfo named: nameAsString)							classes reject: #isTrait)."	classes := Store.Registry packageNamed: nameAsString allDefinedClasses.		classes do: [:cls |		classType := self spyForClass: cls.		classType packageSpy: package.		package profiler: self.		package classAt: cls name put: classType].				^ self</body><body package="Spy-Core">gatherForPackages: packageNames	"Return a profiler"	packageNames do: [ :pak | 		| class package |		package := self class spyClassForPackage new.		package packageName: pak name.		self addPackage: package.		(pak allDefinedClasses) do: [:cls|			class := self spyForClass: cls.			class packageSpy: package.			package classAt: cls name asSymbol put: class ] ].	^ self</body><body package="Spy-Core">gatherForPackagesMatching: regexpAsString	"Return a profiler"		| packageInfos |	packageInfos := Store.Registry allPackages select:[:p | regexpAsString match: (p name asString)].	^ self gatherForPackages: packageInfos</body><body package="Spy-Core">packageForClassCategories: categoriesNames	| package classNames classType |	package := self class spyClassForPackage new.	classNames := OrderedCollection new.	categoriesNames do: [:nameAsString |		classNames addAll: ( Smalltalk organization listAtCategoryNamed: nameAsString asSymbol).	].		classNames do: [:clsName |		| cls |		cls := Smalltalk at: clsName.			classType := self spyForClass: cls.			classType packageSpy: package.			package classAt: clsName put: classType].		^ package</body><body package="Spy-Core">packageForClassCategory: nameAsString	| package classNames classType |	package := self class spyClassForPackage new.	classNames := Smalltalk organization listAtCategoryNamed: nameAsString asSymbol.		classNames do: [:clsName |		| cls |		cls := Smalltalk at: clsName.		cls class = NameSpace ifFalse:[			classType := self spyForClass: cls.			classType packageSpy: package.			package classAt: clsName put: classType]].		^ package</body><body package="Spy-Core">packageForClassesInCategory: categoryName inNamespace: namespace	| package classNames classType |	package := self class spyClassForPackage new.	classNames := self classesInCategory: categoryName inNamespace: namespace.		classNames do: [:aclass |		| cls |		cls := namespace at: aclass name.			classType := self spyForClass: cls.			classType packageSpy: package.			package classAt: aclass name put: classType].		^ package</body><body package="Spy-Core">spyForClass: aClass	"Return a spy class for a given real Smalltalk class.	The spy class is filled with method spy"	| classType |	classType := self class spyClassForClass new initialize.	classType className: aClass name.	classType originalClass: aClass.	classType metaclassSpy initialize.	self fillClassType: classType with: aClass methodDictionary.	self fillClassType: classType metaclassSpy with: aClass class methodDictionary.	^ classType</body></methods><methods><class-id>Profiler</class-id> <category>installing</category><body package="Spy-Core">install	self allMethods asSet do:[:m | m install]</body><body package="Spy-Core">uninstall	self allMethods do: #uninstall</body></methods><methods><class-id>Profiler</class-id> <category>adding</category><body package="Spy-Core">addPackage: aPackageSpy	self assert: [ aPackageSpy class == self class spyClassForPackage ].		self packages add: aPackageSpy.	aPackageSpy profiler: self.</body></methods><methods><class-id>Profiler</class-id> <category>accessing - read only</category><body package="Spy-Core">&gt;&gt; aSymbol	"Fetching a class"		"we are accessing a method defined in a metaclass"	(aSymbol includes: $ ) ifTrue: [ ^ (self &gt;&gt; aSymbol asString sunitSubStrings first asSymbol) metaclassSpy ].		^ self classAt: aSymbol</body><body package="Spy-Core">allClasses	"Return the list of all the classes, excluding metaclasses"	| answer |	answer := OrderedCollection new.	self packages do: [:p | answer addAll: p classes ].	^ answer</body><body package="Spy-Core">allClassesAsDictionary	"Return the list of classes as a dictionary"	| answer |	allClassesAsDictionaryCache ifNotNil: [ ^ allClassesAsDictionaryCache ].	answer := Dictionary new.	self packages do: [:p | p classes do: [:c | answer at: c className put: c]].	^ allClassesAsDictionaryCache := answer</body><body package="Spy-Core">allClassesSuchThat: aBlock	"Select a particular group of classes"	^ self allClasses select: aBlock</body><body package="Spy-Core">allMethods	"Return the list of methods"	| answer |	answer := OrderedCollection new.	self packages do: [:p | 		answer addAll: p allMethods ].	^ answer</body><body package="Spy-Core">allNonMetaClasses	"Return the list of non metaclasses"	^ self allClasses reject: #isMeta</body><body package="Spy-Core">classAt: aSymbol	"Return a class that corresponds to the given name"	^ self allClassesAsDictionary at: aSymbol ifAbsent: [ self error: 'Class ', aSymbol, ' not found']</body><body package="Spy-Core">classAt: aSymbol ifNone: aBlock	"Return a class or evaluate a block if the class does not exist"	^ self allClassesAsDictionary at: aSymbol ifAbsent: aBlock</body><body package="Spy-Core">getPackageNamed: aPackageName	"Return a particular package"	^ self packages detect: [:pak | pak packageName asString = aPackageName asString ]</body><body package="Spy-Core">includesClassNamed: aClassName	"True if a particular class has been profiled"	self classAt: aClassName asSymbol ifNone: [ ^ false ].	^ true</body><body package="Spy-Core">numberOfClasses	"Return the number of classes in total"	^ self allClasses size</body><body package="Spy-Core">numberOfMethods	"Return the number of methods in total"	^ self allMethods size</body><body package="Spy-Core">numberOfNonAbstractMethods	"Return the number of non abstract methods, including the one of the metaclass "	^ self allNonAbstractMethods size</body><body package="Spy-Core">numberOfPackages	"Return the amount of packages in total"	^ self packages size</body></methods><methods><class-id>Profiler</class-id> <category>util</category><body package="Spy-Core">addEvaluatedMethod: methods fromTally: aTally atLevel: level	"Collects all the methods evaluated in the block from the profile: aBlock call."	level = 2 ifTrue: [methods addAll: aTally receivers] 			ifFalse:[ aTally receivers size &gt; 0 ifTrue:[ self addEvaluatedMethod: methods fromTally: (aTally receivers asOrderedCollection at: 1) atLevel: level + 1]].</body><body package="Spy-Core">addExecutedMethod: methods fromTally: aTally	"This method collects all the executedmethods stored in the aTally to then find all the related packages to instument. 	It is restricted to 0.2 to not include very deep methods, like collections or tools"	(aTally receivers size &gt; 0 and:[(aTally tally /aTally root tally ) &gt; 0.2]) ifTrue:[		(aTally receivers) do:[:r |				methods add: r.				self addExecutedMethod: methods fromTally: r		]	].</body><body package="Spy-Core">classesInCategory: categoryName	"Return the list of classes that belong to a category. Reject non behavior, such as namespaces"	^ self  class classesInCategory: categoryName</body><body package="Spy-Core">classesInCategory: categoryName inNamespace: namespace	"Return the list of classes that belong to a category. Reject non behavior, such as namespaces"	^ self class classesInCategory: categoryName inNamespace: namespace</body><body package="Spy-Core">getInstrumentedClasses: reports		"	This method returns all the packages from the executed methods in the block that was profiled.	The reports are extracted from the MessageTally tree produced by the TimeProfiler.	All packages from the Kernel and from the Spy bundle are excluded, as they usually are not the method to inspect.	"	|classesInfos tg baseClasses baseClassesNames testPackageBlock|	testPackageBlock := [:package | package isNil ifTrue:[Array new] ifFalse:[package allClasses]].	baseClasses := (Store.Registry bundleNamed: 'Base VisualWorks') allClasses .	baseClasses addAll: ((Store.Registry bundleNamed: 'Spy') allClasses).	baseClasses addAll: (testPackageBlock value: (Store.Registry packageNamed: 'SUnit')).	baseClasses addAll: (testPackageBlock value:(Store.Registry packageNamed: 'SUnitToo')).	baseClassesNames := baseClasses collect:[:c |c isMeta ifTrue:[c instanceBehavior name] ifFalse:[ c name]].	classesInfos := OrderedCollection new.	reports do:[:p |		tg := p method.		(tg mclass isMeta) ifTrue:[(baseClassesNames includes: tg mclass instanceBehavior name asString) ifFalse:[classesInfos add: tg mclass instanceBehavior ].]						ifFalse:[(baseClassesNames includes: tg mclass name asString) ifFalse:[classesInfos add: tg mclass].]	].	^classesInfos asSet asOrderedCollection</body><body package="Spy-Core">getInstrumentedPackages: reports		"	This method returns all the packages from the executed methods in the block that was profiled.	The reports are extracted from the MessageTally tree produced by the TimeProfiler.	All packages from the Kernel and from the Spy bundle are excluded, as they usually are not the method to inspect.	"	|packagesInfos tg baseClasses baseClassesNames |	baseClasses := (Store.Registry bundleNamed: 'Base VisualWorks') allClasses .	baseClasses addAll: ((Store.Registry bundleNamed: 'Spy') allClasses).	baseClasses add: Object.	baseClassesNames := baseClasses collect:[:c |c isMeta ifTrue:[c instanceBehavior name] ifFalse:[ c name]].	packagesInfos := OrderedCollection new.	reports do:[:p |		tg := p method.		(tg mclass isMeta) ifTrue:[(baseClassesNames includes: tg mclass instanceBehavior name asString) ifFalse:[packagesInfos addAll: (Store.Registry packagesContaining: tg mclass instanceBehavior) ].]						ifFalse:[(baseClassesNames includes: tg mclass name asString) ifFalse:[packagesInfos addAll: (Store.Registry packagesContaining: tg mclass) ].]	].	^packagesInfos asSet asOrderedCollection</body><body package="Spy-Core">selectProfiledClassesFrom: reports	| profiledClasses classNames  |	classNames := self allClasses collect: [:c | c originalClass ].	profiledClasses := reports select: [:c | (c method mclass class class) isMeta      	ifTrue:[ classNames includes:( c method mclass instanceBehavior)]		ifFalse:[ (classNames includes:( c method mclass))]].	^profiledClasses</body><body package="Spy-Core">setInfoFromTimeProfiler: aTimeProfiler    "Set to each method of the profiler its the total execution time"    "public method"    | |		maxTimeToRun := 0.		totalExecutionTime = 0 ifTrue:[totalExecutionTime :=(( aTimeProfiler core totalTime  / 10 / self iterations ) rounded / 100.0 ) ].	totalExecutionTime = 0 ifTrue:[totalExecutionTime := 1].	self setTimeInfoFromTimeProfiler: aTimeProfiler.	self setLocalTimeInfoFromTimeProfiler: aTimeProfiler.	maxTimeToRun = 0 ifTrue:[maxTimeToRun := 1]</body><body package="Spy-Core">setLocalTimeInfoFromTimeProfiler: aTimeProfiler	| tg tg_tmp method localTimeUsages localTimeReports localprofiledClasses |	localTimeUsages := Set new: 200.		aTimeProfiler core rootTally addLocalUsageIntoWithReceivers: localTimeUsages.	localTimeReports := localTimeUsages asSortedCollection.	localprofiledClasses := self selectProfiledClassesFrom: localTimeReports.	localprofiledClasses do: [:p |		tg := p method.		tg_tmp := tg.		[tg_tmp class == CompiledBlock ] whileTrue:[ tg_tmp := tg_tmp outerMethod].		method := (self &gt;&gt; tg mclass name) localMethodAt: tg_tmp selector ifAbsent: [method := nil].		method = nil 			ifFalse:[p root tally  = 0 				ifFalse:[method addLocalExecutionTime: (((0.1 * (1000.0 * p tally  / p root tally)) * totalExecutionTime/100.0 ) roundTo: 0.01).]]	].</body><body package="Spy-Core">setReceiversInfo: aTally for: aMethod	| className selector aTally_tmp called |	className := aTally method mclass name.	aTally_tmp := aTally method.	[aTally_tmp class == CompiledBlock ] whileTrue:[ aTally_tmp := aTally_tmp outerMethod].	selector := aTally_tmp selector.	"it could very well be that the class is not part of the profiled package"           		(self includesClassNamed: className) 		ifTrue: [			called := self &gt;&gt; className &gt;&gt; selector.			"called addIncomingCalls: aMethod.			aMethod addOutgoingCalls: called ."			messageTallyMethods add: called.		].	messageTallyMethods add: aMethod.</body><body package="Spy-Core">setTimeInfoFromTally: aTally	"Set to each method of the profiler its the total execution time"	"public method"	"	totalExecutionTime := aTally time."	self setTimeInfoFromTally: aTally parents: (Array with: aTally).</body><body package="Spy-Core">setTimeInfoFromTally: aTally parents: tallies	"private method"	| sons mClass method newTallies parentTally callerMethod callerClass |	mClass := self classAt: aTally method methodClass name ifNone: [nil].	mClass ifNotNil: [		method := mClass localMethodAt: aTally method selector ifAbsent: [nil].		method ifNotNilDo: [:e | 			method useTime: aTally parents: tallies.			parentTally := tallies last.			callerClass := self classAt: parentTally method methodClass name ifNone: [nil].			callerClass ifNotNil: [				callerMethod := callerClass localMethodAt: parentTally method selector ifAbsent: [nil].				callerMethod ifNotNil: [ 					callerMethod addOutgoingCalls: method.					method addIncomingCalls: callerMethod.					self assert: [callerMethod outgoingCalls includes: method] ] 			]]].	sons := aTally receivers.	newTallies := tallies , (Array with: aTally).	sons do: [:e | self setTimeInfoFromTally: e parents: newTallies].</body><body package="Spy-Core">setTimeInfoFromTimeProfiler: aTimeProfiler  	| tg tg_tmp method timeUsages reports tallyEvaluatedMethods profiledClasses |	timeUsages := Set new: 200.	aTimeProfiler core rootTally addUsageIntoWithReceivers: timeUsages.	reports := timeUsages asSortedCollection.	"Evaluated methods"	tallyEvaluatedMethods := OrderedCollection new.	self addEvaluatedMethod: tallyEvaluatedMethods fromTally: aTimeProfiler core rootTally atLevel: 0.	profiledClasses := self selectProfiledClassesFrom: reports.	profiledClasses do: [:p |		tg := p method.		(tg class = CompiledBlock) 			ifFalse: [				tg_tmp := tg.				[tg_tmp class == CompiledBlock ] whileTrue:[ tg_tmp := tg_tmp outerMethod ].				method := (self &gt;&gt; tg mclass name) localMethodAt: tg_tmp selector ifAbsent: [ method := nil ].				(method = nil) 					ifFalse: [ 						p receivers do:[ :m | self setReceiversInfo: m for: method ].							(tallyEvaluatedMethods includes: p) ifTrue: [ self evaluatedMethods add: method.].							method useTime: p.					].			]		].</body></methods><methods><class-id>Profiler</class-id> <category>public-profiling</category><body package="Spy-Core">profile: aBlock 	"	-= public method. This is probably THE method you want to use =-	Profile the aBlock the first time using an execution sampling, we then identify all the packages that deserve to be instrumented for the second phase.	All the packages that belong to the 'Base VisualWorks' bundle are excluded, since it is dangerous to instrument those classes"	| tallyEvaluatedMethods classesInfos | 	Transcript show: 'Phase 1 / 2 : profiling using sampling...'; cr.	self setIfNecessaryTimeProfiler: aBlock.	Transcript show: 'ended!'; cr.	tallyEvaluatedMethods := OrderedCollection new.	self addExecutedMethod: tallyEvaluatedMethods fromTally: myTimeProfiler core rootTally .	"packagesInfos := self getInstrumentedPackages: (tallyEvaluatedMethods asSet)."	classesInfos := self getInstrumentedClasses: (tallyEvaluatedMethods asSet).	"self setIfNecessaryTimeProfiler: aBlock."	Transcript show: 'Phase 2 / 2 : profiling using instrumentation...'; cr.	[		self beforeProfiling.		"self gatherForPackages: packagesInfos."		self gatherForClasses: classesInfos.		self setIfNecessaryTimeAndCallGraphFrom: aBlock.		self install.		self beforeProfiling.		aBlock value.				self afterProfiling.	]	ensure: [		"self class removeFromPackages: packagesInfos"		self class removeFromClasses: classesInfos ].		self setIfNecessaryStateChanges.	Transcript show: 'finished!'; cr.	self checkInvariant.</body><body package="Spy-Core">profile: aBlock inClassCategories: categoriesNames	"Return an instance of myself that contains a profiling structure (Package, Class, Method) filled with the information gathered during the execution.  	 All the classes that belong to the categories given as argument are instrumented before the profile and later on un-instrumented"	"	self 		profile:  [ OSkSubStream example01 ]		inClassCategories: (Array with: 'OSkStreams' )	"	^self profile: aBlock inClassCategories: categoriesNames inNamespace: Smalltalk.</body><body package="Spy-Core">profile:  aBlock inClassCategories: categories inNamespace: aNamespace	"Return an instance of myself that contains a profiling structure (Package, Class, Method) filled with the information gathered during the execution.  	 All the classes that belong to the categories given as argument are instrumented before the profile and later on un-instrumented"	"	self 		profile:  [ OSkSubStream example01 ]		inClassCategories: (Array with: 'OSkStreams' )	""	self setIfNecessaryTimeProfiler: aBlock."	Transcript show: 'profiling...'; cr.	[		self beforeProfiling.		self gatherForClassCategories: categories inNamespace: aNamespace.		self install.		aBlock value.		self afterProfiling 	]	ensure: [ self class removeFromClassCategories: categories inNamespace: aNamespace].	Transcript show: 'ended...'; cr.	self setIfNecessaryTimeProfiler: aBlock.	self setIfNecessaryTimeAndCallGraphFrom: aBlock.	self setIfNecessaryStateChanges.	self checkInvariant.	^ self</body><body package="Spy-Core">profile: aBlock inClassCategoriesMatching: rexexp	^self profile: aBlock inClassCategoriesMatching: rexexp inNamespace: Smalltalk.</body><body package="Spy-Core">profile:  aBlock inClassCategoriesMatching: rexexp inNamespace: aNamespace	| categoriesNames|	categoriesNames := aNamespace organization categories select:[:c | rexexp match: c].	categoriesNames := categoriesNames collect:[:c | c asString].	^self profile: aBlock inClassCategories: categoriesNames inNamespace: aNamespace.</body><body package="Spy-Core">profile: aBlock inClassCategory: classCategory		^self profile: aBlock inClassCategories: (Array with: classCategory) inNamespace: Smalltalk.</body><body package="Spy-Core">profile: aBlock inPackage: packageName	^self profile: aBlock inPackages: (Array with: (Store.Registry packageNamed: packageName) )</body><body package="Spy-Core">profile: aBlock inPackages: packageInfo	Transcript show: 'profiling...'; cr.	[		self beforeProfiling.		self gatherForPackages: packageInfo.		self install.		self beforeProfiling.		aBlock value.				self afterProfiling  	]	ensure: [ self class removeFromPackages: packageInfo ].	Transcript show: 'ended...'; cr.	self setIfNecessaryTimeProfiler: aBlock.	self setIfNecessaryTimeAndCallGraphFrom: aBlock.	self setIfNecessaryStateChanges.	self checkInvariant.	^ self</body><body package="Spy-Core">profile: aBlock inPackagesMatching: regexp	|packagesInfos|	packagesInfos := Store.Registry allPackages select:[:p | regexp match: p name asString].	^self profile: aBlock inPackages: packagesInfos</body><body package="Spy-Core">profile: aBlock inPackagesNames: packagesNames	|packagesInfos|	packagesInfos := Store.Registry allPackages select:[:p | packagesNames includes: p name asString].	^self profile: aBlock inPackages: packagesInfos</body></methods><methods><class-id>Profiler</class-id> <category>contract</category><body package="Spy-Core">checkInvariant	self assert: [ self packages notNil ].	self assert: [ self packages allSatisfy: [ :p | p isKindOf: self class spyClassForPackage ] ].	self assert: [ self packages allSatisfy: [ :p | p profiler notNil ]].	self assert: [ self packages allSatisfy: [ :p | p profiler == self ]].	self packages do: [ :p | p checkInvariant ]</body></methods><methods><class-id>Profiler</class-id> <category>private-profiling</category><body package="Spy-Core">profile: aBlock forClassNamed: className	"Doing a profile on a block only on the instrumentation f a class"	| packageSpy cls classSpy |	cls := Smalltalk at: className.	Transcript show: 'profiling...'; cr.	[		self beforeProfiling.		classSpy := self spyForClass: cls.		packageSpy := self class spyClassForPackage new initialize.		packageSpy classAt: className put: classSpy.		self addPackage: packageSpy.		self install.		aBlock value.		self afterProfiling. 	]	ensure:[ self class removeFromClass: cls ].	Transcript show: 'ended...'; cr.	self setIfNecessaryTimeProfiler: aBlock.	self setIfNecessaryTimeAndCallGraphFrom: aBlock.	^ self</body></methods><methods><class-id>Profiler</class-id> <category>time and call graph</category><body package="Spy-Core">setIfNecessaryStateChanges	"Mark all the methods doing at least one side effect"	| incomingCalls |	self getTimeAndCallGraph ifTrue: [		self allMethods do:[:m |			(m numberOfInvocations &gt; 0 and: [ m performLocalSideEffect ]) ifTrue:[				incomingCalls := m  withAllIncomingCalls asSet.				incomingCalls do:[ :ic | 					ic performLocalSideEffect: true.				]			]		]		].</body><body package="Spy-Core">setIfNecessaryTimeAndCallGraphFrom: aBlock	self getTimeAndCallGraph ifTrue: [ self setInfoFromTimeProfiler: myTimeProfiler. ]</body><body package="Spy-Core">setIfNecessaryTimeProfiler: aBlock	self getTimeAndCallGraph ifTrue: [		| t myBlock AccessProtect |		AccessProtect := Semaphore new.		myBlock := [ self iterations timesRepeat: [ aBlock evaluate ] ].		TimeProfiler 			profile: myBlock			onExitDo: [ :spy | 					t := spy.					myTimeProfiler := spy.					AccessProtect signal			].		AccessProtect wait.	]</body></methods><methods><class-id>Profiler</class-id> <category>visualization</category><body package="Spy-Core">addFindClassMenuOn: aview	aview addMenu: 'Find a Class...'		callBack: 			[:stack |			| allModels element keysList valuesList menuItem parent |			allModels := SortedCollection						sortBlock: [:a1 :a2 | a1 key printString &lt; a1 key printString].			keysList := OrderedCollection new.			valuesList := OrderedCollection new.			self allClasses do: [:c | allModels add: c originalClass -&gt; c].			allModels do: 					[:assoc |					keysList add: assoc key.					valuesList add: assoc value].			menuItem := Refactory.Browser.BrowserApplicationModel new						choose: 'Find a class'						fromList: keysList						values: valuesList						lines: 20						cancel: [nil].			menuItem isNil not				ifTrue: 					[| node |					node := nil.					element := nil.					"Not very pretty.need to fix eventually..."					aview raw elementsDo: 							[:c |							node isNil								ifTrue: 									[node := aview nestedLookup: menuItem in: c.									node isNil										ifFalse: 											[node elementsDo: 													[:n |													element isNil ifTrue: [element := aview nestedLookup: menuItem in: n]]].									parent := c]].					element isNil						ifFalse: 							[ self findElementStack: stack element: element ] ] ]</body><body package="Spy-Core">addFindMethodMenuOn: aview	aview addMenu: 'Find a Method...'		callBack: 			[:stack |			| allModels element keysList valuesList menuItem parent |			allModels := SortedCollection sortBlock: [:a1 :a2 | a1 &lt; a1].			keysList := OrderedCollection new.			valuesList := OrderedCollection new.			self allMethods do: [:c | allModels add: c printString -&gt; c].			allModels do: 					[:assoc |					keysList add: assoc key.					valuesList add: assoc value].			menuItem := Refactory.Browser.BrowserApplicationModel new						choose: 'Find a class'						fromList: keysList						values: valuesList						lines: 20						cancel: [nil].			menuItem isNil not				ifTrue: 					[element := nil.					aview raw elementsDo: 							[:c |							element isNil								ifTrue: 									[element := aview nestedLookup: menuItem in: c.									parent := c]].					element isNil						ifFalse: [self findElementStack: stack element: element]]]</body><body package="Spy-Core">legendSeparationOn: view		view interaction noPopup; forwarder.	view shape label.		view 		node: '---------------------------------------------------------------------------------------------------' 		"using: (self labelForLegend)"		forIt: [view verticalLineLayout ].</body><body package="Spy-Core">populateMenuOn: aview	aview addMenu: 'Zoom in' callBack: [ :stack | Roassal.ROZoomInMove new on: stack firstView ].	aview addMenu: 'Zoom out' callBack: [ :stack | Roassal.ROZoomOutMove new on: stack firstView ].		self addFindClassMenuOn: aview.	self addFindMethodMenuOn: aview.	"We also do a small scrolling to not have the buttons over the nodes"	aview raw translateBy: 0 @ 30.</body><body package="Spy-Core">setInteractionForMethodSpyOn: view	"view interaction 		item: 'inspect' action: #inspect;		item: 'browse' action: [:m | m browse]"</body><body package="Spy-Core">visualizeWithoutNonExecutedClasses</body></methods><methods><class-id>Profiler</class-id> <category>initialize-release</category><body package="Spy-Core">initialize 	packages := nil.	iterations := 1.	evaluatedMethods := OrderedCollection new.	messageTallyMethods := OrderedCollection new.</body></methods><methods><class-id>Profiler</class-id> <category>visualization-util</category><body package="Spy-Core">findElementStack: stack element: element	Roassal.ROFocusView new on: element view: stack firstView.</body><body package="Spy-Core">nameAsString	^ 'Profiler'</body></methods><methods><class-id>Profiler class</class-id> <category>private - installing</category><body package="Spy-Core">install	" Install on all classes"	self installOnClasses: Smalltalk allClasses</body><body package="Spy-Core">installOnBehavior: aBehavior	| dict cm templateMethod metaObject |	aBehavior flushCache.		"We do nothing for traits"	aBehavior isTrait ifTrue: [ ^ self ].	dict := aBehavior methodDictionary.	dict keys do:		[:k|			k flushCache.			cm := dict at: k.			cm isSpy ifFalse: [				"Using template method"				templateMethod := self templateMethodForNumberOfArguments: cm 	numArgs.				templateMethod := templateMethod copyFor: aBehavior.				metaObject := self spyClassForMethod new 										originalMethod: cm; 										selector: k; 										instrumentedMethod: templateMethod;										yourself.				templateMethod replaceLiterals: 					(Array with: templateMethod selector -&gt; k  					 with: #metaObject -&gt; metaObject  					 with: #selector -&gt; k)				dict at: k put: templateMethod.]						"Using method wrapper""			(cm isCompiledMethod and: [ self shouldInstallOnCompiledMethod: cm])			 	ifTrue: [dict at: k put: (self spyClassForMethod new originalMethod: cm; selector: k; yourself)]"		]</body><body package="Spy-Core">installOnClass: aClass"Transcript show: 'instrumenting ', aClass name printString ;cr."	||"	(self isDangerous: aClass theNonMetaClass)"	(self isDangerous: aClass)		ifTrue: [ ^ self ].	"self "		"installOnBehavior: aClass theNonMetaClass;"		"installOnBehavior: aClass theMetaClass."		"installOnBehavior: aClass."	"classSpy := self spyClassForClass new initialize.	dict := aClass methodDictionary.	dict keys do:		[:k|			cm := dict at: k.				templateMethod := self templateMethodForNumberOfArguments: cm 	numArgs.				metaObject := self spyClassForMethod new initialize										originalMethod: cm; 										selector: k; 										instrumentedMethod: templateMethod;										classSpy: classSpy;										yourself.				spyWrapper := SpyWrapper on: k inClass: aClass.				spyWrapper	methodSpy: metaObject.				metaObject spyWrapper: spyWrapper.								classSpy localMethodAt: k put: metaObject.		]."	^ (self new spyForClass: aClass).	"^classSpy"</body><body package="Spy-Core">installOnClassCategory: nameAsString	| classNames classes |	classNames := Smalltalk organization listAtCategoryNamed: nameAsString asSymbol.	classes := classNames collect: [:clsName | Smalltalk at: clsName].	self installOnClasses: classes</body><body package="Spy-Core">installOnClassCategoryMatching: regexpAsString	| categories |	categories := Smalltalk organization categories select:[:c | c match: regexpAsString].	self removeFromClassCategories: categories.	categories do: [:cat | self installOnClassCategory: cat]</body><body package="Spy-Core">installOnClasses: classes	classes do: [:cls | self installOnClass: cls ].</body><body package="Spy-Core">installOnPackagesMatching: regexpAsString	| classes |	classes := self classesForPackagesMatching: regexpAsString.	classes do: [:cls | self installOnClass: cls ]</body><body package="Spy-Core">installOnPackagesNamed: strings	| classes |	self assert: [ strings isString not ] description: 'A collection of String must be passed to #installOnPackagesNamed:'.	self assert: [ (strings allSatisfy: #isString) ] description: 'A collection of String must be passed to #installOnPackagesNamed:'.		strings do: [:packageName |"		classes := Smalltalk organization listAtCategoryNamed:(PackageInfo named: packageName) classes.""		classes := classes reject: #isTrait."		classes := Smalltalk organization listAtCategoryNamed: packageName classes.		classes do: [:cls | self installOnClass: cls theNonMetaClass ] ]</body><body package="Spy-Core">remove	" Install on all classes"	self removeFromClasses: Smalltalk allClasses</body><body package="Spy-Core">removeFrom: class	class flushVMmethodCache.	class rebindAllMethods.</body><body package="Spy-Core">removeFromClass: class	Profiler class == class ifTrue: [ ^ self ].	^ self removeFrom: class</body><body package="Spy-Core">removeFromClassCategories: categoriesNames	"Uninstall all the wrapper for the classes found in each category name given as argument"	| classes |	categoriesNames do: 			[:nameAsString |			classes := self classesInCategory: nameAsString.			self removeFromClasses: classes , (classes collect: [:cls | cls class ] ) ]</body><body package="Spy-Core">removeFromClassCategories: categoriesNames inNamespace: aNamespace	"Uninstall all the wrapper for the classes found in each category name given as argument"	| classes |	categoriesNames do: 			[:nameAsString |			classes := self classesInCategory: nameAsString inNamespace: aNamespace.			self removeFromClasses: classes , (classes collect: [:cls | cls class ] ) ]</body><body package="Spy-Core">removeFromClassCategoriesMatching: regexpAsString	|categories|	categories := Smalltalk organization categories select:[:c | c match: regexpAsString].	self removeFromClassCategories: categories.</body><body package="Spy-Core">removeFromClassCategoriesMatching: regexpAsString inNamespace: aNamespace	|categories|	categories := aNamespace organization categories select:[:c | regexpAsString match: c].	self removeFromClassCategories: categories inNamespace: aNamespace.</body><body package="Spy-Core">removeFromClassCategory: nameAsString	|categories|	categories := OrderedCollection new.	categories add: nameAsString.	self removeFromClassCategories: (Array with: nameAsString)</body><body package="Spy-Core">removeFromClasses: classes	^ classes do: [:cls | self 							removeFromClass: cls;							removeFromClass: cls class ].</body><body package="Spy-Core">removeFromPackages: packageNames	| classes |	classes := self classesForPackages: packageNames.	classes do: [:cls | cls myClass flushVMmethodCache. 					cls myClass rebindAllMethods. ]</body><body package="Spy-Core">removeFromPackagesMatching: regexpAsString	| classes |	classes := self classesForPackagesMatching: regexpAsString.	classes do: [:cls | cls flushVMmethodCache. 					cls rebindAllMethods. ]</body></methods><methods><class-id>Profiler class</class-id> <category>util</category><body package="Spy-Core">classesInCategory: categoryName	"Return the list of classes that belong to a category. Reject non behavior, such as namespaces"	^ self classesInCategory: categoryName inNamespace: Smalltalk</body><body package="Spy-Core">classesInCategory: categoryName inNamespace: namespace	"Return the list of classes that belong to a category. Reject non behavior, such as namespaces"	^ ((namespace organization listAtCategoryNamed: categoryName asSymbol) 		collect: [ :n | namespace at: n] )			select: [ :c | c isBehavior ]</body><body package="Spy-Core">currentTestCase 	^ currentTestCase</body><body package="Spy-Core">currentTestCase: aTestCase	^ currentTestCase := aTestCase</body><body package="Spy-Core">currentTestMethod 	^ currentTestMethod</body><body package="Spy-Core">currentTestMethod: aSelector 	^ currentTestMethod := aSelector</body><body package="Spy-Core">getTestClasses	|testClasses|	testClasses := SUnit.TestCase withAllSubclasses.	testClasses addAll:XProgramming.SUnit.TestCase withAllSubclasses.	^testClasses</body><body package="Spy-Core">isDangerous: aClass	| isDangerous |"	self assert: ( aClass theNonMetaClass == aClass ) description: 'Can only be called on non meta class'."	"XProgramming.SUnit.TestCase assert: ( aClass theNonMetaClass == aClass ) description: 'Can only be called on non meta class'.""	(aClass inheritsFrom: Spy) ifTrue: [ ^ true ].	true ifTrue: [ ^ false ].	"			"Cannot instrument a configuration"	(aClass name beginsWith: 'ConfigurationOf') ifTrue: [ ^ true ].  		"Can instrument the scenario example, even it belongs to Spy"	(aClass category beginsWith: 'Spy-ScenarioExample') ifTrue: [ ^ false ]."	((Array with: ByteSymbol with: String with: Symbol with: MethodReference with: MorphicToolBuilder) includes: aClass)		ifTrue: [ ^ true ]."	(#('Spy-Core' 'Announcements' 'Balloon' 'Collections' 'CollectionsTests' 'Compiler' 'CompilerTests' 'Compression' 'DeprecatedPreferences' 'Exceptions' 'Files' 'FixUnderscores' 'FreeType' 'FreeTypeSubPixelAntiAliasing' 'FreeTypeTests' 'Gofer' 'Graphics' 'GraphicsTests' 'HostMenus' 'Kernel' 'KernelTests' 'MCDirtyPackage' 'MenuRegistration' 'Monticello' 'MonticelloConfigurations' 'MonticelloGUI' 'MonticelloMocks' 'Morphic' 'MorphicTests' 'Multilingual' 'MultilingualTests' 	"'Network' 'NetworkTests' "	'ObjectMetaTools' 'PackageInfo' 'PinesoftEnhancementsForFreetype' 'Polymorph' 'PreferenceBrowser' 'ST80' 'SUnit' 'SUnitGUI' 'ScriptLoader' 'ScriptLoader11' 'Settings' 'System' 'Tests' 'ToolBuilder' 'Tools' 'ToolsTest' 'Traits' 'TrueType' 'VB') anySatisfy: [ :cat | aClass category beginsWith: cat ])		ifTrue: [ ^ true ].	^ false		"	^ aClass isCollection		or: [ ((Smalltalk specialObjectsArray select: #isBehavior) includes: aClass) ]"</body><body package="Spy-Core">isNotDangerous: aClass	^ (self isDangerous: aClass) not</body><body package="Spy-Core">log: aString	"Transcript show: 'Running: ', aString asString; cr."</body><body package="Spy-Core">nonDangerousClasses	^ Smalltalk allClasses select: [:cls | Profiler isNotDangerous: cls ]</body><body package="Spy-Core">nullObject	^ self new</body><body package="Spy-Core">shouldInstallOnClass: aClass	| isDangerous |	self assert: [ aClass theNonMetaClass == aClass ] description: 'Can only be called on non meta class'.		^ (self isNotDangerous: aClass)</body><body package="Spy-Core">shouldInstallOnCompiledMethod: compiledMethod	^ (compiledMethod pragmaAt: #nospy) isNil</body></methods><methods><class-id>Profiler class</class-id> <category>gathering</category><body package="Spy-Core">allSpysForPackagesMatching: regexpAsString	"	self allSpysForPackagesMatching: 'Mondrian*'.	"	| classes answer |	classes := self classesForPackagesMatching: regexpAsString.	answer := OrderedCollection new.	classes do: [:cls | answer addAll: (cls methods select: #isSpy)].	^ answer</body><body package="Spy-Core">classesForPackages: packageNames	| packages classes |	packages := Store.Registry allPackages select:[:p | packageNames includes: p].	classes := packages inject: #() 						into: [:sum :el | sum, el allClasses].	^ classes</body><body package="Spy-Core">classesForPackagesMatching: regexpAsString	| packages classes |	packages := Store.Registry allPackages select:[:p | regexpAsString match: (p name asString)].	classes := (packages inject: #() 						into: [:sum :el | sum, el allClasses]) collect:[: c | c myClass].	^ classes</body><body package="Spy-Core">gather	^ self new gather</body><body package="Spy-Core">gatherForClassCategory: nameAsString	"Return a profiler"	^ self new gatherForClassCategory: nameAsString</body><body package="Spy-Core">gatherForPackageNamed: nameAsString	"Return a profiler"		^ self new gatherForPackageNamed: nameAsString</body><body package="Spy-Core">gatherForPackagesMatching: regexpAsString	"Return a profiler"		^ self new gatherForPackagesMatching: regexpAsString</body></methods><methods><class-id>Profiler class</class-id> <category>public - profiling</category><body package="Spy-Core">profile: aBlock inClassCategories: categoriesNames	"Return an instance of myself that contains a profiling structure (Package, Class, Method) filled with the information gathered during the execution.  	 All the classes that belong to the categories given as argument are instrumented before the profile and later on un-instrumented"	"	self 		profile:  [ OSkSubStream example01 ]		inClassCategories: (Array with: 'OSkStreams' )	"	^self profile: aBlock inClassCategories: categoriesNames inNamespace: Smalltalk.</body><body package="Spy-Core">profile:  aBlock inClassCategories: categories inNamespace: aNamespace	"Return an instance of myself that contains a profiling structure (Package, Class, Method) filled with the information gathered during the execution.  	 All the classes that belong to the categories given as argument are instrumented before the profile and later on un-instrumented"	"	self 		profile:  [ OSkSubStream example01 ]		inClassCategories: (Array with: 'OSkStreams' )	"	| profiler |		Transcript show: 'profiling using instrumentation...'; cr.	profiler := self new.	[		profiler beforeProfiling.		profiler gatherForClassCategories: categories inNamespace: aNamespace.		profiler install.		aBlock value.		profiler afterProfiling 	]	ensure: [ self removeFromClassCategories: categories inNamespace: aNamespace].			profiler setIfNecessaryTimeProfiler: aBlock.	profiler setIfNecessaryTimeAndCallGraphFrom: aBlock.	profiler setIfNecessaryStateChanges.	profiler checkInvariant.	Transcript show: 'ended!'; cr.	^ profiler</body><body package="Spy-Core">profile: aBlock inClassCategoriesMatching: rexexp	^self profile: aBlock inClassCategoriesMatching: rexexp inNamespace: Smalltalk.</body><body package="Spy-Core">profile:  aBlock inClassCategoriesMatching: rexexp inNamespace: aNamespace	| categoriesNames|	categoriesNames := aNamespace organization categories select:[:c | rexexp match: c].	categoriesNames := categoriesNames collect:[:c | c asString].	^self profile: aBlock inClassCategories: categoriesNames inNamespace: aNamespace.</body><body package="Spy-Core">profile: aBlock inClassCategory: classCategory		^self profile: aBlock inClassCategories: (Array with:  classCategory) inNamespace: Smalltalk.</body><body package="Spy-Core">profile: aBlock inPackage: packageName	^self profile: aBlock inPackages: (Array with: (Store.Registry packageNamed: packageName) )</body><body package="Spy-Core">profile: aBlock inPackages: Packages	| profiler |		Transcript show: 'profiling...'; cr.	profiler := self new.	[		profiler beforeProfiling.		profiler gatherForPackages: Packages.		profiler install.		profiler beforeProfiling.		aBlock value.				profiler afterProfiling  ]	ensure: [ self removeFromPackages: Packages ].	Transcript show: 'ended...'; cr.	profiler setIfNecessaryTimeProfiler: aBlock.	profiler setIfNecessaryTimeAndCallGraphFrom: aBlock.	profiler setIfNecessaryStateChanges.	profiler checkInvariant.	^ profiler</body><body package="Spy-Core">profile: aBlock inPackagesMatching: regexp	| packageInfos |		packageInfos := Store.Registry allPackages select:[:p | regexp match: (p name asString)].	^self profile: aBlock inPackages: packageInfos.</body><body package="Spy-Core">profile: aBlock inPackagesNames: packagesNames	|packagesInfos|	packagesInfos := Store.Registry allPackages select:[:p | packagesNames includes: p name asString].	^self profile: aBlock inPackages: packagesInfos</body><body package="Spy-Core">viewProfiling: aBlock inPackage: packageName	(self profile: aBlock inPackage: packageName) visualize</body><body package="Spy-Core">viewProfiling: aBlock inPackagesMatching: regexp	(self profile: aBlock inPackagesMatching: regexp) visualize</body></methods><methods><class-id>Profiler class</class-id> <category>hooks</category><body package="Spy-Core">defaultRun	"Tell on what the profiler has to be run per default"	^ #package</body><body package="Spy-Core">spyClassForClass	^ self spyClassForPackage spyClassForClass</body><body package="Spy-Core">spyClassForMethod	^ self spyClassForPackage spyClassForClass spyClassForMethod</body><body package="Spy-Core">spyClassForPackage	^ PackageSpy</body><body package="Spy-Core">testMethodsToIgnore	"This is intended to be temporary. There are some strange bugs that are hard to track down"	^ #(testNestingOfFormBuilder testNestedCycle)</body></methods><methods><class-id>Profiler class</class-id> <category>public - registry</category><body package="Spy-Core">profilerAt: registryNameAsSymbol	^ self registry at: registryNameAsSymbol</body><body package="Spy-Core">profilingOf: aProfilerClass	^ self registry values select: [ :p | p isKindOf: aProfilerClass ]</body><body package="Spy-Core">removeRegistryNamed: aRegistryName	self registry removeKey: aRegistryName</body><body package="Spy-Core">reset	Registry := nil.	Smalltalk garbageCollect</body></methods><methods><class-id>Profiler class</class-id> <category>public - running tests</category><body package="Spy-Core">runTest: aSymbol in: aReceiverClass forPackages: packages	| profiler |	profiler := self new.	profiler iterations: 300.	profiler profile: [ 			(aReceiverClass selector: aSymbol) run.		]  inPackages: packages.	^ profiler.</body><body package="Spy-Core">runTestsForClassCategories: categories	| classes sunitClasses profiler testResult categoriesNames |	classes := self getTestClasses.	sunitClasses := classes select: [:cls | categories includes: cls category asString ].	categoriesNames := categories collect:[:p | p asString].	profiler := self new.	profiler iterations: 300.	profiler profile: [ testResult := self runningUnitTests: sunitClasses. ]  inClassCategories: categoriesNames.	profiler unitTestResult: testResult.	^ profiler</body><body package="Spy-Core">runTestsForClassCategoriesMatching: regExp	|categories |	categories := (Smalltalk organization categories) select: [:p | regExp match: p].		^self runTestsForClassCategories: categories</body><body package="Spy-Core">runTestsForClassCategory: classCategory		^self runTestsForClassCategories: (Array with: classCategory)</body><body package="Spy-Core">runTestsForClassPackagesMatching: regExp	|packages |	packages := Store.Registry allPackages select:[:p | regExp match: (p name asString)].	^self runTestsForPackagesNames: packages</body><body package="Spy-Core">runTestsForPackageNamed: packageName		^self runTestsForPackagesNames: (Array with: (Store.Registry packageNamed:packageName)).</body><body package="Spy-Core">runTestsForPackages: packages	| profiler testResult sunitClasses classes |	classes := self getTestClasses.	sunitClasses := classes select: [:cls | packages includes: (Store.Registry packageForClass: cls) ].	profiler := self profile: [ testResult := self runningUnitTests: sunitClasses. ]  inPackages: packages.	profiler unitTestResult: testResult.	^ profiler</body><body package="Spy-Core">runTestsForPackagesMatching: regexpAsString	| packages |	packages := Store.Registry allPackages select:[:p | regexpAsString match: (p name asString)].	^ self runTestsForPackagesNames: packages.</body><body package="Spy-Core">runTestsForPackagesNames: packageNames	| packages |	packages := Store.Registry allPackages select:[:p | packageNames includes: p].	^self runTestsForPackages: packages.</body><body package="Spy-Core">runningUnitTests: sunitClasses	^ self runningUnitTests: sunitClasses atEachTestEvaluate: []</body><body package="Spy-Core">runningUnitTests: sunitClasses atEachTestEvaluate: ablock	| ind result asdf|	ind := 0.	"fileStream := Transcript."	result := XProgramming.SUnit.TestResult new.	sunitClasses do: [:cls | 				"self log: 'running ', cls name printString."				"fileStream nextPutAll: 'running ', cls name printString, Character cr printString."				self currentTestCase: cls.				asdf := SUnit.TestSuite new .				cls selectors do:[:s | asdf addTest: (cls selector: s)].				asdf runUsing: [:t | 							"fileStream nextPutAll: 'test method  ', t printString; cr."							self currentTestMethod: t. 							t run ].				self currentTestMethod: nil.				ind := ind + 1. ].	^ result</body><body package="Spy-Core">unitTestFor: classCategory		| classes sunitClasses |	classes := SUnit.TestCase withAllSubclasses.	sunitClasses := classes select: [:cls | cls category asString = classCategory asString ].	^ sunitClasses</body><body package="Spy-Core">unitTestForPackage: package		| classes sunitClasses |	classes := self getTestClasses.	sunitClasses := classes select: [:cls | package = (Store.Registry packageForClass: cls) name].	^ sunitClasses</body></methods><methods><class-id>Profiler class</class-id> <category>public - installing removing</category><body package="Spy-Core">forClass: aClass	| profiler classSpy packageSpy |	self installOnClass: aClass.	profiler := self new.	classSpy := profiler spyForClass: aClass.	packageSpy := self spyClassForPackage new.	packageSpy classAt: aClass name put: classSpy.	classSpy packageSpy:  packageSpy.	packageSpy packageName: 'Smalltalk'.	profiler addPackage: packageSpy.	^ profiler</body></methods><methods><class-id>Profiler class</class-id> <category>private - profiling</category><body package="Spy-Core">profile: aBlock forClassNamed: className	"Doing a profile on a block only on the instrumentation f a class"	"^ self new profile: aBlock forClassNamed: className"	| profiler packageSpy cls classSpy |	cls := Smalltalk at: className.	profiler := self new.	Transcript show: 'profiling...'; cr.	[		profiler beforeProfiling.		classSpy := profiler spyForClass: cls.		packageSpy := self spyClassForPackage new initialize.		packageSpy classAt: className put: classSpy.		profiler addPackage: packageSpy.		profiler install.		aBlock value.		profiler afterProfiling. ]	ensure:[self removeFromClass: cls ].	profiler setIfNecessaryTimeProfiler: aBlock.	profiler setIfNecessaryTimeAndCallGraphFrom: aBlock.	Transcript show: 'ended...'; cr.	^ profiler</body></methods><methods><class-id>Profiler class</class-id> <category>public - benchmark</category><body package="Spy-Core">benchmarkForPackagesMatching: regexpAsString	"Run twice all the test of the package specified as argument. The first time without instrumentation, and the second time with"			| classes sunitClasses overhead times2 times1 result |	classes := self classesForPackagesMatching: regexpAsString.	sunitClasses := classes select: [:cls | cls inheritsFrom: SUnit.TestCase ].		times1 := Time millisecondsToRun: [ sunitClasses do: [:cls | cls buildSuite run ] ].		self installOnPackagesMatching: regexpAsString.		times2 := Time millisecondsToRun: [ sunitClasses do: [:cls | cls buildSuite run ] ].	self removeFromPackagesMatching: regexpAsString.				overhead := (times2 - times1 * 100) asFloat / times1.	result := 'Time without profiling: ', times1 printString, '     ',		'Time with profiling: ', times2 printString, '     ',		'Overhead = ', overhead printString.	Transcript show: result; cr.	self inform: result.	^ result</body></methods><methods><class-id>ThreadProfiler</class-id> <category>initialize-release</category><body package="Spy-ThreadProfiler">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ThreadProfiler</class-id> <category>visualization</category><body package="Spy-ThreadProfiler">borderColorForClass: aClass	^ColorValue veryLightGray</body><body package="Spy-ThreadProfiler">borderColorForMethod: aMethod	^ColorValue red</body><body package="Spy-ThreadProfiler">classNodeView: view for: classes	"Render each classes on the view "	|methodsToView |	view shape rectangleWithoutBorder.	classes do:[:c |		methodsToView := self methodsToVisualizeFor: c.		methodsToView size &gt; 0 ifTrue:[			view shape rectangleWithoutBorder.			view node: c forIt: [ 				self setInteractionForClassOn: view.				self shapeForClass: c inView: view.				"We display the methods"				view interaction forwarder.				view node: c forIt: [ self includeMethods: methodsToView FromClass: c On: view ].				"We display the label"				view interaction forwarder.				view shape label.				view node: c  printString.				view verticalLineLayout center.			]		].	].</body><body package="Spy-ThreadProfiler">includeMethods: collectionOfMethods FromClass: aClassSpy On: view	|methods |	methods := SortedCollection sortBlock:	[ :x :y | x numberOfLinesOfCode &gt; y numberOfLinesOfCode ].	collectionOfMethods do:[:m |		(m numberOfCreatedThreads &gt; 1 or: [m numberOfDirectlyCreatedThreads &gt; 1])			ifTrue:[methods add: m].	].	view shape rectangleWithoutBorder.	self methodNodeView: view for: methods.	view gridLayout.</body><body package="Spy-ThreadProfiler">methodNodeView: view for: collectionOfMethods	self setInteractionForMethodOn: view.	self shapeForMethod: view.	view nodes: collectionOfMethods.</body><body package="Spy-ThreadProfiler">methodsToVisualizeFor: aClassSpy	|methods|	methods := SortedCollection sortBlock:	[ :x :y | x numberOfLinesOfCode &gt; y numberOfLinesOfCode ].	aClassSpy allMethods do:[:m |		(m numberOfCreatedThreads &gt; 1 or: [m numberOfDirectlyCreatedThreads &gt; 1])			ifTrue:[methods add: m].	].	^methods</body><body package="Spy-ThreadProfiler">profilerNameAsString		^ 'Thread Profiler'</body><body package="Spy-ThreadProfiler">setInteractionForClassOn: view	view interaction item: 'inspect element' action: [:el | el model inspect].	view interaction item: 'Browse Class' action: [:el | el model browse].</body><body package="Spy-ThreadProfiler">setInteractionForMethodOn: view	self setMouseOverInteractionForMethodOn: view.	self setMouseRightClickInteractionForMethodOn: view.</body><body package="Spy-ThreadProfiler">setMouseOverInteractionForMethodOn: view	self totalExecutionTime = 0 ifTrue: [] ifFalse: [self totalExecutionTime].	view interaction popupText: 			[:aMethodSpy |			aMethodSpy printString , 			 (String with: Character cr) , (aMethodSpy level printString),			 (String with: Character cr) , (aMethodSpy sourceCode isNil ifTrue: [''] ifFalse: [aMethodSpy sourceCode])]</body><body package="Spy-ThreadProfiler">setMouseRightClickInteractionForMethodOn: view	(view interaction)		item: 'inspect element' action: [:el | el model inspect];		item: 'Browse Method' action: [:el | el model browse].</body><body package="Spy-ThreadProfiler">shapeForClass: aClass inView: view	view shape rectangle borderColor: [self borderColorForClass: aClass].</body><body package="Spy-ThreadProfiler">shapeForMethod: view	|fillColor |	fillColor := Color green mix: Color red shades: maxLevel + 2. 	view shape rectangle  width: [:m | (m  numberOfCreatedThreads + 5)]; 		height: [ :m | m numberOfDirectlyCreatedThreads + 5];		linearFillColor: [:entity | (entity numberOfInvokingThreads + 1)  asInteger] within: self allMethods.	view shape borderColor: [:m | fillColor at: (m level + 2)  ].	view shape borderWidth: 2.</body><body package="Spy-ThreadProfiler">visualizeOn: view"	view interaction 			action: #inspect;			popupText.	view nodes: self allMethods.	view edges: self allMethods from: #yourself toAll: #outgoingMethods.	view treeLayout"	| classes |	self setLevel.	maxLevel := (self allMethods collect:[:m | m level]) max.	"view title: self profilerNameAsString."	"Add extra commands""	self addButtonsOn: view."			"Add info""	self visualizeAllProfilerInformationOn: view."		"Normal classes"	classes :=  SortedCollection sortBlock: [:a :b| a sumLevel &gt; b sumLevel].	(self allClasses) do:[:tc | 		classes add: tc.	].		view shape rectangleWithoutBorder.	self setInteractionForClassOn: view.	self classNodeView: view for: classes.	view edges: classes from: #superclass to: #yourself.	view gridLayout.</body></methods><methods><class-id>ThreadProfiler</class-id> <category>util</category><body package="Spy-ThreadProfiler">getTimeAndCallGraph	^false</body><body package="Spy-ThreadProfiler">setLevel    |s roots node |    roots := self allMethods select:[:m | m incomingCalls size = 0].    s := OrderedCollection new.    s addAll: roots.    roots do:[:r | r level: 0].    [s isEmpty]        whileFalse:[        node := s removeFirst.        node visited: true.        node outgoingCalls do:[:oc |            oc visited ifFalse:[                oc level: node level +1.                s add: oc.            ]                   ].    ].</body></methods><methods><class-id>ThreadProfiler class</class-id> <category>hooks</category><body package="Spy-ThreadProfiler">spyClassForPackage	^ ThreadProfilerPackage</body></methods><methods><class-id>HapaoTestCoverageUI</class-id> <category>actions</category><body package="Spy-HapaoTestCoverage">addPackage	"Add the selected package on the left hand pane in the list of packages to analyze"	self addPackage: listAllPackages selection.</body><body package="Spy-HapaoTestCoverage">addPackage: aPackage	"Add the selected package on the left hand pane in the list of packages to analyze"	selectedPackages add: aPackage.	packages remove: aPackage.	self setListValues.</body><body package="Spy-HapaoTestCoverage">cancel	"This stub method was generated by UIDefiner"	^self</body><body package="Spy-HapaoTestCoverage">hapaoProfile	"Profile the expresion in the UI with Hapao"	self resetErrorLabels.	(listSelectedPackages list) isEmpty 		ifFalse:[(HapaoTestCoverage runTestsForPackages: listSelectedPackages list) visualize. ^self.]		ifTrue:[(self widgetAt: #Label6) labelString: 'No packages were selected'].		(conditionInput value = '') 		ifTrue:[(self widgetAt: #Label7) labelString: 'Empty expression!!']		ifFalse:[		 	[packages := Compiler evaluate: 'Store.Registry allPackages select:[:each| ',conditionInput value, ']'] 				on: Error 				do:[packages := nil. (self widgetAt: #Label7) labelString: 'Not a valid expression!'].			packages ifNotNil:[ 				packages isEmpty 					ifTrue:[ (self widgetAt: #Label7) labelString: 'No packages were found']					ifFalse:[(HapaoTestCoverage runTestsForPackages: packages) visualize]		]	]</body><body package="Spy-HapaoTestCoverage">helpButton	"Display the help message"	(Workspace with: self helpMessage) open</body><body package="Spy-HapaoTestCoverage">helpMessage	^ 'Test coverage is about assessing the relevance of unit tests against the tested application. Select the package you want to profile. You have to select the packages that contains the code to analyze and the unit tests to run. You can either use the arrows or programmatically select the package. Try  Roassal*A documentation is available online http://objectprofile.com/#/pages/products/hapao/overview.htmlBug reports and suggestions are welcome: http://code.google.com/p/objectprofile/You can directly reach the developer to info@objectprofile.comFollow us on Twitter @ObjectProfile '</body><body package="Spy-HapaoTestCoverage">removePackage	self hasSelectedPackageToAnalyze		ifTrue: 			[packages add: self selectedPackageToAnalyze.			selectedPackages remove: self selectedPackageToAnalyze.			self setListValues.		 ].		^self</body><body package="Spy-HapaoTestCoverage">validate	| p |	p := self validate: conditionInput value.	p isEmpty ifTrue: [ (self widgetAt: #Label7) labelString: 'Not a valid expression!'. ^ self].	p do: [ :pak | self addPackage: pak ].</body><body package="Spy-HapaoTestCoverage">validate: aString	"Return the list of packages that match the regular expression aString. Example of the string could be		'Roassal*' 	"	^  [ Compiler		evaluate: 'Store.Registry allPackages select: [ :each | ''' , aString , ''' match: each name ] ' ] 		on: Error		do: [ #() ].</body></methods><methods><class-id>HapaoTestCoverageUI</class-id> <category>aspects</category><body package="Spy-HapaoTestCoverage">conditionInput	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^conditionInput isNil		ifTrue:			[conditionInput := String new asValue]		ifFalse:			[conditionInput]</body><body package="Spy-HapaoTestCoverage">listAllPackages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listAllPackages isNil		ifTrue:			[listAllPackages := SelectionInList new.			 listAllPackages list: packages.]		ifFalse:			[listAllPackages]</body><body package="Spy-HapaoTestCoverage">listSelectedPackages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listSelectedPackages isNil		ifTrue:			[listSelectedPackages := SelectionInList new]		ifFalse:			[listSelectedPackages]</body></methods><methods><class-id>HapaoTestCoverageUI</class-id> <category>util</category><body package="Spy-HapaoTestCoverage">resetErrorLabels	(self widgetAt: #Label6) labelString: ''. 	(self widgetAt: #Label7) labelString: ''.</body><body package="Spy-HapaoTestCoverage">setListValues	listSelectedPackages list: selectedPackages.	listAllPackages list: packages.</body></methods><methods><class-id>HapaoTestCoverageUI</class-id> <category>testing</category><body package="Spy-HapaoTestCoverage">hasSelectedPackageToAnalyze	"True if a package is selected on the left hand side"	^ self selectedPackageToAnalyze notNil</body><body package="Spy-HapaoTestCoverage">selectedPackageToAnalyze	"Return the package selected on the right hand side. Return nil if none"	^ self listSelectedPackages selection</body></methods><methods><class-id>HapaoTestCoverageUI</class-id> <category>initialize-release</category><body package="Spy-HapaoTestCoverage">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	packages := SortedCollection sortBlock: [:a :b| a name &lt; b name]. 	selectedPackages := SortedCollection sortBlock: [:a :b| a name &lt; b name]. 	Store.Registry allPackages do: [:p | packages add: p].	"packages do: [:p |  self listAllPackages list add: p ]."" refreshList: packages."	^self</body></methods><methods><class-id>HapaoTestCoverageUI class</class-id> <category>images</category><body package="Spy-HapaoTestCoverage">hapaoIcon	^ SpyIcons hapaoMediumIconGray</body><body package="Spy-HapaoTestCoverage">leftArrow	^ SpyIcons leftArrow</body><body package="Spy-HapaoTestCoverage">objectProfileIcon	^ SpyIcons objectProfileMediumIcon</body><body package="Spy-HapaoTestCoverage">rightArrow	^ SpyIcons rightArrow</body></methods><methods><class-id>KaiProfiler</class-id> <category>shapes</category><body package="Spy-KaiProfiler">shapeForEdge	^ Mondrian.LineShape color: [:entity | ColorValue lightGray].</body><body package="Spy-KaiProfiler">shapeForMethod		|maxSize |	maxSize := 200.	^Mondrian.Shape new		add:(Mondrian.RectangleShape width: [:anEntity | ((anEntity numberOfInvocations) * maxSize/ (self maxNumberOfExecutions)) ] 								    height: [:anEntity | (anEntity executionTime) * maxSize   / maxTimeToRun] 					                      fillColor: (Mondrian.ColorLinearNormalizer inContext: self allMethods withCommand: [:entity | entity numberOfReceivers])) ;		add: (Mondrian.BorderShape lineColor: [:anEntity | self borderColorFor: anEntity]);		yourself.</body></methods><methods><class-id>KaiProfiler</class-id> <category>hooks</category><body package="Spy-KaiProfiler">borderColorFor: aMethod	^ aMethod numberOfInvocations &gt; 0		ifTrue: [ (evaluatedMethods includes: aMethod) ifTrue: [ ColorValue cyan ] ifFalse: [ ColorValue black ] ]		ifFalse: [ ColorValue veryLightGray ]</body><body package="Spy-KaiProfiler">getTimeAndCallGraph	^true</body><body package="Spy-KaiProfiler">recommendedIterationsRatio	"This is the recommmended ratio between reported methods by the TimeProfiler and the executed one by the instumentation of Kai."	^0.45</body></methods><methods><class-id>KaiProfiler</class-id> <category>examples</category><body package="Spy-KaiProfiler">example1"	self new example1.	|t|	t :=TimeProfiler profile: [ 100000000 timesRepeat: [TGFoo new foo ]] .	t."	|tg kai|	tg := TGFoo new.	kai := KaiProfiler new.	kai iterations: 100000000.	kai profile: [tg foo] forClassNamed: #TGFoo.	kai visualize.</body><body package="Spy-KaiProfiler">example2"	KaiProfiler new example2	TimeProfiler profile: [ 20 timesRepeat: [		| view ui drawing| 			view := Roassal.ROMondrianViewBuilder new.			view nodes: Collection withAllSubclasses.			view edgesFrom: #superclass.			view treeLayout.			ui := Roassal.RoassalUI new.			drawing := ui drawing.			drawing setView: view raw]		] "	| kai |	kai := KaiProfiler new.	kai iterations: 2000.	kai 		profile:  [			| view ui drawing| 			view := Roassal.ROMondrianViewBuilder new.			view nodes: Collection withAllSubclasses.			view edgesFrom: #superclass.			view treeLayout.			ui := Roassal.RoassalUI new.			drawing := ui drawing.			drawing setView: view raw		]		inClassCategoriesMatching: 'Roassal*'   		inNamespace: Roassal.	kai visualize.</body><body package="Spy-KaiProfiler">examplePackage1"	self new examplePackage1.	TimeProfiler profile: [ 100000000 timesRepeat: [TGPerson new foo ]] "	|myBlock sunitClasses kai|	myBlock := [	sunitClasses := self class unitTestFor: 'Spy-ScenarioExample'. self class runningUnitTests: sunitClasses.].	kai := KaiProfiler new.	kai iterations: 100.	kai profile: myBlock inPackagesMatching: 'Spy-ScenarioExample*'.	kai visualize.</body><body package="Spy-KaiProfiler">examplePackage2"	KaiProfiler new examplePackage2	TimeProfiler profile: [ 20 timesRepeat: [			| view ui drawing| 			view := Roassal.ROMondrianViewBuilder new.			view nodes: Collection withAllSubclasses.			view edgesFrom: #superclass.			view treeLayout.			ui := Roassal.RoassalUI new.			drawing := ui drawing.			drawing setView: view container		] "	| kai |	kai := KaiProfiler new.	kai iterations: 50.	kai 		profile:  [			| view ui drawing| 			view := Roassal.ROMondrianViewBuilder new.			view nodes: Collection withAllSubclasses.			view edgesFrom: #superclass.			view treeLayout.			ui := Roassal.RoassalUI new.			drawing := ui drawing.			drawing setView: view raw]		inPackagesNames: (Array with:'Roassal-Core' ) .	kai visualize.</body><body package="Spy-KaiProfiler">exampleProfile"	This example uses #profile: This means that Kai infers which packages has to be instrumented. 	KaiProfiler new exampleProfile"	| kai |	kai := KaiProfiler new.	kai iterations: 500.	kai 		profile:  [			| view ui drawing| 			view := Roassal.ROMondrianViewBuilder new.			view nodes: Collection withAllSubclasses.			view edgesFrom: #superclass.			view treeLayout.			ui := Roassal.RoassalUI new.			drawing := ui drawing.			drawing setView: view container.	] .	kai visualize.</body><body package="Spy-KaiProfiler">exampleTestRunning1"	self new exampleTestRunning1.	This example profiles with Kai the execution of tests in the 'Spy-ScenarioExample'  _class category_."	|myBlock sunitClasses kai|	myBlock := [	sunitClasses := self class unitTestFor: 'Spy-ScenarioExample'. 				self class runningUnitTests: sunitClasses.].	kai := KaiProfiler new.	kai iterations: 50.	kai profile: myBlock inClassCategories: (Array with: 'Spy-ScenarioExample' ).	kai visualize.</body><body package="Spy-KaiProfiler">exampleTestRunning2"	self new exampleTestRunning2.	This example profiles with Kai the execution of tests in the 'Roassal-Core' _package_."	|myBlock sunitClasses kai|	myBlock := [	sunitClasses := KaiProfiler unitTestForPackage: 'Roassal-Core'. 				KaiProfiler runningUnitTests: sunitClasses.].	kai := KaiProfiler new.	kai iterations: 5.	kai profile: myBlock. 	kai visualize.</body><body package="Spy-KaiProfiler">exampleTestRunning3"	self new exampleTestRunning3.	Example to profile with Kai the execution of a unit test. Here we profile the Roassal.ROElementTest _class_."	|myBlock kai|	myBlock := [	KaiProfiler runningUnitTests: (Array with: Roassal.ROElementTest).].	kai := KaiProfiler new.	kai iterations: 50.	kai profile: myBlock.	kai visualize.</body></methods><methods><class-id>KaiProfiler</class-id> <category>initialize-release</category><body package="Spy-KaiProfiler">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	maxTimeToRun := 0.001.	totalExecutionTime := 0.	^ self</body></methods><methods><class-id>KaiProfiler</class-id> <category>util</category><body package="Spy-KaiProfiler">connectedMethodsFor: aClass	| connected |	connected := aClass allMethods select:[:m | ((m outgoingCalls select: [ :c | c classSpy theNonMetaClass = aClass theNonMetaClass "classSpy  = aClass or:[c classSpy = aClass metaclassSpy]"]) isEmpty not											 or:[(m incomingCalls select: [ :c | c classSpy theNonMetaClass = aClass theNonMetaClass "classSpy = aClass or:[c classSpy = aClass metaclassSpy]" ]) isEmpty not])											and:[((m incomingCalls includes: m) not) and:[((m outgoingCalls includes: m) not)]]].	^connected</body><body package="Spy-KaiProfiler">consumingClasses2: classes 	|consumingClasses superConsumingClasses percent|	consumingClasses := OrderedCollection new.	superConsumingClasses := OrderedCollection new.	percent :=  0.2.	consumingClasses := classes select:[:c | (c allMethods select:[:m | (m executionTime / self totalExecutionTime) &gt; percent  ]) isEmpty not ].	consumingClasses do:[:c | 		superConsumingClasses addAll: c superclassesToRoot.	].	consumingClasses addAll: superConsumingClasses.	^consumingClasses asSet asOrderedCollection</body><body package="Spy-KaiProfiler">consumingClasses: classes 	|consumingClasses superConsumingClasses percent|	consumingClasses := SortedCollection sortBlock: [:a :b| a maxConsumingTime &lt; b maxConsumingTime]. 	superConsumingClasses := OrderedCollection new.	percent :=  0.2.	classes do:[:c | 	((c allMethods select:[:m | (m executionTime / self totalExecutionTime) &gt; percent  ]) isEmpty not)		ifTrue:[consumingClasses add: c.]	].	consumingClasses do:[:c | 		superConsumingClasses addAll: c superclassesToRoot.	].	consumingClasses addAll: superConsumingClasses.	^consumingClasses asSet asOrderedCollection</body><body package="Spy-KaiProfiler">isolatedMethodsFor: aClass	|isolated connected |	"isolated := aClass allMethods select:[:m |  (m outgoingCalls select: [ :c | c classSpy = aClass or:[c classSpy = aClass metaclassSpy] ]) isEmpty											 and:[(m incomingCalls select: [ :c | c classSpy = aClass or:[c classSpy = aClass metaclassSpy] ]) isEmpty]]."	connected := self connectedMethodsFor: aClass.	isolated := aClass allMethods select:[:m | (connected includes: m) not].	^isolated</body><body package="Spy-KaiProfiler">maxNumberOfExecutions	| numberOfExecutions |	maxNumberOfExecutions ifNil: [		numberOfExecutions := self allMethods collect:[:m | m numberOfInvocations].		maxNumberOfExecutions := 0.		numberOfExecutions do:[:m |			m &gt; maxNumberOfExecutions ifTrue:[maxNumberOfExecutions := m.]		].		maxNumberOfExecutions = 0 ifTrue:[maxNumberOfExecutions := 1]	].	^maxNumberOfExecutions</body><body package="Spy-KaiProfiler">numberIterationsEvaluation	"Return the ratio of method profiled with the execution sampling and the one really executed.	Our measurement shows that about 50% of the method executed are detected by message tally. 	A good value is 0.45 (this value is stored in recommendedIterationsRatio method).	This method is used to evaluate the quality of the profile"	| cantExecutedMethods cantExecutionTimeNotZero tallyMethods |	cantExecutedMethods := (self allMethods select:[:m | m numberOfInvocations &gt; 0 ]) size.	 tallyMethods := messageTallyMethods asSet asOrderedCollection.	cantExecutionTimeNotZero := (self allMethods select:[:m |tallyMethods includes: m]) size.	^ cantExecutionTimeNotZero / (cantExecutedMethods = 0 ifTrue:[1] ifFalse:[cantExecutedMethods])</body></methods><methods><class-id>KaiProfiler</class-id> <category>visualization-util</category><body package="Spy-KaiProfiler">profilerNameAsString		^ 'Kai Code Execution Profiler'</body></methods><methods><class-id>KaiProfiler</class-id> <category>visualization</category><body package="Spy-KaiProfiler">classNodeView: view for: classes	"Render the classes on the view"	(self sortClasses: classes) do:[:c |		self setInteractionForClassOn: view.		view shape rectangleWithoutBorder.		view node: c forIt: [ 			view shape rectangle borderColor: Color lightGray.			view interaction forwarder.			view node: c forIt: [ self renderMethods: c allMethods on: view ].			"We render the class name. We also make sure that drag and dropping it will move the whole class"			view shape label.			view interaction forwarder.			view node: c printString.			view verticalLineLayout center.		]	]</body><body package="Spy-KaiProfiler">methodNodeView: view for: collectionOfMethods	| maxSize |	maxSize := 200.	self setInteractionForMethodOn: view.	view shape rectangle 		width: [ :el | ((el numberOfInvocations) * maxSize / (self maxNumberOfExecutions)) ] ; 		height: [ :el | (el executionTime) * maxSize   / maxTimeToRun ] ;		linearFillColor: #numberOfReceivers within: self allMethods;		borderColor: [ :el | self borderColorFor: el ].	view nodes: collectionOfMethods .	view edgesToAll: #incomingCalls</body><body package="Spy-KaiProfiler">renderMethods: methods on: view	| connectedMethods orderedConnectedMethods classSpy |	methods isEmpty ifTrue: [ ^ self ].	self assert: [ methods allSatisfy: [ :mSpy | 					(mSpy classSpy == methods first classSpy) or: 					[(mSpy classSpy == methods first classSpy metaclassSpy)  ]  ] ].	classSpy := methods first classSpy.	connectedMethods := self connectedMethodsFor: classSpy.	orderedConnectedMethods := SortedCollection sortBlock: [ :a :b | a executionTime &lt; b executionTime ].	connectedMethods do: [ :m | orderedConnectedMethods add: m ].	orderedConnectedMethods size &gt; 0		ifTrue: 			[ view interaction forwarder.			view shape rectangle withoutBorder.			view node: 'Connected'				forIt: 					[self methodNodeView: view for: orderedConnectedMethods.					view treeLayout ] ].	(self isolatedMethodsFor: classSpy) size &gt; 0		ifTrue: 			[ view interaction forwarder.			view shape rectangle withoutBorder.			view node: 'Isolated'				forIt: 					[self methodNodeView: view						for: ((self isolatedMethodsFor: classSpy)								asSortedCollection: [ :predecessor :successor | predecessor executionTime &gt;= successor executionTime ]).					view gridLayout ] ]</body><body package="Spy-KaiProfiler">setInteractionForClassOn: view	view interaction item: 'inspect element' action: [ :el | el inspect ].	view interaction item: 'Browse Class' action: [ :el | el browse ].</body><body package="Spy-KaiProfiler">setInteractionForMethodOn: view	self setMouseOverInteractionForMethodOn: view.	self setMouseRightClickInteractionForMethodOn: view.</body><body package="Spy-KaiProfiler">setMouseOverInteractionForMethodOn: view	| toDivideExecutionTime |	toDivideExecutionTime := self totalExecutionTime = 0 ifTrue: [1] ifFalse: [self totalExecutionTime].	view interaction popupText: 			[:aMethodSpy |			aMethodSpy printString , ' executed ' , aMethodSpy numberOfInvocations printString , ' times :'				, (String with: Character cr) , 'Total execution time: '				, aMethodSpy executionTime printString , ' ms.('				, (aMethodSpy executionTime / toDivideExecutionTime * 100 roundTo: 0.01) printString , '%)'				, (String with: Character cr) , 'Local execution time: '				, aMethodSpy localExecutionTime printString , ' ms.('				, (aMethodSpy localExecutionTime / toDivideExecutionTime * 100 roundTo: 0.01) printString , '%)'				, (String with: Character cr) , (aMethodSpy sourceCode isNil ifTrue: [''] ifFalse: [aMethodSpy sourceCode])]</body><body package="Spy-KaiProfiler">setMouseRightClickInteractionForMethodOn: view	(view interaction)		item: 'inspect element' action: [ :el | el inspect ];		item: 'View Incoming Invocations' action: [ :el | el visualizeIncomingCalls ];		item: 'View Outgoing Invocations' action: [ :el | el visualizeOutgoingCalls ];		item: 'View Invocations State changes' action: [ :el | el visualizeStateChanges ];		item: 'Browse Method' action: [ :el | el browse ];		item: 'View Time Profiler report' action: [ :el | self viewTimeProfilerReport ];		item: 'View method Time Profiler report' action: [ :el | el viewTimeProfilerReport ]</body><body package="Spy-KaiProfiler">sortClasses: classes	"Order the classes according to their number of methods"	| orderedClasses |	orderedClasses := SortedCollection sortBlock: [:a :b| a numberOfMethods &gt; b numberOfMethods]. 	classes do: [ :c | orderedClasses add: c ].	^ orderedClasses asArray</body><body package="Spy-KaiProfiler">viewTimeProfilerReport	"Show the result of the MessageTally"		| view aStream |	aStream :=  TextStream on: String new.	view := Roassal.ROMondrianViewBuilder titled: 'Time Profiler Report'.	myTimeProfiler core rootTally fullPrintOn: aStream cutoff: 7.	view interaction noPopup.	view shape label.	view node: aStream collection.	view open.</body><body package="Spy-KaiProfiler">visualizeAllProfilerInformationOn: view	"Display all the information on the left side of the visualization"	view interaction noPopup; forwarder.	view shape rectangle.	view node: '' 		forIt:[			view interaction noPopup; forwarder.			view shape rectangleWithoutBorder.			view				node: 'Profiler name'				forIt:[					self visualizeProfileName: view.					view verticalLineLayout alignCenter.				].			view interaction noPopup; forwarder.			view shape rectangleWithoutBorder.			view 				node: 'Profiler info'				forIt:[					self legendSeparationOn: view.					self visualizeInfoLegendOn: view.					self legendSeparationOn: view.					self visualizeProfilerInfoLegendOn: view.					self legendSeparationOn: view.					self visualizeLegendOn: view.					view verticalLineLayout.				].		view verticalLineLayout alignCenter.		].</body><body package="Spy-KaiProfiler">visualizeInfoLegendOn: view	| instrumentedClasses instrumentedMethods |	instrumentedClasses := self allClasses select:[:c | c isPartiallyExecuted].	instrumentedMethods := 0.	instrumentedClasses do:[:c | instrumentedMethods := instrumentedMethods + (c methods size)].	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: 'Legend'		forIt: 			[			view interaction noPopup; forwarder.			view shape label.			view node: 				('Total execution time: ' , totalExecutionTime printString , ' ms'), (String with: Character cr),				('Number of classes: ' , instrumentedClasses size printString), (String with: Character cr),				('Number of methods ' , instrumentedMethods printString), (String with: Character cr),				('Number of executed methods: ' , (self allMethods select:[:m | m numberOfInvocations &gt; 0]) size printString), (String with: Character cr),				('Number of Iterations evaluation: ', self numberIterationsEvaluation asFloat printString),(String with: Character cr),				((self numberIterationsEvaluation asFloat &gt; self recommendedIterationsRatio) ifFalse:['An Increase of the number of iterations is recommended']													ifTrue:['The number of iterations is OK '])			].</body><body package="Spy-KaiProfiler">visualizeLegendOn: view	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: 'Legend'		forIt: 			[			view interaction noPopup; forwarder.			view shape label.			view				node: ('Big squares are classes', (String with: Character cr),					   'Edges are inheritance (a superclass is above its subclasses)', (String with: Character cr),					   'Small squares inside classes are methods', (String with: Character cr),					   'The height of a method is the time taken to execute it' , (String with: Character cr),					   'The width is the number of times the method has been executed' , (String with: Character cr),					   'Color is the amount of different receivers the method has been executed on' , (String with: Character cr),					   'Right click on a method to open the invocation graphs', (String with: Character cr),					   'Cyan border indicates the evaluated methods on the profiled block').			view verticalLineLayout].</body><body package="Spy-KaiProfiler">visualizeOn: view	"Principal visualization of the execution"	| consumingClasses otherClasses classesToVisualize |	view title: self profilerNameAsString.	classesToVisualize := self allClasses select: [:c | c isPartiallyExecuted].	self visualizeAllProfilerInformationOn: view.	consumingClasses := self consumingClasses: classesToVisualize.	otherClasses := classesToVisualize.	consumingClasses do: [:c | otherClasses remove: c ifAbsent: []].	self classNodeView: view for: consumingClasses.	self classNodeView: view for: otherClasses.	view shape line color: ColorValue veryDarkGray.	view edges: classesToVisualize from: #superclass to: #yourself.	view treeLayout.</body><body package="Spy-KaiProfiler">visualizeProfileName: view	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: 'Legend'		forIt: [			view interaction noPopup; forwarder.			view shape label.			view				node: self profilerNameAsString.			view verticalLineLayout alignCenter		]</body><body package="Spy-KaiProfiler">visualizeProfilerInfoLegendOn: view	| aStream info labels|	labels := OrderedCollection new.	aStream := TextStream on: String new.	myTimeProfiler reportTotalsOn: aStream.	info := aStream collection.	info linesDo:[:line |		labels add: line.	].	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: 'Legend'		forIt: 			[			view interaction noPopup; forwarder.			view shape label.			view node: aStream collection ]</body></methods><methods><class-id>KaiProfiler class</class-id> <category>hooks</category><body package="Spy-KaiProfiler">spyClassForPackage	^ KaiProfilingPackageSpy</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>visualization-utils</category><body package="Spy-HapaoTestCoverage">getIncomingCallsEdges: methods	|edges|	edges := OrderedCollection new.	methods do: [:m |		(m incomingCalls) do:[:om |			edges add: (Array with: m with: om).		].	].	^edges</body><body package="Spy-HapaoTestCoverage">getOutgoingCallsEdges: methods	|edges|	edges := OrderedCollection new.	methods do: [:m |		(m outgoingCalls) do:[:om |			edges add: (Array with: m with: om).		].	].	^edges</body><body package="Spy-HapaoTestCoverage">infoAsString	^ 		'Number of classes: ', self allClasses size printString, (String with: Character cr),		'Number of methods: ', self allMethods size printString, (String with: Character cr),		'Number of tested methods: ', self numberOfTestedMethods printString, (String with: Character cr),		'Number of test methods: ', self numberOfTestMethods printString, (String with: Character cr),		'% coverage: ', self coverage printString, (String with: Character cr),		'Average methods per test: ', self averageMethodsPerTest printString.</body><body package="Spy-HapaoTestCoverage">profilerNameAsString		^ 'Hapao Test Coverage Tool'</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>hooks</category><body package="Spy-HapaoTestCoverage">beforeProfiling	super beforeProfiling.	HapaoTestCoverageMethodSpy reset</body><body package="Spy-HapaoTestCoverage">borderColorForClass: aClass	aClass isTestClass ifTrue: [^ self testColor] ifFalse: [ ^ColorValue veryLightGray]</body><body package="Spy-HapaoTestCoverage">borderColorForMethod: aMethod	aMethod isTest ifTrue:[^ColorValue green].	aMethod isAbstract ifTrue: [ ^ColorValue blue ]. 	aMethod isCovered ifTrue: [^ColorValue black] ifFalse: [^ColorValue red]</body><body package="Spy-HapaoTestCoverage">incomingAndOutgoingCallClass	^ IdentitySet</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>metrics</category><body package="Spy-HapaoTestCoverage">averageMethodsPerTest	self numberOfTestMethods isZero ifTrue: [ ^ -1].		^ ((((self numberOfTestedMethods / self numberOfTestMethods) * 100) asInteger ) / 100) asFloat"	'| methods ntMethods tMethods coveredMethod |	methods := self allMethods.	tMethods := methods select: #isTest.	ntMethods := methods copyWithoutAll: tMethods.		coveredMethod := ntMethods select: #isCovered.		tMethods ifEmpty: [ ^ -1 ].	^ ((((ntMethods size / coveredMethod size) * 100) asInteger ) / 100) asFloat'"</body><body package="Spy-HapaoTestCoverage">numberOfTestMethods	| methods tMethods |	methods := self allMethods.	tMethods := methods select: [:m | m isTest.].		^ tMethods size</body><body package="Spy-HapaoTestCoverage">numberOfTestedMethods	| methods ntMethods tMethods coveredMethod |	methods := self allMethods.	ntMethods := methods select:[:m | m isTest not].	coveredMethod := ntMethods select:[:m | m isCovered].	^ coveredMethod size</body><body package="Spy-HapaoTestCoverage">ratioCoveredClasses	^ ((self allClasses select: [ :cls | cls allMethods anySatisfy: #isCovered ]) size / self allClasses size) asFloat</body><body package="Spy-HapaoTestCoverage">ratioExecutedMethods	^ ((self allMethods select: #isCovered) size / self allMethods size) asFloat</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>compute</category><body package="Spy-HapaoTestCoverage">connectedMethods: collectionOfMethods	"Return the list of methods that invoked by me based on self invocation"	|connectedMethods|	connectedMethods := IdentitySet new.	collectionOfMethods do: [ :methodSpy |			(methodSpy staticSelfOutgoingMethods isEmpty) ifFalse: [				connectedMethods add: methodSpy.				connectedMethods addAll: (methodSpy staticSelfOutgoingMethods)].			].	^connectedMethods</body><body package="Spy-HapaoTestCoverage">coverage	"Return the % of executed methods, rounded at 0.01"		(self allNonAbstractMethods size = 0) ifTrue: [ ^ 0].	^ (((self allNonAbstractMethods collect:[ :m | m coverage]) sum / self numberOfNonAbstractMethods) asFloat * 100) asInteger / 100.0</body><body package="Spy-HapaoTestCoverage">getTestClasses	"Return the list of tests"	^ self allClasses select: #isTestClass</body><body package="Spy-HapaoTestCoverage">hierarchyClasses: collectionOfClasses	"Return the isolated classes from collectionOfClasses"	|hierarchyClasses|	hierarchyClasses := IdentitySet new.	collectionOfClasses do: [ :classSpy |			"(classSpy subclasses) notEmpty ifTrue: [				hierarchyClasses add: classSpy.				hierarchyClasses addAll: classSpy subclasses.			]."					(classSpy superclass) notNil ifTrue:[				hierarchyClasses add: classSpy.				hierarchyClasses add: classSpy superclass.				]].	^hierarchyClasses</body><body package="Spy-HapaoTestCoverage">notCoveredMethods: collectionOfMethods	"Return the list of methods that invoked by me based on self invocation"	|notCoveredMethods|	notCoveredMethods := IdentitySet new.	collectionOfMethods do: [ :methodSpy |			(methodSpy isCovered) ifFalse: [				notCoveredMethods add: methodSpy].			].	^notCoveredMethods</body><body package="Spy-HapaoTestCoverage">partiallyCoveredMethods: collectionOfMethods	"Return the list of methods that invoked by me based on self invocation"	|notCoveredMethods|	notCoveredMethods := IdentitySet new.	collectionOfMethods do: [ :methodSpy |			(methodSpy cyclomaticComplexity &gt; methodSpy coveredPaths and: methodSpy isCovered) ifTrue: [				notCoveredMethods add: methodSpy].			].	^notCoveredMethods</body><body package="Spy-HapaoTestCoverage">testClasses: collectionOfClasses	"Return the test classes from collectionOfClasses"	| testClasses |	testClasses := OrderedCollection new.	collectionOfClasses do: [ :classSpy |			(classSpy isTestClass) ifTrue: [				testClasses add: classSpy.			] ].	^testClasses</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>accessing</category><body package="Spy-HapaoTestCoverage">packagesToTest	^ packagesToTest</body><body package="Spy-HapaoTestCoverage">packagesToTest: aCollectionOfStrings	packagesToTest := aCollectionOfStrings.	self testMethods: ((self allMethods select: #isTest) collect: #originalMethod).</body><body package="Spy-HapaoTestCoverage">testMethods	^ testMethods</body><body package="Spy-HapaoTestCoverage">testMethods: anObject	testMethods := anObject</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>opening</category><body package="Spy-HapaoTestCoverage">open	^ self class viewCoverageOfPackages: packagesToTest</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>constant</category><body package="Spy-HapaoTestCoverage">testColor	^ColorValue green</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>initialize-release</category><body package="Spy-HapaoTestCoverage">initialize	super initialize.	packages := nil.	allClassesAsDictionaryCache := nil.	allMethodsCache := nil.	packagesToTest := #().</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>visualization-buttons</category><body package="Spy-HapaoTestCoverage">addButtonsOn: view	"view addUserCommand: {'Run tests' . [ :root | self open ] }.	view addUserCommand: {'Info' . [ :root | UIManager default inform: self infoAsString ]}.	view addUserCommand: {'Open new' . [ :root | self visualize ]}.	view addUserCommand: {'Help' . [ :root | self displayHelp ]}"</body><body package="Spy-HapaoTestCoverage">runTestButton: view	"	view addUserCommand: {'Run tests' . 		[ :root | 			| sunitClasses |			self allMethods do: #initialize.			sunitClasses := (root nodes collect: #model)								select: [ :v | ((v isKindOf: HapaoTestCoverageClassSpy)												and: [ v isClassPresent ])													and: [ v theClass inheritsFrom: TestCase ] ]								thenCollect: #theClass.			self install.			self class runningUnitTests: sunitClasses.			self uninstall.			root resetMetricCachesResursively.			root resetFormCacheResursively.			root updateWindow ] }."</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>visualization</category><body package="Spy-HapaoTestCoverage">classNodeView: view for: classes	"Render each classes on the view "	classes do:[:c |		view shape rectangleWithoutBorder.		view node: c forIt: [ 			self setInteractionForClassOn: view.			self shapeForClass: c inView: view.			"We display the methods"			view interaction forward: Roassal.ROMouseDragging.			view node: c forIt: [ self includeMethods: c allMethods FromClass: c On: view ].			"We display the label"			view interaction forward: Roassal.ROMouseDragging.			view shape label.			view node: c  printString.			view verticalLineLayout center.		].	].</body><body package="Spy-HapaoTestCoverage">getSortedTestClasses	^self getTestClasses		asSortedCollection: [:a :b | a numberOfMethods &gt; b numberOfMethods]</body><body package="Spy-HapaoTestCoverage">includeMethods: collectionOfMethods FromClass: aClassSpy On: view	|methods connectedMethods disconnectedMethods|	methods := SortedCollection sortBlock:	[ :x :y | x numberOfLinesOfCode &gt; y numberOfLinesOfCode ].	aClassSpy allMethods do: [ :m | methods add: m ].	connectedMethods := SortedCollection sortBlock:[ :x :y | x selector &gt; y selector ].	(self connectedMethods: methods) do:[ :m | connectedMethods add: m ].	disconnectedMethods:= OrderedCollection new.	methods do: [:m | (connectedMethods includes: m) ifFalse:[ disconnectedMethods add: m ] ].			connectedMethods size &gt; 0 		ifTrue:[			view shape rectangleWithoutBorder.			view interaction forwarder.			view 				node: 'connected' 				forIt: [ 					self methodNodeView: view for: connectedMethods.					view treeLayout ] ].	disconnectedMethods size &gt; 0 		ifTrue:[	view shape rectangleWithoutBorder.	view interaction forwarder.	view 		node: 'disconnected' 		forIt: [ 			self methodNodeView: view for: disconnectedMethods.			view gridLayout gapSize: 2		 ].	]</body><body package="Spy-HapaoTestCoverage">methodNodeView: view for: collectionOfMethods	self setInteractionForMethodOn: view.	self shapeForMethod: view.	view nodes: collectionOfMethods.	view edgesToAll: [ :cm | 		 cm staticSelfIncomingMethods		  ].</body><body package="Spy-HapaoTestCoverage">popupView: myEntity using: view	"Popup view of the method"	view shape rectangle.	view node: 'call graph'		forIt: 			[ view shape rectangleWithoutBorder.			view node: 'legend'				forIt: 					[view shape label.					view nodes: (Array								with: 'Control flow of'								with: (String with: Character cr)								with: myEntity printString								with: (String with: Character cr)).					view verticalLineLayout alignCenter verticalGap: -8 ].			view shape rectangleWithoutBorder.			view node: #callGraph				forIt: 					[view shape rectangleWithoutBorder.					view node: #upperPart						forIt: 							[self shapeForMethod: view.							view nodes: myEntity incomingCalls].					view shape rectangleWithoutBorder.					view node: #middlePart						forIt: 							[self shapeForMethod: view.							view node: myEntity].					view shape rectangleWithoutBorder.					view node: #lowerPart						forIt: 							[self shapeForMethod: view.							view nodes: myEntity outgoingCalls].					view						edges: myEntity incomingCalls						from: #yourself						to: myEntity.					view						edges: myEntity outgoingCalls						from: myEntity						to: #yourself.					view verticalLineLayout alignCenter].			view verticalLineLayout alignCenter verticalGap: 0 ]	"	|callers|	myView node: 'call graph' forIt: [		myView shape label.		myView node: myEntity printString.		myView node: #callGraph forIt: [			callers := IdentitySet new.			callers 				addAll: (myEntity incomingCalls);				add: myEntity ;				addAll: (myEntity outgoingCalls).			myView shape rectangle 							borderColor: [:m | m isTest ifTrue: [ Color green ] ifFalse: [ Color black ] ].			myView nodes: callers.			myView edges: myEntity incomingCalls from: #yourself to: myEntity.			myView edges: myEntity outgoingCalls from: myEntity to: #yourself.			myView treeLayout ].		myView verticalLineLayout alignCenter ]."</body><body package="Spy-HapaoTestCoverage">setInteractionForClassOn: view	view interaction item: 'inspect element' action: [:el | el inspect].	view interaction item: 'Browse Class' action: [:el | el browse].	view interaction item: 'Focus on it' action: [:el | el isTestClass ifTrue: [self viewTestedClasses: el ] ifFalse: [self viewTestClasses: el]].</body><body package="Spy-HapaoTestCoverage">setInteractionForMethodOn: view	self setMouseRightClickInteractionForMethodOn: view.	self setMouseOverInteractionForMethodOn: view.</body><body package="Spy-HapaoTestCoverage">setMouseOverInteractionForMethodOn: view	view interaction popupView:  [:aMethodSpy :innerView |		self popupView: aMethodSpy using: innerView	].</body><body package="Spy-HapaoTestCoverage">setMouseRightClickInteractionForMethodOn: view	view interaction item: 'View Incoming Invocations' action: [:el | el visualizeIncomingCalls].	view interaction item: 'View Outgoing Invocations' action: [:el | el visualizeOutgoingCalls].	view interaction item: 'Browse Method' action: [:el | el browse].	view interaction item: 'Focus on it' action:[:el | el isTest ifTrue: [ self viewTestedMethodsBy: el ] ifFalse:  [self viewTestsFor: el ]].</body><body package="Spy-HapaoTestCoverage">visualize	| rawView view |	rawView := Roassal.ROView new.	rawView @ Roassal.RODraggable.	view := Roassal.ROMondrianViewBuilder initializedView: rawView.	"The following line uses a RODraggableWithVelocity, which does not work for non trivial visualization"	"view := Roassal.ROMondrianViewBuilder titled: self nameAsString."	self visualizeOn: view.	self populateMenuOn: view	.	^ view open</body><body package="Spy-HapaoTestCoverage">visualizeAllProfilerInformationOn: view	"Display all the information on the left side of the visualization"	view interaction noPopup; forwarder.	view shape rectangle.	view node: '' 		forIt:[			view interaction noPopup; forwarder.			view shape rectangleWithoutBorder.			view node: 'Profiler name' 				forIt:[					self visualizeProfileName: view.					view verticalLineLayout alignCenter.				].			view interaction noPopup; forwarder.				view shape rectangleWithoutBorder.				view node: '' 					forIt:[						self legendSeparationOn: view.						self visualizeInfoLegendOn: view.						self legendSeparationOn: view.						self visualizeLegendOn: view.						view verticalLineLayout .					].			view verticalLineLayout alignCenter.		].</body><body package="Spy-HapaoTestCoverage">visualizeInfoLegendOn: view	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: 'Legend'		forIt: [				view interaction noPopup; forwarder.				view shape label.				view node: self infoAsString.		].</body><body package="Spy-HapaoTestCoverage">visualizeLegendOn: view	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: ''		forIt: 			[			view interaction noPopup; forwarder.			view shape label.			view				node: ('Big squares are classes', (String with: Character cr),					   'Edges are inheritance (a superclass is above its subclasses)', (String with: Character cr),					   'Small squares inside classes are methods', (String with: Character cr),					   'The height of a method is the cyclomatic complexity' , (String with: Character cr),					   'The width is the number of callers' , (String with: Character cr),					   'Gray intensity reflects the number of times the method has been executed.' , (String with: Character cr),						'Red border color  means the method has not been executed.', (String with: Character cr),						'Blue border indicates abstract methods', (String with: Character cr),						'Green border indicates that the method is a test method, defined in a unit test.' , (String with: Character cr), 					   'Right click on a method to focus on a method and see tests-methods relation').			view verticalLineLayout alignLeft ]</body><body package="Spy-HapaoTestCoverage">visualizeOn: view	"This is the main entry point of the visualization"	| testClasses classes hierarchyTestClasses isolatedTestClasses hierarchyClasses isolatedClasses |	view title: self profilerNameAsString.	"Add extra commands"	self addButtonsOn: view.	"Add info"	self visualizeAllProfilerInformationOn: view.	"Test classes"	testClasses := self getSortedTestClasses.	hierarchyTestClasses := self hierarchyClasses: testClasses copy.	isolatedTestClasses := SortedCollection				sortBlock: [:a :b | a numberOfMethods &gt; b numberOfMethods].	testClasses do: 			[:tc |			(hierarchyTestClasses includes: tc) ifFalse: [isolatedTestClasses add: tc]].	"Normal classes"	classes := SortedCollection				sortBlock: [:a :b | a numberOfMethods &gt; b numberOfMethods].	self allClasses		do: [:tc | (testClasses includes: tc) ifFalse: [classes add: tc]].	hierarchyClasses := self hierarchyClasses: classes copy.	isolatedClasses := SortedCollection				sortBlock: [:a :b | a numberOfMethods &gt; b numberOfMethods].	classes		do: [:tc | (hierarchyClasses includes: tc) ifFalse: [ isolatedClasses add: tc ] ].	view interaction forwarder.	view shape rectangleWithoutBorder.	view node: 'connected test classes'		forIt: 			[self setInteractionForClassOn: view.			self classNodeView: view for: hierarchyTestClasses.			view edges: hierarchyTestClasses from: #superclass to: #yourself.			view treeLayout].	"view edges: hierarchyTestClasses from: #superclass to: #yourself.	view treeLayout."	"	view treeLayout."	view interaction forwarder.	view shape rectangleWithoutBorder.	view node: 'disconnected test classes'		forIt: 			[self setInteractionForClassOn: view.			self classNodeView: view for: isolatedTestClasses.			view gridLayout gapSize: 2].	view interaction forwarder.	view shape rectangleWithoutBorder.	view node: 'connected test classes'		forIt: 			[self setInteractionForClassOn: view.			self classNodeView: view for: hierarchyClasses.			view edges: hierarchyClasses from: #superclass to: #yourself.			view treeLayout].	view interaction forwarder.	view shape rectangleWithoutBorder.	view node: 'disconnected classes'		forIt: 			[ self setInteractionForClassOn: view.			self classNodeView: view for: isolatedClasses.			view gridLayout gapSize: 2 ]</body><body package="Spy-HapaoTestCoverage">visualizeProfileName: view	view interaction noPopup; forwarder.	view shape rectangleWithoutBorder.	view		node: 'Legend'		forIt: [			view interaction noPopup; forwarder.			view shape label.			view				node: self profilerNameAsString.			view verticalLineLayout alignCenter		]</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>example</category><body package="Spy-HapaoTestCoverage">example1	"	This example gives the coverage of unit tests contained in Mondrian.		self new example1	"	^ (HapaoTestCoverage runTestsForPackagesMatching: 'Roassal*') visualize</body><body package="Spy-HapaoTestCoverage">example2	"	This example gives the coverage of piece of code in Mondrian.	self new example2	"	^ (HapaoTestCoverage 			profile: [ | view | view := Roassal.ROMondrianViewBuilder new. view nodes: (1 to: 20). view verticalLineLayout ]			inPackagesMatching: 'Roassal*') visualize</body><body package="Spy-HapaoTestCoverage">example3	"	This example gives the coverage of piece of code in Roassal.	self new example3	"		| classes inst |	classes := XProgramming.SUnit.TestCase allSubclasses select: [:cls |cls category printString =  '#''Roassal-Visitor-Tests'''].	^ (HapaoTestCoverage 		profile: [ classes do: [:cls | Transcript show: cls printString; cr.			inst := cls new.				inst class testSelectorsDo: [:t | 							inst setTestSelector: t . 							inst run ].		] ] 		inPackagesMatching: 'Roassal*') visualize.</body><body package="Spy-HapaoTestCoverage">example4	"	This example gives the coverage of unit test in any package that match 'Code*', which are those in CodeFooDevelpment bundle.	self new example4	""	^ (HapaoTestCoverage runTestsForPackagesMatching: 'Code*') visualize."</body><body package="Spy-HapaoTestCoverage">example5	"	Toy Example	self new example5	"	^ (HapaoTestCoverage runTestsForPackagesMatching: 'Spy-ScenarioExample') visualize</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>shapes</category><body package="Spy-HapaoTestCoverage">shapeForClass: aClass inView: view	view shape rectangle borderColor: [self borderColorForClass: aClass].</body><body package="Spy-HapaoTestCoverage">shapeForMethod: view	view shape rectangle  width: [:m | (m numberOfCallers + 1) log * 10]; 		height: [ :m | m cyclomaticComplexity * 5];		linearFillColor: [:entity | ((entity numberOfExecutions + 1) log  * 10) asInteger] within: self allMethods.	view shape borderColor: [:m | self borderColorForMethod: m ].</body></methods><methods><class-id>HapaoTestCoverage</class-id> <category>visualization specialized</category><body package="Spy-HapaoTestCoverage">viewTestClasses: myClass	"View for tested classes by unit test"	|myView testClasses classes v |			myView := Roassal.ROMondrianViewBuilder titled:( 'Test Classes for ', myClass printString). 	classes := OrderedCollection new.	classes add: myClass.	testClasses := IdentitySet new.	classes do:[:class |		class allMethods do:[ :method |			method incomingCalls do: [ :callerMethod |					callerMethod isTest ifTrue: [ testClasses add: (callerMethod classSpy)].				].						].		].	testClasses := testClasses asOrderedCollection.	v := testClasses detect: [ :cls | cls className = (myClass className, 'Test') ] ifNone: [ nil ].	v ifNotNil: [ testClasses remove: v. testClasses addFirst: v ].		self classNodeView: myView for: testClasses.	myView treeLayout.	self classNodeView: myView for: classes.	myView treeLayout.	myView open.</body><body package="Spy-HapaoTestCoverage">viewTestedClasses: myClass	"View for tested classes by unit test"	|myView testClasses classes |			myView := Roassal.ROMondrianViewBuilder titled: ('Tested Classes Tested by ', myClass printString).	testClasses := OrderedCollection new.	myClass superclass ifNotNil: [testClasses add: myClass superclass].	testClasses add: myClass. 		classes := IdentitySet new.	testClasses do:[:testClass |		(testClass allMethods) do:[ :testMethod |			(testMethod outgoingCalls) do: [ :method |					(testClasses includes: method classSpy) ifFalse:[ classes add: (method classSpy)].				].						].		].	self classNodeView: myView for: testClasses .	myView treeLayout.	self classNodeView: myView for: classes.	myView treeLayout.	myView open.</body><body package="Spy-HapaoTestCoverage">viewTestedMethodsBy: myMethod	"View for tested methods by the method"	|myView |	myView := Roassal.ROMondrianViewBuilder titled: ('Tested Methods by ' , myMethod printString).	myView shape rectangle.	myView		node: 'call graph' 		forIt: [			myView shape rectangleWithoutBorder.			myView				node: 'legend' 				forIt:[					myView shape label.					myView nodes: (Array with: 'Tested methods by ' with:(String with: Character cr) with: (myMethod printString) with: (String with: Character cr) ) .					myView verticalLineLayout alignCenter verticalGap: -8.				].		myView shape rectangleWithoutBorder.		myView node: #callGraph 	forIt: [			myView shape rectangleWithoutBorder.			myView 	node: #upperPart  forIt: [				self setInteractionForMethodOn: myView.				self shapeForMethod: myView.				myView node: myMethod .			].			myView shape rectangleWithoutBorder.			myView node: #lowerPart forIt: [				self setInteractionForMethodOn: myView.				self setMouseOverInteractionForMethodOn: myView.				self shapeForMethod: myView.				myView nodes: myMethod outgoingCalls.			].			myView edges: myMethod outgoingCalls from: myMethod to: #yourself.			myView verticalLineLayout alignCenter		].		myView verticalLineLayout alignCenter verticalGap: 0 	].	myView open.</body><body package="Spy-HapaoTestCoverage">viewTestsFor: myMethod	"View for tests that call the method"	|myView |	testMethods := IdentitySet new.	(myMethod incomingCalls) do: [ :methodSpy |		(methodSpy isTest ) ifTrue: [				testMethods add: methodSpy]			]. 	myView := Roassal.ROMondrianViewBuilder titled: ('Tested Methods by ' , myMethod printString).	myView shape rectangle.	myView		node: 'call graph' 		forIt: [			myView shape rectangleWithoutBorder.			myView				node: 'legend' 				forIt:[					myView shape label.					myView nodes: (Array with: 'Test methods for ' with:(String with: Character cr) with: (myMethod printString) with: (String with: Character cr) ).					myView verticalLineLayout alignCenter verticalGap: -18.				].		myView shape rectangleWithoutBorder.		myView node: #callGraph 	forIt: [			myView shape rectangleWithoutBorder.			myView node: # upperPart forIt: [				self setInteractionForMethodOn: myView.				self shapeForMethod: myView.				myView nodes: testMethods.			].			myView shape rectangleWithoutBorder.			myView 	node: #lowerPart forIt: [				self setInteractionForMethodOn: myView.				self shapeForMethod: myView.				myView node: myMethod.				].					myView edges: myMethod incomingCalls from: myMethod to: #yourself.			myView verticalLineLayout alignCenter		].		myView verticalLineLayout alignCenter verticalGap: 0 	].	myView open.</body></methods><methods><class-id>HapaoTestCoverage class</class-id> <category>public - running tests</category><body package="Spy-HapaoTestCoverage">viewCoverageOfPackage: aPackageName	(self runTestsForPackageNamed: aPackageName) visualize</body><body package="Spy-HapaoTestCoverage">viewCoverageOfPackages: packages	| hapao |	hapao := (self runTestsForPackagesNames: packages).	^ hapao visualize</body><body package="Spy-HapaoTestCoverage">viewCoverageOfPackagesMatching: regExp	(self runTestsForPackagesMatching: regExp) visualize</body></methods><methods><class-id>HapaoTestCoverage class</class-id> <category>hooks</category><body package="Spy-HapaoTestCoverage">spyClassForPackage	^ HapaoTestCoveragePackageSpy</body></methods><methods><class-id>SpyIcons</class-id> <category>initialize-release</category><body package="Spy-VWSpecific">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>SpyIcons class</class-id> <category>instance creation</category><body package="Spy-VWSpecific">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>KaiProfilerUI</class-id> <category>aspects</category><body package="Spy-KaiProfiler">iterations	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^iterations isNil		ifTrue:			[ iterations := 1 asValue ]		ifFalse:			[ iterations ]</body><body package="Spy-KaiProfiler">profiledExpression	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^profiledExpression isNil		ifTrue:			[profiledExpression := String new asValue]		ifFalse:			[profiledExpression]</body></methods><methods><class-id>KaiProfilerUI</class-id> <category>initialize-release</category><body package="Spy-KaiProfiler">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>KaiProfilerUI</class-id> <category>util</category><body package="Spy-KaiProfiler">resetErrorLabels	(self widgetAt: #LabelError) labelString: ''. 	(self widgetAt: #LabelExpError) labelString: ''.</body></methods><methods><class-id>KaiProfilerUI</class-id> <category>actions</category><body package="Spy-KaiProfiler">getBlockFromExpression	^Compiler evaluate: '[' , self profiledExpression value , ']'</body><body package="Spy-KaiProfiler">helpButton	"Display the help message"	(Workspace with: self helpMessage) open</body><body package="Spy-KaiProfiler">helpMessage	^ 'The Kai code execution profiler offers an expressive representation of a software execution. In It answers questions such as "Which software components are consuming the most time?" and more importantly, "How do we reduce the software execution time while preserving the original software behavior?".Enter the expression you want to profile  and the number of iterations this expression will be executed to be profiled. A valid expression could be:		| view ui drawing| 	view := Roassal.ROMondrianViewBuilder new.	view nodes: Collection withAllSubclasses.	view edgesFrom: #superclass.	view treeLayout.	ui := Roassal.RoassalUI new.	drawing := ui drawing.	drawing setView: view raw.Set the amount of iterations to, let''s say, 100. This value represents the amount of time the block to profile will be evaluated. Since the execution is sampled, the higher the number of iterations is, the larger amount of information Kai will be able to collect. This number usually  ranges from 1 to 2000.Another examples can be:	| view ui drawing| 	view := Roassal.ROMondrianViewBuilder new.	view nodes: Collection withAllSubclasses forEach: [ :cls | 		view nodes: cls methodDictionary. view gridLayout ].	ui := Roassal.RoassalUI new.	drawing := ui drawing.	drawing setView: view raw.Or:	| view | 	view := Roassal.ROMondrianViewBuilder new.	view nodes: Collection withAllSubclasses forEach: [ :cls | 		view nodes: cls methodDictionary. "view gridLayout" ].	10000 timesRepeat: [ view raw elements do: [ :el | el bounds ] ]A documentation is available online http://objectprofile.com/kai-home.htmlBug reports and suggestions are welcome: http://code.google.com/p/objectprofile/You can directly reach the developers to info@objectprofile.comFollow us on facebook: http://facebook.com/ObjectProfile and twitter: @ObjectProfile'</body><body package="Spy-KaiProfiler">kaiProfile	"Profile the expresion in the UI with Kai"	| block validToProfile |	self resetErrorLabels.	validToProfile := true.	self iterations value &lt;= 0		ifTrue: 			[(self widgetAt: #LabelError)				labelString: 'Number of Iterations must be &gt;= 0!'.			validToProfile := false].	block := self getBlockFromExpression.	[block value] on: Error		do: 			[(self widgetAt: #LabelExpError) labelString: 'Invalid expression!'.			validToProfile := false].	validToProfile		ifTrue: 			[ KaiProfiler new				iterations: self iterations value;				profile: block;				visualize].	^self</body></methods><methods><class-id>KaiProfilerUI class</class-id> <category>instance creation</category><body package="Spy-KaiProfiler">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>KaiProfilerUI class</class-id> <category>images</category><body package="Spy-KaiProfiler">kaiIcon	^ SpyIcons kaiMediumIconGray</body><body package="Spy-KaiProfiler">objectProfileIcon	^ SpyIcons objectProfileMediumIcon</body></methods><methods><class-id>SpyWrapper</class-id> <category>accessing</category><body package="Spy-Core">clientMethod	^clientMethod</body><body package="Spy-Core">currentMethod	^ self class currentMethod</body><body package="Spy-Core">currentMethod: spyMethod	self class currentMethod: spyMethod</body><body package="Spy-Core">methodSpy	^methodSpy</body><body package="Spy-Core">methodSpy: aMethodSpy	methodSpy := aMethodSpy.</body><body package="Spy-Core">originalMethod	^ self unwrappedMethod.</body></methods><methods><class-id>SpyWrapper</class-id> <category>evaluating-before-after</category><body package="Spy-Core">beforeMethod</body></methods><methods><class-id>SpyWrapper</class-id> <category>initialize-release</category><body package="Spy-Core">class: aClass selector: aSymbol 	^super class: aClass selector: aSymbol</body></methods><methods><class-id>SpyWrapper</class-id> <category>evaluating</category><body package="Spy-Core">valueWithReceiver: anObject arguments: anArrayOfObjects 	"methodSpy addIncomingCalls: LastCalledMethod."	|a|	a := self methodSpy run: self selector with: anArrayOfObjects in: anObject.	^a</body></methods><methods><class-id>SpyWrapper class</class-id> <category>global info</category><body package="Spy-Core">currentTestMethod	^ currentTestMethod</body><body package="Spy-Core">currentTestMethod: m	currentTestMethod := m</body></methods><methods><class-id>TGPerson</class-id> <category>initialize-release</category><body package="Spy-ScenarioExample2">bar	^5</body><body package="Spy-ScenarioExample2">foo	^self bar</body><body package="Spy-ScenarioExample2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>TGPerson class</class-id> <category>instance creation</category><body package="Spy-ScenarioExample2">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>TGTeacher</class-id> <category>initialize-release</category><body package="Spy-ScenarioExample2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>TGFooTest</class-id> <category>tests</category><body package="Spy-ScenarioExample">testConstantMethod	TGFoo new initialize		constantMethod;		constantMethod;		constantMethod</body><body package="Spy-ScenarioExample">testConstantMethod2	| o |	o := TGFoo new initialize.	o incrCounter.	o incrCounter.	o incrCounter.	o incrCounter.	o incrCounter.	self assert: (o constantMethod2) = 5 factorial.	self assert: (o constantMethod2) = 5 factorial.	o incrCounter.	self assert: (o constantMethod2) = 6 factorial.	self assert: (o constantMethod2) = 6 factorial.	self assert: (o constantMethod2) = 6 factorial.	o incrCounter.	o incrCounter.	self assert: (o constantMethod2) = 8 factorial.	self assert: (o constantMethod2) = 8 factorial.	self assert: (o constantMethod2) = 8 factorial.	self assert: (o constantMethod2) = 8 factorial.	self assert: (o constantMethod2) = 8 factorial.</body><body package="Spy-ScenarioExample">testConstantMethod3	| o |	o := TGFoo new initialize.	o incrCounter.	self assert: o getRectangle= ( 1@1 corner: 21@35).	self assert: o getRectangle= ( 1@1 corner: 21@35).</body><body package="Spy-ScenarioExample">testFoo	|tgfoo|	tgfoo := TGFoo new.	self assert: tgfoo foo = 'I am baz'.	tgfoo foo2.	tgfoo fooDoubleTrueFalse.	tgfoo fooTripleTrueFalse.	tgfoo foo: 1 with: 2  And: 3.	tgfoo fooWithreturn.</body><body package="Spy-ScenarioExample">testFooWithMoreArguments	|tgfoo|	tgfoo := TGFoo new.	tgfoo foo: 1 with: 2  And: 3.</body><body package="Spy-ScenarioExample">testManyFoo	|tgfoo|	tgfoo := TGFoo new.	100000 timesRepeat:[tgfoo foo].</body><body package="Spy-ScenarioExample">testdoNotCallAnotherMethod	TGFoo new doNotCallAnotherMethod</body></methods><methods><class-id>TGFemaleDriver</class-id> <category>accessing</category><body package="Spy-ScenarioExample">isFemale	^true</body></methods><methods><class-id>TGMaleDriver</class-id> <category>as yet unclassified</category><body package="Spy-ScenarioExample">isMale	^ true</body></methods><methods><class-id>IdentityObjectSet</class-id> <category>public</category><body package="Spy-Util">add: anObject	| hash c |	hash := anObject identityHash.	c := dictionary at: hash ifAbsentPut: [ OrderedCollection new ].	c add: anObject</body><body package="Spy-Util">includes: anObject	| hash |	hash := anObject identityHash.	(dictionary includesKey: hash) ifFalse: [ ^ false ].	^ (dictionary at: hash) includes: anObject</body><body package="Spy-Util">maxNumberOfSameOccurence	self halt. "TODO"</body></methods><methods><class-id>IdentityObjectSet</class-id> <category>initialize-release</category><body package="Spy-Util">initialize	dictionary := Dictionary new</body></methods><methods><class-id>BoundedIdentitySet</class-id> <category>accessing</category><body package="Spy-Util">maxSize	maxSize ifNil: [ maxSize :=300 ].	^ maxSize</body><body package="Spy-Util">maxSize: integer	maxSize := integer</body></methods><methods><class-id>BoundedIdentitySet</class-id> <category>adding</category><body package="Spy-Util">add: anElement	(self size &gt;= self maxSize) ifTrue: [ ^ anElement ].		^ super add: anElement</body></methods><methods><class-id>BoundedIdentitySet</class-id> <category>copying</category><body package="Spy-Util">copyEmpty: aSize	"Answer a copy of the receiver that contains no elements.	This method should be redefined in subclasses that add	instance variables, so that the state of those variables	is preserved"	^(self class new: aSize) maxSize: self maxSize.</body></methods><methods><class-id>BoundedIdentitySet class</class-id> <category>accessing</category><body package="Spy-Util">maxSize: integer	^ self new maxSize: integer; yourself</body></methods><methods><class-id>LatestPrerequisitePolicy</class-id> <category>As yet unclassified</category><body package="Spy-VWSpecific">	getPrereq: reqName from: pundleList version: reqVersion for: aPundle   | actionBlock |   actionBlock := CodeComponent asActionBlock: aPundle versionSelectionBlock.   ^actionBlock isNil       ifTrue: [super getPrereq: reqName from: pundleList version: reqVersion for: aPundle]       ifFalse:           [pundleList               detect: [:eachPundle | (self isSatisfiedBy: eachPundle) and:                   [actionBlock value: reqName value: eachPundle version value: reqVersion]]               ifNone: [super getPrereq: reqName from: pundleList version: reqVersion for: aPundle]]</body></methods><methods><class-id>TGFooSubClass2</class-id> <category>as yet unclassified</category><body package="Spy-ScenarioExample">evaluatingBlock: aBlock	aBlock value</body><body package="Spy-ScenarioExample">foo5	|aTGFooSubclass|	aTGFooSubclass := TGFooSubClass new.	^aTGFooSubclass foo5.</body><body package="Spy-ScenarioExample">indirectSideEffect: aTGFooSubClass	"This method does a side effect, but does not change the state of the receiver"	aTGFooSubClass incrCounter</body><body package="Spy-ScenarioExample">initialize	foo := TGFoo new</body></methods><methods><class-id>HapaoTestCoverageUITest</class-id> <category>instantiating</category><body package="Spy-HapaoTestCoverage-Test">testValidationCorrect	self assert: (ui validate: 'Roassal*') notEmpty</body><body package="Spy-HapaoTestCoverage-Test">testValidationIncorrect	self assert: (ui validate: ' not a Smalltalk expression') isEmpty</body></methods><methods><class-id>HapaoTestCoverageUITest</class-id> <category>running</category><body package="Spy-HapaoTestCoverage-Test">setUp	ui := HapaoTestCoverageUI new.</body></methods><methods><class-id>KaiProfilingTest</class-id> <category>hooks</category><body package="Spy-KaiProfiler-Test">profilerClass	^ KaiProfiler</body></methods><methods><class-id>KaiProfilingTest</class-id> <category>tests</category><body package="Spy-KaiProfiler-Test">testConnectedMethods	| profiler |	profiler := self runScenario.	self assert: (profiler connectedMethodsFor: (profiler &gt;&gt; #TGCar)) isEmpty not.	self assert: (profiler connectedMethodsFor: (profiler &gt;&gt; #TGLambCar)) isEmpty.</body><body package="Spy-KaiProfiler-Test">testInitialization	self assert: (KaiProfiler new iterations) = 1</body><body package="Spy-KaiProfiler-Test">testOutgoingCalls	| profiler |	profiler := self runScenario.	self assert: (profiler allMethods allSatisfy: [ :m | m outgoingCalls class == IdentitySet ])</body><body package="Spy-KaiProfiler-Test">testSnapshot	| v n snapshotN |	self assert: (4 snapshotAsInteger = 4 identityHash).		v := (4@5).	self assert: v snapshotAsInteger = (v identityHash bitXor: (4 snapshotAsInteger bitXor: 5 snapshotAsInteger)).	self assert: v snapshotAsInteger = (v identityHash bitXor: (4 identityHash bitXor: 5 identityHash)).	n := 1.	snapshotN := n snapshotAsInteger.	n := n + 1.	self deny: snapshotN = n snapshotAsInteger.</body><body package="Spy-KaiProfiler-Test">testSortingClasses	| profiler cls1 cls2 |	profiler := self runScenario.	cls1 := profiler &gt;&gt; #TGCar.	cls2 := profiler &gt;&gt; #TGDriver.	self assert: cls1 numberOfMethods &gt; cls2 numberOfMethods.		self assert: ((profiler sortClasses: (Array with: cls1 with: cls2)) = (Array with: cls1 with: cls2)).	self assert: ((profiler sortClasses: (Array with: cls2 with: cls1)) = (Array with: cls1 with: cls2)).</body></methods><methods><class-id>KaiProfilingTest</class-id> <category>side effect</category><body package="Spy-KaiProfiler-Test">testSideEffect	| profiler |	profiler := self runScenario.	self deny: ((profiler classAt: #TGFoo) localMethodAt: #constantMethod) performLocalSideEffect.	self deny: ((profiler classAt: #TGFoo) localMethodAt: #constantMethod2) performLocalSideEffect.	self assert: ((profiler classAt: #TGFoo) localMethodAt: #incrCounter) performLocalSideEffect.</body></methods><methods><class-id>KaiProfilingTest</class-id> <category>test visualization</category><body package="Spy-KaiProfiler-Test">testMainLegend	| view methodSpy |	methodSpy := KaiProfilingMethodSpy new.	view := Roassal.ROMondrianViewBuilder new.	self assert: view raw numberOfElements = 0.	methodSpy visualizeLegendOn: view.	self assert: view raw numberOfElements = 1.	self assert: view raw elements first numberOfElements = 1</body><body package="Spy-KaiProfiler-Test">testMethodNode	| view methods profiler |	view := Roassal.ROMondrianViewBuilder new.	methods := Array with: KaiProfilingMethodSpy new with: KaiProfilingMethodSpy new.	profiler := KaiProfiler new.	profiler methodNodeView: view for: methods</body><body package="Spy-KaiProfiler-Test">testRenderClassNode	| profiler class1 class2 class3 method1 method2 method3 view firstClassElement isolatedPart methodsElement |	"We create a small scenario"	profiler := KaiProfiler new.	class1 := KaiProfilingClassSpy new.	class2 := KaiProfilingClassSpy new.	class3 := KaiProfilingClassSpy new.		method1 := KaiProfilingMethodSpy new selector: #foo; yourself.	method2 := KaiProfilingMethodSpy new selector: #bar; yourself.	method3 := KaiProfilingMethodSpy new selector: #zork; yourself.	class1 addMethod: method1;  addMethod: method2.	class2 addMethod: method3.	view := Roassal.ROMondrianViewBuilder new.	profiler classNodeView: view for: (Array with: class1 with: class2 with: class3).	self assert: view raw numberOfElements = 3.		"------------"	"We check the layout of the first class"	firstClassElement := view raw elements first.	self assert: firstClassElement model == class1.	"Each class has the methods and a label"	self assert: firstClassElement numberOfElements = 2.	methodsElement := firstClassElement elements first.	"Each class has two parts: connected and disconnected (isolated) methods. However, since there is no connected methods, there is only one element"	isolatedPart := methodsElement elements first.	"We have the two methods in the isolated part"	self assert: isolatedPart numberOfElements = 2.</body><body package="Spy-KaiProfiler-Test">testRenderClassNodeWithMetaclassSpy	| class1 method1 method2 view |	class1 := KaiProfilingClassSpy new.		method1 := KaiProfilingMethodSpy new selector: #foo; yourself.	method2 := KaiProfilingMethodSpy new selector: #bar; yourself.	class1 addMethod: method1.	class1 metaclassSpy addMethod: method2.	self assert: class1 numberOfMethods = 1.	self assert: class1 metaclassSpy numberOfMethods = 1.	self assert: class1 numberOfAllMethods = 2.	view := Roassal.ROMondrianViewBuilder new.	"An error should be raised since the first argument must be methods from the same class"	self shouldnt: [ KaiProfiler new classNodeView: view for: (Array with: class1 ) ] raise: Error.</body><body package="Spy-KaiProfiler-Test">testRenderClassNodeWithProblem	| class1 class2 method1 method2 view |	class1 := KaiProfilingClassSpy new.	class2 := KaiProfilingClassSpy new.		method1 := KaiProfilingMethodSpy new selector: #foo; yourself.	method2 := KaiProfilingMethodSpy new selector: #bar; yourself.	class1 addMethod: method1.	class2 addMethod: method2.	view := Roassal.ROMondrianViewBuilder new.	"An error should be raised since the first argument must be methods from the same class"	self should: [ KaiProfiler new renderMethods: (Array with: method1 with: method2) on: view ] raise: Error.</body><body package="Spy-KaiProfiler-Test">testStateLegend	| view methodSpy |	methodSpy := KaiProfilingMethodSpy new.	view := Roassal.ROMondrianViewBuilder new.	self assert: view raw numberOfElements = 0.	methodSpy visualizeStateChangesLegendOn: view.	self assert: view raw numberOfElements = 1.	self assert: view raw elements first numberOfElements = 1</body></methods><methods><class-id>KaiProfilingClassSpy</class-id> <category>initialize-release</category><body package="Spy-KaiProfiler">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="Spy-KaiProfiler">maxComsumingMethod	|maxMethod maxExecutionTime|		maxExecutionTime := 0.	self allMethods do:[:m |		m executionTime &gt; maxExecutionTime ifTrue:[			maxMethod := m.			maxExecutionTime := m executionTime 		]	].	^maxMethod</body><body package="Spy-KaiProfiler">maxConsumingMethod	|maxMethod maxExecutionTime|		maxExecutionTime := 0.	self allMethods do:[:m |		m executionTime &gt; maxExecutionTime ifTrue:[			maxMethod := m.			maxExecutionTime := m executionTime 		]	].	^maxMethod</body><body package="Spy-KaiProfiler">maxConsumingTime	|maxMethod maxExecutionTime|		maxExecutionTime := 0.	self allMethods do:[:m |		m executionTime &gt; maxExecutionTime ifTrue:[			maxMethod := m.			maxExecutionTime := m executionTime 		]	].	^maxExecutionTime</body></methods><methods><class-id>KaiProfilingClassSpy</class-id> <category>visualization</category><body package="Spy-KaiProfiler">getEdges: connectedMethods	|edges|	edges := OrderedCollection new.	connectedMethods do: [:m |		m outgoingCalls do:[:om |			(om classSpy theNonMetaClass = m classSpy theNonMetaClass) ifTrue:[ edges add: (Array with: m with: om)].		].	].	^edges asSet</body><body package="Spy-KaiProfiler">visualizeOn: view	" *** This method was defined by Spy as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>KaiProfilingClassSpy class</class-id> <category>hooks</category><body package="Spy-KaiProfiler">spyClassForMethod	^ KaiProfilingMethodSpy</body></methods><methods><class-id>HapaoTest</class-id> <category>callgraph</category><body package="Spy-HapaoTestCoverage-Test">testCallGraph1	| profiler m |	profiler := self runScenario.	m := profiler &gt;&gt; #TGCar &gt;&gt; #giveMeANewCarForDriver:.	self assert: (m incomingCalls includes: (profiler &gt;&gt; #'TGCar class' &gt;&gt; #giveMeANewCarForDriver:)).	self assert: (m outgoingCalls includes: (profiler &gt;&gt; #'TGMaleDriver' &gt;&gt; #isMale)).</body><body package="Spy-HapaoTestCoverage-Test">testCallGraph2	| profiler m incoming outgoing|	profiler := self runScenario.	m := profiler &gt;&gt; #TGCar &gt;&gt; #giveMeANewCarForDriver:.	incoming := IdentitySet new.	incoming add: (profiler &gt;&gt; #'TGCar class' &gt;&gt; #giveMeANewCarForDriver:).	outgoing := IdentitySet new.	outgoing  add: (profiler &gt;&gt; #'TGMaleDriver' &gt;&gt; #isMale).	self assert: (m incomingCalls = incoming).	self assert: (m outgoingCalls = outgoing).</body><body package="Spy-HapaoTestCoverage-Test">testCompleteCallFlow	|profiler testfoo foo1 foo2 foo1CCFlow|		profiler := self runScenario.	testfoo := profiler &gt;&gt; #TGFooTest &gt;&gt; #testFoo.	foo1 := profiler &gt;&gt; #TGFoo &gt;&gt; #foo1.	foo2 := profiler &gt;&gt; #TGFoo &gt;&gt; #foo2.		"foo1CCFlow contains the collection of all incoming methods"	foo1CCFlow := foo1 completeCallFlow.		self assert: (foo1CCFlow includes: foo2).	self assert: (foo1CCFlow includes: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo3)).	self assert: (foo1CCFlow includes: ( profiler &gt;&gt; #TGFoo &gt;&gt; #fooWithreturn )).	self assert: (foo1CCFlow includes: ( profiler &gt;&gt; #TGFoo &gt;&gt; #fooTripleTrueFalse) ).	self assert: (foo1CCFlow includes: ( profiler &gt;&gt; #TGFoo &gt;&gt; #fooDoubleTrueFalse) ).	self assert: (foo1CCFlow size = 6)</body><body package="Spy-HapaoTestCoverage-Test">testGetTestClasses	| profiler n |	profiler := self runScenario.	self assert: (profiler getSortedTestClasses allSatisfy: #isTestClass).	n := profiler getSortedTestClasses first numberOfMethods.	profiler getSortedTestClasses do: [ :c | 		self assert: c numberOfMethods &lt;= n ].</body><body package="Spy-HapaoTestCoverage-Test">testIsAbstract	| profiler m n|	profiler := self runScenario.	m := profiler &gt;&gt; #TGFoo &gt;&gt; #foo4.	n := profiler &gt;&gt; #TGFooSubClass &gt;&gt; #foo4.	self assert: m isAbstract.	self assert: (n isAbstract not).</body><body package="Spy-HapaoTestCoverage-Test">testIsPublic	| profiler m n|	profiler := self runScenario.	m := profiler &gt;&gt; #TGFooSubClass &gt;&gt; #foo5.	n := profiler &gt;&gt; #TGFooSubClass &gt;&gt; #foo6.	self assert: m isPublic.	self assert: (n isPublic not).</body><body package="Spy-HapaoTestCoverage-Test">testIsTest	| profiler m n|	profiler := self runScenario.	m := profiler &gt;&gt; #TGCar &gt;&gt; #giveMeANewCarForDriver:.	n := profiler &gt;&gt; #TGCarExampleTest &gt;&gt; #testBasic.	self assert: (m isTest not).	self assert: n isTest.</body><body package="Spy-HapaoTestCoverage-Test">testIsTestClass	| profiler m n s|	profiler := self runScenario.	m := profiler &gt;&gt; #TGCar.	n := profiler &gt;&gt; #TGCarExampleTest.	s := profiler &gt;&gt;  #TGCarExampleSubClassTest.	self deny: m isTestClass.	self assert: n isTestClass.	self assert: s isTestClass.</body><body package="Spy-HapaoTestCoverage-Test">testLongestChainOfSelf	| profiler |		profiler := self runScenario.		self assert: ((profiler &gt;&gt; #TGFoo &gt;&gt; #foo) longestChainOfSelfOutgoingMethods = 3).	self assert: ((profiler &gt;&gt; #TGFoo &gt;&gt; #foo2) longestChainOfSelfOutgoingMethods = 3).	self assert: (((profiler &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #dummy) 		longestChainOfSelfOutgoingMethods = 2).</body><body package="Spy-HapaoTestCoverage-Test">testStaticCallGraph1	| profiler m class |		profiler := self runScenario.	m := profiler &gt;&gt; #TGFoo &gt;&gt; #foo2.	self assert: (m staticOutgoingCallsToSelf includesAllOf: #(#foo1 #foo3)).	class := m classSpy.		self assert: (m staticSelfOutgoingMethods					 includesAllOf: (Array with:profiler &gt;&gt; #TGFoo &gt;&gt; #foo1 with: profiler &gt;&gt; #TGFoo &gt;&gt; #foo3)).		self assert: (m hasSelfOutgoingCalls).	self deny: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo) hasSelfIncomingCalls.	self assert: (m staticSelfOutgoingMethods size = 2).	self assert: m numberOfSelfOutgoingMethods = 2.		"No method is self-calling foo2"	self assert: (m staticSelfIncomingMethods isEmpty).		"foo1 self-calls foo3"	self assert: ((profiler &gt;&gt; #TGFoo &gt;&gt; #foo3) staticSelfIncomingMethods includes: m ).	self assert: (m staticSelfOutgoingMethods includes: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo3) ).	self assert: (m withStaticSelfIncomingMethods asArray = (Array with: m)).		self assert: ((profiler &gt;&gt; #TGFoo &gt;&gt; #foo1) staticSelfIncomingMethods includes: m).	self assert: ((profiler &gt;&gt; #TGFoo &gt;&gt; #foo1) 					withStaticSelfIncomingMethods includesAllOf: (Array with: m  with:(profiler &gt;&gt; #TGFoo &gt;&gt; #foo1))).		self deny: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo1) isIsolated.	self deny: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo2) isIsolated.	self deny: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo3) isIsolated.	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo7) isIsolated</body><body package="Spy-HapaoTestCoverage-Test">testStaticCallGraph2	| profiler m class |		profiler := self runScenario.	m := profiler &gt;&gt; #TGFooSubClass &gt;&gt; #foo4.	self assert: (m staticOutgoingCallsToSelf includesAllOf: #(#foo1)).	class := m classSpy.				"#foo1 is defined in the superclass of TGFooSubClass"	self deny: (m staticSelfOutgoingMethods includes: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo1)).		self assert: (m staticSelfOutgoingMethods size = 0).	self assert: m hasNoSelfIncomingCalls.	self assert: m hasNoSelfOutgoingCalls.	self deny: m isStaticallyCalling</body></methods><methods><class-id>HapaoTest</class-id> <category>patterns</category><body package="Spy-HapaoTestCoverage-Test">testIsIsolatedAndRecursiveMethod	| profiler |	profiler := self runScenario.	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #recursiveMethod) staticSelfOutgoingMethods isEmpty.	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #recursiveMethod) staticSelfIncomingMethods isEmpty.	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #recursiveMethod) isIsolated.</body><body package="Spy-HapaoTestCoverage-Test">testPattern	| profiler |	profiler := self runScenario.		"PATTERN"	"#dummy is uncovered and it calls an uncovered method. isUncoveredCaller says true for coverred called method (cf P1 in the paper)"	self deny: ((profiler &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #dummy) isUncoveredCaller.	"getCarName calls carName. getCarname is uncovered but carName is covered"	self assert: (profiler &gt;&gt; #TGCar &gt;&gt; #getCarName) isUncoveredCaller.	"PATTERN"	"hasACoveredCallerAndIsUncovered (cf Pattern)"	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #anotherMethod) hasACoveredCallerAndIsUncovered.	self deny: ((profiler &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #named:) hasACoveredCallerAndIsUncovered.	"PATTERN"	"doNotCallAnotherMethod never invokes #anotherMethod, even if it has a self-call""	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #doNotCallAnotherMethod) hasUncoveredBranch.	self deny: (profiler &gt;&gt; #TGCar &gt;&gt; #getCarName) hasUncoveredBranch.	self deny: ((profiler &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #dummy) hasUncoveredBranch."	self assert: ((profiler &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #dummy) isRootOfUncoveredChain.	self deny: (profiler &gt;&gt; #TGCar &gt;&gt; #getCarName) isRootOfUncoveredChain.	self deny: (profiler &gt;&gt; #TGFoo &gt;&gt; #foo) isRootOfUncoveredChain.	"PATTERN"	"Uncovered isolated"	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; #counter) isUncoveredIsolated.	self deny: (profiler &gt;&gt; #TGCar &gt;&gt; #getCarName) isUncoveredIsolated.	self deny: (profiler &gt;&gt; #TGCar &gt;&gt; #getCarName) isUncoveredIsolated.	self deny: ((profiler &gt;&gt; #TGDriver) metaclassSpy &gt;&gt; #dummy) isUncoveredIsolated.	self assert: (profiler &gt;&gt; #TGDriver &gt;&gt; #isFemale) isUncoveredIsolated."profiler visualize.self halt."</body></methods><methods><class-id>HapaoTest</class-id> <category>testing</category><body package="Spy-HapaoTestCoverage-Test">expectedFailures	^ #()</body><body package="Spy-HapaoTestCoverage-Test">testBasic	| profiler testBasicMethod |	profiler := self runScenario.	profiler checkInvariant.	self assert: (profiler isKindOf: self profilerClass).	self deny: (profiler &gt;&gt; #TGPorsheCar) isPartiallyCovered.	self assert: (profiler &gt;&gt; #TGCar) isPartiallyCovered.	self deny: (profiler &gt;&gt; #TGCar) isFullyCovered.		"self deny: (profiler &gt;&gt; #TGFoo &gt;&gt; ('notCalled', 'Method') asSymbol) isUsed.	self assert: (profiler &gt;&gt; #TGFoo &gt;&gt; ('notCalled', 'Method') asSymbol) notUsed"</body><body package="Spy-HapaoTestCoverage-Test">testBasic2	| profiler addWheelMethod |	profiler := self runScenario.	profiler checkInvariant.	self assert: (profiler isKindOf: self profilerClass).	self deny: (profiler &gt;&gt; #TGPorsheCar) isPartiallyCovered.	self assert: (profiler &gt;&gt; #TGCar) isPartiallyCovered.	self deny: (profiler &gt;&gt; #TGCar) isFullyCovered.	addWheelMethod := profiler &gt;&gt; #TGCar &gt;&gt; #addWheel:.	self assert: addWheelMethod numberOfExecutions &gt; 0.		self assert: addWheelMethod numberOfDifferentReceivers = 5.	self assert: addWheelMethod cyclomaticComplexity = 2.</body><body package="Spy-HapaoTestCoverage-Test">testPrint	| profiler testBasicMethod |	profiler := self runScenario.		"(0.0) is the coverage"	self assert: (profiler &gt;&gt; #TGPorsheCar) printString =  '&lt;#TGPorsheCar&gt;(0.0)'.	self assert: (profiler &gt;&gt; #TGPorsheCar &gt;&gt; #brand) printString = '&lt;TGPorsheCar&gt;&gt;brand&gt;'.</body></methods><methods><class-id>HapaoTest</class-id> <category>utility</category><body package="Spy-HapaoTestCoverage-Test">foo1	^ 10</body><body package="Spy-HapaoTestCoverage-Test">foo2	true ifTrue: [self foo1].</body><body package="Spy-HapaoTestCoverage-Test">foo3	true ifTrue: [].	true ifTrue: [].	true ifTrue: [].</body></methods><methods><class-id>HapaoTest</class-id> <category>cyclomatic</category><body package="Spy-HapaoTestCoverage-Test">testCyclomaticComplexity	| ast cal |	ast := Refactory.Browser.RBParser parseMethod: 'foo1 ^ 10'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 1.		ast := Refactory.Browser.RBParser parseMethod: 'foo1 true ifTrue: []'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 2.		ast := Refactory.Browser.RBParser parseMethod: 'foo1 true ifTrue: []. true ifTrue: []'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 3.		ast := Refactory.Browser.RBParser parseMethod:  'column: aBlockOrAPart	mainPaneLine 		ifNotNilDo: [:aPaneRow |			aPaneRow column: aBlockOrAPart 			]  		ifNil: [			mainPaneLine := PaneRow fromPane: self.			mainPaneLine column: aBlockOrAPart 			].'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 2.</body><body package="Spy-HapaoTestCoverage-Test">testCyclomaticComplexityWithError	| profile method |	profile := self runScenario.	method := profile &gt;&gt; #TGSportCar &gt;&gt; #strangeMethod.	self assert:  method notNil.	"self assert: (method cyclomaticComplexity = 0)."	self assert: (method staticSelfOutgoingMethods isEmpty).	"Since I have no outgoing branches, I have no uncovered branche"	self deny: (method hasUncoveredBranch).		self assert: (method isRoot).	self assert: (method hasNoSelfOutgoingCalls).	self assert: (method numberOfSelfOutgoingMethods = 0)</body><body package="Spy-HapaoTestCoverage-Test">testNumberOfStaticCalls	| ast cal |	ast := Refactory.Browser.RBParser parseMethod: 'foo1 ^ 10'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 1.		ast := Refactory.Browser.RBParser parseMethod: 'foo1 true ifTrue: []'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 2.		ast := Refactory.Browser.RBParser parseMethod: 'foo1 true ifTrue: []. true ifTrue: []'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 3.		ast := Refactory.Browser.RBParser parseMethod:  'column: aBlockOrAPart	mainPaneLine 		ifNotNilDo: [:aPaneRow |			aPaneRow column: aBlockOrAPart 			]  		ifNil: [			mainPaneLine := PaneRow fromPane: self.			mainPaneLine column: aBlockOrAPart 			].'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal cyclomaticNumber = 2.</body><body package="Spy-HapaoTestCoverage-Test">testNumberOfStaticCallsToSelf	|ast cal |		ast := Refactory.Browser.RBParser parseMethod: 'foo1 ^ 10'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal numberOfStaticCallsToSelf = 0.		ast := Refactory.Browser.RBParser parseMethod: 'foo1 true ifTrue: [self foo2]'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal numberOfStaticCallsToSelf = 1.	self assert: (cal staticOutgoingCallsToSelf includesAllOf: #(#foo2)).			ast := Refactory.Browser.RBParser parseMethod: 'foo1 true ifTrue: [self foo2]. true ifTrue: [self foo3]'.	cal := HapaoMetricCalculator new.	ast acceptVisitor: cal.	self assert: cal numberOfStaticCallsToSelf = 2.	self assert: (cal staticOutgoingCallsToSelf includesAllOf: #(#foo2 #foo3)).</body></methods><methods><class-id>HapaoTest</class-id> <category>hooks</category><body package="Spy-HapaoTestCoverage-Test">profilerClass	^ HapaoTestCoverage</body></methods><methods><class-id>HapaoTest</class-id> <category>opening</category><body package="Spy-HapaoTestCoverage-Test">testOpening	| testCoverage window |	testCoverage := HapaoTestCoverage new.	self assert: (testCoverage packagesToTest isEmpty).	testCoverage packagesToTest: #('AST').	self assert: (testCoverage packagesToTest = #('AST') ).	window := testCoverage open.	window closeRequest.</body></methods><methods><class-id>HapaoTest</class-id> <category>find element</category><body package="Spy-HapaoTestCoverage-Test">testFindClass	| profiler view |	profiler := self runScenario.	view := Roassal.ROMondrianViewBuilder new.	profiler visualizeOn: view.	self shouldnt: [ profiler findElementStack: view stack element: view raw elements first ] raise: Error.	self shouldnt: [ profiler findElementStack: view stack element: view raw elements first ] raise: Error.</body></methods><methods><class-id>SpyTest</class-id> <category>test basic</category><body package="Spy-Test">testBasic2	| cls profiler |	cls := Core.Object subclass: #TMPClass					instanceVariableNames: ''					classVariableNames: ''					poolDictionaries: ''.	"cls compileSilently: 'foo ^ 2 * self bar'.	cls compileSilently: 'bar ^ 10'."	cls compile: 'foo ^ 2 * self bar'.	cls compile: 'bar ^ 10'.	profiler := Profiler profile: [cls new foo] forClassNamed: #TMPClass.	self assert: (profiler allClasses size = 1).	self assert: (profiler allMethods size = 2).		"Since we are compiling silently, we cannot retrieve the source code"	"self assert: (profiler allMethods first sourceCode isNil).""	self assert: (profiler allMethods first sourceCode =  'foo ^ 2 * self bar')."	self assert: (profiler &gt;&gt; #TMPClass &gt;&gt; #foo) numberOfCalls = 2.	self assert: (profiler &gt;&gt; #TMPClass &gt;&gt; #bar) numberOfCalls = 0.	cls removeFromSystem</body><body package="Spy-Test">testBasic3	| cls profiler |	cls := Core.Object subclass: #TMPClass					instanceVariableNames: ''					classVariableNames: ''					poolDictionaries: ''.	"cls compileSilently: 'foo ^ 2 * self bar'.	cls compileSilently: 'bar ^ 10'."	cls compile: 'foo ^ 2 * self bar'.	cls compile: 'bar ^ 10'.	profiler := Profiler profile: [cls new foo] forClassNamed: #TMPClass.	self deny: ((profiler &gt;&gt; #TMPClass) originalClass &gt;&gt; #foo) class == SpyWrapper .	cls removeFromSystem</body><body package="Spy-Test">testCheckingClassPresence	| profile |	profile := self runScenario.	self assert: (profile includesClassNamed: #TGFoo).	self assert: (profile includesClassNamed: 'TGFoo').	self deny: (profile includesClassNamed: #TGFooZORK).</body><body package="Spy-Test">testCounter2	| cls counterMethodSpy counterClassSpy counterPackageSpy counterProfiler cm |	counterMethodSpy := MethodSpy 		subclass: #SpyCounterMethodTMP		instanceVariableNames: 'count'		classVariableNames: ''		poolDictionaries: ''.	counterMethodSpy compile: 'initialize  super initialize. count := 0'.	counterMethodSpy compile: 'count  ^ count'.	counterMethodSpy compile: 'beforeRun: methodName with: listOfArguments in: receiver 		count := count + 1'.		counterClassSpy := ClassSpy 		subclass: #SpyCounterClassTMP		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''.	counterClassSpy class compile: 'spyClassForMethod ^ SpyCounterMethodTMP'.	counterPackageSpy := PackageSpy 		subclass: #SpyCounterPackageTMP		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''.	counterPackageSpy class compile: 'spyClassForClass ^ SpyCounterClassTMP'.				cls := Object subclass: #TMPClass		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''.	cls compile: 'foo &lt;annotation: 1 annotation: 2&gt; ^ 2 * self bar'.	cls compile: 'bar ^ 10'.	"self assert: (cls &gt;&gt; #foo) pragmas size = 1.	annotation := (cls &gt;&gt; #foo) pragmas first.	self assert: (annotation keyword ==  #annotation:annotation:).	self assert: (annotation arguments = (Array with: 1 with: 2)).	self assert: ((cls &gt;&gt; #foo) pragmaAt: #annotation:annotation:) == annotation."	counterProfiler := Profiler 		subclass: #SpyCounterProfilerTMP		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''.	counterProfiler class compile: 'spyClassForPackage ^ SpyCounterPackageTMP'.		cm := cls &gt;&gt; #foo.	counterProfiler installOnClass: cls.	"we check the annotation"	"self deny: (cls &gt;&gt; #foo) pragmas isEmpty.	annotation := (cls &gt;&gt; #foo) pragmas first.	self assert: (annotation keyword ==  #annotation:annotation:).	self assert: (annotation arguments = (Array with: 1 with: 2)).	self assert: ((cls &gt;&gt; #foo) pragmaAt: #annotation:annotation:) == annotation."	cls new foo.		self assert: (cm == (cls &gt;&gt; #foo) originalMethod).	self assert: cls new foo = 20.	"total := cls spys 		inject: 0		into: [ :sum :el | sum + el count ]."	"self assert: total = 4.	cls removeSpys."	cls removeFromSystem.	counterProfiler removeFromSystem.	counterMethodSpy removeFromSystem.	counterClassSpy removeFromSystem.	counterPackageSpy removeFromSystem.</body><body package="Spy-Test">testCounter3	"this test is unfortunately complex. But it captures a great deal of MethodSpy's functionalities"		| cls counterClassSpy counterPackageSpy counterProfiler classSpy methodSpy instrumentedMethod |	counterClassSpy := ClassSpy 		subclass: #SpyCounterClassTMP		instanceVariableNames: 'messageCounting'		classVariableNames: '' poolDictionaries: ''.	counterClassSpy compile: 'initialize 									super initialize. 									messageCounting := 0'.	counterClassSpy compile: 'messageCounting ^ messageCounting'.	counterClassSpy compile: 'beforeEachExecution: messageName On: aReceiver with: arguments     	messageCounting := messageCounting + 1'.	counterPackageSpy := PackageSpy 		subclass: #SpyCounterPackageTMP		instanceVariableNames: ''		classVariableNames: '' poolDictionaries: ''.	counterPackageSpy class compile: 'spyClassForClass ^ SpyCounterClassTMP'.				cls := Object subclass: #TMPClass 	instanceVariableNames: ''		classVariableNames: '' poolDictionaries: ''.	cls compile: 'foo ^ 2 * self bar'.	cls compile: 'bar ^ 10'.		counterProfiler := Smalltalk.Profiler 		subclass: #SpyCounterProfilerTMP instanceVariableNames: 'messageCounting'		classVariableNames: '' poolDictionaries: ''.	counterProfiler class compile: 'spyClassForPackage ^ SpyCounterPackageTMP'.	cls new foo.	self assert:( (cls &gt;&gt; #foo) class == CompiledMethod).	(counterProfiler installOnClass: cls) install.	self assert: (cls &gt;&gt; #foo) class == SpyWrapper.	"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="	cls new foo.	"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="	self assert: (cls &gt;&gt; #foo) class ==  SpyWrapper.	self assert: cls new foo = 20.	classSpy := cls methodDictionary values first methodSpy classSpy.	self assert: classSpy notNil.	self assert: classSpy  messageCounting = 4.		"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="	"installing and uninstalling individual methods"	"ORIGINAL:	instrumentedMethod := cls &gt;&gt; #foo.	methodSpy := instrumentedMethod methodSpy.	self assert: (methodSpy instrumentedMethod == instrumentedMethod).	methodSpy uninstall.	self assert: (methodSpy instrumentedMethod == instrumentedMethod)."	"RAROOO"	instrumentedMethod := cls &gt;&gt; #foo.	methodSpy := instrumentedMethod methodSpy.	self assert: (methodSpy spyWrapper == instrumentedMethod).	methodSpy uninstall.	self assert: (methodSpy spyWrapper == instrumentedMethod).	"self assert: (cls &gt;&gt; #foo) isSpy."	self deny: (cls &gt;&gt; #foo) class == SpyWrapper.	methodSpy install.	self assert: (cls &gt;&gt; #foo) class == SpyWrapper.		self assert: cls new foo = 20.	methodSpy uninstall.	self deny: (cls &gt;&gt; #foo) class == SpyWrapper.		cls compile: 'foo ^ 3 * self bar'.	self assert: cls new foo = 30.	methodSpy install.	self assert: cls new foo = 30.	methodSpy uninstall.	self assert: (methodSpy isMethodExisting). 		cls removeSelector: #foo.	self shouldnt: [ methodSpy install ] raise: Error.	self deny: (methodSpy isMethodExisting). 	"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="	self assert: (classSpy isClassPresent).	cls removeFromSystem.	self shouldnt: [ methodSpy install ] raise: Error.	self deny: (classSpy isClassPresent)."	cls removeSpys."		counterProfiler removeFromSystem.	counterClassSpy removeFromSystem.	counterPackageSpy removeFromSystem.</body><body package="Spy-Test">testInstall	| profile |	profile := self runScenario.	(profile allMethods) do:[:m |		self deny: ((m classSpy originalClass) &gt;&gt; m selector) class== SpyWrapper.	].</body><body package="Spy-Test">testIsDangerous	|tmp|	tmp := Array with: Object with: Array with: Process with: ProcessorScheduler "with: ByteSymbol".	self assert: (tmp allSatisfy: [:cls | Profiler isDangerous: cls]).	self assert: (Profiler isNotDangerous: TGCar).	"self assert: (Profiler isDangerous: ConfigurationOfSpy)."</body><body package="Spy-Test">testIsSubclassOf	| profile |	profile := self runScenario.	self assert: ((profile &gt;&gt; #TGPorsheCar) isSubclassOf: (profile &gt;&gt; #TGPorsheCar)).	self assert: ((profile &gt;&gt; #TGPorsheCar) isSubclassOf: (profile &gt;&gt; #TGCar)).	self deny: ((profile &gt;&gt; #TGDriver) isSubclassOf: (profile &gt;&gt; #TGCar)).		self assert: ((profile &gt;&gt; #TGDriver) superclass isNil).	profile uninstall.</body><body package="Spy-Test">testOutgoingAndIncomingCalls	self assert: MethodSpy new outgoingCalls class == OrderedCollection.	self assert: MethodSpy new incomingCalls class == OrderedCollection.</body><body package="Spy-Test">testOverridingMethods	| profile overridingMethods|	profile := self runScenario.	overridingMethods := (profile &gt;&gt; #TGCar &gt;&gt; #addWheel:) overridingMethods.	self assert: overridingMethods asArray = (Array with: profile &gt;&gt; #TGSportCar &gt;&gt; #addWheel:).		self assert: (profile &gt;&gt; #TGCar &gt;&gt; #giveMeANewCarForDriver:) overridingMethods isEmpty.	profile uninstall.</body><body package="Spy-Test">testSourceCode 	| profile |	profile := self runScenario.	self assert: ((profile &gt;&gt; #TGCar) &gt;&gt; #addWheel:) sourceCode asString ='addWheel: aWheel	wheels ifNil: [ wheels := OrderedCollection new ].	wheels add: aWheel'</body><body package="Spy-Test">testTheClass	| profile |	profile := self runScenario.	self assert: (profile &gt;&gt; #TGDriver) theClass == TGDriver.	self assert: (profile &gt;&gt; #TGDriver) metaclassSpy theClass == TGDriver class.</body><body package="Spy-Test">testUnitTestsResult	| profile |	profile := self runScenario.	self assert: profile hasUnitTestResult.	self assert: profile unitTestResult hasPassed.	self deny: profile unitTestResult hasFailures.	self deny: profile unitTestResult hasErrors.	profile uninstall.</body><body package="Spy-Test">testWrapper	| cls wrapper |	cls := Core.Object subclass: #TMPClass					instanceVariableNames: ''					classVariableNames: ''					poolDictionaries: ''.	cls compile: 'foo ^ 2 * self bar'.	cls compile: 'bar ^ self baz'.	cls compile: 'baz  ^10'."	self halt."	cls methodDictionary do:[:m |		wrapper := SpyWrapper on: m selector inClass: cls.		wrapper install.	].	cls methodDictionary do:[:m |		self assert: m class == SpyWrapper.	].	cls rebindAllMethods.	cls methodDictionary do:[:m |		self deny: m class == SpyWrapper.	].		cls removeFromSystem</body></methods><methods><class-id>SpyTest</class-id> <category>test accessing classes</category><body package="Spy-Test">testUtilMethod	| profiler classes |	profiler := self profilerClass new.	classes := profiler classesInCategory: 'Spy-ScenarioExample'.	self assert: (classes includesAll: (Array with: TGPorsheCar with: TGMaleDriver))</body></methods><methods><class-id>SpyTest</class-id> <category>test categories</category><body package="Spy-Test">testCategories	| profile |	profile := self profilerClass runTestsForClassCategoriesMatching: 'Spy-ScenarioExample*'.	self assert: profile numberOfPackages = 2.	self assert: ((profile packages collect: #packageName) includesAll: #('Spy-ScenarioExample2' 'Spy-ScenarioExample')).	self assert: (profile getPackageNamed: 'Spy-ScenarioExample2') classes size = 1.</body></methods><methods><class-id>SpyTest</class-id> <category>test packages</category><body package="Spy-Test">testPackages	| profiler tg |	tg := TGTeacher new.	profiler := self profilerClass new.	profiler profile: [tg foo] inPackagesNames: (Array with: 'Spy-ScenarioExample' with:'Spy-ScenarioExample2').	self assert: profiler numberOfPackages = 2.	self assert: ((profiler packages collect: #packageName) includesAll: #('Spy-ScenarioExample2' 'Spy-ScenarioExample')).	self assert: (profiler getPackageNamed: 'Spy-ScenarioExample2') classes size = 2.</body><body package="Spy-Test">testPackagesInScenario	| profile |	profile := self profilerClass runTestsForClassPackagesMatching: 'Spy-ScenarioExample*'.	self assert: profile numberOfPackages = 2.	self assert: ((profile packages collect: #packageName) includesAll: #('Spy-ScenarioExample2' 'Spy-ScenarioExample')).	self assert: (profile getPackageNamed: 'Spy-ScenarioExample2') classes size = 2.</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>enumerating</category><body package="Spy-Util">sum	^ self inject: 0 into: [:sum :each | sum  + each]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>testing</category><body package="Spy-Core">isTestCaseClass	^ self selectedClass isTestCase.</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>Spy</category><body package="Spy-Core">snapshotAsInteger 	| value |	value := 0.	self do: [:v | value := value bitXor: v snapshotAsInteger ].	^ value</body></methods><methods><class-id>Tools.MessageTally</class-id> <category>enumerating</category><body package="Spy-Core">addLocalUsageIntoWithReceivers: summarySet	| t s |	t := tally.	s := samples.	receivers do:		[:mTally |		t := t - mTally tally.		s := s - mTally samples.		mTally addLocalUsageIntoWithReceivers: summarySet].	(s = 0 and: [t = 0])		ifFalse: [(self findMatchForWithReceivers: self inSet: summarySet)					bump: t samples: s]</body><body package="Spy-Core">addUsageIntoWithReceivers: summarySet	| t s tmp t2|	t := tally.	s := samples.	receivers do:		[:mTally |		"t := t - mTally tally.		s := s - mTally samples."		mTally addUsageIntoWithReceivers: summarySet].	(s = 0 and: [t = 0])		ifFalse: [	tmp := (self findMatchForWithReceivers: self inSet: summarySet).				(tmp isParentRelated: self) 					ifFalse:[tmp tally: t; samples: s; parent: self parent] 					ifTrue:[						tmp bump: t samples: s.].						t2 := tmp receivers.						receivers keysAndValuesDo: 							[:t3 :t4 | 								(t2 at: t3 ifAbsent: [nil]) == nil								ifTrue:[tmp receivers at: t3 put: t4 " (t4 copy parent: t4 parent)"].						].						"tmp receivers addAll: receivers."]</body></methods><methods><class-id>Tools.MessageTally</class-id> <category>private</category><body package="Spy-Core">findMatchForWithReceivers: aTally inSet: aSet	| index |	index := aSet			find: aTally			ifAbsent: [nil].	^index == nil		ifTrue:			[| aMessageTally |			aSet add:				(aMessageTally := aTally class class: aTally methodClass method: aTally method).			aMessageTally parent: aTally parent.			aMessageTally name: aTally name.			aMessageTally receivers: aTally receivers copy.			aMessageTally]		ifFalse:	[aSet basicAt: index]</body><body package="Spy-Core">isParentRelated: aTally	aTally parent = nil ifTrue:[^false].	^(aTally parent = self or:[self isParentRelated: aTally parent])</body></methods><methods><class-id>Core.Collection</class-id> <category>testing</category><body package="Spy-Core">includesAllOf: aCollection 	"Answer whether all the elements of aCollection are in the receiver."	aCollection do: [:elem | (self includes: elem) ifFalse: [^ false]].	^ true</body></methods><methods><class-id>Core.Behavior</class-id> <category>accessing method dictionary</category><body package="Spy-Core">&gt;&gt; selector	^ methodDict at:selector</body></methods><methods><class-id>Core.Object</class-id> <category>Spy</category><body package="Spy-Core">snapshotAsInteger	| index value |	index := self class instSize.	value := self identityHash.	[index &gt; 0]		whileTrue: 			[ value := value bitXor: (self instVarAt: index) identityHash.			  index := index - 1].	^ value</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Spy-Core">hapaoIcon	^ Tools.ToolbarIconLibrary visualFor: #hapaoSmall</body><body package="Spy-Core">kaiIcon	^ Tools.ToolbarIconLibrary visualFor: #kaiSmall</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Spy-Core">hapaoIcon	^ Tools.ToolbarIconLibrary visualFor: #hapaoSmall</body><body package="Spy-Core">kaiIcon	^Tools.ToolbarIconLibrary visualFor: #kaiSmall</body></methods><methods><class-id>TGPorsheCar</class-id> <category>accessing</category><body package="Spy-ScenarioExample">brand	&lt;annotation: 1 annotation: 2&gt;	^ 'Brand 1'</body></methods><methods><class-id>HapaoTestCoverageUI class</class-id> <category>interface specs</category><body package="Spy-HapaoTestCoverage">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Hapao - Test Coverage Tool' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 474 197 966 682 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 29 43 204 228 ) 					#name: #ListAllPackages 					#flags: 15 					#model: #listAllPackages 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 223 82 273 117 ) 					#name: #ActionButton1 					#model: #addPackage 					#helpText: 'Mark package to be analyzed' 					#label: #rightArrow 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 223 117 272 153 ) 					#name: #ActionButton2 					#model: #removePackage 					#helpText: 'Do not analyze the selected package' 					#label: #leftArrow 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 295 40.0 470 225.0 ) 					#name: #ListSelectedPackages 					#flags: 15 					#model: #listSelectedPackages 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 31 19 ) 					#name: #Label1 					#label: 'Packages available' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 293 17 ) 					#name: #Label2 					#label: 'Packages to analyse' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 29 298 ) 					#name: #Label3 					#label: 'Select items with a regular expression (e.g., Roassal*)' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 32 320.5 239 348.5 ) 					#name: #InputField1 					#model: #conditionInput 					#helpText: 'e.g., Roassal*' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 243 323 324 346 ) 					#name: #ActionButton3 					#model: #validate 					#label: 'Validate' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 30 397 182 420 ) 					#name: #ActionButton4 					#model: #hapaoProfile 					#label: 'view coverage' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 29 6 ) 					#name: #Label6 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 31 356 ) 					#name: #Label7 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Core.Point} 395 371 ) 					#name: #Label8 					#label: #objectProfileIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Core.Point} 301 368 ) 					#name: #Label9 					#label: #hapaoIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 212 396 266 419 ) 					#name: #HelpButton 					#model: #helpButton 					#label: 'Help' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 26 233 ) 					#name: #Label10 					#label: 'Please select: - Packages containing the unit tests to run' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 113 249 ) 					#name: #Label11 					#label: '- Packages containing the classes to profile' ) ) ) )</body></methods><methods><class-id>SpyIcons class</class-id> <category>resources</category><body package="Spy-VWSpecific">hapaoIcon	"UIMaskEditor new openOnClass: self andSelector: #hapaoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 100@100 depth: 10 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7355 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7323 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7291 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7291 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6167 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6906 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5814 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7291 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6199 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7644 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6906 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7580 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7387 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7323 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6938 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7355 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7323 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6938 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6938 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7355 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6584 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7355 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6231 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7355 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7387 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6231 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7387 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6970 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6617 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7612 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7323 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7355 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6970 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7387 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7355 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6231 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7387 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7355 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7355 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7677 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5878 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7355 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5910 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5910 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7484 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 8030 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6295 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7002 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6649 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7612 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 7966 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7420 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6295 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7837 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6649 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6617 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7387 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7805 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7002 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5942 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7420 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7805 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6295 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7034 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7002 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7516 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6681 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8030 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7452 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7452 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7420 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7098 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7034 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7034 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7034 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 8062 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8030 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7452 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7452 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7452 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7837 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7034 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7452 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7452 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7420 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7837 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7741 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5942 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7580 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7066 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5974 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7612 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7516 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6681 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6681 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7452 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7066 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6360 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7516 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7516 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7484 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7098 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5974 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7484 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7130 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7484 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6360 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7869 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7869 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7098 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6006 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7098 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6745 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6745 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7869 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7773 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7098 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6745 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6392 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7869 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7130 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7130 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6713 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6745 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7805 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7869 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7130 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6038 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7901 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7163 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 6038 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6070 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7548 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7195 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7163 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5717 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8094 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6456 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6809 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6809 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7195 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7709 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6809 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6456 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7901 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7195 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6103 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7741 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7869 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7227 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7227 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 6103 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7934 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7934 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7934 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7934 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7227 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7259 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7227 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7259 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6874 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7291 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7291 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6135 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7741 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7709 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7259 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7259 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7355 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6552 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7966 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7291 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7291 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7291 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7291 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 5621)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ I_@,LBD C&amp;@*XA20EP@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@THAP EB@U@A20J&amp;@NXBD KC@%&lt;B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@RDA&amp;0F0@U@A" GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@X(AT@F0@Y,AHPJ.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ I0@!$A_PGK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20GK@\,A20E=@!$B\@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B"@FK@Z@A9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@F @X,B"@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8@EPJ.@P0BS@F @^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA,@G$@_PA=@G4@_PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@F @$0AC@J.@ATB+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@\HAZ G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@F0@_PBA FK@K @J0@E@(PBG@HJ@ (BG@J&gt;@GPA=@G$@[DA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@E*@\HB+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@(8A(@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA9@G$@^PA(@EQ@@TBB C5@P4AH D"@U(AV EZ@U(AV EZ@U(AH C5@%H@&ampgtlt;@W A^@F(AH0FD@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* E1@L A=PG5@ZHB+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ JI@[LA=PG5@_TA=PG5@_TA=PG5@ T@Y@E[@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@SP@Z BO@H&lt;@#0BO@H&lt;@#0BO@H&lt;@#0BO@H&lt;AC J(@(X@PP@N@*PB%0JW@)\B%0A!@_8B,@AL@H@AI@BN@XHA%@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AV0A$@ TA,0JI@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@"LA=PG5@_TA=PG5@_TA=PG5@ T@M0E[@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AM@A+@F,@Z0A+@F,@Z0A+@F,@Z0A+@MHA# BV@*0@M @6@CX@M @6@CX@M @6@CX@M @6@@LB$ IP@F AM FU@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@U,@M0HE@"LB+ J.@*8B+ J.@*8B+ J.@*8B+ J.@SDA#@G&amp;@^XA9 G&amp;@^XA9 G&amp;@^X@R@E[@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* D%@C&lt;@S0AO@D&lt;@S0AO@D&lt;@S0@1@KD@H J&lt;@CX@M @6@CX@M @6@+0@6PD5@O4@6P@6@CX@M @6@CXB/@IG@YLA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* E[@D A(0D1@*8B+ J.@*8B+ J.@*8B+ J.@*8A''@G&amp;@^XA9 G&amp;@^XA9 G&amp;@^X@!@E[@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@RT@O0A^@E8@W A^@E8@W AO@MHB]@@6@CX@M @6@CX@M @6@D\B @C$@F(@#0EH@V$@M @6@CX@M @6@&amp;0A!PFU@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AV0BD@Y0B+ J.@*8B+ J.@*8B+ J.@*8B+ GJ@^XA9 G&amp;@^XA9 G&amp;@ZHAK@EI@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@&gt;@@_@@(@B @J@@(@B @J@G4@$ @C@CX@M @6@CX@M @T@"D@G0@J@@(@B @J@@(@IPJR@CX@M @6@CXB  I$@YTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@T$AK@J.@*8B+ J.@*8B+ J.@*8B+ I_@V0A3PGM@\4A3PGM@\4A30GW@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* D7@@,@LP@1@CD@LP@1@,TB$@JR@CX@M @6@CX@M @6@%,@$@KE@CD@LP@1@CD@LPB^@#@@@0@6@CX@M JB@!TA%PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* E0@%DB+ J.@*8B+ J.@*8B+ J.@,PA.PG&amp;@^XA9 G&amplt;@]@A4@GP@]@A4@G7@#XA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* E2@*@@B @J@@(@B @J@@(@B @J@@(@B @_@E@@_P@&gt;@@(@B @J@@(@B @J@@(@B @J@@(B.@J&lt;@CX@M J%@ 0A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@$TB+ J.@*8B+ J.@*8B+ J.@*\A30GO@\&lt;A30F9@PXAV0F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@XHB^0I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@@_@DH@C0JB@L0A%PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@&gt;PJ.@*8B+ J.@*8B+ J.@*8BA0G7@_\A=0G7@  BX@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* I1@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB(PJ!@''0@B @_@#&lt;B% FC@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* CQ@*8B+ J.@*8B+ J.@*8B+ EO@]DA4PGQ@]DA)@EI@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F+@''DB_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I;@Z(A 0F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@TDA:@G(@^ A. @8@XPA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z4BV@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@&amp;XB10F=@YPA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8AT G(@^ A:@G8@"$A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A+PH:@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@#,BN0H;@@0A*0F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ EA@^ A:@G(@_ ARPF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F-@&amp;TBVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BO@C:@XLA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@UHA&gt;@G8@_ @; E[@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z,B_PH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4BKPH-@"4A*0F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8AP0G)@^$A4 @Y@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A*0HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XBE HV@!XA&lt;0AQ@YTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ EC@^$A:PG)@)LA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F+@*HA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@^@A  FT@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@TLA:PG)@_$BQ F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@YTB2@G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA&lt;0G3@_LA1@@ @YTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8AKPGR@]HA: F&gtlt;@90DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@QPAE@DT@O&lt;BZ@E!@QDA%PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@N&lt;A) F&amp;@[,AX@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AX C(@QTAEPDU@QTAEPDU@QTAEPDU@QTAEPDU@QTAEPDU@QTAEPDU@QTAEPDU@QTAEPDU@N$@:PC)@P@AEPDU@QT@:PE:@P8@[@F+@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8AB@FM@X4A/@E @Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F?@JL@1PCE@LT@1PCE@LT@1PCE@LT@1PCE@LT@1PCE@LT@1PCE@LT@1PCE@LT@1PCE@\T@_PE3@WLBKPCW@LT@1PHV@\@B] FI@[4A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ CI@V4A[PFP@V@A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@[4@6@C)@N$@:PC)@N$@:PC)@N$@:PC)@N$@:PC)@N$@:PC)@N$@:PC)@N$@:PB3@!X@Z CT@PLBL JZ@@@AE C$@TX@J@JR@G A/PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@L$A_ E&gt;@Y@AX@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A*0E;@IP@%@BT@IP@%@BT@IP@%@BT@IP@%@BT@IP@%@BT@IP@%@BT@IP@%@BT@JPB_@H2@CX@M @6@ PB\ @!@\\@@0@6@CXBXPF=@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8@60E&gt;@W8A)0E @Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@!\@,0B3@KL@,0B3@KL@,0B3@KL@,0B3@KL@,0B3@KL@,0B3@KL@,0B3@KLAY J1@CX@M @6@L\A^ F/@)(@M @6@CX@M I!@[4A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ C[@YDA$PF''@V@A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@YTBR A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X B3@CHA;0ID@HH@D F4@&amp;0@M @6@CX@M @6@&amp;DA/PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@M,A_0E?@Z\AX@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A%@J4@EH@\PA1@GD@\PA1@GD@\PA1@GD@\PA1@GD@\PA1@GD@\PA1@GD@\PA1@FL@%PDA@N(@-@AD@&amp;0@M @6@CX@M @6@CXBM0F=@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8@2 E?@W&lt;A$ E @Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@OPB*P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AH@0 JB@@L@M @6@CX@M A.@_,A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ CJ@W&lt;A_0FR@V@A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A*0G!@+$@I @&amp;@BX@I @&amp;@BX@I @&amp;@BX@I @&amp;@BX@I @&amp;@BX@I @&amp;@BX@I @&amp;@BX@I @&amp;@BX@I @&amp;@CPA60J&lt;@)H@M @6@JTA! F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@L(A[0E/@YHAX@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FT@[4B" J7@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@J9@@DAU@D5@(HBW A&gt;@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8@.PE/@V&lt;A @E @Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FD@[&lt;BV H=@''TB&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B&amp;@JX@) B#0JX@) B&amp;@JQ@PD@F JB@]&lt;A%@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ B''@R8AK ES@V@A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@VLBP@I?@''&lt;B_0I?@''&lt;B_0I?@''&lt;B_0I?@''&lt;B_0I?@''&lt;B_0I?@''&lt;B_0I?@''&lt;BPP@.@],A+@F,@Z0BR@E^@(H@ PFU@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@I$AQ@ED@UXAX@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@&gt;0I@@&amp;(BZ I*@&amp;(BZ I*@&amp;(BZ I*@&amp;(BZ I*@&amp;(BZ I*@&amp;(BZ I*@&amp;(BZ IA@) B*PJ)@*$@QPB_@&amplt;@"HA]@G-@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@GXAG@D\@R&lt;A]PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@YPB@0H[@#DBLPH1@#DBLPH1@#DBLPH1@#DBLPH1@#DBLPH1@#DBLPH1@#DBLPH1@#DBLPH1@#DBLPH1@#D@C @P@_,A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8@] D\@Q0AK0E5@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A%PF.@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0BR@W0BJ@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ A6@Q0AG@D/@WTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@V\A90G''@^\A90G''@^\A90G''@^\A90G''@^\A90G''@^\A90G''@^\A90G''@^\A90G''@^\A90G''@^\A90G''@K@B+PHM@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@NHB+ J.@*8B+ J.@*8B+ J.@GXABPDI@R&lt;A]PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z,A@ GN@\8A3 GN@\8A3 GN@\8A3 GN@\8A3 GN@\8A3 GN@\8A3 GN@\8A3 GN@\8A3 GN@\8A3 GN@\8BC H3@S$A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@8 J.@*8B+ J.@*8B+ J.@*8@YPC0@O@AGPE5@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A%PDW@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- GN@"\B#@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* C"@*8B+ J.@*8B+ J.@*8B+ AV@M0@7@C1@WTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@\XAQ0EU@UTAUPEU@UTAUPEU@UTAUPEU@UTAUPEU@UTAUPEU@UTAUPEU@UTAUPEU@UTAUPEU@UTAUPEU@X&ltlt;AB0DK@P,AB0DK@P,AB0DK@P,AB0DK@P,AB0DK@P,AB0DK@P,AB0DK@M&ltamp;0B[@I,@&amp;0B[@I,@&amp;0BJ@M&lt;A8 @C@"\A7@G2@F(B* B\@F\@" B[@I,@&amp;0B[@I,@&amp;0B[@I,@&amp;0BJ@F\@Y0IN@U(AI0FU@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@L&lt;B+ J.@*8B+ J.@*8B+ J.@#PB/0AX@GLA]PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F=@N0@N BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@Y0CN@K@B&amp;0@6@(HAS @0@VX@B0@@@[P@3 B,@C(@R0@:@D,@R0C @&amp;(B_@D&lt;@WLAH E0@XLA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@5 J.@*8B+ J.@*8B+ J.@*8B+ A&amp;@FX@ZPE5@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F=@LX@K A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0J2@V$B/@@6@CXB$ I7@ &lt;@^0DJ@+(@I AE@PD@@@EW@H,@N0CU@NDA^PFD@XLA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AR B&gt;@*8B+ J.@*8B+ J.@*8B+ J.@JH@R AY@WTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F=@LX@F0AZ@E(@V AZ@E(@V AZ@E(@V AZ@E(@V AZ@E(@V AZ@C0@Y0DR@@L@@0@6@CX@M @6@@LB/@JR@)HB  JR@+0@M B7@KHA/0E1@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* A0@*8B+ J.@*8B+ J.@*8B+ J.@*8@4@@F@E$A]PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@T0@B@@=@C4@OP@=@C4@OP@=@C4@OP@=@C4@OP@=@C4@OP@=@C4@OP@=@C4@V0@#@+0@@0@6@CX@M @6@CX@M @6@CX@M @6@E0A%PF*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@R$B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@H0@VPFG@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FC@LLB[PKB@,HB0 KB@,HB0 KB@,HB0 KB@,HB0 KB@,HB0 KB@,HB0 KB@,HB0 KB@A0@K KK@),@M @6@CX@M @6@CX@M @6@CXBT0F+@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@T(@/ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8A00AN@Y A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@YTBR0J]@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$AD J&lt;@CX@M @6@CX@M @6@CX@M E&lt;@[8A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(@30J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@@\A?@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@W@BS0I.@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@&amp;$@@0@6@CX@M @6@CX@M @6@)HAO F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AR B&gt;@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8A&ltlt;BJ@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@G@B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8AH@CD@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@WDA?PBS@!@B^PI9@''$B^PI9@''$B^PI9@''$B^PI9@''$B^PI9@''$B^PI9@''$B^PIV@(\@? GH@)HB/@JR@IXAJ@F^@XLA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@LPAH@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@R@@1@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@YT@9PEX@",B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0IV@&amp;&lt;B^@H_@&amp;HB!0I/@E4A&gt;0F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@LPAH@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ D @LPA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FC@^4BK0J_@$$B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@&amp;&lt;B[0I/@$$BJ0HQ@ @B@@HS@A8AVPIC@+4@Q DS@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@LPAH@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8AH@CD@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* E1@^8@I0G0@%XBN@H+@ DA&lt;@G0@\DBNPBJ@](B P@5@EPAZ@I3@J@AX0G.@"(A&gt;0GY@Z,A%PF*@YPA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@LPAH@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@R@@1@F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* FU@JD@D0A2@\$@DPC%@Y(A?PHT@^4A/0F+@YTA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@LPAH@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ D @G@A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A 0FU@XLA* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@G@AH@J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ A&lt;@T(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* EJ@G0B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8@/ CO@T(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AR CO@K8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8@/ CO@T(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@T(@30B&gt;@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8@/ D)@G@AR F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(A* F*@Z(AR A0@R$@/ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ J.@*8B+ B&gt;@MX@30C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@NH@8 C"@L&lt;@5 B&gtb'))</body><body package="Spy-VWSpecific">hapaoIcon25	"UIMaskEditor new openOnClass: self andSelector: #hapaoIcon25"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 23@23 depth: 9 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6103 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6874 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7227 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7484 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7484 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6135 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6392 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7259 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7709 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 5589 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6038 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7227 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7227 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6617 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5974 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7066 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7259 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6584 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7355 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6713 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6038 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7420 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7163 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7323 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6520 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6713 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7323 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6360 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6520 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7291 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6841 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6327 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6681 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7130 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7580 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7355 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7612 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7612 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7130 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7291 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7612 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7291 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7034 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7387 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5846 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6745 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7130 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6552 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7291 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7098 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6231 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6199 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7355 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7323 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7387 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7612 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7130 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6231 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7323 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6713 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6295 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6231 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6295 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7323 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7323 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7002 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7291 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6360 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6263 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6263 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6360 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6263 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6295 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7195 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6263 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6327 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7355 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7355 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7355 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6970 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6970 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6295 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7163 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6263 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7387 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7291 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7709 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6424 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7355 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7387 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7034 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5749 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6617 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6681 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6681 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7420 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7420 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6327 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7516 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7259 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7484 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7195 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7387 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7098 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7098 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7484 6263)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@FT@W@A%@D8@P@A%@KD@7PC]@M4@7PC]@M4@7PC]@M4@2@BU@E0@MPA%@FT@YP@@@E0@YPAO@E0@= DJ@K @A DM@MP@00C-@@\A@PDA@PD@;@@9@ED@?@@Y@FT@W@@@@FT@S0A@@J4@[0B.@MT@UPC+@H&lt;@^0BO@FL@; CV@MT@5PC&amp;@K$@&gt;@BM@A$@YP@@@D8@W@BZ@G@@U AG@AH@U@C)@NH@8 C?@L4ABPA^@DD@PPA&lt;@P,@HP@T@@&lt;@MP@@@D@@=PA1@HH@[PAB@C\@=0BV@NL@@0@B@CL@,@CN@EH@Y0AB@C\@G @.@KT@YP@@@FTAC@CD@@T@P AR@E&lt;@8PCO@BP@R@CW@GX@B@@2@F @X@A''@F\@T AS@G4@/0@@@KD@9PB[@C @Y0A @E&lt;@4@@P@E,@I B&amp;@I\@&lt; @&lt;@G8@Y0A&gt;@G8@X@AR@MH@0@@@@L$A@ CS@F@@_ A''@E4@4PCJ@O4@J@C=@M8AA0@)@EH@Z@A)@G8@_ A)@G(@)0@@@L$@''@B+@EH@_ A&gt;@FD@,0A8@I4@''PB]@I4@''PB%@NP@T A&gt;@F\@_ A)@G(@)0@@@L,@[ A*@G8@X@A''@F @&amp;@@Z@D4@SPAM@D4@SP@''@G$@ZPA''@F@@_ A)@G(@)0@@@L,@QPA @F @_ A(@F\@*PC''@K4@/PB=@L\@O DF@JL@W0A @F\@_ A)@G(@)0@@@L,@N A @G8@_ A''@G8@-@BI@G\@]0A7@K4@!0BS@HX@0PAC@G8@_ A)@G(@)0@@@L,@N0A*@G8@_ A&gt;@G8@Q@DH@A @C @N@@8@&lt;0C:@BH@Y A"@G8@_ A)@G(@)0@@@L,@H@A*@G8@_ A&gt;@G8@ZPC*@O,@%@BT@IP@%@@M@JD@A@BP@FD@Z@A)@G(@)0@@@L,@DPA?@F$@_ A&gt;@EH@_ BN@JH@VPAY@E$@VPA3@D,@6 B6@FD@ZPA)@G(@)0@@@K8A@@A?@G8@_ A''@G8@Y0@6@GP@C@DD@A\@E0@W@M @" BQ@F@@Y0A)@G(@)0@@@N@@D0A]@G8@_ A&gt;@EH@ @B$@PT@6PA5@M$@6PB;@J@@60B,@FD@ZPA)@F,@)0@@@H0@ PA,@F @_ A''@F@@G@@A@E @L@@#@D$@U0AJ@BTAB@A)@F\@Z@AR@I$@3@@@@E0@* A$@G8@ZPAR@G8@7@CF@@(@LP@1@GH@@@C1@@$@-0AF@F@@_ A!@A&lt;@*@@@@D@@, @+@F$@_ A&gt;@EH@T B$@PL@&gt;P@K@@,@1PBE@AX@T@A&gt;@F$@T @8@A4@W@@@@E0@O0@*@B0@XPAR@G8@P0B7@B4@7@B&lt;@OP@OPC\@M0@$ BP@FD@N@B^@E0@W@@@@FT@W@@4@N @;0BD@I&lt;@^ A:@I&lt;@0 C&gt;@B&lt;@''0C0@AT@0 BY@A&lt;@GPA\@E0@YP@@@E0@YPA%@D@@YPB/@K(@)0B''@J\@. C@@L@@)0B''@J\@)0CL@J @W@A\@FT@W@@@'))</body><body package="Spy-VWSpecific">hapaoIconGray	"UIMaskEditor new openOnClass: self andSelector: #hapaoIconGray"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 100@100 depth: 10 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7355 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7323 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7291 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7291 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6167 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6906 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5814 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7291 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6199 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7644 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6906 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7580 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7387 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6841 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7323 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6938 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7355 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7323 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6938 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6938 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7355 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6584 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7355 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6231 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7355 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7387 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6231 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7387 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6970 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6617 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7612 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7323 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7355 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6970 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7387 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7355 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6231 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7387 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7355 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7355 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5878 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7355 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5910 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5910 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7484 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6295 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7002 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6649 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7612 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7420 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6295 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6649 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6617 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7387 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7002 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5942 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7130 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7420 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6295 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7034 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7002 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7516 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6681 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7452 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7452 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7420 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7098 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7034 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7034 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7034 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7516 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7452 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7452 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7452 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7034 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7612 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7452 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7452 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7420 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5942 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7580 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7066 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5974 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7612 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7516 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6681 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6681 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7452 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7066 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6360 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7516 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7516 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7484 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7098 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5974 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7195 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7484 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7130 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7484 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6360 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7098 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6006 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7098 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6745 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6745 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7098 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6745 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6392 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7130 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7130 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6713 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6745 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7130 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6038 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7163 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 6038 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6070 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7548 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7195 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7163 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5717 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6456 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6809 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6809 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7195 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7709 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6809 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6456 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7195 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6103 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7741 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7227 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7227 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 6103 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7227 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7259 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7227 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6809 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7259 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6874 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7291 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7291 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6135 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7709 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7259 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7259 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7355 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6552 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7291 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7291 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7291 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7291 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 5621)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedStringlt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@W8AP0F"@!XBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PHV@ XA\@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@F&lt;@[0A/@E0@ XBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE E?@YHA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@FR@W&lt;BE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@!XBNPFR@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA( GT@^LA80G#@^LA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@FR@#$BE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@!XAWPGT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@F"@^LA=@E?@KX@J@@D@&amp;,BBPG8@_ BBPJ!@GLA80GT@ZLA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@E]@!XA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@''LA$ GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA5@GT@]PA$ ED@@PA&gtamp;XA/PF=@[4A/PF=@[4A/PF=@[4A/PF=@[4A/PF=@YLA5PE&gt;@D\B[@FH@T8AJ@C1@P\AA0DG@P\AA0DG@P\AA0DG@P\AA0DG@P\AA0DG@P\AA0DG@P\AA0DG@P\@70EO@W\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A"PFI@VPAY@EN@T8A"@I,@D\A_ GU@YLA/PF=@[4A/PF=@[4BY F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@!XA$0F=@[4A/PF=@[4A/PF=@[4A/PF=@[4A/PF=@[8@X0G9@T8AY@F\@Y0A^@DH@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@K4A"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AY@EN@_$@X0F&gt;@[4A/PF=@[4A/PFS@!XA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@!XAW GU@]TA5PGU@]TA5PGU@]TA5PGU@]TA/ GU@CTAY@E$@Y0A''@F\@Y0A''@FJ@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@+@C2@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E$@VP@MPGU@[8A5PGU@]TAW HV@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBN GU@]TA5PGU@]TA5PGU@]TA5PGU@YLA9@A4@X AY@F\@Y0A''@F\@Y0A''@F\@X @''@B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@I0AT FH@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E$@X @]@G$@YLA5PGU@#(A-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE FS@[4A/PF=@[4A/PF=@[4A/PF=@ZPA_0G9@VPA''@F\@Y0A''@F\@Y0A''@F\@Y0AT0B-@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@/ CO@X(A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E$@_$A_0F$@[4A$0HV@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PFT@^PA9@G$@^PA9@G$@^PA9@G$@^P@1PE$@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@D)@F$@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPBN@K8@3 CN@L8@3 CN@L8@/ BN@H8@WPA]@F$AF E8@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E$@LTA9@G$@YPA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PHV@ZTA9@G$@^PA9@G$@^PA9@G$@_L@X0EN@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@R$@ZPBN@H8@# BN@H8@# BN@H8@# BN@H8AA0JM@&amp;4@P@@M@((B_PI=@''4B_PA @^4B%@AK@G&ltlt;@H@J @CP@M@@4@CP@M@@4@*@@5@D*@O\@5@@4@CP@M@@4@CPB(@H4@X\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@EN@D\A%PHV@[TA-PF5@[TA-PF5@[TA-PF5@[TBE GV@]XA5 GV@]XA5 GV@]X@ 0EN@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Q0@OPA]@E4@WPA]@E4@WPAN@L8BWP@4@CP@M@@4@CP@M@@4@DXBZ@C_@F$@# D;@U0@M@@4@CP@M@@4@%XA^PFI@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AS BC@!XA-PF5@[TA-PF5@[TA-PF5@[TA-PF;@]XA5 GV@]XA5 GV@YPAH D&lt;@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@&lt;0@]@@$@BP@I@@$@BP@I@G0@$P@C@CP@M@@4@CP@M@@S@ 8@GP@I@@$@BP@I@@$@H0I7@CP@M@@4@CPBZ IM@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@S0AH F5@[TA-PF5@[TA-PF5@[TA-PF5@U&lt;A/ F&gt;@[8A/ F&gt;@[8A0@GH@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@D,@@(@K0@/@B&lt;@K0@/@*XB]PI7@CP@M@@4@CP@M@@4@$X@#0J&amp;@B&lt;@K0@/@B&lt;@K0B]@!8@@0@4@CP@M@I*@ HA"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E#@C8A-PF5@[TA-PF5@[TA-PF5@!XA*0GV@]XA5 GV@]XA9PJB@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@R4B%0@I@@$@BP@I@@$@GPHG@ TBRP@C@CP@M@@4@''\@P J&amp;@@$@BP@I@@$@BP@I@*X@_0@C@CP@M@@4@$$@$@FI@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@VPBE F5@[TA-PF5@[TA-PF5@[TBE G%@^TA9PG%@^TA40EC@S0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AT JF@@$@BP@I@@$@BP@I@*\@S0IN@D0@=0JZ@SL@LPA^@@$@BP@I@@$@BP@I@@$@BPAO@''4@@0@4@CPBU FK@X A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A^@IG@[TA-PF5@[TA-PF5@[TA-PHV@\DA0PGA@\DA0PG&amp;@"LA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E%@(X@BP@I@@$@BP@I@@$@BP@I@@$@BP@]@D&lt;@_@@&lt;@@$@BP@I@@$@BP@I@@$@BP@I@@$B''@J @CP@M@JK@_(A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FI@#HA-PF5@[TA-PF5@[TA-PF5@(0A0@G@@\@A0@F+@P@AS F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@WXBX0I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@@]@DD@C I*@L$A"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@=@F5@[TA-PF5@[TA-PF5@[TA=PG&amp;@^XA9 G&amp;@_XBR F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@IZ@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@&amp;P@BP@]@"0B_@E7@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@CM@[TA-PF5@[TA-PF5@[TA-PEB@\HA0 GB@\HA% D&lt;@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F]@%(BY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I#@Y0A]0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@SPA6PGY@]$A+@@6@W A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y&lt;BP0I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@&amp;PBY@I$@$&lt;B*@F/@X A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[TAQPGY@]$A6PG''@!\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''0H''@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@" BJ@H(@@,A''PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PD4@]$A6PGY@^\AO@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F_@$8BQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBJPC5@W\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@TTA90G''@^\@:@EN@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y4BYPH[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,BF0H[@!,A''PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[TAM GZ@](A00@W@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''PHC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LB@0HC@ LA8 AP@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PD6@](A6 GZ@''$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F]@( A8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@]@A] FH@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@SXA6 GZ@^ BL0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@X$B*PG"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA8 G"@^HA-@@^@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[TAH0GC@\LA60F0@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A"PJ*@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@[XA- F6@($A"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PDA@Y\A%0GD@T8A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E8@@0A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;A#0FO@X&lt;BA@F]@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@PDA%0FW@\PAU@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0B*0E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@E&lt;@W0A_@G!@Y&lt;A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[TAD0FW@Y\A1@ET@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@@?@S8AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@EX@U AV@E-@ODABPF]@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PDB@Y A&amp;@GE@UPA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@K0@8PDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@P4ACPDM@O$BTPEU@P(A"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@N$A&amp;@FX@Z4AU@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AU C"@P8AC DN@P8AC DN@P8AC DN@P8AC DN@P8AC DN@P8AC DN@P8AC DN@P8AC DN@NL@80C#@O(AC DN@P8@80E-@P\@Z0F]@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[TA@ FA@XDA+ ET@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F1@JD@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@[X@_@E&amp;@VXBF0CR@LH@0 HC@[HBW0E=@Z&lt;A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PCF@V@AX@FD@UPA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Z&lt;@40C#@NL@80C#@NL@80C#@NL@80C#@NL@80C#@NL@80C#@NL@80C#@NL@80B1@ L@ZPCP@O4BH@J@@@@AC0C_@S$@I I7@G\A+0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@LXA\PE1@XPAU@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''PE.@IL@$0BS@IL@$0BS@IL@$0BS@IL@$0BS@IL@$0BS@IL@$0BS@IL@$0BS@JHBY@H @CP@M@@4@_HBV0@_@[\@@0@4@CPBR0F/@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@5 E1@WDA&amp;PET@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FI@ P@,PB1@KD@,PB1@KD@,PB1@KD@,PB1@KD@,PB1@KD@,PB1@KD@,PB1@KDAVPJU@CP@M@@4@LPA[PF!@(@@M@@4@CP@M@IK@Z&lt;A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PCV@XTA!PFY@UPA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@X$BM0A!@FD@XPA!@FD@XPA!@FD@XPA!@FD@XPA!@FD@XPA!@FD@XPA!@FD@XPB1@C@A70H1@HD@DPF&amp;@%X@M@@4@CP@M@@4@$,A+0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@MXA\ E2@Y$AU@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A"@JX@ED@\@A0@G@@\@A0@G@@\@A0@G@@\@A0@G@@\@A0@G@@\@A0@G@@\@A0@FH@%@C;@NP@, AC@%X@M@@4@CP@M@@4@CPBI@F/@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@10E2@WHA! ET@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@N&lt;B# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AD@/0I*@@L@M@@4@CP@M@A-@^(A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PCG@WHA\ FF@UPA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''PGQ@)4@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@BP@I@@$@CHA3@J @''\@M@@4@JLA^ F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@L\AX E"@XXAU@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FH@Z&lt;B[0J[@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ J]@@DAQ0D*@&amp;(BRPA=@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@-0E"@VHA\0ET@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E8@[DBQPH*@%8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B_ I&gt;@''8B]@I&gt;@''8B_ I6@O,@F@I*@\&lt;A"@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PB%@RPAI@EF@UPA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@U\BKPI''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BK @+@\0A'' F^@Y8BMPEQ@&amp;(@ @FI@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@I AM0D7@T$AU@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@= H-@%PBU@IT@%PBU@IT@%PBU@IT@%PBU@IT@%PBU@IT@%PBU@IT@%PBU@H.@''8B# JN@(8@Q@B^@%TBZ F''@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@!@DT@QPAN@ET@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@A&gt;@!DBR@IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@H.@%8A10JP@*PA''PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PBD@QTAEPD%@UPA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@)$BDPH.@"8BK H.@"8BK H.@"8BK H.@"8BK H.@"8BK H.@"8BK H.@"8BK H.@"8BK H.@"8BD I$@ &lt;AY0G]@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@GTAEPDU@RTAZ@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@X A&lt;PHH@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;BG0H_@!&lt;@CP@O@^(A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@]PDU@QTAIPE(@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A"PF @  BB@HH@  BB@HH@  BB@HH@  BB@HH@  BB@HH@  BB@HH@  BB@HH@  BB@HH@  BB@HH@  BB@BQ@V&lt;BEPF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PA5@QTAEPD%@V A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FI@U(A50GW@]\A50GW@]\A50GW@]\A50GW@]\A50GW@]\A50GW@]\A50GW@]\A50GW@]\A50GW@]\A50GW@J8B$ G;@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@GTA@0DC@RTAZ@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y4@?@F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A/0F?@[&lt;A?@H!@R8A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@Y@C*@N(AE E(@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A"PDP@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F(@Z A*@F?@!PB\PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PAU@M\@50C+@V A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FI@[ AN EH@T AR@EH@T AR@EH@T AR@EH@T AR@EH@T AR@EH@T AR@EH@T AR@EH@T AR@EH@T AR@EH@XLAW@AR@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@D @50CW@M AZ@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AX0F)@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPA]@E4@WPAN G.@Z(A]0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@M0CH@L @20E(@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E7@!0AN E!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPD:@V4@6PFI@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-P@,@K @.@B9@V A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@X$ADPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDAXPE!@VDBD0A_@Y4A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@C\@.@B8@K$AZ@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A+0I?@Q\AE0DW@Q\AI CZ@PTAE0DW@Q\AE0DW@Q\AE0DW@Q\AE0DW@Q\AE0DW@Q\AE0DW@Q\AE0DW@Q\AE0CZ@F0A] FH@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[T@. B&amp;@JX@.PE(@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@G:@I$AAPDE@PT@.0JV@C0@9PC-@M(AAPDE@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPDE@M(ALPE)@W A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PGF@HT@!PBV@V A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F/@R@@2 DE@PTAAPC.@PTAT@C1@E4A6@CJ@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPDE@PTAAPG7@V(A^@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@M4A-PF5@[TA-PF5@[TA-PF5@BH@!PBE@HHAZ@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F/@QH@! B''@J\@)0B''@J\@)0DX@KP@!0GI@DH@] BZ@J\@)0B''@J\@)0B''@J\@)0B''@J\@)0B''@J\@)0B''@J\@)0B''@H @+PE+@W\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@7PF5@[TA-PF5@[TA-PF5@[TBE BE@HT@  E(@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F/@O8@^@B(@J @*@B(@J @*@B(@H$AAPE@@@H@*PA.@KLAE0A9@H$@*@B(@J @*@B(@J @*@B(@J @*@B(@J @*@B(@J @^P@I@Q4A"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@C]@[TA-PF5@[TA-PF5@[TA-PHV@EX@!PBB@V A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F/@NX@Y BZ@I(@&amp; BZ@I(@&amp; BZ@I(@&amp; BI@M(A4 @C@!PA3PG!@F$B#0B[@FX@"PBZ@I(@&amp; BZ@I(@&amp; BZ@I(@&amp; BI@FX@Y H;@T4AG FI@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@L0A-PF5@[TA-PF5@[TA-PF5@B4B( AW@GHAZ@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F/@NX@N@BI@H$@"PBI@H$@"PBI@H$@"PBI@H$@Y CJ@J8B P@4@&amp;(APP@.@U$@B @@@ZX@2 B*@C @R @8@D(@R C[@%PBY@D/@VXAFPE#@W\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@;@F5@[TA-PF5@[TA-PF5@[TA-PA%@FT@Z@E(@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F/@LL@J0A&amp;@FX@Y A&amp;@FX@Y A&amp;@FX@Y A&amp;@FX@Y A&amplt;@A0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@V @!@*@@@0@4@CP@M@@4@CP@M@@4@CP@M@@4@E,A"PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@'' A-PF5@[TA-PF5@[TA-PF5@[TA-PF5@H,@V@E;@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E7@L@BU0J%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@A(@J0J,@(D@M@@4@CP@M@@4@CP@M@@4@CPBO0F]@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@S4BE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE AM@X0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@X$BN@JC@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ AB0J @CP@M@@4@CP@M@@4@CP@M@E/@[@A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0@3@F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@@XA:0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FI@VLBO@IX@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@%H@@0@4@CP@M@@4@CP@M@@4@''\AL F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AOPHV@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE HJ@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A]0F]@*4@#@JD@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)X@J0CD@CP@M@@4@CP@M@@4@CP@@0FM@]4A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@CL@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@*LA]0F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A]0G*@O&lt;BP@JV@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)XB% JV@)XB% I:@"T@E@@4@CP@M@@4@CP@M@@4@ATA&amp; F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@D=@!XA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE EN@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A"PD0@]0BPPI;@'',B^0I;@'',B^0I;@'',B^0I;@'',B^0I;@'',B^0I;@'',B^0I;@'',BXPGN@B\@M@@4@CP@M@@4@CPB(@H/@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@G,A-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@F&lt;A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@W\A2 I2@A,BVPI.@&amp;8B[ I.@&amp;8B[ I.@&amp;8B[ I.@&amp;8B[ I.@&amp;8B[ I.@&amp;8B[ I.@&amp;DBB0C''@*@@M@@4@CP@M@@4@YDBEPF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@F&lt;A-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE CA@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@VPA;@BR@_8BX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX IB@&amp;8@&gt;@F9@''\B(@I7@ITAG0FP@W\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@LDBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@!X@0PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@X$@8@EK@!$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIB@%$BXPHL@$0B[ IY@E0A: F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@LDBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PHV@LDA''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E7@]4BGPJE@#XBVPIY@%$BVPIY@%$BVPIY@%$BVPIY@%$BVPIY@#XBFPG?@^&lt;A;0H@@A0AS@H0@)&lt;@QPDL@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@LDBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE CA@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@E$@]8@IPG @$HBIPHY@_@A8@G @[LBI BI@\,BZP@3@ELAV0I\@I&lt;AU0G^@! A: GJ@Y4A"PF\@X A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@LDBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@!X@0PF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@FI@J@@D A1@[(@D@C @X8A;@HA@]4A,PF]@X$A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@LDBE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PHV@F&lt;A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A]0FI@W\A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@F&lt;BE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PA;@S4A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@D=@G,A-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE CL@S4A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AOPCL@!XA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE CL@S4A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@S4@3@HV@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TBE I8@F&lt;AOPF\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0A''@F\@Y0AOPA/@'' BE F5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PHV@N0@3@C]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@L0@;@HV@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[TA-PF5@[Tb'))</body><body package="Spy-VWSpecific">hapaoMediumIcon	"UIMaskEditor new openOnClass: self andSelector: #hapaoMediumIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@75 depth: 10 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6167 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7259 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7580 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7291 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7291 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6874 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5846 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5846 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5814 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6874 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7291 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7741 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7773 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7612 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6906 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6552 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7291 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7355 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7291 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6199 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7741 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5846 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7548 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6552 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 5524 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7291 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6906 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5846 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7323 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6199 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6938 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5878 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7773 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7773 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5878 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7387 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7580 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6970 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5878 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7387 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7612 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6231 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6970 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5878 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7355 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7387 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7773 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6970 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6970 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7580 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6584 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7355 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7355 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6263 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7805 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6970 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7002 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6970 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7612 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6617 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7998 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7387 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7355 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7355 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7709 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7002 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7420 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7998 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7420 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7420 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7355 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6970 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7387 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7387 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7002 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7452 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 7966 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 8030 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7387 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7420 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7387 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7387 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7420 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7452 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6295 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7002 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5942 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7612 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7387 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6295 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7420 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7805 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5942 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7612 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7516 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 5621 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6649 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6327 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7805 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7066 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5974 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7516 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 8030 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6295 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6295 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7098 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5974 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7516 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6649 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7420 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7709 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7066 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 5653 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7452 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6713 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6681 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7098 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7066 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5974 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6681 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5653 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7098 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6713 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 5653 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7452 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7869 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7837 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7066 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7612 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6713 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7484 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7516 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7869 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7130 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7130 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6713 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6713 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5685 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 5685 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6360 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6713 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 5685 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 5685 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7516 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7869 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6360 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 5685 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7130 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 6038 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7677 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5685 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 5685 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6713 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6777 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7677 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7516 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6392 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7869 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7130 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 6038 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 5717 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6392 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6392 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6038 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7709 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7869 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7869 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7901 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7195 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6745 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5717 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7548 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7901 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7195 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6070 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6777 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6777 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5749 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7516 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7548 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7163 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7195 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6070 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7709 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5749 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7901 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7901 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7163 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6809 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6777 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7580 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7901 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6070 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6103 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7580 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7291 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6456 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7580 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7837 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6103 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7580 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7580 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6135 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6809 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7580 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 6103 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6841 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6841 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6456 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7259 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6103 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7227 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6841 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6841 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5781 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7612 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7612 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6841 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7259 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7259 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7227 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7548 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6488 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7259 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7259 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6135 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7259 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6135 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6135 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7709 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7612 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5814 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7323 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6488 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7259 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6135 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6135 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7259 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7741 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7355 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7966 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7259 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7259 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6906 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6874 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7355 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6520 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7934 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7259 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7259 5749)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@AX@APK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@T@E K%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9P@V@AXB9PK%@.T@APMV@2$CEPLU@1TCEPLU@1TCEPLU@1TCEPLU@1TCEPLU@1TCEPLU@1TCEPLU@1TCEPLU@1TCEPLU@1TCEPLU@2$CU @E@.TB9PK%@AX@E K%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PKQ@YPC[ F:@J,CI@I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HBX I"@&amp;HCI@B+@[(C[ FT@-DB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TA]0I2@BTAT0D$@X,A) F&amp;@\XA1 GF@ZXA1 GF@ZXA) F&amp;@ZXA) F&amp;@ZXA) GF@\XA1 GF@\XA1 GF@\XA1 GF@\XA1 GF@\XA) F&amp;@ZXA"0D$@UL@IPI2@W\B9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@.TB9PK%@AXB9PK%@ \AG0I"@QDA1PIH@$ BJ0IH@$ BR@IH@",BJ0H+@",BR@IH@$ BX I"@&amp;HBX IH@",BJ0IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@IH@$ BR@H+@$ BR@GE@QDBX D_@ \B9PK%@AXB9PK%@.TB9PK%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@.TB9PK%@@TB9PLU@+PBR@E.@_0BXPIH@",BJ0H+@",BJ0H+@",BJ0IH@(&lt;B#0H+@Z\A#@E/@S0AO@FL@",B#0IH@",BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@$ BXPG&lt;@V8BR@J4@1TB9P@E@.TB9PK%@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PK%@AXB9PIP@FPAU@G&lt;@$ BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@RL@[@@H@/\B&amp;PJB@]DA, F2@%PB9 A]@S0BX IH@",BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@",BJ0H+@",BR@G&lt;@UP@Y@IP@.T@E K%@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@AXB9PGN@-&lt;A[ IH@$ BJ0H+@",BJ0H+@",BJ0H+@! BF@IH@E8A%0EE@M0A@0DX@TTAW E^@U8AW C3@PLA:0K&amp;@LTBFPI!@$$BRPII@$$BRPII@$$BRPII@$$BRPII@$$BJ0HX@! BJ0H+@$ BR@E.@-&lt;A3 K%@AXB9PK%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@@TB9PGN@+,A#@I!@!$BFPHY@!$BFPHY@!$BFPHY@$$BX0J''@UTAK CL@OPAFPDY@OP@=@C4@M4@7PC4@Q$AA@CL@K$@3@IU@S4A*@F)@Z$A*PF)@Z$A*PF)@Z$A*PF)@Z$A?PII@''\BX0II@!$BFPHY@$ A#@J;@\8B9P@E@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@AXB9PIP@-&lt;A#@H+@_8A? G&gt;@_8A? G&gt;@_8BF H,@"4AD@A;@C&lt;B&amp; CK@R8AFPDY@Q$AFPDY@Q$AFPDY@Q$AFPDY@Q$AK DY@L4A^0KC@,LB00KC@,LB00KC@,LB00KC@*4B+PKT@24@FPBM@Q@BKPH,@!(A? HY@X0B70IP@.T@E K%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PL*@FTAU@II@!$BFPHY@!$BFPHY@"4BKPFM@D@B5PH7@[LAK0C5@M8@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@7PC]@M4@=@CK@TXA4 GS@]LA40GS@]LA40GS@]LA,0F3@Y AW0EG@[LBHPKC@D@A#PH-@"4BJ0ET@FTCJ K%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@+PAUPII@"4BKPH-@"4BKPH-@&amp;PA#P@I@^0A-@F3@]LBB@G,@OX@3@CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 B:@K,@30FY@^4BBPG.@^8A; G.@^8A; G.@^8A; HI@ $A; GS@[LA-@G,@@$A#PI$@$$AUPKI@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@^(BRPG&gt;@"4BFPHY@!$BFPH-@_,@Z0H7@U&lt;A40G.@ $A; G-@[T@3 B;@L8@3 CN@L8@3 CN@L8@. CN@PPAA@DD@PPAA@DD@PP@=0CK@PTA,0G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BBPG.@]LAW0H7@F,BKPHZ@$$A: K%@.TB9PK%@.T@@@K%@.TB9P@V@.TAM FN@&amp;LBKPH-@"4BKPI$@ZXB&gt;@FX@]LBBPG.@^8A; G.@^4AX@BW@GL@%0BW@I\@%0BW@FL@%0DY@I\@X0A#@FL@X0A3@FL@]@BC@I\AL@GT@Y(A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; HI@]LA&amp;@K8@^@A*0D_@.TB9PK%@.TB9P@@@.TB9P@V@.TA%PJN@!(BX0IJ@$(BR I8@X4B&amp;0E&lt;@^8A; G.@^8A; G.@^8A;PE:@GP@  BC@GP@]@BW@FL@7PA#@L@CVPBE@A@@H M4@08C]@E!@% @TPBF@EPBU GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@U&lt;B1@EV@* A]0K%@AXB9PK%@@@B9PK%@AXB9PI1@RTBX0H,@$(BK@I$@W@B[ E&lt;@ $A; G.@^8A; G.@^8A; G-@VH@X0A#@FL@X0A#@CL@7PJ5@VDB9@KP@4LCJ@IO@)TAT@@=@)TCE@KP@ LALP@4@# A5PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BBPE_@*8@'' J3@.T@E K%@.T@@@K%@AXB9PKA@BPA10H,@"0BK@IK@X,B 0E&lt;@ $A; G.@^8A; G.@^8A; G.@^4AR@AH@D @X0AU@CL@4@J#@,0B_ AN@F$@O K5@Q,@&gt; I_@*LAB@LT@G @"PD,@^LB&gt;PFX@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@ $A,0H9@5PB4 K%@AXB9P@@@.T@E K%@YTA\PIJ@"0BF H,@_&lt;B&gt;@E&lt;@ $A; G.@^8A; G.@^8A; G.@^8A;PD2@CL@G0@ @@4@Q0K-@7TB4@B0@F$@V M&amp;@G8@U BV@GLAA DI@D8CY BI@#HCZ H:@^4A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; HI@W0B[PFU@.T@APK%@@@B9PK%@.TC[0ER@$(BF HZ@$,@W@F[@^8A; G.@^8A; G.@^8A; G.@^8A; G-@VLC\@@_@B@@CPA3@1HCE0I&gt;@2 CU0H_@%$@% AG@54C\@@M@FLB! KP@K@BA@@-@#(A;PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH CQ@!@B9PK%@.T@@@K%@.TB9PF;@\ BR0IK@&amp;TA\ HI@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^4AY@M1@7H@CP@M@A&lt;B-PD7@R @70L8@"$AH@A4@58@CP@M@7D@  DJ@F(@^PG''@X&lt;CA FX@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@SLBK MV@.TB9P@@@.TB9PMV@I(A+@H/@ @BS@MG@[LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A;PFY@54CSPM]@48CS @M@HH@MPLJ@2@CM@M1@7HCS MN@48CS M1@@4B! H_@*,@R0K''@Y0A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HARPL,@1XB9PK%@@@B9PK%@4PCOPG!@$,BS@D&amp;@"DA40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G-@[XCMPLK@2@CB LJ@0(B?PLJ@48CW0M_@0(CB LJ@0(CB LJ@0(@G0FE@T@B&gt; M @%\A5PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@#0B9PK%@AX@@@K%@.TCEPI9@\$BSPI:@B0AY HI@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^4A5 MO@0,CH@LJ@0(CB LJ@0(CB LJ@0(CB LJ@0(CB LJ@0(CS LJ@@4@U K.@N@BB G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@.TB9PLU@&amp;XA2PI''@Z8B&amp;0F3@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BB@F7@00B60K=@.&lt;B;0K/@.&lt;B;0K/@.&lt;B;0K/@.&lt;B;0K/@.&lt;B;0K/@.&lt;B7@KJ@/8B?PDZ@^4A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@B9PK%@1TB^PGI@)@AOPFX@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; HH@[\B&lt;@J6@,(B-0J7@+\B-0J7@+\B-0J7@+\B-0J7@+\B-0J7@+\B-0J7@+\B2 J6@04A_PG-@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@K%@.TCEPI9@^HB^0A&lt;@T\BBPG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@  A5PL!@*PB.@J%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@*TB)PJ%@+ B]@@!@ ,A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@.TB9PLU@&amp;\B@PH0@4 A,0G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BB@GU@2HBP0JL@(0B#@JL@(0B#@JL@(0B#@JL@(0B#@JL@(0B#@JL@(0B#@JL@(0B#@I5@$P@&lt; HK@]TA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@B9PK%@1TBY0HA@#DB:@F3@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; HH@]TCM HT@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@$PBQ@ID@%&lt;A7PL7@]TA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@K%@.TCEPIN@^TB@ I.@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A.@L9@]8BJ@HS@!LBD0HS@!LBD0HS@!LBD0HS@!LBD0HS@!LBD0HS@!LBD0HS@!LBD0G6@(,AY0HK@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@AXB9PLU@!,A+0G&amp;@]\A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; F4@5@A( G6@_XA= G6@_XA= G6@_XA= G6@_XA= G6@_XA= G6@_XA= G6@_XA= G6@[4A=0D4@ ,A5PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@@E K%@1TBF0F/@^XA;0GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8CT@E)@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA! J6@V@A&lt;@G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@@V@.TCEPH\@[@A:@G/@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BB@@6@O,AS EN@T8AS EN@T8AS EN@T8AS EN@T8AS EN@T8AS EN@P,@0PCA@P,AS DK@_ AA0F]@] A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@AXB9PLU@!0A$@GK@^&lt;A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H=@J\@+PDL@O0@?@C&lt;@O0@?@C&lt;@O0@?@C&lt;@O0@?@C&lt;@O0@?@C&lt;@MPA= L:@44A= C$@LHB7@BD@K0A&lt;@G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@@E K%@1TA:PEX@[DA;0GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; GU@# @8PBG@NP@9PCT@MP@5@CT@MP@5@CT@MP@5@CT@MP@9PC%@J8B.PHU@)D@:0EW@X\B7@M"@"T@&amp;0JD@]TA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@@V@.TCA@G)@U$A$PG/@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@]TBH0C8@MT@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@LH@0 CB@I0AN@@;@]&lt;B%PAF@N0CB H;@2\A$0F*@)0A5PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@AXB9PLD@^$A$ F9@^&ltlt;A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@#4@/PB,@0@CO0@B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@HCUPMU@@H@DPAB@/&lt;A"PG2@T,B''PGS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@@E K%@1TA3@EZ@Y@A;0GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A5PH=@Q\B( C&amp;@AHCI M@@4@CP@M@@4@CP@M@@4@CP@M@@4@CP@M@@4@CP@M#@D4@O@KM@C CT D5@  A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@@V@.TCA@F&lt;@QHAV@G/@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@]TBI@H=@W8@+0J=@4DCDPLQ@1DCDPLQ@1DCDPLQ@1DCDPLQ@1DCP@I&lt;@F8CZ0MZ@YXB'' J&amp;@@8BOPG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@AXB9PLD@Y8@?PD&gt;@^&lt;A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; GU@^8A&lt;0BH@)HC@PK2@/HB&lt; K2@/HB&lt; K2@/HB&lt; K2@/HB&lt; K2@+0B/@J)@&amp;$AH@A&amp;@\DBI0JE@]TA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@@E K%@0PA]@C(@R\A;0GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BB@D\@B B_PK @,8B3 KN@,8B3 KN@,8B3 KN@,8B3 KN@+0B8@K @/HB8@K2@-4B&lt;PB]@-LA-0G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@@V@.TCA@E[@N$AD0HI@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H=@I CD0I=@+0B*PJ)@*$B*PJ)@*$B*PJ)@*$B*PJ)@*$B*PJ)@*$B*PJ)@*$B&lt;0K^@ALB= F\@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@AXB9PLD@U,@:PDS@ $A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@#4@RPK!@%DBZPI)@&amp;$BZPI)@&amp;$BZPI)@&amp;$BZPI)@&amp;$BZPI)@&amp;$BZPI)@&amp;$B$0I*@"(B/ LY@Y0A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@@E K%@0PAV0CY@QLBBPGS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@]TBV0@7@)PBCPIR@!4BGPH]@!4BGPH]@!4BGPH]@!4BGPH]@!4BGPH]@!4BCPH4@)PBQ E\@1(A''@G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH E%@%(B9PK%@.T@@@@V@.TCA@D?@LX@? HI@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A5PI[@7LBT GM@ 4BCPHM@ 4BCPHM@ 4BCPHM@ 4BCPHM@ 4BCPHM@ 4BCPHM@\4B/@E?@4(B''0GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBV K%@.TB9P@@@AXB9PLD@R$@, C*@^0A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"X@/ I?@R(A/ F_@Y&lt;A''0F_@Y&lt;A''0F_@Y&lt;A''0F_@Y&lt;A''0F_@Y&lt;A''0F_@Y&lt;A]PH5@28BW@D]@"XA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPIZ@.TB9PK%@@@@E K%@0PAE@B_@L\A;@GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; IW@[&lt;AWPF @Z@A/ F&gt;@[8A(@F&gt;@[8A/ F&gt;@[8A/ F&gt;@[8A/ F&gt;@[8A/ F&gtgt;@DD@#0G,@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@]TBOPE(@6P@$0C[@M,@;0B#@(XBG I6@.HAP0A @F@@60C/@M,@60C[@M,@60C[@M,@60DA@F8B2 H&gt;@Y A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@VTBO0K%@.T@AP@@@.TB9P@F@K&lt;@PPBO@^0A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@]TBOPE(@6P@P0B$@KT@-PBP@L$@$@@"@(4A4@@)@@LB/0A!@A(@[0BP@I@@$@BP@I@@$@A/@B8CR0I6@]$A6@G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HAYPKE@0TB9PK%@@@B9PK%@.TB6 MX@H&lt;A;@GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@]TBOPE(@2T@K0B4@JL@$@BP@I@@$@CI@M(@4 K@@UD@)PIS@6 @"0HF@P@@- A?@G&lt;@$@B6@ X@Z@GB@K$A5@GX@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; E%@&amp;,B9PK%@.T@@@K%@AXB9PDV@4X@[PG,@]LA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BOPEL@1@C[@B@@F8@[ A.@F8@[ A.@F8@[ C/@0\BE E9@6X@D@GC@FH@-0H @%HB8@GZ@G@@Q@F@@@&lt;BO F\@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H"@J A60K%@.TB9P@@@.T@E K%@)\B[@M)@ $A40G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BI FA@1@CK0A1@E@@T@AP@E@@T@AP@E@@T@AP@E@@$@A!@T4@90HC@$&lt;@^@BI@LP@6@CX@LP@OPL;@2LAZ GX@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8AYPCJ@.T@APK%@@@B9PK%@AXB9PE+@-XBO@GS@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; HI@@PB:0AE@A(@F @Z@A(@F @Z@A(@F @Z@A(@F @J@C@@[ ML@J(AH LT@ATCY MW@5\@A0J*@-\BI I@@]TA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"H@4PH6@4TB9PK%@.T@@@K%@.T@E K%@O@@^ G\@^4A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; HH@O$A  J/@5,@LP@J@@(@B @J@@(@B @J@@(@B @J@@(@B M[@A,@ @J0@X(CY A)@D8@S A)@2,CO@EL@$@A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; D3@$DB9P@E@.TB9P@@@.TB9PK%@AXB9P@&amp;@V0BB0G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A40D^@G\@B0K;@A0@B @J@@(@B @J@@(@B @J@@(@B @J@@(@B MK@E@BWPBL@AT@S @&gt;@C8CY @W@P4B!PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BH D3@KDCE K%@.TB9PK%@@@B9PK%@.T@E K%@XLB:PF!@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@  BU0M6@)XB+0LH@64CV0M[@5,CV0M[@5,CV0M[@5,CV0M[@5,CS@AS@MHCY @*@D8@O A[@(DCBPK*@Y0A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@SLB\0K%@@TB9PK%@.T@@@K%@.TB9PK%@.TB9P@:@J BO0G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; GU@(TA)@HW@IPB(PL]@6,CR0MK@4,CR0MK@4,CR0MK@4,CR0L0@3@CV @#@6XCY @&gt;@G CE0I @7\B!PGU@^8A; G.@^8A; G.@^8A; G.@^8A; H"@PH@ PLV@.TB9PK%@.TB9P@@@.TB9PK%@.T@APK%@TPAL0E%@"HA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A5PHH@%\@40@X@3DB\@L2@3HCG L^@18CG L^@18CG L^@18CG L^@4,@* DN@B(CF0MI@) CG@KX@Y0A; G.@^8A; G.@^8A; G.@^8A; H"@VTAL0C1@.T@APK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PM\@VTAYPH"@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; H&amp;@(TB" GD@''@B10L_@1&lt;CA0L_@3HCL L_@1&lt;CA0K&lt;@/0B6PLH@$T@U0KK@,,@@@@]@J$BOPGU@^8A; G.@^8A; G.@^8A; H"@VTAYPM\@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@.TCW@F\@VTBH G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; I/@ZPAS0@2@%8B,PKH@( BQ0HQ@_$BW J2@, B;@K,@/0CL0@^@ITA&gt; LB@,&lt;@R IW@^8A; G.@^8A; G.@^8A; H"@VTA''@M\@.T@APK%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@.TB9PK%@50AYPE%@"HA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@[\BB@IW@NHB80MY@@0@) D-@ZTBD K4@G\AC0E-@((@NPC"@XPA''@F\@Y0A.@GU@^8A; G.@^8A; G.@^8A; H"@VTAYPM\@.TB9PK%@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PK%@.TB9PM\@SLA@ G.@"HA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BOPHI@@DCT0C#@_LB!0J,@)0B[0H=@%\BU0IW@%\BP@H&amp;@"XBB@HH@^8A; G.@^8A; G.@^8BH G.@PHAL0M\@.TB9PK%@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@.TB9P@E@.T@&lt;PA2@SLAL0G.@"HA; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8BOPIW@  BB@G.@]TA5PG.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@^8A; G.@"HA; D3@SL@ PC1@.T@APK%@.TB9PK%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@1XB\0B1@SL@4PG.@"HA; H"@"HBH H"@"HBH H"@"HBH H"@"HBH H"@"HBH G.@^8BBPHI@"HBH H"@"HBH H"@"HBH H"@"HBH H"@"HBH H"@"HA; H"@^8@4PD3@KDB"PLV@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@TB9PK%@1XBPPH6@VT@*@E%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@VTAYPE%@J AYPH6@$DCE K%@.T@APK%@.TB9PK%@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@TB9PK%@4T@.@G[@&amp;,B1PH?@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BV IZ@%(BO0KE@&amp;,A60CJ@4TB9PK%@@TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9P@@@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@TB9PK%@.TB9PLE@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@0TB9PK%@.TB9P@E@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@@B9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.T@APK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.T@@@K%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9P@E@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @V@AX@APK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9P@@'))</body><body package="Spy-VWSpecific">hapaoMediumIconGray	"UIMaskEditor new openOnClass: self andSelector: #hapaoMediumIconGray"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@75 depth: 10 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6938 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6938 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6906 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5846 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6970 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6488 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6295 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5814 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6970 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7130 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6552 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7323 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7291 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5846 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5846 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7420 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6584 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7741 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6970 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5846 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7130 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7580 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7387 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7323 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7291 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7355 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6938 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6970 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7130 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7323 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6938 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5878 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5878 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7387 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7580 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7323 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7355 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7709 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7323 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6231 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6231 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6199 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6970 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7355 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7163 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7163 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7355 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7452 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7323 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7355 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6231 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5846 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5878 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5878 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7355 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7355 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7452 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6617 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7355 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7355 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7323 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 7002 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6970 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7387 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7387 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6970 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6649 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7387 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7002 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6649 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7387 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6295 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7355 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7002 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5910 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7612 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7420 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7452 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6295 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6263 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7002 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7002 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5942 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5910 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6584 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7420 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5910 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7612 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7420 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7291 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7387 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6327 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7612 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7420 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7420 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7420 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7034 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7034 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7034 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7484 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6681 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7484 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7452 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6617 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7420 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7452 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6038 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7034 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7420 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6713 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7484 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6713 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6649 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7452 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6070 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6070 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7484 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6713 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7420 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7484 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7420 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6070 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7516 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7516 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7452 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6070 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7066 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6360 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7548 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7484 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6713 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7420 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7516 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6938 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6327 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 6006 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7355 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7130 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6070 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7066 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6006 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5974 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7709 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6713 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6360 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7098 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6006 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7709 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 5653 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7548 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6360 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6745 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7098 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6006 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7709 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7548 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7548 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6745 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6360 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7130 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6006 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6103 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7709 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7741 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7741 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6906 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6392 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7452 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7130 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6006 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7130 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7709 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6681 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6360 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7195 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6167 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7612 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6745 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6231 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6038 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 6038 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7709 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 5685 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 5685 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7195 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7195 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7163 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7773 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7677 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6777 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7195 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7195 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7195 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6199 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7773 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7484 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6456 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6424 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6713 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6424 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6809 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7130 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7548 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6456 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6327 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6103 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6070 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7805 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7805 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5717 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7098 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6809 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7580 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6327 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7227 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7516 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6906 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7580 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6360 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 6103 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6103 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7805 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6841 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7580 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7259 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7805 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5749 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6809 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6874 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7227 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7227 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7227 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7227 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7259 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7259 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7227 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6841 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6841 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7066 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7066 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6231 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7227 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6874 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5749 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7066 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7612 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7034 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7259 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7259 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6135 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7805 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6874 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6263 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7259 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6874 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7291 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 4882)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@RPAI@EL@RLAMPEK@T,AR0EK@T,AR0EK@T,AR0EK@T,AR0EK@T,AR0EK@T,AR0EK@T,AR0EK@T,AR0EK@T,AR0D5@RLAS@D$@RPA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  @@@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@RPA=PH1@(X@30J$@@HB(@F#@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@X A"@FH@ZLB(@@B@*P@30JF@#DA=PD$@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHA  FB@XHA  FB@XHA  D$@P(@EPK@@F$BM0G@@]4A7PFG@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 FG@]4A7PG@@#\@ZPK@@ATAB D$@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  FB@XHA  FB@XHA  D$@,T@Z@D9@]&lt;A70F?@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A( GA@\DA0PG^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A7 G^@]8A/0G_@]&lt;ANPA(@,TAI@FB@XHA  FB@XHA  FB@XHA  FB@XHA  @@@XHA  FB@XHA  FB@XHA  FB@XHAI@G5@A4B]PG_@_0A( G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@F?@_0A?@F"@X$AT0E,@V0A[@E,@X$A?@G^@\HA?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A( G&lt;@]&lt;B]P@]@_TAI@FB@XHA  FB@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHA  FB@XHAI@@S@C8A8@F?@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@]&lt;A( F"@MT@O0KN@&amp;$BGPHH@WXAW0D?@  BR @,@NDBN@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@F?@^@@O @S@RPA  FB@XHA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  FB@XHA  H"@#$A70G\@ZHA?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G_@B0AW0E@@O&lt;AF@DX@R8AP@E@@T@AK C?@T@AO0GL@K$BE@F"@_0A/0G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@_0A?@G&lt;@ZHA7@G_@#$BH FB@XHA  FB@XHA  FB@XHA  @@@XHA  FB@XHA  FB@XHAI@H"@)XA( G_@]&lt;A70G_@]&lt;A70G_@]&lt;A0PG_@\HA70G_@S(@7PB @J4@+PB-@J4@+PB-@J4@+PB-@J4@+PB-@JD@W E!@ZHA[PFG@X\A!0FG@X\A!0FG@X\A!0FG@X\A!0F"@]&lt;A70GB@]&lt;A0PG_@]&lt;A( JV@"HAI@FB@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHAI@@S@"\A"PGD@\PA1@GD@\PA1@GD@\PA)@G!@^D@2PAK@/@BR0B.@N @:@C(@N @:@C(@N @:@C(@N @:@C(@N @:@C(@J&lt;@:PIL@%4BWPI]@%4BWPI]@%4BWPI]@$4BOPJ@@*TB&lt;PAK@L$A8PG!@ZPA1@GD@X$BI0@S@RPA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  G5@D0A1@GA@\DA0PGA@\DA0PGA@ZHA70G!@.@A+0FT@[@AK0B?@J&lt;@0@C@@L@@0@C@@L@@0@C@@L@@0@C@@L@@0@C@@L@@0@B!@P@A]0E @V@AX@E @V@AX@E @V@AX@E @V@AX@E @[@A%@F/@.@A8PG_@ZHA0PGD@D0A=PFB@XHA  FB@XHA  @@@XHA  FB@XHA  D$@@0A8 G#@_4A?PG=@^DA?PF$@^DA"P@C@N\APPF0@[@A^@E9@I@@( B"@JH@( B"@JH@( B"@JH@( B"@JH@( B"@JH@( B"@IH@$PEB@YTA% F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AX@F0@[@APPC''@@LA"PG!@ZPA8 @L@RPA  FB@XHA  FB@@@A  FB@XHA  D$@,TB] GB@ZPA70G_@]&ltgt;@_8A1PG&gt;@UTBBPEA@[@A,@F0@[@A,@F0@[@A,@FV@PD@H0@"@BH@H @"@CP@QPHP@N,BZ@J3@.&lt;B;0J3@'',A!@AJ@+4B/PJK@Z(@%@K6@YXA% F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@EA@ $AUPKO@_TA  FB@XH@@@FB@XHA  H1@F(A9PG%@^TA)PG&gt;@ULA3 E @[@AX@F0@[@A,@F0@[@A,@F0@YXAF0@G@DX@Q AF@DX@E@@"@V(@@P@)@B$@JPKK@AXBL0JQ@EDBM@@Y@B$@JPKK@J(A,PF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E @[@AX@G)@A8BLPFB@XHA  @@@XHA  FB@&amp;4BQ GE@^DA8PG!@UXB PE @V@A,@F0@[@A,@F0@[@A,@F0@[@A% C*@.XB90K7@/\B5 A0@XTB/P@)@@D@B @A@[L@4PKV@.\@A F:@%,@JP@)@.&lt;BS EE@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E @V@B4@JR@RPA  FB@@@A  FB@RP@30G&amp;@^DA1PGF@_8@V@EA@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FV@Q(B50@F@@X@A @6@+0BZ@I[@.&lt;B;0JK@Y A@ K''@@X@A K7@JDA&amp;PJX@B$B;0I+@TTA%PF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@EF@PLAI@FB@XH@@@FB@XHAI@J$@" A? G&gt;@_,A)PDD@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YXAP0J+@/ B:@KV@@XB$0HQ@W@@N@F!@G\BD KV@. B5 K(@. B5 G6@C0@@PKK@B&lt;A+ F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@Q0BN D$@XHA  @@@XHA  EL@@PB@PGG@X(BE I^@YXAX@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% E;@*,B5 KV@-XB5 KV@-X@A AR@JL@+0K7@-XB5 KV@-XB5 KV@*0A4@@=@B(B7@GO@YTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@Y(A^ H^@T4A  FB@@@A  FB@RLB60GG@^TB@ C6@W A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FV@Y,B[ J,@*0B+@J,@*0B+@J,@*0B+@J,@*0B+@J,@*0B+@J,@*0B- B5@_&lt;@70KX@[@A^@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% F0@M0A PFB@XH@@@FB@XHAM@F&amp;@^\A2@GH@/HAX@E @[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W A4 I#@*0B+@J,@*0B+@J,@*0B+@J,@*0B+@J,@*0B+@J,@*0B+@J,@*0B- IU@HPAX@FV@YTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@X0B@0G(@S,BOPE @[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A%PGS@$@B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0JG@(\B!0D]@W(A,@E8@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SPA#@HC@Z\A[0EA@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FU@]LBMPI$@%TBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBY@IU@&amp;TAX0E @YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@F(@!\BE0BM@Q8A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YTA4 I/@$HBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBUPIU@%TBP J-@]HA^@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@X4BA@HE@*XA]0E @[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A%PF2@( BDPHQ@!DBDPHQ@!DBDPHQ@!DBDPHQ@!DBDPHQ@!DBDPHQ@!DBDPHQ@!DBDPHQ@!@@+@FV@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SPA#PHD@"$BW0E @[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FU@[HB'' GV@[$A.PF9@[$A.PF9@[$A.PF9@[$A.PF9@[$A.PF9@[$A.PF9@[$A.PF9@[$A5 J.@T\A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@E1@^(BF@E8@W\A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@Y(A''@J7@Y8A6@GX@] A6@GX@] A6@GX@] A6@GX@] A6@GX@] A6@GX@] A6@GX@] A6@F;@$LALPF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@S0A# HF@N4A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E&lt;@*&lt;AR E)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@T8A6 EE@W A% F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SPAO@FN@!$@; FU@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E7@[PB.@D%@T8AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AZPE)@V$AM0IV@N&lt;A''@E8@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@D=@X&lt;BF C.@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% @$@JX@8@C @N@@8@C @N@@8@C @N@@8@C @N@@8@C @N@@8@C @N@@8@C @N@@8@C @] @&lt;@DE@W4A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@R$A$@HG@N8A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FV@K8@)0CD@LP@1@CD@LP@1@CD@LP@1@CD@LP@1@CD@LP@1@CD@LP@&lt; E)@V$@&lt; CD@LPAI AQ@D\A, FU@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SPAJPE2@\$@; F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W AA A%@KX@- B6@KX@- B6@KX@- B6@KX@- B6@KX@- B6@H$A.PF@@X,@C0C$@H$B:PI7@K@@N H_@YTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@C7@WHA*PC.@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A%PDF@IX@"PBI@H$@"PBI@H$@"PBI@H$@"PBI@H$@"PBI@H$@Y F@@.&lt;@B0KK@@8@4 I2@B$B,0B]@"8A%PF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@P&lt;A\ GJ@N8A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@P\@&lt;0A4@GP@]@A4@GP@]@A4@GP@]@A4@GP@]@A4@GP@]@E)@(LB;0K/@.(BQ@@Z@@D@JPKK@G&lt;BK FU@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SPAC0E3@\(@; F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AG0DK@D @R@AH@D @R@AH@D @R@AH@D @R@AH@D @R@AH@C,BP K"@]D@F@BL@@D@@P@)@,,@_0H.@YTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@C8@WLA2 C.@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% E#@Y&lt;B7P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B;P@@@@$@BPI''@ETB&amp;@@)@B$B;0IO@&amp;(A^@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@O A\0F+@N8A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YX@XPAT@.8B;PK-@.4B;PK-@.4B;PK-@.4B;PK-@.4B;PK-@.4B;PK-@@@@%0@.@GX@] @A@_ BX@FV@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SP@8 EW@Z,@; F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A^@GT@KHB+0B7@+DB, J!@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB(PJ!@*DB2PK]@B\@]PI8@HX@^@D2@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@CJ@Q@AV@DH@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FV@YTA]0F0@VLB2 J1@+DB,PJ1@+DB,PJ1@+DB,PJ1@+DB,PJ1@+DB,PH*@(&lt;A; G.@%@A,0AV@C\A% F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@K(AJ EY@P A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YXA_ J&lt;@'' BY0I''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BY0I''@&amp;\BY0JI@&amp;\B7PK.@.8BP D''@-&lt;A=@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SP@*@C#@R,@; F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% C1@((BY0IX@% BV@IX@% BV@IX@% BV@IX@% BV@IX@% BY0IX@% BV@GC@R@@^PBH@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@B[@O$ADPDH@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@ELB^PIX@% BV@IX@% BV@IX@% BV@IX@% BV@IX@% BV@IX@% BV@IX@",B2@JT@)\A30F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@I,@&gt;PD+@RDA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YX@IPIY@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@H@@ @B@@IH@-(AV GO@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SP@&amp;0C#@R,AHPF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% K9@!,A00GC@\LA00GC@\LA00GC@\LA00GC@\LA00GC@\LA00GC@\LA00GC@!0@E0@_@]TA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@BN@MXAD DH@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FV@-$BF0GC@\LA00GC@\LA00GC@\LA00GC@\LA00GC@\LA00GC@\LA00GC@\LA00@0@^&lt;AX0F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@G,@20CW@RDA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YX@\PFQ@R0AD0D,@R0AK@D,@R0AK@D,@R0AK@D,@R0AK@D,@R0AK@D,@R0AK@DT@H&lt;A-PC^@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SP@Z0B;@L0AHPF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% G+@OPAEPE[@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@U,AKPCM@HTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAM@AM@J$@/@D!@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[PA&gt;PC:@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@U,AV0E[@LTAQPE8@YTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D4@F,@''@B&lt;@RDA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W BG0@H@L8@3 CN@M$AV0CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@3 CN@L8@RPD3@V@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@C,@XDA  FB@@@A  FB@SPAO AW@I(AHPF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YXA% E#@O,@9PC%@K4@[@F @T&lt;@'' B=@NT@6 C%@NT@9PC%@NT@9PC%@NT@9PC%@NT@/PF,@LDAY@FU@W A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@N0A PFB@XH@@@FB@XHAH0@9@D@@_@D!@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YXA^@E7@*H@_ B_@I&lt;@''0B_@LH@S0F6@QL@S B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@I&lt;@''0B_@CDB&gt; EH@W\A% F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@@;@FA@XHA  @@@XHA  D$@%D@_PA&lt;@RDA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W A,@E7@+(@L B@@H@@ @B@@F4@?@JU@,0B7 BX@U0@60A-@F4@[PB@@H@@ @B@@H@@ @A-@F4@K I0@P$A''@E8@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E%@XDA  FB@@@A  FB@RP@CP@-@F8AHPF0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YXA,@DG@''(@H@B@@E(@V AZ@E(@ @AZ@M$@,0I[@S B4PF-@.4@&amp;PE4@I8@V @!@BD@HPAZ@R4@" EP@MLAH E7@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AX@EI@O4AI@FB@XH@@@FB@XHAI@KF@F&lt;@VPD!@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@YXA^@E7@%(@L@AZ@E@@T@AP@E@@T@AP@E@@L@AZ@-HATPJK@F\@10E+@HD@? @(@B\@=PKI@NX@*0ER@*&lt;AY E @W A% F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@T$B)0D$@XHA  @@@XHA  FB@''D@6@AA@RDA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% E7@''0B80AB@CL@L0@3@CL@L0@3@CL@L0@3@CL@HPB^@LL@OP@A@@DB/PJX@''4BRPH,@$$B&amp;@@+@#0A-@E @YXA^@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AC@F&lt;@XHA  FB@@@A  FB@XHA=PG,@E0AHPE8@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A^@F0@''8B&amp; @E@/LB&lt;0K3@/LB&lt;0K3@/LB&lt;0K3@/LB&lt;0K3@/L@HPJ5@BX@2@KM@B$@JP@)@B$@JPJ&gt;@%HBH@FU@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A^ I\@$TA  FB@XH@@@FB@XHA  D$@AT@P0EA@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@FV@JPB9@KR@/PB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@/L@API,@UD@@P@A@B$@JP@)@@D@5@JY@V@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AX@HJ@V\A/ FB@XHA  @@@XHA  FB@XHAJ@I?@_@A% E8@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W A% H&lt;@(HB4 KR@.TB4 K%@.TB9PK%@.TB9PK%@.TB9PK%@.TB9PK%@@TA-0@=@B$@B0@)@B$@JPH-@U4BB0E8@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AX@F0@W&lt;@EPD$@XHA  FB@@@A  FB@XHA  D$@.,B#@E"@YXA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% F0@V@BB0KG@#,BC@KB@,HB0 KB@,HB0 KB@,HB0 KB@,HB0 KB@,HB0 @P@GLB(0@)@A,@JP@)@.&lt;@X JY@V@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@P0B40D$@XHA  FB@XH@@@FB@XHA  FB@XHAI@JM@T$A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W A% E8@[@ACPJ_@,LB&amp;0KD@,PB1@KD@,PB1@KD@,PB1@KD@,PB1@KD@,PB*@A#@*L@JP@A@@D@JPB8@.0A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E @V@@WPG[@RPA  FB@XHA  @@@XHA  FB@XHA  FB@[0AC@E:@V@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A% F0@Y(AX0FR@-PB$@J\@)0B''@J\@)0B''@J\@)0B''@J\@)0B''@J\@* @X0AU@B$@@P@A@B(A.@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E @W(AC@FF@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHBD0DN@P0A,@E @[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W A,@E @&amp;DB\0DV@"DB#0JO@(PB#0JO@(&lt;B#0JO@(&lt;B#0JO@(PB#0J5@#&lt;@Y@I4@&amp;X@E0@Q@M8A^@F0@[@A,@F0@[@A,@F0@[@A,@E @[@AC@DN@!LA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  D$@[8BCPB%@[@AX@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E @[@AX@F0@T\A&gt; HN@&amp;0B''PJ]@)4B''PJ]@)4B[@I,@&amp;HBX G1@Y4AW E(@ 8@ @GK@$\@\ F0@[@A,@F0@[@A,@F0@[@A,@E @[@@)PHM@[8AI@FB@XHA  FB@XHA  @@@XHA  FB@XHA  FB@XHA  D$@ 4AC@E:@V@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A%PE @]TA]PJ)@*(B-@J4@,DB5PDW@+,@"0CF@%\@!0GM@(TB# H&gt;@ &lt;BB0FU@Y(A,@F0@[@A,@F0@[@A,@E @W(AC@HM@RPA  FB@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHA  FB@XHA/ DN@P0AX@F0@V@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@E @[@A% G2@+@B.PB4@YLBT0I!@%PBH@G3@ ,A30FV@YXAX@E @V@A%PF0@YXA%PF0@[@A,@F0@[@AX@F0@V@AC@DN@[8A  FB@XHA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  FB@XHA  D$@!LA! A]@P0A,@E @[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@W A% F0@[@A% E7@V@AX@FU@YTA,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AX@F0@P0@WPFF@!LAI@FB@XHA  FB@XHA  FB@XHA  @@@XHA  FB@XHA  FB@XHA  FB@XHA  FB@],B40E?@ (A^ F0@[@AX@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@AX@F0@[@A^ HJ@W&lt;B40G[@XHA  FB@XHA  FB@XHA  FB@XHA  FB@@@A  FB@XHA  FB@XHA  FB@XHA  FB@XHAI@D$@ATAY0I\@P0ARPEI@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@F0@[@A,@EI@T$AC@I\@V\@EPD$@RPA  FB@XHA  FB@XHA  FB@XHA  FB@XH@@@FB@XHA  FB@XHA  FB@XHA  FB@XHA  FB@XHAI@F&gt;@$TA/@J''@O4AYPC,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@C,@N0@;@E%@O4B)0F&ltbody><body package="Spy-VWSpecific">hapaoSmallIconGray	"UIMaskEditor new openOnClass: self andSelector: #hapaoSmallIconGray"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 30@30 depth: 9 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6456 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6649 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7066 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7387 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7420 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7516 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7066 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6649 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6841 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7066 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7420 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7066 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7484 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7034 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6360 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6488 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6038 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6777 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7420 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7452 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7098 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7195 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7098 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7516 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7516 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6488 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6874 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7291 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7259 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7420 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7130 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7195 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7516 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7516 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7130 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5974 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6167 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 6167 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7098 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6070 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6392 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7259 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7195 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7516 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7163 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7130 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7516 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7516 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6713 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7259 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7259 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5814 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6874 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7098 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7098 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 7066 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6424 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6424 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6777 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7195 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 6006 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7098 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7098 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7098 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6809 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7452 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7163 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7580 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7259 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6649 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6199 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6360 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6906 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7130 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7323 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6617 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7420 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6906 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7098 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7291 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7580 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7452 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6584 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6906 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7130 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7098 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7323 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7548 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7548 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7612 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6488 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7130 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6038 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6199 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7130 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7452 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7452 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7644 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7291 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6103 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6841 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7420 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7580 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6392 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7163 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6552 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7323 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6199 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7484 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 6070 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6424 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6777 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7163 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7355 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6231 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7709 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6745 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6874 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7484 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6874 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7323 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7002 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7709 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7741 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7709 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6584 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6970 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6874 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7163 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7741 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7709 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7355 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5910 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5878 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6263 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6263 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6231 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7002 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7002 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7516 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 6070 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6263 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7163 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7355 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7580 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7741 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7195 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7034 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6970 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5717 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6103 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7387 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7034 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6103 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6295 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7195 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7355 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7066 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7452 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7484 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7130 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7387 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5749 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6649 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7227 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6681 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6649 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6681 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7387 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7612 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7452 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7548 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6327 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6424 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6360 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7259 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7420 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7420 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7066 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7484 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5781 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5942 3629)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@K8@/ B&gt;@K8@+0AP@H&lt;@,@B&gt;@NX@60C[@M,@60C[@M,@60C[@M,@60C[@M0@/ AP@E@@T@B&gt;@K8@/ B&gt;@K8@/ B&gt;@K8@T@BO@F,AR0C7@E$@J0@+@B,@OP@+@B,@J0@+@B,@J0@+@A$@[PCX@QT@T@B0@K8@/ B&gt;@K8@/ B&gt;@G(ANP@*@C&lt;@&gt;0C&lt;@O4@?PBU@A0ATP@\@L AC@C=@O4@?PC=@N0AB0B7@O AS@AP@K8@/ B&gt;@K8@/ A:@UX@WPC]@N4@;PC&gt;@K @BP@9@C$@NP@9@EP@V@C+@N8@;PC-@N4@? C&gt;@O,@ 0DX@BL@/ B&gt;@J&lt;@T@D9@D@@.@B8@J\@\PAZ@OXAV E[@T4ASPEM@ATAL0@&amp;@LT@,0B3@KL@,0D5@JX@!@B(@G8@^ AP@E@@#0@,@N&lt;@;0BE@HH@[ A.@B\AA0DW@RLAO@@7@U\@A BP@G&lt;@(0A=@JL@(0A=@ET@_PB5@UH@T BO@H&lt;@[@A^@O@@!PD%@F8@(0B#@B @, C(@U @@@BH@MHA@PET@NL@_@B4@KP@-@B#@KP@(0A.@B4@IPB&gt;@K@AS C?@L\ABPA.@KP@$ B#@@ @TPCY@GLAC AH@CT@+ ED@R0@6 B4@KP@-@B4@KP@$ B#@IL@ @C\@K8AB@D''@C8@_PB#@KP@-@B#@AX@C@AS@H8@L0@E@EL@$PB[@Q,AN0B4@KP@-@B4@KP@-@B4@G4AT@CC@M,@\@B)@LX@-@B4@KP@-@B$@C(ALPEI@AL@I@@S@T$ARPD2@D&lt;@[0B#@KP@-@B4@KP@-@B4@KP@( CC@M,@V0D&amp;@L$@$ B4@KP@-@B$@B$ALPD!@RDAHPD!@RDAHPD!@SH@(PBR@JP@-@B4@KP@-@B4@KP@( CC@M,@O@B6@IH@-@B4@KP@-@B$@B$@7 CA@LD@0PCA@LD@0PCA@LD@50@W@JT@-@B4@KP@-@B4@KP@( CC@M,@W@AZ@G4@-@B4@KP@-@B$@A @^@A''@G$@^PA9@G$@^PA9@G$@Z@EO@KP@(0B4@KP@-@B4@KP@( CC@M,@F AA@HD@-@B4@KP@-@B#@A @ZPD0@S@AL@D0@S@AL@D_@PPAAPEJ@IP@$ B4@KP@-@B4@KP@( CC@M,@B @.@HD@-@B4@KP@-@B4@C,@^0DF@QPAE@DT@QPAH@CT@Q0@8PAI@N$@$ B4@KP@-@B4@KP@( CC@M,@B AB@HD@-@B4@KP@-@B4@F&lt;@''0@4@H4@#PBM@H4@+PA6@H$AC0DP@O$@_PB4@KP@-@B4@KP@( CC@M,AW@@/@HD@-@B4@KP@-@B4@KP@A0B1@AH@D @R@AH@D @R@OL@&lt; B?@EX@(0B4@KP@-@B4@KP@( CC@M,AOP@[@HD@-@B4@KP@-@B4@IH@2 AW@R8A@0DC@PLA@0DC@R&lt;@Y BI@C @-@B4@KP@-@B4@KP@( CC@M,AM@@0@IP@-@B4@KP@-@B4@KP@2 D"@NP@5PCU@MT@5PCU@MT@=@@A@F(@2 B4@KP@-@B4@KP@( CC@M,AFP@K@IP@-@B4@KP@-@B4@KP@2 D"@H,@YPA%@FT@YPA%@FT@]0D]@I8@&gt;PB$@KP@-@B4@KP@( CC@M,@&gt; E]@IP@-@B4@KP@-@B4@JL@-@D$@D4@H @P@AD@H @"@BH@H EG@R @.PB%@KP@-@B4@KP@( CC@NX@GPD&gt;@IP@-@B4@KP@-@B#@KP@20@6@T AD DS@DLAG EH@Q8AM DR@R$@.PB#@KP@-@B4@JT@( CC@K8@W0D?@IP@-@B4@KP@-@BR@G4@. DB@ML@40BJ@B@@R0CV@GP@S@D-@LP@% B#@KP@-@B4@ILAF C*@H&lt;@.0E@@JL@-@B4@KP@-@B4@K0@#@A#@FL@]PB+@NHAM0E_@N@@Q0B,@DP@%0B4@KP@-@B%@J(@E@C\@H&lt;AE AE@JP@-@B4@KP@-@B4@HXAN@EE@CD@S@AL@D0@S@AJ@@8AW C@@O$@_PBR@KP@-@BS@OD@&amp;@B&gt;@H&lt;@^ BG@I$@)PB4@KP@-@A=@JL@\ C%@UT@@ @O@@&lt;@C0EF@QD@X D+@F@@-@B4@KP@$0BS@TD@: AP@K8@T@CL@R(@%0BS@JT@)PB4@G4@$0D@@L4@@0@!@D8@Y@B\@I4@A@@2@DX@2 B%@IL@$0@M@A8@T@B&gt;@K8@/ AP@L8@30CP@J(@$0B4@KP@-@BR@L(@70DJ@P(@XPEB@G0AP0ES@N$@$0B*@ODAPP@^@G(@/ B&gt;@K8@/ B&gt;@E@@^ @_@OTACPCQ@JH@( B"@JH@( CQ@K4@/PB=@JH@( B"@JHAF @T@I @: AP@K8@/ B&gt;@K8@/ B&gt;@K8@T@AP@K8@/ CC@LL@00CC@LL@00CC@LL@00CC@LL@00CC@LL@: C\@K8@T@B&gt;@K8@/ B&gt;'))</body><body package="Spy-VWSpecific">kaiIcon	"UIMaskEditor new openOnClass: self andSelector: #kaiIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 100@100 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(224 224 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1220 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 449 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2216 2216 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1670 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 353 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1349 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 2344 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1573 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(803 803 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(32 32 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1798 1798 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(481 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 1477 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(706 706 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(160 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1156 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(385 385 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2152 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(610 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2601 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(64 64 64)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1284 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2280 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1509 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(192 192 192)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 1188 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(642 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 2409 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2633 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(96 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedStringamp;H ''I2\''I2\''I2\''I2\HFI"A)*#5$4IST5MST5MST5MST5MSP$IBPAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BPAMST5MST5MST5MST5MSP%M5#4?C&amp;HM''I2\''I1"+T9WXFBYS *$''I2\''I2:''NW\OX=MBT5MST5MST5MST5MBP%M@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BP@IBT4IST5MST5MST5MBP''VB^@Q''A^\''@6\R.K)''9L=#9:UO0GYO4I#%ZPMVY1YE:(KO]YMBT5MST5MST5MST4IBT4@SP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SPAMBP%MST5MST5MST5MST7V#Y&amp;$''I2\CT(ON8[S6#\7M3]\AS&lt;7M3\748X;O&gt;V:''I2\HD; 5$4IST5MST5MST5MSP$ISP@I@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SP@ISP$IST5MST5MST4IST6[Q92\''I1NC-X7M=*T%IRT%M(7W@T?M9RT%IRT%C\7N4UNX)2\VUOYBT4IST5MST5MST5MBP$I@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AMSP%MST5MST5MST5M#8=B&amp;P6\.)$S5#\7%EIRT%IRT%JTM50EO3]RT%IRT%IRT#\794IJCY0W@!NG#0%MST5MST5MSP$IST4@SP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D4@BT5MST5MST5MST4IBX]Q)I2\CYFI5-)RT%IRT%IRT%IRT#]\AS&lt;7T%IRT%IRT%IRT)QA9(6\''I2\9PEMBT5MST5MST5MBT5M@D4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D4@ST5MST5MST5MSP%MSX^UE92\&amp;T[ @D_S4=OS4=OS4=OS45H7W@T?M=OS4=OS4=OS4=OS#PBY9:*\''I0]OT5MBT5MST5MST4IBP$@@D4@@@@@@@@@@@@@@@@@@@@@@@@@@D4@SP%MST5MST5MST5M5-''(.)2\Q3,7!6\@!9SS4=OS4=OS4=OSM5VE''=+S4=OS4=OS4=OS! 4@P#]I8&amp;J\''D:%5$5MST5MST5MSP$IBP@I@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%MST5MST5MST4IS]''(''I2\P(.T4=O"@JP74=OS4=OS4=OS49QB(-[S4=OS4=OS4=OSM&gtgt;$''I0KBP%MST5MST5MBT4I@@$@@@@@@@@@@@@@@@@@@@@@SP%MST5MST5MBT6[&amp;Y2\Q0#S4=OS4=OS4=OS4=OS4=OS4=OS4=OS4='' O0#S4=OS4=OSR]OS4=OS4=OS4=OS4=OSQY2\)H%MBT5MST5MST4ISP@@@@@@@@@@@@@@@@@@@@@@BP$IST5MST5MSP''VQ06\&amp;U[S"8.K"8.K"8.K"8/SPS/S"8.K"8.K"=NS8C&gt;F"8.K"8/SOUDI48.K"8.K"8.K"8.K40!JVU%(#45MST5MST5MSP$I@@@@@@@@@@@@@@@@@@@@@@%MST5MST5MSP''V#Y2\CS6TRX.K"8.K"8.K"8.K!#7#!(.K"8.K"8/S"^@?!(.K"8.KT H@*.^K"8.K"8.K"8.K"8/S96J\VTVXBT5MST5MST5MBP$@@@@@@@@@@@@@@@@@SP%MST5MST5MST5MBY&amp;\E4=EOX.KRT%IRT%IRT%IRXZG&amp;0FK"4%IRT%I48'' O0!IRT%I4&gt;B+ATKSRT%IRT%IRT%IRX.K!1G\.)0J6X=MST5MST5MBP$I@@@@@@@@@@@@@@@@@@AMST5MST5MST5M5.B$''I%[@@AGOUJKB@ HB@ HB@!IN37#5$$HB@ HBMN%8C&gt;FB@ HBMZ\@D;SRP HB@ HB@ H"5H=TXT@+)V\''NIMST5MST5MST4IBP@@@@@@@@@@@@@@@@@@SP%MST5MST5MBS4Q''I2QBUFE@JYGN=LHB@ HB@ HBD&amp;GVC6FB@ HB@#SO&gt;@?!  HBMME@@BG40 HB@ HB@ H44EQ) @@,PFM)I2YV@%MST5MST4IBP$@BP@@@@@@@@@@@@AM@@%MBT5MST5MST4?''I1N!4&amp;F!0(@@E2IRXZF!(ZF!(XHBC7Y!0"F!(ZF4&gt;[ A@"F!$''V@@BQ40"F!(ZF!(ZFB@E\@@@BOXXH!%^\CTIMST5MST5MST5MBP@@@@@@@@@@@@@@@D5MBT5MST5MSP''VC!^\Q3^F!$$7P 5UQ "F!(ZF!(ZF!  ;VM$;BHZF!-O\8D H! #SS B\N8ZF!(ZF!(ZF!([^''JY^M8.F!-O E90F5 %MST5MST5MST4@BP@@@@@@@@@@@@@ISP%MST5MST5M!6J\CPEI!(ZF!-NX"XZF!(ZF!(ZF!(ZF!(_Y88ZF!([S7NAH!([S8@@EP(ZF!(ZF!(ZF!(ZF!)/V48ZF!(ZFPVJ\CUCVST5MST5MST4I@@@@@@@@@@@@@@$@SP%MST5MST5M5$HM''D+S!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(X;8=&amp;G!(ZF49_ "P"FBU$@+P"F!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!-MZ.!^]U %MST5MST4IBT4@@@@@@@@@@@@@@D4IST5MST5MS]:U''@6(RXZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(?YVC.F!-NM8H&amp;F!$T@P&gt;MI!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF6P6\S%YMST5MST5MST5M@@@@@@@@@@@@@D5MST5MST5MST6G@)2\!8ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZFO]$=!(ZKR&gt;BIBH^4@A"T!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!%YW''FJI5$5MST5MST4ISPAM@@@@@@@@@@AMBT5MST5MST7V7FJ\A)"F!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!#/Y6X&gt;FRZ# "S]N@E$;!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(X;Q90 8MYMST5MST5MSP$@@@@@@@@@@@$@BT5MST5MST4I5)D ''ED;!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZFS]''YN8-B8M%B@HVM!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!)F\''EGVST5MST5MST4ISP@@@@@@@@@@@@$IST5MST5MS]Z1''I2Z!$EAPTEAPTFFN3,;(N^F!(ZFPTEAPTEA!#,=6S6FP.C&amp;,@BYN8YAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPXZMHI2UST5MST5MST4IBP$@@@@@@@@@@@AMST5MST5MST5M%Y1"#XYAPTEAPTEAPUZG!47V5-8;PXZFPTEAPTFF5-''Y5$JZR$L@CHYAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTFFR@*\A#5MST5MST5MST5M@@@@@@@@@@@IST5MST5MST5M(4*\Z3&gt;FPTEAPTEAPTG^#8^G!8^G!8^O5#/''PTEAPXZ#6Y/ QPT@Q=MAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPY,U''FCYST5MST5MSP%MBP@@@@@@@@@@SP%MST5MST5MSY/(''D9P!$EAPTEA9:B 94F N=ZOBX^G!8^G!47V7#,;N=$L$PH@H(Z (JB (JB (JB (JB (JB (JB (N]APTEAPTFG&amp;Y1W"T5MST5MST5MBP$@@@@@@@@@@@%MBT5MST5MST7Y(Y0U"X^G!8^GQ%Z (JB (JC''93,;&amp;M[VBX^G!8^GB]YF"UL@@H7''(JB (JB (JB (JB (JB (JB (J@;BP$IBP$I(6B\S*UMST5MST5MST4I@@@@@@@@@@AMST5MST5MST5M6Q6\&amp;[UUUUUUUPV"N3,;N3,;N3. (J@;N3,;7-ZG!8^G!4!U@I&amp;XN3,;N3,;N3,;N3,;N3,;N3,;N3. 7K1UUUUUUT(]''D8?ST5MST5MST4IBP@@@@@@@@@@BT4IST5MST5MS]$]''I%JUUUUUUTE8C,;N3,;N3,;N3,;N3,;N:B (C.X5$4=OUO\PS,;N3,;N3,;N3,;N3,;N3,;N3,;(M1UD!HRD+Q(GY1NO45MST5MST4ISP$@@@@@@@@@@D4IBT5MST5MST7YXI0UO=''Y6]''Y6X&lt;;N3,;N3,;N3,;N3,;N3,;N3,;N3. N:AIPS,;N3,;N3,;N3,;N3,;N3,;N3,;N3/V"X&amp;I"X&amp;ITFB\S*UMST5MST5MST4I@@@@@@@@@@AMSP%MST5MST5MVN"\S 3''(JB (J@;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N:B (JB (H^Y''AVIST5MST5MSP$IBP@@@@@@@@@@ST4IST5MST5MSS5J''F,?N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3/YEY2Y$45MST5MST4IBT4@@@@@@@@@@@@IBT5MST5MST4I%Y2$#S,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;)P*\ZC5MST5MST5MBP%M@@@@@@@@@@@@ST5MST5MST5M5$^\''N@;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N86$''IVGST5MST5MSP%MSP@@@@@@@@AM@D4IST5MST5MB]Z.HI1QU#,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3.Q''I1G5$5MST5MST4IBP$@@@@@@@@@@@AMBT5MST5MST7VUFJ\R$7^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;VQ90 $]YMST5MST5MBT4@@@@@@@@@@@@@BT4IST5MST5M#0E"''FHA7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^!16\X#?VST5MST5MSP%M@@$@@@@@@@@@@@AMBT5MST5MST7^A)0M#S/^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-$M''@KVST5MST5MST4ISP@@@@@@@@@@@@$@ST5MST5MST5M5)*:''IT;U%YVU%YV&amp;I"XU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%ZX&amp;EYVU%YVU#-#.%%G&amp;@%MST5MST5MBP$@@@@@@@@@@@@@@@$IBT5MST5MST6#''I0W(=:X&amp;I!VN9#Y5)"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!VTH\;U)"X&amp;I#^Z90MO=YMST5MST5MST4@@@@@@@@@@@@@@@AMBP%MST5MST4I5.UY''E+''U%YV!($B)#5VU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YV!92&amp;8HZXU%X;P!^\G]YMST5MST5MSP$I@@$@@@@@@@@@@@@I@@$IBT5MST5MST7\E91NQ)#V!&gt;T@@@BM7-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[VU-%U@@@B6]YVN16\.))MST5MST5MSP%MSP@@@@@@@@@@@@@@@@AMST5MST5MST4IOZ*\X)D=$RH@A^ L7-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-ZX!&gt;U\@L%G6X4B''D;YBT5MST5MST5MSPAM@@@@@@@@@@@@@@@@BT4IST5MST5MSX&lt;KHI3(*@@@&amp;Y_V&ampgt;OBT5MST5MST4IST4@@@@@@@@@@@@@@@@@@@@@@@%MSP%MST5MST4IBQN\''FJ(5(&gt;O#8&gt;O#8&gt;O5%@=#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O(8''V#8&gt;O#8&gt;O#8?V'':6\''NJGBT5MST5MST4IBT4@SP@@@@@@@@@@@@@@@@@@@D4@BT5MST5MST5MST6G9Y2\@-2X#8&gt;O#8&gt;O5(&gt;&amp;[.[V#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8?VT@HE&amp;=ZO#8&gt;O#8?VCI&amp;\''F =ST5MST5MST5MSP$@@@@@@@@@@@@@@@@@@@@@@@@@@D4IBT5MST5MST4I#0D]''I1+7I!MST5MSY!Q@E3Y#45MST5MST5MST5MST5MST5MST5M#8\M@D+VST5MST7V6QV\''@KY5 %MST5MST5MST5M@@$@@@@@@@@@@@@@@@@@@@@@@@@@BP%MST5MST5MSP%MOT:\''J7\#45MSX=P) C"&amp;D5MST5MST5MST6O#8=MST5MST5MST7VR0B&lt;V8=MST6O"QV\''BBI#0%MST5MST5MSP$ISP$@@@@@@@@@@@@@@@@@@@@@@@@@@D5MSP%MST5MST5MBT6%EY2\@ _VSP%MTP@M&amp;D4IBP$IBP$IBT4IR: =SP$IBP$IBP$IBS.Y@D)MBT7V7I&amp;\''@JM#0%MST5MST5MSP$IBP@@@@@@@@@@@@@@@@@@@@@@@@@@@@$@BP%MST5MST5MST5M5*UN''I2$TX_V6PT@''=XIBP$IBP$IBP$I!1)2#X&lt;IBP$IBP$IBP%M6WH@7M[VQZ6\''BBM#45MST5MST5MSP$ISP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IST5MST5MST5MBT5MOY&amp;\''I0FOU4@R(\IBP$IBP$IBP$IBX]UAX6OBP$IBP$IBP$IBX]Q@@JO9RB\''@JI#44IST5MST5MST4ISP@@BP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@I@@$IST5MST5MST5MBT4=%Y2\''FIB8*VG!8^G!8^G!8^G!8^GUPVMSX^G!8^G!8^G!8^GTI4OS!^\''F#Y#0%MST5MST5MSP$IBP$@SP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AMSP$IST5MST5MST4I5(\K)E&amp;\E4+ !=ZG!8^G!8^G!8^G!5TE#P&amp;G!8^G!8^G!8_V#4J^VY2\V^H=5 %MST5MST5MST5MBP$@BP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$IBP%MST5MST5MSP%MBX%(VY2\)D8KQ-ZG!8^G!8^G!8]UAX4I!8^G!8^G!8&gt;G8I$B''I2\U3&gt;GSP%MST5MST5MST4ISP$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$@ST5MBT5MST5MST5MSP%M#4TJ''I2\VVIG''&gt;L=!8^G!8^GUPVM!8^G!8^#80R]Z1^\''I1+TX^OBT5MST5MST5MST5MBT4@BP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@SPAMST5MST5MST5MST5MBT6X6^JYCY2\E05N9PN"%3=P6V#(%=$D7DIE)9$M.)2\.$9QRM9MBT5MST5MST5MST5MST4@SP$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@I@D4IST5MST5MST5MST5MBX=MVDHFCQ^\''I2\HF-N&amp;Y&amp;Y&amp;Y&amp;YS*6$''I2\''E$MGY+YBX&lt;IBT5MST5MST5MST5MBP%M@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@D4@BT4IST5MST5MST5MST5MSP%M5%B]S&amp;H ''I2\''I2\''I2\''I2\''I0 X IGO=YMBT5MST5MST5MST5MST5MSP$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%MBT5MST5MST5MST5MST5MSP''VU%ZI8EFUA&amp;AWS$9NS!VYZIUG$S?V&amp;MYMST5MST5MST5MST5MSP$ISP$@BT4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BP@ISP%MST5MST5MST5MST5MST5MSP%M5-[VSS7Y"ZT?O:VI$36G5-[VSP%MST5MST5MST5MST5MST5MBP$@SP$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@BT5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST4ISP$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MSP%MSP@@BP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AMBT5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST4IST5MSP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@I@D5MBT5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MSP$ISP@@SP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@I@@$ISP%MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MSP$ISP%MBP$@@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AM@@%MST5MST5MST5MST5MST5MSP$ISP%MST5MST5MST5MST5MST5MST5MST5MST5MSP$ISP%MST4@@D4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@I@D5MBT5MST5MST5MST5MST4IBP$ISP$IBT5MST5MST5MST5MST5MST5MST5MST5MST4IBT5MBP@@SP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%MSP%MST5MST5MST5MBT5MST4IBP@@BT4IBT5MBP$ISP%MBP%MST5MST5MBP%MBP$ISP@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ISP@@BT4ISP%MST5MST5MSP$IBT4IBT5M@@AMSP@@@@AMST4IST5MBP%MBT5MST4ISP$IBP$@@@@I@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IBP%MST4IBT4IBT5MST5MSP$ISP$@@@@@@@@@@@$@@@@@@@$IST5MBT5MBT5MSP$@@@@@BT4@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AMSP$IBT5MSP$IST4IBT4IBT5MSP@@@D4@@@@@@@@@@@@@BP@@@@@@@@@@@@@@@@@@@@$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@AM@@@@@@@@@@@@@@@@@@@@@D4I@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'))</body><body package="Spy-VWSpecific">kaiIcon25	"UIMaskEditor new openOnClass: self andSelector: #kaiIcon25"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 23@23 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'ZV%)ZV%)ZV%)ZV%)ZV%)ZRL#ZV%)ZV$@ZV%)ZV%)ZV$FD" (JE%IYF$#ZV%)ZV$@ZV%)H2M)RS,YXA%HFVA B2!$H2M)ZV$@ZV%)T&amp;$(XD!ID7H7F3PFB6@KRRL#ZRL@ZV$#ZRI JB5\BD4!F50HOV% B4$#ZV$@ZV%)JFAIOTY2U%X3W5XRQ L4X@,3H2L@H6%IXB!,MBIRG5= B"&lt;(A!I\CV@"ZV$@ZV$;RB5FJB= PE&lt;KB ,[U$@WY2HYRV$@ZT$YRU12D4@/AS((G5- K4$SDQM JF$@ZTM D0 /PD&lt;_B"!XPQ4/S4@/MC4KB6$@ZR! KS4/PDA@PF@VPR=@N#(JRTX;B6$@ZR!HOTXSRDAXXF@[RS)@PDA)F00(RF$@ZR YF2U.VDA@PF8''PDA@PDA ZSD"AV$@ZU% M@ _XFAXVE!XVE!XVF@_D0 KB6$@ZT% A"DSZP-XXFA XFA XFQIBEM JF$@ZV$KB346KFA XFA XFA XD$HX$M RV$@H6%YXF$HD2IDB4 YR@-)RRHHT1$KZV$@H2M)B6@4BC0NX@,4JFA)Y0 [B1%IZRL@ZV$#A - CRE"\!M,QCQ''X%LKXB!)H6$@ZV$#H4%HXB SITY+R0!SP1$YJF$#H6$@ZRL#H2!HAVA B3,(H - X@-IZRM)ZV$@ZRM)JA% AR (N0,EAP,(RV%)H2M)ZV$@H6%$RT%$ZV%)ZV%)ZV%)ZV$#H6%)ZV$@'))</body><body package="Spy-VWSpecific">kaiIconGray	"UIMaskEditor new openOnClass: self andSelector: #kaiIconGray"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 100@100 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(224 224 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1220 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 449 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2216 2216 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1670 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 353 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1349 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 2344 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1573 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(803 803 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(32 32 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1798 1798 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(481 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 1477 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(706 706 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(160 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1156 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(385 385 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2152 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(610 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2601 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(64 64 64)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1284 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2280 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1509 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(192 192 192)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 1188 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(642 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 2409 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2633 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(96 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%H"X&amp;I"X$LCH&amp;I"X&amp;IRH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"T!H"]%XOZMF!8^G!8^G!8]F@S7#6X%HRH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X$=!0$IBP%MST5MST5MST5MST5MBP$I!37Y"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%P88^OST4IST5MST5MST5MST5MST5MST5MBT5M#44=6X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%H"Y,ASX=MBT5MST5MST5MST5MST5MST5MST5MST5MSP%MSX&gt;GOYMH"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;IOX\IST4IBT5MST5MST5MST5MST5MST5MST5MST5MST5MSP%MST6G!5AH"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%XST4IST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MBT5MOX&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"]&amp;G#45MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MSX&gt;G88&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"ZLISP$IST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST4IST6G6X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I$0%MBT5MST5MST5MST5MST5MST4IST5MST5MST5MST5MBT5MST5MST5MST5MST5MST4ISX&lt;="X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I88=MBT5MST5MST5MST5MST5MST7V5-YM(9/Y6]''YVC4I5-[V#45MST5MST5MST5MST5MST4I#4ZI"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I(44IST5MST5MST5MST5MSP%M5-:G7IF1%T+((Q4]XN!J%T^.U@G^5$4IST5MST5MST5MST5MSP%M!=%H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!45MST5MST5MST5MST5MBT7V!4JU@&amp;H ''I2\''I2\''I2\''I2\HFI"A)*#5$4IST5MST5MST5MST5MST5M6X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!44IST5MST5MST5MSP%M5#4?C&amp;HM''I2\''I1"+T9WXFBYS *$''I2\''I2:''NW\OX=MBT5MST5MST5MST5MBT7Y"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!44IST5MST5MST5MBP''VB^@Q''A^\''@6\R.K)''9L=#9:UO0GYO4I#%ZPMVY1YE:(KO]YMBT5MST5MST5MST5MB]%H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!45MST5MST5MST5MST7V#Y&amp;$''I2\CT(ON8[S6#\7M3]\AS&lt;7M3\748X;O&gt;V:''I2\HD; 5$4IST5MST5MST5MBT5M6T"I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!44IST5MST5MST4IST6[Q92\''I1NC-X7M=*T%IRT%M(7W@T?M9RT%IRT%C\7N4UNX)2\VUOYBT4IST5MST5MST5MBT7Y"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I(44IST5MST5MST5M#8=B&amp;P6\.)$S5#\7%EIRT%IRT%JTM50EO3]RT%IRT%IRT#\794IJCY0W@!NG#0%MST5MST5MSP%M!02I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I&amp;45MST5MST5MST4IBX]Q)I2\CYFI5-)RT%IRT%IRT%IRT#]\AS&lt;7T%IRT%IRT%IRT)QA9(6\''I2\9PEMBT5MST5MST5MBT6G"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;ITH=MST5MST5MSP%MSX^UE92\&amp;T[ @D_S4=OS4=OS4=OS45H7W@T?M=OS4=OS4=OS4=OS#PBY9:*\''I0]OT5MBT5MST5MST4ISS5H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X]MBT5MST5MST5M5-''(.)2\Q3,7!6\@!9SS4=OS4=OS4=OSM5VE''=+S4=OS4=OS4=OS! 4@P#]I8&amp;J\''D:%5$5MST5MST5MSP&amp;O6X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"ZMMBT5MST5MST4IS]''(''I2\P(.T4=O"@JP74=OS4=OS4=OS49QB(-[S4=OS4=OS4=OSM&gt;H@S-OS45J_@)2\EZUMBT5MST5MST5MBX\L"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"]$IBT5MST5MST5MBX_(''I0B7MOS4=OS!:X@W#_S4=OS4=OS4=OS4=OS4=OS4=OS4=OST-X@AS?S4=OS45@J''I1NOT4IST5MST5MSP%MOX&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%FST5MST5MST4I#8^U.)0BA3_S4=OS43^]@JX;4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=L]@FAI4=OS4=L7"T:\''I$=5 %MST5MST5MST4L"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X''Y#0%MST5MST5MSX=QE92\7C_S4=OS4=OSBJXEAMOS4=OS4=OS4=OV6X^K4=OS4=OS4=OVCPCY%MOS4=OS43^S+Y2\%X]MST5MST5MSP%M!4"I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;IBT4IST5MST5MST5B)I2\P-OS4=OS4=OS45JS@P#S4=OS4=OS4=OSVN@?!-OS4=OS4=OS"3/\4=OS4=OS4=OS43&gt;$''I0KBP%MST5MST5MST7Y"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%HOT4IST5MST5MBT6[&amp;Y2\Q0#S4=OS4=OS4=OS4=OS4=OS4=OS4=OS4='' O0#S4=OS4=OSR]OS4=OS4=OS4=OS4=OSQY2\)H%MBT5MST5MST5M!8&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X\IST5MST5MSP''VQ06\&amp;U[S"8.K"8.K"8.K"8/SPS/S"8.K"8.K"=NS8C&gt;F"8.K"8/SOUDI48.K"8.K"8.K"8.K40!JVU%(#45MST5MST5MBP''Y"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"U IBT5MST5MSP''V#Y2\CS6TRX.K"8.K"8.K"8.K!#7#!(.K"8.K"8/S"^@?!(.K"8.KT H@*.^K"8.K"8.K"8.K"8/S96J\VTVXBT5MST5MST5MOX&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;#ST5MST5MST5MBY&amp;\E4=EOX.KRT%IRT%IRT%IRXZG&amp;0FK"4%IRT%I48'' O0!IRT%I4&gt;B+ATKSRT%IRT%IRT%IRX.K!1G\.)0J6X=MST5MST5MSP$L"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X$LBT5MST5MST5M5.B$''I%[@@AGOUJKB@ HB@ HB@!IN37#5$$HB@ HBMN%8C&gt;FB@ HBMZ\@D;SRP HB@ HB@ H"5H=TXT@+)V\''NIMST5MST5MSP&amp;OVH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;IVH&lt;IST5MST5MBS4Q''I2QBUFE@JYGN=LHB@ HB@ HBD&amp;GVC6FB@ HB@#SO&gt;@?!  HBMME@@BG40 HB@ HB@ H44EQ) @@,PFM)I2YV@%MST5MST4ISX^I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X]MST5MST5MST4?''I1N!4&amp;F!0(@@E2IRXZF!(ZF!(XHBC7Y!0"F!(ZF4&gt;[ A@"F!$''V@@BQ40"F!(ZF!(ZFB@E\@@@BOXXH!%^\CTIMST5MST5MST6O"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X''VBT5MST5MSP''VC!^\Q3^F!$$7P 5UQ "F!(ZF!(ZF!  ;VM$;BHZF!-O\8D H! #SS B\N8ZF!(ZF!(ZF!([^''JY^M8.F!-O E90F5 %MST5MST5MSS5H"X&amp;I"X&amp;I"X&amp;I"X%X#45MST5MST5M!6J\CPEI!(ZF!-NX"XZF!(ZF!(ZF!(ZF!(_Y88ZF!([S7NAH!([S8@@EP(ZF!(ZF!(ZF!(ZF!)/V48ZF!(ZFPVJ\CUCVST5MST5MST6GRH&amp;I"X&amp;I"X&amp;I"X%HQ$5MST5MST5M5$HM''D+S!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(X;8=&amp;G!(ZF49_ "P"FBU$@+P"F!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!-MZ.!^]U %MST5MST4IBX&amp;I"X&amp;I"X&amp;I"X&amp;I"P$IST5MST5MS]:U''@6(RXZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(?YVC.F!-NM8H&amp;F!$T@P&gt;MI!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF6P6\S%YMST5MST5MSP''Y"X&amp;I"X&amp;I"X&amp;I"U@IST5MST5MST6G@)2\!8ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZFO]$=!(ZKR&gt;BIBH^4@A"T!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!%YW''FJI5$5MST5MST4IOX&amp;I"X&amp;I"X&amp;I"X''YBT5MST5MST7V7FJ\A)"F!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!#/Y6X&gt;FRZ# "S]N@E$;!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(X;Q90 8MYMST5MST5MSZNI"X&amp;I"X&amp;I"X&amp;IOP%MST5MST4I5)D ''ED;!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZFS]''YN8-B8M%B@HVM!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!)F\''EGVST5MST5MST5F"X&amp;I"X&amp;I"X&amp;IRC5MST5MST5MS]Z1''I2Z!$EAPTEAPTFFN3,;(N^F!(ZFPTEAPTEA!#,=6S6FP.C&amp;,@BYN8YAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPXZMHI2UST5MST5MST5M!8&amp;I"X&amp;I"X&amp;I"X$AST5MST5MST5M%Y1"#XYAPTEAPTEAPUZG!47V5-8;PXZFPTEAPTFF5-''Y5$JZR$L@CHYAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTFFR@*\A#5MST5MST5MSX\L"X&amp;I"X&amp;I"X&amp;IQ$5MST5MST5M(4*\Z3&gt;FPTEAPTEAPTG^#8^G!8^G!8^O5#/''PTEAPXZ#6Y/ QPT@Q=MAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPTEAPY,U''FCYST5MST5MST6GTH&amp;I"X&amp;I"X&amp;I"X]MST5MST5MSY/(''D9P!$EAPTEA9:B 94F N=ZOBX^G!8^G!47V7#,;N=$L$PH@H(Z (JB (JB (JB (JB (JB (JB (N]APTEAPTFG&amp;Y1W"T5MST5MST5M!9NI"X&amp;I"X&amp;I"X&amp;GST5MST5MST7Y(Y0U"X^G!8^GQ%Z (JB (JC''93,;&amp;M[VBX^G!8^GB]YF"UL@@H7''(JB (JB (JB (JB (JB (JB (J@;BP$IBP$I(6B\S*UMST5MST5MSP''Y"X&amp;I"X&amp;I"X&amp;I!45MST5MST5M6Q6\&amp;[UUUUUUUPV"N3,;N3,;N3. (J@;N3,;7-ZG!8^G!4!U@I&amp;XN3,;N3,;N3,;N3,;N3,;N3,;N3. 7K1UUUUUUT(]''D8?ST5MST5MST4I6X&amp;I"X&amp;I"X&amp;I"X]MST5MST5MS]$]''I%JUUUUUUTE8C,;N3,;N3,;N3,;N3,;N:B (C.X5$4=OUO\PS,;N3,;N3,;N3,;N3,;N3,;N3,;(M1UD!HRD+Q(GY1NO45MST5MST5MB]&amp;I"X&amp;I"X&amp;I"X&amp;GST5MST5MST7YXI0UO=''Y6]''Y6X&lt;;N3,;N3,;N3,;N3,;N3,;N3,;N3. N:AIPS,;N3,;N3,;N3,;N3,;N3,;N3,;N3/V"X&amp;I"X&amp;ITFB\S*UMST5MST5MSP''Y"X&amp;I"X&amp;I"X&amp;I!45MST5MST5MVN"\S 3''(JB (J@;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N:B (JB (H^Y''AVIST5MST5MST6G$8&amp;I"X&amp;I"X&amp;I"TYMST5MST5MSS5J''F,?N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3/YEY2Y$45MST5MST5M!5BI"X&amp;I"X&amp;I"X$AST5MST5MST4I%Y2$#S,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;)P*\ZC5MST5MST5MSX\L"X&amp;I"X&amp;I"X%HOT5MST5MST5M5$^\''N@;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N86$''IVGST5MST5MST6G"X&amp;I"X&amp;I"X&amp;I"S4IST5MST5MB]Z.HI1QU#,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3.Q''I1G5$5MST5MST5M!8&amp;I"X&amp;I"X&amp;I"X''YBT5MST5MST7VUFJ\R$7^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;VQ90 $]YMST5MST5MSZNI"X&amp;I"X&amp;I"X&amp;IT@$IST5MST5M#0E"''FHA7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^!16\X#?VST5MST5MSP$=RH&amp;I"X&amp;I"X&amp;I"X$IBT5MST5MST7^A)0M#S/^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-;^7-$M''@KVST5MST5MST4I6X&amp;I"X&amp;I"X&amp;I"X%H!45MST5MST5M5)*:''IT;U%YVU%YV&amp;I"XU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%ZX&amp;EYVU%YVU#-#.%%G&amp;@%MST5MST4IBX&amp;I"X&amp;I"X&amp;I"X&amp;I"Y-MBT5MST5MST6#''I0W(=:X&amp;I!VN9#Y5)"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!VTH\;U)"X&amp;I#^Z90MO=YMST5MST5MSX]H"X&amp;I"X&amp;I"X&amp;I"X&amp;I5 %MST5MST4I5.UY''E+''U%YV!($B)#5VU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YVU%YV!92&amp;8HZXU%X;P!^\G]YMST5MST5MST4=RH&amp;I"X&amp;I"X&amp;I"X&amp;I"X]MBT5MST5MST7\E91NQ)#V!&gt;T@@@BM7-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[VU-%U@@@B6]YVN16\.))MST5MST5MST6OTH&amp;I"X&amp;I"X&amp;I"X&amp;I"X''##0%MST5MST4IOZ*\X)D=$RH@A^ L7-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-ZX!&gt;U\@L%G6X4B''D;YBT5MST5MST5M!4"I"X&amp;I"X&amp;I"X&amp;I"X&amp;IT@%MST5MST5MSX&lt;KHI3(*@@@&amp;Y_V&amp;M[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-X;"^T@@FO%''I1QBT5MST5MST4I#&gt;NI"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X$AST5MST5MST5MOT:\..B!(-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V"Q7\VY1+RH=MST5MST5MSP$L"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I80%MST5MST5MB][ VY2\OS/V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5%[VS)2\T]8IST5MST5MST4A"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;GBT5MST5MST5M5%LW''N"G5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-ZX9Q^\U8]MBT5MST5MST4IVH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%HOT5MST5MST5MBT7Y@)2\T][V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-ZXS2B\VS&gt;OBT5MST5MST4I!8&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%MSP%MST5MST4IBQN\''FJ(5(&gt;O#8&gt;O#8&gt;O5%@=#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O(8''V#8&gt;O#8&gt;O#8?V'':6\''NJGBT5MST5MST4ISY-H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I&amp;8&lt;IST5MST5MST6G9Y2\@-2X#8&gt;O#8&gt;O5(&gt;&amp;[.[V#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8&gt;O#8?VT@HE&amp;=ZO#8&gt;O#8?VCI&amp;\''F =ST5MST5MST4ISX^I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;GST5MST5MST4I#0D]''I1+7I!MST5MSY!Q@E3Y#45MST5MST5MST5MST5MST5MST5M#8\M@D+VST5MST7V6QV\''@KY5 %MST5MST5MSX?Y"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I6P$IST5MST5MSP%MOT:\''J7\#45MSX=P) C"&amp;D5MST5MST5MST6O#8=MST5MST5MST7VR0B&lt;V8=MST6O"QV\''BBI#0%MST5MST5MBT4="X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%FSP%MST5MST5MBT6%EY2\@ _VSP%MTP@M&amp;D4IBP$IBP$IBT4IR: =SP$IBP$IBP$IBS.Y@D)MBT7V7I&amp;\''@JM#0%MST5MST5MSP&amp;GTH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"T4IST5MST5MST5M5*UN''I2$TX_V6PT@''=XIBP$IBP$IBP$I!1)2#X&lt;IBP$IBP$IBP%M6WH@7M[VQZ6\''BBM#45MST5MST5MSP%M&amp;8&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X''Y#0%MST5MST5MBT5MOY&amp;\''I0FOU4@R(\IBP$IBP$IBP$IBX]UAX6OBP$IBP$IBP$IBX]Q@@JO9RB\''@JI#44IST5MST5MSP%MQ$"I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"S5MST5MST5MST5MBT4=%Y2\''FIB8*VG!8^G!8^G!8^G!8^GUPVMSX^G!8^G!8^G!8^GTI4OS!^\''F#Y#0%MST5MST5MSP%M!8&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;IQ$4IST5MST5MST4I5(\K)E&amp;\E4+ !=ZG!8^G!8^G!8^G!5TE#P&amp;G!8^G!8^G!8_V#4J^VY2\V^H=5 %MST5MST5MST5M!=&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X$IBP%MST5MST5MSP%MBX%(VY2\)D8KQ-ZG!8^G!8^G!8]UAX4I!8^G!8^G!8&gt;G8I$B''I2\U3&gt;GSP%MST5MST5MST4IS]&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"T5MBT5MST5MST5MSP%M#4TJ''I2\VVIG''&gt;L=!8^G!8^GUPVM!8^G!8^#80R]Z1^\''I1+TX^OBT5MST5MST5MSP%MSS5H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;S!45MST5MST5MST5MBT6X6^JYCY2\E05N9PN"%3=P6V#(%=$D7DIE)9$M.)2\.$9QRM9MBT5MST5MST5MST5MSS5H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"YLIBP%MST5MST5MST5MBX=MVDHFCQ^\''I2\HF-N&amp;Y&amp;Y&amp;Y&amp;YS*6$''I2\''E$MGY+YBX&lt;IBT5MST5MST5MST4ISS6I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;ICD5MST5MST5MST5MST5MSP%M5%B]S&amp;H ''I2\''I2\''I2\''I2\''I0 X IGO=YMBT5MST5MST5MST5MSP%MSS5H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;OBT5MST5MST5MST5MST5MSP''VU%ZI8EFUA&amp;AWS$9NS!VYZIUG$S?V&amp;MYMST5MST5MST5MST5MSP%M!=%H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"T##SP%MST5MST5MST5MST5MST5MSP%M5-[VSS7Y"ZT?O:VI$36G5-[VSP%MST5MST5MST5MST5MSP%M!9NI"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I!45MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MBP%M@X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I6P%MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST4IST6GVD"I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"PEMST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST4IST4=CH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"]%MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MSP%MSX^S"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X$ISP%MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MST5MSP$IST4I!=&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;GSP%MST5MST5MST5MST5MST5MST4IST5MST5MST5MST5MST5MST5MST5MST5MST5M#8\=6X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X%FSP%MST5MST5MST5MST4IBT6OOZMM#45MST5MST5MST5MST5MST5MST5MST4IST6O!5 L"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;GSP%MST5MST5MST5MBT5MBT4A"X&amp;I"]$ABP$IBT5MST5MST5MST5MST5MSP$IBX_#"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"U!MSP%MST5MST5MBT5MST4I!35PRH&amp;I"X&amp;IRH%PVC6#Q(^G!8^G!8^G!8^G@S7#6X$DRH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I88]MST5MST5MST6O#8&gt;O!37Y$8&amp;I"X&amp;I"X&amp;I"X&amp;I"X%H"X&amp;ICEAP$9MPT@2I"X%H"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;SOS5F!8^G!8^GQ D=&amp;=$L"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"T!HRD!HRD!HRD!HRH&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;I"P@a'))</body><body package="Spy-VWSpecific">kaiMedium	"UIMaskEditor new openOnClass: self andSelector: #kaiMedium"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@75 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 321 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(995 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1220 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 449 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2216 2216 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6103 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6327 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1252 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(128 128 128)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 353 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 2344 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1573 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1252 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(32 64 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(706 706 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1156 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1027 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2023 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 835 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2601 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1830 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1413 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1284 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2280 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 321 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4272 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 1188 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 2184 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(642 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(96 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 899 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O&gt;H?O3?"O3&lt;?8#&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O&gt;K"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3?"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O&gt;H?8#&lt;?O&gt;K[6=.UT YRT-/[698?O3&lt;?O&gt;H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3?[#*%CIBP$&amp;URY&amp;Y''^7"QCP8;[O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?689CIM:)P5,$IM;^&amp;\_^IBP$P4O&amp;INZN6&gt;H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O&gt;H?O3&gt;UP2QTP:ET&amp;Y&amp;YUEQTUEQTUEQT&amp;URYUBQCIM9C#)8?O3?"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O=-CUJD$&amp;URY&amp;UQTUEQTUEQTUEQTUEQTUEQTUEP$(RQ[#.H?O&gt;H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?64NY*UQT&amp;UQTUEQTUEQTUEQTUEQTUEQTUEQTUEQT&amp;UQTP5QC63&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?8#&lt;?#"Q[IERYUEQTUEQTBP$IBURY&amp;Y&amp;Y&amp;UPIBP$IUEQTUEQTUERY9)''0''#&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&gt;^*RQ[&amp;Y%TUEQTU@$IUM8$IE/^$YEO$YG^V2P$7%PIBUQTUEQTUEP$P4O[O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3?[(TMT&amp;UQTUEQTBP''^IBRY8Y_)S.-XC%#+S*NW''UP$IM8IBUQTUEQTUEQCI@X?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?8#?[IDMTUEQTUEQT$]8$$^EMYAW(W5=_W0Q_W5=_X0*_:Y5OIBRQIUQTUEQTUE-T##&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?8#?[INYTUEQTUEPIUJF,%&gt;-WW5=_( UNS^%0S$4KC/E_W5?FVI]GV=8IUEQTUEQTI@&amp;NO3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3?[IBQTUEQTUEPIII''$; I_X6POS2RNA#&lt;$W&gt;S[689[$^QEU5=_''9\IIEQTUEQTUI''^BX8?O&gt;H?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?8#?[INYTUEQTU@%TINF.:E&lt;J:&gt;G[8#&lt;?O&gt;H?IE&gt;WO3&lt;?O3?"64]N(%=_V@3^&amp;P%TUEQT&amp;RQTA#&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&gt;^9$MTUEQTU@&amp;YINS1W6M*$=,?O9;[6=/[O2Q_%&gt;IY6=/[VS&lt;?V^DK+5=\BI''^BUQTUEQTIBQ!O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?&lt;DMTUEQTU@&amp;Y7$4DW1EJ:6[[6=/[6=/[63&lt;$W9_"V]/[6=/[6&gt;K/V%DEW0I]$]8IUEQTUES&amp;(U$?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?#-:YUEQTU@&amp;Y$Y,+W5"YO:-_Q3?[6=/[6=,?IE?$''-/[6=/[63=[W&gt;;[P&gt;.-W:8A7 %TUEQTUDN)O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O&gt;H?62Q[&amp;UQTU@&amp;Y7)-_W9.NO3&lt;$CY&gt;N8-/[6=/[VX9GP=/[6=/[6=,?&amp;5=GO&gt;HFSPI_Z)G^BUQTUI''^&amp;UH?8#&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O:$$UEQTUEQTID5_W9,F''-/[O9]_%9;[6=/[6=/[O5''[6=/[6=,?8U=N6=/[V]-SD%&gt;[&amp;Y$IUEQTZ&gt;Z!8#&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O=,$II%TUEPIINPDW9.N''-/[69:NYJ,F6=/[6=/[T%:$T-/[6=/[6&gt;=\BS?[6=-Y646=W47^UEQTUEQTIH8?8#&lt;?O3&lt;?@C&lt;?O3&lt;?O3=C*UQTUEPIING1W0:)VYW[6=/[64NN6=/[61''[68:W(H;[6=/[65''[9-/[6=/[%].N@5?\$2PIUEQT&amp;U,$VS&lt;?O3&lt;?O0@?O3&lt;?8#?[&amp;Y%+UEQTUI&amp;.W1FQ60ZU%YVU%YW[A*''[%YVUT-.N%&gt;RN69UR''%S$*U&amp;U%YVU%YTF64LEW5"Q7 %TUEQT(X8?O3&lt;?O3&lt;@O3&lt;?O3&lt;?P&gt;YTUEQT$U/$:G3$V]-RT)VU%YVU%RR$*]-R%UK[#)_$#--R6=,CW9O[A)VU%YURT-/"$1U_SU,IUEQT&amp;U.!''#&lt;?O3&lt;?@C&lt;?O&gt;H?VRP$&amp;UQTB]:,;%?+QANQ6=,FA XFA)UC)D&lt;FT XF64.3)8ZU#-.SW&gt;:)60XFA XF6=-T:Y?+W0_!I@%TUEP$UM,?O3&lt;?O0@?O3&lt;?O0YT7%QTU@$$%1I3R.%_W45CT(8FA XF%RS!IIWK#-.)SZ^NA--CGE=G''(8FA ZNT$N3D%&gt;[,@]_SS$IUEQTUE-CO3&lt;?O3&lt;@O3&lt;?O3=C9%QTU@''^$^-_:8:NQ&gt;9_''5.U#(:N# ZNQ&gt;1KT(;[P?IJ#(;[R%=&amp;68:N#(:NT/@EW6QG#-.[W4UGI@%TUEQCINH?O3&lt;?@C&lt;?O3&gt;^IDMTUEPIINEWF9N^#%&amp;N%45KA(:N#(:NA$O!$X:N%TO)R(;[$U&gt;Z&amp;].N#(:N#(:NC9^NVX;[+J=_$2PIUEQT7)$FO3&lt;?O0@?O3&lt;?A%RYUEQTUBQMW9=KA(:NA-.N#(:N#(:N#(:N$^D$#%IC:T*N#.-_9M.N#(:N#(:N#(;[A(:N#(9XW48$&amp;UQTUER)*S?"O3&lt;@O3?"O4.)&amp;UQTB]:YYE&gt;3A(:N#(:N#(:N#(:N#(:N#/B$Q:&amp;UP:MJ6&gt;E_Q_@F#(:N#(:N#(:N#(:N#(8FR%?1$RPIUERYP4O"O3&lt;?@C&lt;?O3=CP9%TU@$$8QU_8PZN#(:N#(:N#(:N#(:N#(:NIEZQT.Z[$8;.W5;[R8:N#(:N#(:N#(:N#(:NT$]WZT($BUQT&amp;RP$63&lt;?O0@?8#=Y(ZETUEPIII_(($?KR8:N#(:N#(:N#(:N#(:N#(9OCDO&amp;&amp;2&amp;WW9.N#(:N#(:N#(:N#(:N#(:NR89T''5&gt;+V0%TUEP$7-,?O3&lt;@O3&lt;?62P$&amp;UQTBU/)W4T$#/AKR4-KP:ECP?BN#(9KR?BNP&gt;F,&amp;^%MJ))O#/AKR4-KR4-KR4-KR4-KR?BN9.-_-2QTUEQT7)&amp;UO3&lt;?@C?"O=,$IEQTUES^S%?+(X;0&lt;OAKR2RQ$YFYIJEC*X:N#(:Q8^G)A5&gt;WT/AKR4-KR4-KR4-KR4-K&lt;OC0R4LSW:VQ&amp;UQT&amp;UQTA#&lt;?O0@?O3?[7"QTUERY$^-_WT.N#(:NR:&amp;)P:D$UIFQ$YETIDMCP4^0VE&lt;E*X:)&lt;OC0&lt;OC0&lt;OC0&lt;OB)R8:N#(:N%5&gt;:+M9TUEQTIH8?O3&lt;@O3&lt;?6=;^UEQT&amp;YEXW4:S$9NS$2S0*_B)*TMC9"S^$YFQ$URQC5=_CH9C*Z&amp;)*Z&amp;)*Z&amp;)*Z%C&lt;JG!$02S8ZM_QT_^BUQTUE.NO3&lt;?@C&lt;?O9W^7%QTUI%OC S1W5=_W5?!#$MCP4N)*Z&amp;)*TMCV2PI$YN&gt;VDN)P4MCP4MCP4MCP4MCP89GX5=_W5&gt;"U&gt;9G7 %TUER!##&lt;?O0@?O3&gt;U&amp;]9TUERY$U!_+$)"X.QJ7*%CP4MCP4MCP4MCP:&amp;)P4MCV2QCP4MCP4MCP4MCP4MCP4N)ID* 9NQJ&amp;5=EQ=8IUEQTV88?O3&lt;@O3&lt;?6=8$UEQT&amp;YG+W1MC#/AKR4MCP4MCP4MCP4MCP4MCP4MCP4-KP4MCP4MCP4MCP4MCP4MCP4O0&lt;OC0# !_AT_^UEQTUBRNO3&lt;?@C?"O=/^IEQTUES^S%?+IDMCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP&gt;Z[W1"Q&amp;UQT&amp;UPI##&lt;?O0@?O3?[IBRYUEPIV:M_QP%CP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4L$:5=NIEQTUERYUEH?O3&lt;@O3&lt;?VU.!UEQTBRRWX2AG*TMCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MCP4MC$Y=_:ZDIUEQTIM;[O3&lt;?@C&lt;?O3=CP9%TU@$$''P)_U$N!9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.Z!P&gt;FI:&amp;H$BUQT&amp;RP$63&lt;?O0@?O3&lt;?R?BYUEPI7%R_W;MC9*G&amp;(ZG&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.Z!(^[&amp;(TMJW?EOI@%TUI%CP98?O3&lt;@O3&lt;?O89T&amp;UQTUEP$:U?.INY[IJF)9*E[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V5-[V:F!P4L$V:G&amp;XE?+II%TUERY*Z$?O3&lt;?@C&lt;?O3=YINZYUEPIIEY#U5F)IDMC9KL$(U.!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!V:F!BD4$&lt;E-C;@)_R"PIUEQT&amp;URNO3&lt;?O0@?O3&lt;?O4O&amp;UEQTB]9OVE?+(ZE^XE&gt;"+DL$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBR!&amp;^9_GIL$P9-_''4\$BUQT&amp;TL$VS&lt;?O3&lt;@O3&lt;?O3&gt;NUM9TUEPIII]_WFK2W5?+;BP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBRQWU=_S*^&gt;W:/^UEQTUER!P3&lt;?O3&lt;?@C&lt;?O&gt;H?62P$&amp;UQTBRQG''5?+A&gt;:SIDL$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$9$O!+ _+D"AVI@%TUEP$UEH?O3&lt;?O0@?O3&lt;?O3=C(UQTUERQV9]_+9\$9"S^IBP$IFT$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$YRP$(TMJ&lt;U?)I@%TUERYIE.^O3&lt;?O3&lt;@O3&lt;?O3&lt;?T%QTUEQTI]:QVE&gt;&amp;Q5.YIBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$7"RQAU?.@RPIUEQTUNZNO3?"O3&lt;?@C&lt;?O3&lt;?O3=C*UQTUEPII@3AW5"QII''^7-;^IIG^IM;^7-;^7-;^7-;^7-;^7-8$$RS^7-;^&amp;RS^S%&gt;IR"PIUEQTUBP$63?"O3&lt;?O0@?O3&lt;?O3&lt;?%Y$$&amp;UQTUES^BB-#&amp;9$$UI%TIIG.:P''^UI&amp;Y&amp;Y&amp;YUERY&amp;Y&amp;Y&amp;Y''^,9=GIERYUM8$SWY_:UQTUEQTUI''&amp;##&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?8#=CV9%TUEQT&amp;Y%]W&gt;"#7"PIBU/)W9,$UEQTUEQT&amp;RS^UEQTUEPIV;M_S"QTBY$$%5]_@9FYBUQTUI&amp;!(Y8?8#&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?62P$&amp;UQTU@''^$V)_:I.QIBS!U?FQIIETIUPI&amp;YEV@Y$IBRUTBY&amp;YQU&gt;SIM9TSP5_V@D$BUQTUERYBX8?8#&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&gt;N(Y%TUEQTB]8AZ%?(VJR!&amp;5?/9)DIBP$I$RPLD "YBP$IBP&amp;QV9M_VBPAZ+%_VD\$BUQTUEQTP4O"O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O4MC&amp;UQTUEPI7)F[W5&gt;&amp;9I=X$YFQ$P$IBYD$$5?)&amp;P&amp;QBP&amp;Q$YFQS/F''AU=_@0D$BUQTUEQT(RS[O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3=YV&gt;ZYUEQTU@''^&amp;T66W0(N%2P$$YFQ$YFQIIM_:P&amp;Q$YFQ$YG^INQ *%=H:YD$BUQTUERYIERUO3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O=/^V5QTUEQTBY''^$09_W7A*$9DI&amp;UPI$RP!W&gt;$I$P%T&amp;P$ICD8GD%?.R%RYBUQTUEQTN]:NO&gt;H?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?%]8$UEQTUEPIUBRQSP]_W:&lt;E%5G!Q:0$$5=MUD=G8YLOVKY_W2C)@RQTBUQTUEQT7"QKO3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3?"8#=R&amp;RQTUEQTUEPI7%/!STU_W5&gt;ZA5!N:Y.":&gt;%NVI?NW5=_'':-VIBPIUEQTUERYIBQKO3?"O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O9VYIEQTUEQTU@$IIBQG$4;1ZU=_W5=_U5=_W5=_:/G+UT_^I@$IUEQTUEQTIM;0O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3?[&amp;RRYUEQTUEQTU@$IIBP$$T*+-:TEQ^;.AQ!N:VIOIBP$U@%TUEQTUEQT(]:NO3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?&lt;BQTUEQTUEQTUEQTU@$I&amp;RP$V2RQ+D]GQ4^QIJD$II$IBUQTUEQT&amp;Y''^P2S[O3?"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O3&lt;?VRS&amp;UEQTUEQTUEQTUEQTUEPIBP%T&amp;];^7-;^&amp;UPIBP%TUEQTUEQTUES&amp;UDO[O&gt;H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O3&lt;?O8:YUHMTUEQTUEQTUEQTUEQTUEQTUEQTBP$IUEQTUEQTUEQTUERYUE.!(UK"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3?"O=,$IEQTUEQTUEQTUEQT&amp;URYUEQTUEQTUEQTUEQTUEQTUEQTUEP$INX$#.H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?O9;&amp;P9%TUEQTUEQTUI$$IBQCII%TUEQTUI%TUERYUEQT&amp;Y%T7$L$&amp;U.N63&lt;?8#&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?O3&lt;?O99CV9&amp;YUERY&amp;Y%TUBQCUJ&amp;NV=9CP:F(IM:YUEQT&amp;Y$$IE-C*Y$$P=.^O3?"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O=.!V5RYUI''^IBQ[9-8$P9T?O3?[#$N!IM:YBY$$7%RY7"P$P?AR8#&lt;?O3?"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3?"T$NY#%/&amp;(RS^&amp;Y$$V4NN63&lt;?O3&lt;?O3&lt;?V]/[%PZN#(:NT-/[6&gt;H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@O3&lt;?O3&lt;?689CP4MCP4N)# [[V^H?O3&lt;?8#&lt;?O3?"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?@C&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3?"O&gt;H?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O0@?O3&lt;?O3&lt;?O3&lt;?8.K"O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;?O3&lt;@'))</body><body package="Spy-VWSpecific">kaiMediumIconGray	"UIMaskEditor new openOnClass: self andSelector: #kaiMediumIconGray"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@75 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(995 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(224 224 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1220 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 449 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1670 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(128 128 128)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1349 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 2344 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1573 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(32 32 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1798 1798 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(256 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1252 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 1477 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(931 931 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1156 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(385 385 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2152 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 835 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(64 64 64)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1284 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1509 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(738 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(192 192 192)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 1188 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 2184 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 2409 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 2633 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(96 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!D]GQ4]GQ8RD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDQ8RD!HQOS89OS0:D!HRDQ8RD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRDQ0RD338&gt; 8NC 8LK 8NC 8N[O,&lt;NQ0RD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HQG!L&gt;C 0,KS@-LSD1LSD1LSD1LS@-L 8NS!D]G!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD!HRD!HRD!HRD!D^DO(NIB0-LS@-LSD1LSD1LSD1LS@-LS@,KSD0&gt;38RDQ8RD!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HRD!HRD!HRDQ4&lt;&gt;B41LB0-LB41LSD1LSD1LSD1LSD1LS@-LS@-LS@.C38RD!HRD!HRD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!HRD!HQG!C8KS@-LB41LB41LSD1LSD1LSD1LSD1LSD1LS@-LB40KSD1ES4^D!HRD!HRD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD!HRD!HRD38ML 0-LSD1LSD1LS@,KB41LSD1LSD0KB0,KSD1LSD1LSD0KS@-W!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HRD!HRDO($KB41LB41LSD1LB0.I3MOLSHNC 0/L4&lt;3LB0-LSD1LSD0KS@,K"PFDQ8RD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!HRD 0-LB41LSD1LB40KB&lt;2XO ''WA)@SR:*PX)UA$9!UB0-LB41LSD1LS@,K &lt;&lt;D!HRD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD!HRD 41LB41LB41LB40K 3;UNU@XFE"T%IRT%E XFEAM"&lt;&gt;CB40KSD0KSD0KSD2I38RD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HQO 0,KSD1LSD0K &lt;1EP](BAPVT-)BM@4QKFTRMV9&amp;TAPVTV=T&gt;UP,KSD1LS@-LB43OQ8RD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD 40KS@-LB40KB3.H5I1XAT5A 3,G2L#L/)872HX;SEQ]AU _+-T;B0-LB40KB40KSL&lt;D!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD 0,KSD1LSD0KSM F))PBR0P7M=BOT%JO3@AAM5IR#8&lt;7M5]SCIPOT&lt;=LB0-LSD0KS@.I34^D!HRD!HRD!HRD@HRD!HRD!HRD!HRD 40KSD0KS@,K4996TEBM!M@7T,#HT,#HT,0@PS_H2L!R2EH7M&lt;?WFEAM5YDKB40KSD0KB8LN!HRD!HRD!HRD!@BD!HRD!HRD!HRDO$0KS@-LS@-LN5&gt;TVIRDWTX72L#H2L#H2L#L@DD72L#H2L#H2C]AA] BFIQF$T0KSD0KS@,K 8RD!HRD!HRD!HP@!HRD!HRD!HQG#$0KSD1LS@-L =]P%D/SM84@@S_H2L#H2L#HUTIAM&lt;#H2L#H2EJ@[ZCH M*T,PZCS@-LSD0KB8$&gt;Q8RD!HRD!HRD@HRD!HRD!HRD!HLKB0-LB40KN=^TTH6@4L#L''UBF2L#H2L#H2L &gt;N&lt;#H2L#H2L 7Y@"N2EKH)E@XA%TKB0-LSD0KSL=G!HRD!HRD!@BD!HRD!HRDQ39LB41LSD0K45=PTM^O2L#HM5&lt;@"&lt;#H2L#H2L#HT%KH2L#H2L#HV"TJ4L#H2MCUTKGZ$P-LSD1LB42C!HRD!HRD!HP@!HRD!HRD!@8K 41LB40KSI:T%H6O2L#H2L 7AVHG2L#H2L#H2IMW2L#H2L#H2H--N8?H2L#H4D:T%H,KB40KSD0KB&lt;&gt;D!HRD!HRD@HRD!HRD!D\&gt;B0-LSD0KB=!6VD.@2L#H2L#H2C/H2L#H2L#H2D"HUL#H2L#H2MAR3H?H2L#H2L"F6! L30,KSD0KSD2C!HRD!HRD!@BD!HRD!HRD 0-LB41L 3,FTISL2HZF!(ZF!([HA3/HRHZF!$ G"MJF!(ZF2IFKRL"F!(ZF!(ZF2HAMTJ@;B41LSD0KSL=G!HRD!HP@!HRD!HQGO$0KSD1LB&lt;2H)%@D#8YHRD!HRD!HRH''OPHYHRD!HA8#R!(YH!#^.@D*FRD!HRD!HRH[HO)QP)MLKSD1LSD1E!HRD!HRD@HRD!HRD!HMLSD1LB41E5IPPSTZCM4 GA0\GA0\;O#:@A0\GA8B^4(XGA4#RBIR@R@\GA0\GRC^C#UBM%D7OS@-LSD0K"T=G!HRD!@BD!HRDQ&lt;&gt;IB41LSD0KPY0B684@%(472H@GA0\GR@/O3@\GA8B@P]JFA8A@NPBC2@\GA0^@!#^UHPAF!D4_"0-LSD1LB40&gt;AHRD!HP@!HRD!@PASD0KSD0K =)XR4#H@Q @HYF@ HB@ HCHO-"@ HB@ DFW2HCH4 AD#8B@ HB@ HB&amp;@E@&gt;2C][FD-EB41LB40K 8RD!HRD@HRD!HRDB0-LB41LB38BA]-R L G"4Z@ HB@ HB@ C/OQP^@ HBZ%8[H3@!PUXB@ HB@ HBFQ@6@2HCH 0V1!D1LB41LS@/OQ8RD!@BD!HRD30-LB41LB&lt;3UAT7P HB@ HB@ HB@ HB@ HB@ &lt;?L HA@5].FRFP@"8B@ HB@ HB@ HB@ HB@ MBPAX4;B41LSD0K6D^D!HP@!HRDQ= KSD1LS@.XNPWU2HB@ HB@ HB@ HB@ HB@ C.S$9"@7MW[!-,HTD"@ HB@ HB@ HB@ HB@ H@G66&amp;TN0,KSD0KSC:D!HRD@HRD!HP&gt;S@-LS@.IO%BTO(B@ HB@ HB@ HB@ HB@ HB@3D&gt;C I"R6&lt;!MP,?H HB@ HB@ HB@ HB@ HB@ DU'',]/LB41LSD2C!HRD!@BD!HRDQT0KSD0K3@$XNP.@ HB@ HB@ HB@ HB@ HB@ HAES3.XEX9A@M]H HB@ HB@ HB@ HB@ HB@ HCLR1!D40-LSD1L 8RD!HP@!HRD!HMLSD1LB=OWFICS7M3\7M2@N=L;N=1@ DA@7M1@N&lt;=WN5[R[PTKPM3\7M3\7M3\7M3\7M3\7M3\N0YXQ%ULSD1LSHMOQ8RD@HRD!HRCSD1LSD3LA%!FN=1@PDA@PL2C 8NI3ET;&amp;DA@PDBC##;U@ @M M1@PDA@PDA@PDA@PDA@PDA@7C/W%I@KSD1LSD0K34^D!@BD!HRD 41LSD1LSIBT59"@ HB@&amp;I"XN9GL 8NC 8NC3C,;&amp;E^DA*EPRI"X&amp;I"X&amp;I"X&amp;I"X&amp;I"X&amp;DB@ HC\"9PJ 41LSD1LSL=G!HP@!HQGC(MLSD1LSHLS%E%GA@QG!IFXN3.X7M0;4&lt;2I 8NC 0.C4&amp;D@38@;N3,;N3,;N3,;N3,;&amp;C.N!HRDC$RT7S9LSD1LSD3OQ8RD@HRDQ0:CSD1LSD2CR9Q$ P@@@DKO&amp;C,;N3,;N3,;N3,;U\0K =,BX(@;N3,;N3,;N3,;N3,;N3-EE@@@@@C]G54&gt;SD1LSD1L34^D!@BD!D\N 41LSD1L :*T#]KR4-KR3C,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;$]JH"H!TW9S]O$1LSD1LSL=G!HP@!HRD!HMLSD1LS@.P%M\;7M3\7C,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3/\PDA@&amp;H.T(DULSD1LSD3OQ8RD@HRD!HRCSD1LSD3LX)QF$S,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N=OW%IBCSD1LSD0K34^D!@BD!HRD 41LSD0K49TX$L0;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3/LA% F3D1LSD1L 4=G!HP@!HRD!DULB41LB&lt;1AFKYEN3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;N3,;SD,X@=LKSD1LSHND!HRD@HRD!HP&gt;B41LS@/L$5BT3=NQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ$YFQ439M,]KLB41LSD2C!HRD!@BD!HQG6@-LSD0KB9!MA]8;4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS4=OS43/[)+D;S@-LS@-L&amp;8RD!HP@!HRD!L&lt;KB41LS@-U"0T9 L1U3EWS3EUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUWL$UWLU\2@6 TFN0-LSD1LB39G!HRD@HRD!HRD 8MLB41LB&lt;&gt;TA],;US.@7-\;UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUT;QDP;N5T;@P=PQ8$KB41LB0/OQ8RD!@BD!HRDADTKB41LS@.CV5!KN3.C+(DHO%WL3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3@T@TL&lt;; M(X(I,KSD1LS@.C!HRD!HP@!HRD!D_O"P-LSD1LB=T_(=IDIP JB=OL3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3EVXQ)X@A--M%JRCSD1LS@-L&amp;0RD!HRD@HRD!HRD!HMLB41LB40&gt;+)RM)&amp;S[N5WL3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3I#O6 TY%D4NS@-LSD0K"T=G!HRD!@BD!HRD!D\&gt;SD1LSD0KU]TOFM/L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3O@%BM40-LSD0KSHND!HRD!HP@!HRD!HRD!@,KS@-LS@,;T5@B &lt;3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3L3LGUCT40,KSD0KSD1WQ8RD!HRD@HRD!HRD!HR[S@-LSD0KB&lt;=MFIAL3L3L3L2I3D3L3L3L3L3L3L3L3L3L3L3L3L3LB&lt;2I3L3L3L3LQ+DB!H$KSD0KS@.C!HRD!HRD!@BD!HRD!HRD# .CSD0KS@-L5YRT55UL"X&amp;ISM1P#XML"X&amp;I"X&amp;I"X&amp;I"X&amp;I"T1LQI[L3H&amp;I"T3L"9RTQHLKS@-LS@-L$4^D!HRD!HP@!HRD!HRD!D\&gt;S@-LSD1LB9EF,U@MUT0KB3.U@H5LB0,KB0,KSD1LB0,KB0,K3JP@$MLKB43L''+EXR&lt;0KSD1LS@-L 8RD!HRD!HRD@HRD!HRD!HRD!HLKB41LB0,K$PXX,]\K"T3OXY6CS@,KB0,KSHOOQT0KB0,KB0/L%APDSD3L";F1T&lt;1LB0-LSD0KSL=G!HRD!HRD!@BD!HRD!HRD!D_O"P,KSD1LB42CA!"T$HOL)0CR3HNC 8NC 0,N*=WL 8NC 8NC3L&lt;@$@/LQ)QXT39LB41LS@,KSC9G!HRD!HRD!HP@!HRD!HRD!HRD!C8KSD0KSD0KSEWZ%A!M69QK3HNC 8NC 8LK!@BK3HNC 8NC 8OLTYZDW[FTR&lt;1LB41LSD0KB8ND!HRD!HRD!HRD@HRD!HRD!HRD!HRD 40KSD0KS@,K$X,LTIQFDYFI 8NC 8NC 8P@"&lt;2C 8NC 8LKN9^M@%@BQL1LB40KS@-LB8NN!HRD!HRD!HRD!@BD!HRD!HRD!HRDQ8RI 0,KSD1LB0,K3:AP%D5S!IDK 8NC 8ND@H.I 8NC 8MU3=)M%ECT!HLKB41LS@-LB8''OQ8RD!HRD!HRD!HP@!HRD!HRD!HRD!HQGC$0KSD0KS@-LB0,;)D4_FJYK"HRS&amp;0FC!@@UB4V[O(SR$E@X%D6M48$KS@-LS@-LB43XAHRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HSOB0,KSD1LSD0KB=OO"4.1AZXB7]*MW5&gt;Y#TRM6*@LC0UP(JPN40,KSD1LSD1LB40&gt;Q8RD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!@:IB41LSD0KSD0KS@-E!H6T,Q!X%IRTG9RT%E X,[DFQ9.CS@,KS@-LS@,KB8''XQ8RD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD!HRD3@-LSD1LSD1LS@-LB40;N=-DQ)@J7U7](I@F@=H;N8$KS@-LSD1LSD0KB8OOAHRD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HPDO$0KSD1LSD1LSD1LSD1LB0/L45TK 38&gt;O$VC3MOLS@,KSD1LSD0KS@,KSHMOQ8RD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!HMLS@-LSD1LSD1LSD1LB40KB0-LSD1LSD1LSD0KB0-LB41LSD0KS@-LSC:D!HRD!HRD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HRD!L&lt;KB41LSD1LSD1LSD1LSD1LSD1LSD1LSD1LSD1LSD1LSD0KSD1LB0,K &lt;=G!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!HRD!HRD!HRCB41LSD1LSD1LS@-LSD1LB41LSD1LSD1LSD1LSD1LSD1LS@,KSD2CU8QG!HRD!HRD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRCS@-LSD1LSD0KSD0KSD0KB41LSD1LSD1LSD1LSD1LS@-LB0-L"TWO!D^D!HRD!HRD!HRD!HRD!HRD!HRD!HP@!HRD!HRD!HRD!HPAS@-LS@-LB40KS@,KB38&gt; 0-LSD1LSD1LSD1LSD1LSD1LB0.CO$&gt;DQ8RD!HRD!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!HQGQ4=EB0-LB0,KB41LSD2CO(8DQ4]OU39E 8LKB41LS@,K 8NCO-#O!D]G!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!@BD!HRD!HQG#),KSD1LSD1L"\3L =#O!HQG!HRD!D^D!HRD#,?O3&lt;?O# :D!HQGQ8RD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HP@!HRD!HQG##8&gt;&amp;0DA@S8&gt;6L&gt;DQ4^DQ4^D!HRD!HRD!HRDQ4]GQ4]GQ4]G!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD@HRD!HRD!D\DA@PDA@PDA@QG!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!@BD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HRD!HP@'))</body><body package="Spy-VWSpecific">kaiMediumTransparentIcon	"UIMaskEditor new openOnClass: self andSelector: #kaiMediumTransparentIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@75 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 321 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(995 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1220 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 449 449)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2216 2216 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6103 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6327 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1220 1252 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(128 128 128)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 2890 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 353 353)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 2344 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 1573 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1252 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(32 64 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(706 706 706)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1156 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1027 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1381 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2023 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 835 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2601 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1830 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 1413 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1284 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3051 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2280 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 321 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4272 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 1188 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 2184 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 1413 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(642 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(96 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 1092 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 1316 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 899 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 770 770)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PI]@PDC+PDA@%4A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PINWPDA@PDA@PDA@PDA@PDBSPDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PN-@:4A@PM:Q7)DIUYEU$RRQ&amp;YE@PDA@PN-@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDBQBYEUBP&amp;YBP%UUUUUBP%UBP&amp;QPDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@UY%UB]:)QE0$IM;^&amp;\_^IBP$QDS&amp;&amp;Y$II@E@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PDA@PDA@PDA@PN-@PDAUUY%UQJEUUY&amp;YUUUUUUUUUUUU&amp;UUUURQDI@%UUUU@PDA PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@PDA@PDA@PM8IBZD$&amp;UVY&amp;UUUUUUUUUUUUUUUUUUUUUUUUUT$(RPI$VA@PN-@PDA@PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PDA@PDA@PDA@IIDI*UUU&amp;UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU&amp;UUUQEUUUTA@PDA@PDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PDA@PDA@%4A@&amp;Y%\I@&amp;YUUUUUUUUBP$IBUVY&amp;Y&amp;Y&amp;UTIBP$IUUUUUUUUUUVY9 $IRDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@PDBQURQ\&amp;Y%UUUUUUP$IU]8$IE3^$YEP$YG^WBP$7%TIBUUUUUUUUUT$QI&amp;QPDA@PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PDA@PDAUBTQU&amp;UUUUUUUBP''^IBRY8Y_)S&gt;-YC%''+S:NW''UT$IM8IBUUUUUUUUUUDUYE@PDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PDA@%4@IUTQUUUUUUUUU$]8$$^ENYAW(XFA X@Q XFA X0*_:Y5PIBRQIUUUUUUUUU0I$TA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@%4@IU^YUUUUUUUTIUZF,%&gt;-XXFA ( UOS.%0S48KC/E XFCFVY]HWM8IUUUUUUUUI@%UPDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PD@$URQUUUUUUUTIII''$; I X6POTBRNA$@$XNS[689\$^QFVFA ''9\IIEUUUUUUUY''^BUU@PFA@PDA@PDA@PD@@PDA@PDA@PDA@%4@IB^YUUUUUUP%UINF.:F@J:&gt;G[8$A@PNI@IFBWPDA@PDC"64!O(&amp;A VP3^&amp;P%UUUUU&amp;RPIUTA@PDA@PDA@PDA@@DA@PDA@PDA@PDBQUTQUUUUUUP&amp;YINS1XFM*$=-@PI;[6=/[PBQ %&gt;IZ6=/[V$A@V.DK+6A]BI''^BUUUUUUUIET&amp;PDA@PDA@PDA@P@A@PDA@PDA@PDA@&amp;TQUUUUUUP&amp;Y7$8DXAEK:6[[6=/[6=/[64@$XI_"V-/[6=/[6&gt;K/V5HEX@I^$]8IUUUUUUW&amp;UT!@PDA@PDA@PD@@PDA@PDA@PDA@B]:YUUUUUP&amp;Y$Y,,XE&amp;YPJ- RDC[6=/[6=-@IFC$''-/[6=/[64A\XN;[QN.-XJ8A7 %UUUUUUTQUPDA@PDA@PDA@@DA@PDA@PN-@$P%\&amp;UUUUP&amp;Y7)- XI.NPD@$CY&gt;N8-/[6=/[V(9HQM/[6=/[6=-@&amp;6AHPNHFS I Z)G^BUUUUY''^UP%@%4A@PDA@P@A@PDA@PDA@P@$$UUUUUUUUID9 XI,F''-/[PI] %9;[6=/[6=/[PE+[6=/[6=-@8VAO6=/[V--TD&amp;B[&amp;Y$IUUUUZ&gt;XI$TA@PDA@PD@@PDA@PDA@PIEUII%UUUTIINPDXI.N''-/[69:NYJ,F6=/[6=/[T5&gt;$T=/[6=/[6&gt;=]BTC[6=-Z64:=XD;^UUUUUUUUIEU@%4A@PDA@@DA@PDA@PD@I*P%UUUTIING1X@:)V)W[6=/[64RN6=/[61''[68:W(H;[6=/[65+[9-/[6=/[%].N@6C\$2PIUUUU&amp;U0IIDA@PDA@P@A@PDA@%4AUUY%+UUUUUY&amp;.XAFQ60ZU%YVU%YW[A*''[%YVUT=.N%&gt;RN69US''%W$*U*U%YVU%YTF64PEXE&amp;Q7 %UUUUU(P%@PDA@PD@@PDA@PDA@$^YUUUUU$U3$:G3$V--ST9VU%YVU%RR$*]-S%UO[#)_$#--S6=,CXIO[A)VU%YUST=/"$1U S%0IUUUU&amp;U1U$TA@PDA@@DA@PN-@IET$&amp;UUUB]:,;&amp;C+QQNQ6=,FA XFA)UD)E@FT0XF6423)8ZU#-.SXN:)60XFA XF6=-U:Y?+X@_!I@%UUUT$BY%@PDA@P@A@PDA@P@$I7%UUUP$$%1I3R&gt;% XD9DT88FA XF%RS!IIWK#-.)S*^NA--DGFAH''(8FA ZNT4R3D&amp;B[,@] S#(IUUUUUU0IPDA@PD@@PDA@PDBY9%UUUP''^$^- :8:NRN9 ''52U#(:N# ZNRN1LT8;[QOIK#(;[R6A&amp;68:N#(:NT?@EXFQH#-.[XDYHI@%UUUUDUTQ@PDA@@DA@PDAUUTQUUUTIINEXF9N^#%*N%49LA(:N#(:NA$S!$X:N%TS)R8;[$VBZ&amp;].N#(:N#(:NC9^NV(;[+J= $2PIUUUU7%VYPDA@P@A@PDA@UP&amp;YUUUUURQNXI=LA(:NA-.N#(:N#(:N#(:N$^D$#%MD:T.N#.- 9M.N#(:N#(:N#(;[A(:N#(9YXD&lt;$&amp;UUUUUV)$TBWPD@@PDBSPEV)UUUUB]:YYFB3A(:N#(:N#(:N#(:N#(:N#/B$RJ&amp;UQJMK6&gt;E Q/@F#(:N#(:N#(:N#(:N#(8FR6C1$RPIUUVYQET$PDA@@DA@PD@IQI%UUP$$8QU 8PZN#(:N#(:N#(:N#(:N#(:NIE^QT&gt;Z[$8;.XE?[SH:N#(:N#(:N#(:N#(:NT4!XZT,$BUUU&amp;RPI&amp;TA@P@A@:4BQUZEUUUTIII_((%CKSH:N#(:N#(:N#(:N#(:N#(9PCDS&amp;&amp;2*WXI.N#(:N#(:N#(:N#(:N#(:NSH9U''6B+W@%UUUT$BYE@PD@@PDA@$P$$&amp;UUUBU3)XDX$#/ALSD1LQJEDQOBN#(9LSOBNQNF,&amp;^%NJ9)P#/ALSD1LSD1LSD1LSD1LSOBN9.- -2QUUUUU7%VYPDA@@DBWP@%UIEUUUUW^S6C+(X;0&lt;OALSBRQ$YFYIJED*X:N#(:Q8^G)A6BWT?ALSD1LSD1LSD1LSD1L&lt;OC0SDPSXJVQ&amp;UUU&amp;UUU&amp;TA@P@A@PDBQURQUUUVY$^- W$2N#(:NSJ&amp;)QJD$UYFQ$YEUIDQDQD"0VV@E*X:)&lt;OC0&lt;OC0&lt;OC0&lt;OB)SH:N#(:N%6B:+M9UUUUUIEU@PD@@PDA@&amp;UW^UUUU&amp;YEYXD&gt;S$9NS$2S0*_B)*TQD9"S^$YFQ$UVQC6A CH9D*Z&amp;)*Z&amp;)*Z&amp;)*Z%D&lt;JG!$02S8ZM Q$#^BUUUUU1UPDA@@DA@P@%U7%UUUY%PC S1XFA XFC!#$QDQDR)*Z&amp;)*TQDWBPI$YN&gt;VTR)QDQDQDQDQDQDQDQDQH9HX6A XFB"VN9H7 %UUUV!BTA@P@A@PDBQB]9UUUVY$U% +$-"X.QK7*%DQDQDQDQDQDQDQJ&amp;)QDQDWBQDQDQDQDQDQDQDQDQDQDR)ID. 9NQK&amp;6AFRM8IUUUUWEU@PD@@PDA@7%T$UUUU&amp;YG+XAMD#/ALSDQDQDQDQDQDQDQDQDQDQDQDQD1LQDQDQDQDQDQDQDQDQDQDQDS0&lt;OC0# ! AT#^UUUUURRQPDA@@DBWPETIIEUUUUW^S6C+IDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQNZ[XA"Q&amp;UUU&amp;UTIBTA@P@A@PDBQBRRYUUTIWJM Q %DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDP$:6AOIEUUUUVYBP%@PD@@PDA@BP&amp;!UUUUBRRWX2AH*TQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQD$Y= :ZDIUUUUI@$IPDA@@DA@PDAUQI%UUP$$''P) U4R!9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.Z!QNFI:&amp;H$BUUU&amp;RQU$TA@P@A@PDA@&amp;_AUUUTI7%V_XKMD9*G&amp;(ZG&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.[&amp;9.Z!(^[&amp;(TQKXOEPI@%UUY%DUPE@PD@@PDA@PEUU&amp;UUUUUT$:VC.INY\IJF)9*E\WE1\WE1\WE1\WE1\WE1\WE1\WE1\WE1\WE1\WJF!QDP$WJG&amp;XVC+II%UUUUU*P%@PDA@@DA@PDBY$^ZYUUTIIE]#VEJ)IDQD9KL$(U2!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!(ZF!WJF!BD8$&lt;E1D;@) R2PIUUUU&amp;UUUPDA@P@A@PDA@P@''&amp;UUUUB]9PVVC+(ZE_XVB"+DP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBR!&amp;^9 GIL$QI- ''4 $BUUU&amp;TPI$TA@PD@@PDA@PDAUU]9UUUTIII] WVK2XFC+;BP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBRQW&amp;A S:^&gt;XJ/^UUUUUUV!UTA@PDA@@DA@PN-@UY$$&amp;UUUBRQH''6C+A&gt;:SIDP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$9$S!+ _+D"AWI@%UUUT$BYE@PDA@P@A@PDA@PDAU(UUUUUVQWI] +9\$9"S^IBP$IFT$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$YRP$(TQK&lt;VC)I@%UUUVYIET$PDA@PD@@PDA@PDA@$UUUUUUUI]:QVVB&amp;RE2YIBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$7"RQAVC.@RPIUUUUU^YUPDA PDA@@DA@PDA@PD@I*P%UUUTII@3AXE&amp;QII''^7-;^IIG^IM;^7-;^7-;^7-;^7-;^7-8$$RS^7-;^&amp;RS^S6BIR2PIUUUUURQU$TBWPDA@P@A@PDA@PDA@$P$$&amp;UUUUUW^BB1#&amp;9$$UY%UIIG.:P''^UY&amp;Y&amp;Y&amp;YUUVY&amp;Y&amp;Y&amp;Y''^,9=HIEVYU]8$S''Y :UUUUUUUUY''&amp;BTA@PDA@PD@@PDA@PDA@:4AUWI%UUUUU&amp;Y%^XN"#7"PIBU3)XI,$UUUUUUUU&amp;RS^UUUUUUTIWKM S2QUBY$$%5! @9FYBUUUUY&amp;!&amp;YE@:4A@PDA@@DA@PDA@PDA@7%T$&amp;UUUUP''^$V) :I.QIBS!VOFQIIEUIUTI&amp;YEW@Y$IBRUUBY&amp;YQ&amp;BSIM9US 5 VPD$BUUUUUVYBYE@%4A@PDA@P@A@PDA@PDA@PDAU(Y%UUUUUB]8AZ&amp;C(VZR!&amp;6C/9)DIBP$I$RPLD "YBP$IBP&amp;QWIM VRPAZ+% VT $BUUUUUUUQ@&amp;WPDA@PDA@PD@@PDA@PDA@PDA@P@%D&amp;UUUUUTI7)F[XFB&amp;9I=Y$YFQ$P$IBYD$$6C)&amp;P&amp;QBP&amp;Q$YFQS?F''AVA @0D$BUUUUUUU(P&amp;QPDA@PDA@PDA@@DA@PDA@PDA@PDBYU^YUUUUUUP''^&amp;T:6X@(N%2P$$YFQ$YFQIIM :P&amp;Q$YFQ$YG^INQ!*&amp;AI:YD$BUUUUUVYIIFQPDA@PDA@PDA@P@A@PDA@PDA@PDA@P@$IWEUUUUUUBY''^$09 XGA*$9DI&amp;UTI$RP!XN$I$P%U&amp;P$ICD&lt;GD&amp;C.R5VYBUUUUUUUN-8IPI]@PDA@PDA@PD@@PDA@PDA@PDA@PDA@&amp;UT$UUUUUUTIURRQS ] XJ&lt;E%5K!RJ0$$6ANUUAH8YLOV[Y XBC)@RQUBUUUUUUU7"QUPDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA :4BYURQUUUUUUUTI7%3!S$Y XFBZA5%O:Y.":&gt;%OVY?NXFA '':-WIBPIUUUUUUVYIBRYPDC+PDA@PDA@PDA@P@A@PDA@PDA@PDA@PDA@PM9UIEUUUUUUUP$IIBQH$4?1ZVA XFA VFA XFA :/G+U$#^I@$IUUUUUUUUIM:QPDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PDA@PDAUBRRYUUUUUUUUUP$IIBP$$T.+-:TEQ.;.AQ!O:VIPIBP$UP%UUUUUUUUU(UTIPDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@URQUUUUUUUUUUUUUUP$I&amp;RP$WBRQ+D!HRD"QIJD$II$IBUUUUUUU&amp;Y''^QETIPDC+PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PDA@$UW&amp;UUUUUUUUUUUUUUUUUUTIBP%U&amp;];^7-;^&amp;UTIBP%UUUUUUUUUUUW&amp;BUVQPI]@PDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PDA@PEVYUXMUUUUUUUUUUUUUUUUUUUUUUUUUBP$IUUUUUUUUUUUUUUVYUU2!U];+PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDBSPM9UIEUUUUUUUUUUUUUU&amp;UVYUUUUUUUUUUUUUUUUUUUUUUUUUUT$INXIU^Y@PDA@PDA@PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@PM9UQEUUUUUUUUUUUUT$IBQDII%UUUUUUY%UUUVYUUUU&amp;Y%U7$P$UP%U$TA@%4A@PDA@PDA@PDA@PDA@PDA@PD@@PDA@PDA@PDA@PM:YWI&amp;YUUVY&amp;Y%UURQDBUUUBUUDQJF(IM:YUUUU&amp;Y$$IE1D*UTIBY%UPDBWPDA@PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PM9UW@&amp;YUY''^IBQ\9-8IUP%@PDAUBUUUBUUUBY$$7%UUUY$I&amp;YG^IDA@PDBWPDA@PDA@PDA@PDA@PDA@PDA@PDA@P@A@PDA@PD@$BP%U#%3&amp;(RS^UUUUBYFQ&amp;TA@PDA@PDA@BUVQII&amp;QUP$I&amp;Y&amp;Q$U=@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PD@@PDA@PDA@&amp;UUUBUUUBP$IBY&amp;Q$RQ@PDA@%4A@PDBSPDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@@DA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDC+PI]@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@A@PDA@PDA@PDA@:&gt;/+PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PD@@'))</body><body package="Spy-VWSpecific">kaiSmall	"UIMaskEditor new openOnClass: self andSelector: #kaiSmall"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6713 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5492 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedStringa'))</body><body package="Spy-VWSpecific">kaiSmallIconGray	"UIMaskEditor new openOnClass: self andSelector: #kaiSmallIconGray"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 30@30 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 2762 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 2794 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2152 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 2601 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1830 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2280 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 2184 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 2409 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2087 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 2312 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 2537 2537)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'V%)ZV%)ZV%)ZV%)ZV%)ZV%)ZV%)ZV%)ZV%)ZV%)Z@@AZV%)ZV%)ZV%)ZV%)!"X&amp;I"X$IV"9ZV%)ZV%)ZV%(@@E)ZV%)ZV%)ZK($(VU$2L#I^L%$@YU(BV%)ZV%)ZV @@V%)ZV%)ZK%(@VSH2A8"H"H 2A3HGVVT.V%)ZV%)Z@@AZV%)ZV":IVSH2A5%Y#H&gt;OA(%^VSH2L"!ZV%)ZV%(@@E)ZV%(."P\2"F$1B#:Q$S,CAP5_V( 2W AZK%)ZV @@V%)ZK($GA6NRH1JLABVIWRT%VS$0BH!^W AZV%)Z@@AZV%)ZVSI#X#NLMB"E!P@.!XVEKE(C$U82L" BV%(@@E)ZK @2"IH3VSY''#2&gt;EAF![!X%.U(U NSH2VX%ZV @@V%)!VSI)H82EV8T/K5,''"UYVMX*E!R\0N \2JE)Z@@AZV" 2A54#KH2EK85^V6L8V81&amp;!R&lt;GW6AAVSIYBU(@@E)ZVSIYB(1%#8UVU%&amp;M"FVMU2(DAIA]X9RIW%:IV @@V#UYA5%$I5ZSU%YVU" GVYQ''K5YVJ%ZEW76HL"!Z@@AZ"SJH#G&amp;EU)L''ZINS#X%_Y(VS$9NSJ%YZ%B\2@E(@@E*IW("OD)JII8"H"H!#V''U)ZF!(ZF"H$%43"CIYV @@V($2"H&gt;KUYH''I2\''#VL@V"\''I2\''I5&amp;O#3NHL%%Z@@AZ"SJHA)D*I2\''I2\''I2\''I2\''I2\''I2\IYH42KU(@@E*IA3JI%B^M#VM#X6M#X6M#X6M#X86MI0Y&amp;#SH(V @@V %YA580XVNR#S\7M3\7M3\7M3^MYX%VY%6HW&amp;UZ@@AZV" 2VU&lt;CXED''"H"H"H"H"H"H"FMZZ0!CKSHG"U(@@E(."P\2V$NLA8"H"H"H"H"H"H"H"H 8N08GL"5ZV @@V%)ZVSJHBIE^"H%*A8!^W%:H"YJHL -2JCHGYR9Z@@AZV":IA3JH$PL(_X=YVR"IVU%Z$X%]YIJHA5%ZV%(@@E)ZV H(W%9^NTM+JH"HWSQY"H4,^WJR"CIYXR9ZV @@V%)ZV%((L#H2N)DU@X0&lt;[)JOSTLNJH 2L(%ZV%)Z@@AZV%)ZV%)YL#HGVX%Q%CL3YFY]KP\2A5&amp;IV%)ZV%(@@E)ZV%)ZXSH2L#H2W( ''"H"M#X 2L ]YMU)ZV%)ZV @@V%)ZK%))L#H2L \2W#H2L#H2W \-NE(.V%)ZV%)Z@@AZV%)!KX!^"E$(XX$(ZR5Y@B!%"U(.V%)ZV%)ZV%(@@E)ZV(&amp;I"SUZV%)ZV%)ZV%)ZV%)ZV%)ZV%)ZV%)ZV @@'))</body><body package="Spy-VWSpecific">kaiSmallTransparentIcon	"UIMaskEditor new openOnClass: self andSelector: #kaiSmallTransparentIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6906 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6713 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5428 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6617 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'QTUEQTUEQTT$NC!VQTUEQTUEQTUEQTUVQTTKB49NS$8;B5YEQTUEQTUEK$T1N3X]E!&lt;_E!46AC-EQTUEQUYEB1X]OCQTEB(0MC0]E -EQTUEQP,VL",GODUNB4UJA2,6E -EQTUEB14+HCXKQQ46QP-YU!(]N5UEQP,6O@\%C#X]M"TDG4UYA30JB4UEAA44U"X]GRUIUR,6GRYPWA4;QR9NS%1MGSX]M -\DB JFB!XAD8&amp;I$$1T4)YM$$2U% ]B (6I  &amp;S"X&amp;S#EBOBT2M#YNRSX6M"T&lt;G"YNI UNS%06L"T6M#X6VU$%M#I\AD8EQS,]WD &lt;S%%NS$9IVT8&lt;IE0]ADUEB3X&lt;Q2X6N49NS$8;M"X"AP(KQTT@AA4+O2YVS ,KS%X&amp;J1,]AD9EQTTKE%$+H"-NU 1NJ1D[M#,;QTUENDTKE$8&lt;W@IKV2)\OA4VB4T.QTUEQT8;IQ4]E"X&amp;N14JN0-EA4UEQTTVN3H;B0QNS$9NN0,KQR9EQTUEUP,;S!YEQSL&lt;I%YEQTUEQTUEQP@a'))</body><body package="Spy-VWSpecific">leftArrow	"UIMaskEditor new openOnClass: self andSelector: #leftArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 40@29 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 6777 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 4882 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 5171 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 5171 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 6392 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 6006 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 6295 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 6584 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 5621 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6874 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 5910 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1060 5010 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7355 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 5267 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6488 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 4625 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 6777 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 4914 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 6103 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 6006 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 6295 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 5364 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6584 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 6199 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 6231 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7355 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 6488 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6488 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 4625 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 5749 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 5749 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 6038 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6584 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 5010 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 6231 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 6456 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 5557 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 6488 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 4657 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 5846 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 5846 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(931 4914 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 6135 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 5846 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 5492 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(128 4561 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7837 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(738 4818 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 6038 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7195 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 6327 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 5107 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6617 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 5653 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 5942 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 5043 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7387 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 6231 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 6520 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 5557 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 4657 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 5878 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6135 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 6713 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6649 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(160 4561 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 6038 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 6038 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 6327 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7195 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 5396 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 6617 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6841 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 5653 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 6231 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 6777 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6745 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7934 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6135 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6713 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 4850 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6038 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6295 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 6327 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 5428 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6617 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 8030 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 7130 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 6231 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 5589 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6777 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2409 5589 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(995 4946 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 4946 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6167 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 6424 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6713 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 6327 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 6360 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 5428 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 6360 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6649 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4497 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8030 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7130 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 6263 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6488 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 4689 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(385 4689 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 4946 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 5878 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 6167 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 5235 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6424 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 6456 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(224 4593 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6681 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6745 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 4850 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7227 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6327 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 6360 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6649 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(32 4497 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7773 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 5974 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 6263 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 4689 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 5910 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(995 4978 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 6456 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 6424 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 5814 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 4882 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 6070 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 6263 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 6552 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 4689 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 5910 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 5910 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6199 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6424 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 6456 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 6745 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7869 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 5814 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6970 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 6360 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 5717 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 6006 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 4786 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 6295 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 6295 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 6584 7773)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+YD,;Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6.UIU=SLII+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z4 HC3X&gt;B"%*LV-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6,1]W*IE''HEAXD9Z$M+Z6-+Z6-+Z6-+''F-+Z6-+Z6-+Z6-+Z6-+"5(&amp;GPJZHQP3ECMEL2A*_6)*Z&amp;)*Z&amp;)*Z''\HMF-+Z6-+Z6-+Z6.@_CI K1PRD"0RD!HRD!HRQX(RD"0RD!H,D!ITWF)UZ6-+Z6-+Z6-]#''P*PVEA\5EATUEA\5EQ\4EQ\4E!PWMQPUEQPWN[ 9!+Z6-+Z6,LZ)@XFD4$SQ $SQ!MID4XST5MFA!MID4XID4XSRQMFIXCZ6-+Z6,SJ4A-V8JL[XI-#E.BV66L %--[U.B#F6B[X1[ %--#HHXQF-+Z6-+VTPUY%YVMUY&amp;MUY&amp;U%YVQ5YVU&amp;YVU#UVY#UVY%YVU$]VU&amp;)+Z6-+Z5@(YW5=A@Q=&amp;W4D_W4D_Y$D_Y%=_PPD_Y%=AG5=AG6YAG5*Z6-+Z6,S\TY6!''Y6$7ZF]''ZS!''ZSX''ZS](Y6])M6!''Y6$8Y6$6J^[6-+Z6-+Z61D$P8=C 8[OP8''F08[F2\=C#4NOP8NF34NI1,NF1,''!@5+Z6-+Z6-+S&amp;)IFQ\"H \GH"HGH \7H \GA3\WH"HGA2H"A2HGA&amp;(-Z6-+Z6-+Z6.@_EL:G11)_%!J_%!&gt;VD)&gt;(C]XR%!JZW9XR'':M#958Z6-+Z6-+Z6-+Z6.KV%90Y319P''%RX5IBZF)*Z&amp;)*Z&amp;)*Z&amp;)*]9)HZ6-+Z6-+Z6-+Z6-+Z6-+LX\A!X!JDIRTP!EOZ6-+Z6-+Z6-+Z91+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z4"ZO5^_BPA*Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z9U.B2M*K&amp;-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6,Z^6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6-+Z6,b'))</body><body package="Spy-VWSpecific">objectProfileIcon	"UIMaskEditor new openOnClass: self andSelector: #objectProfileSmallIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 150@150 depth: 11 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7837 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7644 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7677 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6938 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7195 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7130 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5557 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6809 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7901 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7805 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7066 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6938 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7130 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5878 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6103 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5460 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6906 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5557 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6938 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6777 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7805 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7869 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7066 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7741 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7709 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6552 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7227 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6906 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5428 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6777 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6970 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6809 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6392 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7452 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5524 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6970 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7773 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7066 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6424 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5364 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5396 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5974 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6552 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6135 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5910 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5460 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5428 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5589 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6970 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7644 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7548 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7130 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5460 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5396 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7002 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6424 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7002 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5396 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7548 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7130 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6617 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6777 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5589 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5396 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5428 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5300 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5557 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6456 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5974 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7066 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6103 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5621 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5460 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5171 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7869 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7484 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7163 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7452 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7420 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6809 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5460 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6874 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6392 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6006 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5460 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7002 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 8030 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6874 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6777 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6681 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5524 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6295 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6488 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7420 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5460 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7034 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5492 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 8030 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7195 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7259 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6552 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5492 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5428 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5460 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6809 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6841 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5942 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6713 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7130 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7420 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7452 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5653 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5653 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7677 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7259 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7163 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6938 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5492 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5524 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5267 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7484 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6809 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5685 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6970 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5171 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5524 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 8030 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7291 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6745 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5524 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5492 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6520 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5685 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7934 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7773 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7934 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7227 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7291 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6488 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6970 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5524 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5717 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5589 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6938 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5492 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7098 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5235 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7934 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7869 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7516 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7259 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7355 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7163 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6488 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7066 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5524 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5557 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5460 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7323 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7227 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6520 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6874 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7966 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7805 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7452 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7195 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7323 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6520 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7163 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5332 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7195 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6874 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6135 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7259 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7130 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7966 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7934 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7195 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6552 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7163 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7066 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5557 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6584 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6649 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7484 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6006 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5557 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7163 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7901 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7227 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7709 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6584 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7195 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7195 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5653 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5557 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6617 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6809 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6135 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7098 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7066 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7163 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7837 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7966 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7291 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7741 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7323 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7259 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6584 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5621 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5589 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7195 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6617 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6167 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7195 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7934 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7195 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 8030 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7934 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7323 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7741 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7259 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7452 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5653 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5621 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6456 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6649 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6006 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7227 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7098 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7901 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7934 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7259 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7195 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7387 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7323 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5781 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5653 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5267 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5300 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6777 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7098 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7227 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7869 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7195 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7452 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7034 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6617 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6713 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5332 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6906 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5589 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 8030 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7998 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7837 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7323 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7387 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6906 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7195 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6649 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5685 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5300 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5332 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7291 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7227 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6970 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5781 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5685 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7901 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7869 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7837 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7355 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7323 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6649 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6135 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5717 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5685 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5685 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5332 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6713 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 7291 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5621 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7098 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7901 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7966 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7837 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7355 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6263 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7227 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5717 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5685 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5332 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5589 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6681 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5460 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7901 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7869 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7355 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7355 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7227 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5942 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5717 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5717 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6809 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6745 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5653 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5846 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7901 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7452 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7869 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7516 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7387 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6263 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6777 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6295 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5717 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6360 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6713 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6745 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7548 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7966 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7901 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7259 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6713 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5428 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6295 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5749 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7901 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7612 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6745 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6617 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6006 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5428 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5524 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6488 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5781 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5749 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7998 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7259 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7966 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7163 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5846 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6006 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5781 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5878 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5396 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6617 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6745 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7869 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7966 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7998 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7901 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7002 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6777 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7291 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6327 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6777 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5814 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5557 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6006 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5781 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5428 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6681 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6263 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7612 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5781 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7420 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7934 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7934 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8030 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8030 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7966 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8062 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6809 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6038 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5781 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5974 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5814 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5460 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7034 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5846 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7387 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8030 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7452 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7548 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6327 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6135 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6392 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5878 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5814 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5846 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 5492 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5492 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7259 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6681 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7355 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6809 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7130 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7227 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5974 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6520 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6392 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5878 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5460 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5878 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7934 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 8030 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7323 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6006 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6713 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6167 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5492 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5428 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5846 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5878 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5878 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7998 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8030 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7291 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6456 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5749 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5685 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6103 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5878 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5524 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6906 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7259 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7934 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7966 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8094 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6713 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6970 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7259 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6745 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5910 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6070 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5557 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6681 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6938 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7002 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6263 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7227 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7966 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8094 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8030 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7612 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6713 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7002 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6745 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6135 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5878 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5910 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6938 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5557 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7227 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7034 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7323 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6809 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7420 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7323 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6392 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6135 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6970 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7323 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7355 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7484 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7034 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7452 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8094 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7355 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6070 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6070 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5910 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5974 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6167 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6970 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7291 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8030 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7998 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7548 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6874 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6938 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5942 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4850 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6167 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7002 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6488 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6103 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5974 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7580 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7227 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6199 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6006 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5942 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5974 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 5621 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7998 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7420 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7259 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7259 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6199 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7291 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6167 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6006 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6006 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6103 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5814 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5974 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5974 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8030 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7548 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6231 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7355 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5974 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6006 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6135 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7805 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6906 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7130 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5492 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 6038 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5653 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7998 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8030 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7741 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6874 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5846 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6263 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6038 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 5685 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6231 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6038 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7709 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7516 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7355 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6327 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6520 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6038 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4882 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5685 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7291 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7773 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7805 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6809 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7163 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6295 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5814 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4818 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5717 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5942 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6231 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4850 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6103 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7580 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7452 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6809 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7484 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7130 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7066 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6070 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5717 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7227 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6649 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4882 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8062 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7484 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6809 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7130 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7805 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7323 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5749 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4882 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8126 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7805 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7066 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6199 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5878 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6103 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5781 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4978 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4914 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7420 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7516 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7837 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7773 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5910 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5846 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5942 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8094 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7869 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7098 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 5621 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6327 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5910 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6135 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4946 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7901 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7548 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7452 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7773 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7805 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6070 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6167 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6199 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5910 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5974 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6135 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5814 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6231 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4882 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4850 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7612 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7548 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7484 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7644 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7130 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6199 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5942 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6167 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8126 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7580 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6970 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7516 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6456 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6006 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6231 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5942 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6199 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6135 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5814 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7163 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6584 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6231 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6327 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7580 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6970 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6006 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5878 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6199 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5010 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5846 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5621 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6263 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6199 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8094 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7612 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6970 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7195 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7709 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7259 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6777 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6006 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6231 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5974 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4882 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6199 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5846 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8158 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7612 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7227 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 6970 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7034 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6809 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6038 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6456 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6263 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4914 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6327 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4914 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5043 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7516 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7484 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7420 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7291 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6038 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6263 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6231 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4946 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5749 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6841 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6327 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5043 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6263 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6295 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7323 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7387 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7291 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6263 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6295 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6424 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6327 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7323 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6199 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7227 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5621 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5075 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6552 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7387 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7066 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6295 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4914 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5942 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5010 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7901 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7837 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7548 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6777 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7227 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7066 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4914 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4946 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4978 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5171 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6199 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5075 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7709 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7355 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7098 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6199 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6488 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4978 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5043 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5974 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6456 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5910 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4946 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6970 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6327 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6135 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5010 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4946 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4978 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5075 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5043 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7644 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7741 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7130 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7355 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6360 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5107 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5010 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6006 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6520 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6520 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 7002 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6327 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6938 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 6006 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6424 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5010 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4978 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5043 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5107 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6199 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6070 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5171 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6360 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6552 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7901 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7934 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7709 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7548 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7098 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6938 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6392 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5010 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5107 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6552 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5685 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6970 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5974 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4978 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 5010 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7773 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7291 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7227 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6970 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6038 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4978 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5075 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5010 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6488 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5171 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5203 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5203 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6584 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8158 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7548 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7066 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7773 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7355 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7259 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7130 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5010 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5171 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5075 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5653 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6263 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5685 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5043 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6456 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7548 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6938 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6713 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6906 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6456 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5235 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 5043 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6649 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5621 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6392 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7580 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6970 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5203 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5075 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6584 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6456 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7773 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7677 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7612 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 7259 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6488 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6231 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5910 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5139 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5075 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6456 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6103 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6006 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5203 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5267 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7612 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7259 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6488 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6617 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5171 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5749 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6681 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5043 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5171 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5107 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6295 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6135 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5781 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5010 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7773 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7291 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6456 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6424 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6327 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5171 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6777 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6135 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5685 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5781 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7387 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6520 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7805 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7709 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7420 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7098 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6327 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5139 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5203 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5203 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6520 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5685 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6103 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5043 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7066 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7869 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7805 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7677 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7098 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6809 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6392 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6006 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5717 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6552 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6295 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6424 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6649 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6167 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7612 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5139 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5203 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7355 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7869 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 7034 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7066 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 7130 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6552 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6681 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6360 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6199 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5171 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5364 931)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5235 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5364 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7644 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6584 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5203 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5235 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5043 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5364 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6327 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5203 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5396 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7612 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6360 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6584 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6617 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5203 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5267 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6360 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6713 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6199 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6681 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7869 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7066 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5717 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6617 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5203 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5235 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5075 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5267 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6745 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5781 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5749 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6038 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5428 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5203 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7066 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7195 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6809 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6360 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5107 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5203 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 6038 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7227 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5428 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7805 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7677 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7098 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6809 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6841 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5267 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5332 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5267 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6745 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6360 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5749 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5364 1092)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6681 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7837 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7709 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7741 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7773 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6552 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6938 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7163 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6681 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6392 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6649 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5332 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6070 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5460 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5300 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7901 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6809 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6520 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5428 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5235 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6713 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5460 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7355 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7130 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6809 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6681 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5139 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5364 1188)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5300 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6424 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6745 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 5492 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6841 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7709 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7098 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7387 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7163 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7323 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 5171 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5364 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5235 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5942 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 5267 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 5267 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6777 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5492 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7677 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7709 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7837 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7452 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6584 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6167 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6713 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5332 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5364 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 5428 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5846 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6777 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5364 1252)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedStringamp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@I4@94@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(DJ0M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@''4A0@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(BP@RI@-LCS N,ADPD,0T)@C$@5 F=@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@NPBIPE#@VLAX0E5@WXA! FT@YPA)@GP@TPA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*ADLC:0UF@K\A^ H+@,TCTPO7AKTET0@)@;0C5 M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ NLAQX@$PBQ@JT@- CE@M0@:0C:@P,AL EF@U A)PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ G]@($EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@W\B PM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@/0T5@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ GZ@=0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA"PN6@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(AG A6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ BO@?$EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ B#@&gt;0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ B#@&gt;0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ B#@&gt;0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ B#@&gt;0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ B#@&gt;0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@$DA''0F&lt;@\0A&gt;@G8@!\BE0H2@,0CZ P,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ BO@?$EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% L)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(C&lt; L$@ILAC0F)@%,B=@NQACPD90@(@RH@5PM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ CW@=0EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@YTA% M[@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B.PS@@A\@6PF)@$ B80M3@? D50@T@L(AQ Q\@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ LV@- EFP@=@O4A*PI7@0PC$@P4AM\@I0C,@X\DLPM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*AD@C30S)@A\@6PF)@$ B80M3@? D50@T@L(AYPDL@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@_0D\P@=@O4A*PI7@0PC$@P4AM\@I0CK@X\A&gt;PM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@APBB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@$HCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(BP0G(@#\B1 MP@?4D(PT6@HDAM@O&amp;@)\CZ M*@6(C^ L_@1&lt;CG0L_@1&lt;CG0L_@1&lt;CG0L_@4 EJ BB@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ O2@9$C&amp;PNY@:(C* N*@:(C- M*@6(CZ M*@&lt;$@-PU$@B0@K@AU@ET@W A^@GT@% BW@L0@&amp;@B9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R]AB@EM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ G&amp;APXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPD%@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@&amp;8DC S)@A\@6PF)@$ B80M3@? D50@T@L(AYPDL@%LCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*AB8C30S)@A\@6PF)@$ B80M3@? D50@T@L(AYPC/@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(BJ S)@A\@6PF)@$ B80M3@? D50@T@L(AYPQ,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(C-0BYAH4EN@A @T$B@@J_@2TC3@Q;@B&lt;BY OV@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@=XAT0E2@XLA(@F @Z8A20G^@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ P+@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @UAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(DJ0M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @;APXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(B/ AAAFDD- U%@HPAM0GB@$XB1@UQASPCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(EI@N=@^4BEPH''@"\BVPIY@&amp; BZ@JE@(TB*0TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@AU&lt;D0PT.@JXAV0HA@*@CL OZAH0EM0A_@P4B4@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@.HC:PPLABDDQ QFAEHD[ RLAH0D( R7AL$D50S(APXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@AK D4@U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0J''@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ A0@,\DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@AGHD(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0PF@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ O%@;@DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@?(D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0L,@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@AG8D(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BF0PE@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@AOTD(0U''@JXAV0HO@*@CQ@O*AJ\EM0BE@T BTPJW@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@L@D_PT.@JXAV0HO@*@CQ@O*AJ\EM0BE@C@@@0M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CH@RJ@W$A;0I)@-PCS0N;ADTD1 CB@;$CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D5 K=@1\CKPM&lt;@9(C2@O$AA,@C0M*AB4CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*AI,CR M]@54CZ0M+@6,C_@M&lt;@A@CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PA6@[X@I BN@JH@,0B3@LL@7PC(@MTCP0C&lt;@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*AG(D&gt;PBR@T(A90J!@3LC3PQ&lt;AS(@Y K2@7,DFPM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt; NB@ 8BRPI*@'' B!0JS@*HB+ J.@(XA1 OV@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @W0C^@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @B@U A)PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ RUAG4EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EOAU@CZ PY@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CXPII@''$B"@JT@)TB+0J:@, B5PKU@0PB5 A?@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@G$AY M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@''HA!0FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CA0THAM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\CJPM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*AI,A5@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@A&gt; M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@_\A-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@_ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@38BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80G)@Z&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D1PM*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@#@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@#@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@#@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@#@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@#@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@#@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B/ Q?AM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@V\@, M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@D+ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ PY@*\A4PFU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CJ UEAM@EY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@X8DF M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@E@@N@M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@V@A!0FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ I5AFHEY0CY@W,BK@KH@4PC&gt;@SJAVX@&amp;@EY@SDCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@4(BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GU@[0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M&gt;@;&lt;DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@HH@LPM)@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*ACHA!0FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(DK@M*@U\DR@SQ@@$@10FW@# B9@NCAD,D$PM@@;XCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*AE,BH@I\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@.0CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ P\@;@DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PN&gt;@OTCZ M*@6(CZ M*@6(CZ M*@6(CB@E$@TXA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ E3@YDA+0F&lt;@]&lt;A70G @ XCZ M*@6(CZ IA@I(CX LM@04CF L&amp;@3PCQPMR@7HC]@NO@3TBKPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80K5AF@D. R:AM4D7PS,AP\ECPT,AR0EN0UIAT$EU@R;@&gt;4DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9AQ\A6PLJ@0(CH0L#@4HCU MV@/H@U@EX@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CRPH6@W0A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B- D5@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(EC EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(D- EK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@6(CZ ET@LP@-@CM@M&lt;@70C)@N$@&gt;@C8@P$ABPD_@Q&lt;AG0EW@V AZ@E(@W A^@FO@X&lt;A#0F+@Z,A*0F+@[HA, F?@],A80G#@^LA&gt;0G;@!$BFPHY@(HB9PEK@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@2\B(0N^AA4DWPQ]AF4D[PQ-AG$D"@M.@K(C, PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@50DS@K&amp;@8TC$ OA@&lt;HC30O\@=0C&gt;0O;ABLDH0QIAD$DX Q3AH@D# R$ALHD4 S!AN(D: TIAR&lt;EQ0UVAV @B @X@B(@J AQ@ED@]0BC@J\@)0CH@L$AH0E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80L[@5PB* M*@6(CZ M*@6(CZ M*@6(CZ M*@6(AU N!AADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@!4C,PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80KW@''DCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ IL@&gt;4DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@AO(C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80G)@T@CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ KQ@=DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@;DC7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@-4CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R1@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@+&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R\@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@+&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R\@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@+&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R\@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@+&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R\@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@+&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R\@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@+&lt;CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ R\@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80GC@* CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ Q^@:DDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80IG@.8CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ @D@&gt;4DM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80L[@!8CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B3PQMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD#0PO@?0DD@P7AC DU@QTAG@D  TI@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0P@^ H1@6(CZ M*@6(CZ M*@6(CZ M*@)@D$ O-AADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAO0D/@Q/AILD*@SKAL,D;PS-AO4EG @2@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PSP@\PCK K-@74CZ M*@6(CZ M*@6(CW@U @" @E0@?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CF0I6AC,D 0RKAJ@D/PSLAM8D; PK@3\C3 PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= PR@),A!@M:@8$C"PNI@8$C"PNI@8$B0@KNATH@W0B9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PQI@^DCZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(C$0@+@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D50JQ@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@MD@* B9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PAM@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(AFP@Y@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D] FD@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(BQ@BX@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PF1@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS M:@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(AL@A6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A[PA6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A[PA6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A[PA6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A[PA6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A[PA6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A[PA6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PGN@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(B&gt;0C[@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DS NI@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(A_0A6@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PQC@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(CD0A"@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM DT0K@@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(C+ BX@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD]PF5@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6(@IP@Y@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D3PJY@6(CZ M*@6(CZ M*@6(CZ M*@6(CZ M*@6$@? B9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PRPAKPC_PM*@6(CZ M*@6(CZ M*@6(CZ O2@THEF @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= QW@LDCZ M*@6(CZ M*@6(CZ M*@6(CZ M)A@$@W0B9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#AI@@X0U*@%(BZ0I:@((B$ J]@*0BC@GE@A\@T @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= S(AR4A&amp; B[@N(@&gt;PDJ@P(AB D(@S(C @C0@E&lt;@^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS@AJTD) SSAM(D:0S;AP,EB0UW@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEC0S/AQ&lt;EG0T&lt;AS0ER USAV,@I0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C,PS[@T4AS E+@W4A#@E,AUTDU Q#AGT@; G+@ HBDPH!@"$BD ASAP0ER@UHAV\ER@UG@)XB.0KI@-$B90K6@J @%@BU@X4CD@L8@5TCUPM%@7\CG@EK@V$AV0J$@;LC4 O.@?XC= P_@14B@PK(AFTDYPRDAHPD%@R&gt;AL8D&lt;@L1@+@B5PKU@0PB80LN@0&lt;CQ L6@5LCX0T @CL@O@AV@F\@! BF@:HC:@O8AD4@$@C?@Q@AI D8@QDA@@Q.AH0AV E&gt;@W8A&amp;0F''@Z\AT@TOATLEQ@@TAT,AD H&lt;@$4BWPI,@'',B"0E]@%\BS B;@U8B&lt;0D @QLAL0EG@U$AVPFU@YTA-@FU@ZTB=0M0@84C#PN_@:TC90J^@$&lt;BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]PN&amp;@6(CZ M*@6(CZ M*@1PD? P9@=@@90M*@6(CZ M*@6(CZ JX@#(EF0UHAV\ER@OC@;\CZ M*@6(CZ M=@K @*@LE@.4CZ M*@6(CZ M*@6(EIPDN@T,A) M\@6(CZ M*@6(CZ M*@&lt;(B@PB@@6(CZ M*@?HC&lt; M*@6(CZ MW@+@B5PKU@0PB80LN@0&lt;CQ L6@$(COPN7@6(CZ M*@6(CZ OV@,(C:@NF@Z8C8 M*@6(CZ M*@6(@= N#AG\B3PM*@6(CZ M*@6(C1 R/AL&lt;EQ@UY@JPCZ M*@6(CZ M*@6(CZ G$@Q(D+ B+APPCZ HC@PDAL0EG@U$AVPFU@YTA-@EQAK&lt;C- M*@6(CZ M*@6(CZ B,@$&lt;BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]POD@6(D*PRUAK D.@S?@8,CZ B)@=@@=0LS@6XD!PQ:AIX@E E3@2@ER@UHAV\ER@T\@D@@Z@A;AU(AA0N7@K D7@QA@2(BT@C1@QPAE@D''@R\@F EK@FPC&lt; @7@ ,A"@F(@[\A-0G%AJ(B@PO&gt;@!&lt;BCPF*ARX@H@H4@#PB#@O[@+@B5PKU@0PB80LN@0&lt;CQ L6@N@CZ G"@/ C@PLK@0,EO0M*@,(C3 C&amp;@&lt;X@D M1@8DC# NTAJ&lt;APPN#AG\CG0CS@?TDB P^AAPB''@M*@-(EM0@(@,&lt;D&lt;0SGAI8D, SHAL D2@E]@VDD1PB+APPCZ HC@PDAL0EG@U$AVPFU@YTA-@N''@6(B-PB\@GP@!0BG@I4A@ LB@$&lt;BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]POD@6(DM P"ACXDR QU@U0CZ PS@=@@=0K^@6PD6PS7AO D70D9@6(BR0UHAV\ER@@W@A\@O @?AQ4C&lt;0N7@K EZPM*@E0@YPCZ@RPAC0D6@T0AS@E*AP@CZ Q&amp;@X(A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L[@UTAA LL@7XC!@N @:&lt;B-0M*@,(C)@TS@60C:PP5AD\DY@QF@3&lt;APPN#AG\CJ0N\AM D= TFAPXEQ@IT@[8D8@A)@6(@A0@:@B4@S0A]@I @^PTE@VDD1PB+APPCZ HC@PDAL0EG@U$AVPFU@YTA-@N:@6(@Z H[@!,BF0H[@!XBQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]POD@6(DM P"ACXDR QU@] CZ Q:@=@@=0K^@=&lt;ENPUXAU,EW@DC@6(BW UHAV\ER@@W@A\@O @?AQ4C&lt;0N7@K @3 M*AVLAA@E_@X@A @F\@T0AS@E*@DHCZ PU@X(A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LN@ZD@4 L3@7XC!@N @:&lt;B-0M*@,(C%PU!@4DC:PP5AD\DY@QF@3&lt;APPN#AG\CJ0N\AM D= TFAPXEQ@IT@_@D8@A)@6(@D0BH@I8@+PB&lt;@ND@&amp;@TE@VDD1PB+APPCZ HC@PDAL0EG@U$AVPFU@YTA-@QP@6(A PIQ@%DBTPI_@&amp;@BOPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]POD@6(DM P"ACXDR QU@] CZ Q:@=@@=0M*@"LBH0H#@"LBH0J4@6(BW UHAV\ER@@W@A\@O @?AQ4C&lt;0N7@K @3 M*@.4BPPIR@%HBT MI@F,AS@E*@DHCZ PU@X(A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LN@ZD@4 L3@7XC!@N @:&lt;C50N*@.$C%PU!@4DC:PP5AD\DY@QFAH\@HPOSAG\CJ0N\AM D= TFAPXEQ@IT@_@D8@A)@6(B?@J)@*$B*PJ)@\4AN0TE@VDD1PB+APPCZ HC@PDAL0EG@U$AVPFU@YTA-@QP@6(B,0J3@+LB,0J=@R0A[ H;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]POD@6(DM P"ACXDR QU@] CZ Q:@=@@=0NI@%XB8PK0@/@B? A2@6(BW UHAV\ER@@W@A\@O @?AQ4C&lt;0N7@K @3 M*@)(CW0M-@7&lt;C_0P/@=PAS@E*@DHCZ PU@X(A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LN@ZD@4 L3@V&lt;B?0K?ADHCJ0N[@7 C%PU!@4DDM@J8@6@CS@A3@=XD00Q''AG\CJ0N\AM D= TFAPXEQ@IT@_@D8@A)@6(B0PAK@D,@VPAKAT@@8PTE@VDD1PB+APPCZ HC@PDAL0EG@U$AVPFU@YTA-@QP@6(@(PDH@Q0AG@D/@BPA.@H;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C]POK@6(DM P"ACXDR QU@] CZ Q:@=@@=0K[@1DDX Q3AH@D# AC@6(BW UHAV\ER@@W@A\@O @?AQ4C6@N7@K @3 M*ANT@F0BC@J\@)0B=@RLAS@E*@DHCZ PU@X(A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LN@ZD@4 MDAR\CHPL+@-4@@PT0@=$C%PU!@4DD^@GO@2,CJ0M*@6(C@0R''AG\CJ0N\AM D= TFAPXEQ@IT@_@D8@A)@6(EEPUJAU4@B@@K@DP@W0TE@VDD1PB+APPCZ G1@PDAL0EG@U$AVPFU@YTA-@QP@?H@30F]@[$A.PGG@]0BQPH;@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C!0H&amp;@6(@4@PVAA\DI@P=@] CZ Q:@=@@=0K^@6PD6PSPAM$D) O4@6(A$@UHAS4EOPU,@A\@E0@+ANHBF@NY@G0@3 M*AR @ 0CZ@O4@;PD#@RLAO@E*@DHCZ PU@X(A" GH@[(A2@G2@ PBC0H.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LN@ZD@4 L3@4\CNPMX@6\C( ON@=$C%PU!@4DC:PO/@?&lt;DF@QX@''8B7@P%AG\B0@U"AL$D50S(AO0EQ@IT@_@D8@A)@6(EPP@.@B4@S0A]@I @^PTE@VDD1PB+ACLCZ TP@OHAJPD=@S8AVPFB@X\A-@QP@6(AEPGI@!,BF0H[@!XBOPH0@% BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C,PR+@&lt;\A( @Q@BH@H @"@TLCZ Q:@=@@=0N+AT&lt;@S@AZ@E(B[0O2@.&lt;D+@Q(AOP@#PBM@H4@#PBM@8(CZ I%@DT@3 M*ADD@5@C3@OL@&lt;0C3@Q,CR0D5@DHCZ HG@Q4AK EE@TTAQPFSAI&lt;B@PH.@$ BNPGW@&gt;LDV0I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LN@ZD@4 L3@7XC!@N @:&lt;C+0ON@=$C%PU!@4DC:PP5AD\DY@QF@6&lt;AKPN#AH0DV OVAC@BUPI$@&amp;PB_0M)@_@D8@A)@6(EPP@.@B4@S0A]@I @^PTE@VDD1PB+@A0B,0M[@2&lt;B70L@@0@C@@L0@_LA!0QP@6(B8@LI@1 CH L"@2HC.@RW@$&lt;BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PN1ARDBL0E4@XTA$ F"@YHA( N(@&gt;@DTPE"@ZHA( F"@ZH@9PTCAP0ER@P&amp;@BLA( F0@[@A.0F;AQPA+@T"@J @.@KB@Y&lt;A.0F;@[,A.0F;@_PB&lt;PD5ASDB @GL@\0A3@GL@_TA=PIA@(LB@PH.@$ BNPGW@ $B\@I9@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ LNAUHDA0L3@7XC!@N @:&lt;C+0ON@=$C)@M^@ZLC&gt;@P5AD\DY@QF@Z4D&amp; OSAL(D.PA1@R(BI@H2@#HBL HH@E,D&lt;PA)@*$D+P@.@B4@S0A]@I @^PTVALTCFPB+@N0BXPKC@_XBX0I#@&amp;LBX0J3A@ A!0MM@)\BX0I3@''LB\0I3@(4CEP@4@$&lt;BV@JD@&amp;\@@@@@@@@@@@@@@&lt;@C7PO]@?(CN K*@/$CA LF@1HCJ@P9AJLC-@M$@6PC"@NV@:$C1PR$AP0ER@UHAB\D@@P(AE$DVPQ)ALP@Q BT@J @"PSTANLE@PTQAS8EL ULAU8@MPE*@ST@GPAG@F0@[@B_@J@@+ B&gt;@W@BC0H.@$ BNPI\@Y8A'' J%@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@+DB# M3@7XC!@N @:&lt;C+0ON@=$D@PL;@5$DM@P5AD\DY@Q.@;TC(0R''AL(D.PRX@?@C&lt;PPBA@HDJPP)AJ EY UYAF(ER @.@B4@S0A]@I @^PB9AT4@C@C,@N0@&gt;0B/@A8@M AH@E\@_PBJ@QXA-@D?@L&lt;@30C4@PTAE0DW@R,AT HV@% BV@JD@*4@@@@@@@@@@@@@@K@C7PO]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@I"A@P@@@@@@@@@@@@@@F4CO@O]@?(C7 P"ACXDR QUAETD]@Q#AJLD PR#ALDD6PS7AO EB TXAQ$ER@UHAV\ER@@W@A\@O @?@FD@^@BT@J @%@CF@J @;PCZ@RPAC0D6@T0AS@E*@V$A"0E&lt;@Y A&amp;PGV@^(A5 G?@!@BC0H.@$ BNPI\@''$B"@JT@)TB+0J:@, B5PKU@0PB80LN@0&lt;CQ L6@5LCX0M3@7XC!@N @:&lt;C+0ON@=$C:@PMAADDM@P5AD\DY@Q_AEHD)0R''AL(D.PS''AM D= TFAPXEM0T+ATLEQ@@T@@X@KP@.@B4@S0A]@I @^PB9@J(@;@C,@N0@&gt;0D @RDAL0EG@U$AVPFU@YTA-@FU@]LA0PH[@!,BF0H[@!XBQPH;@% BV@HJ@6(@@@@@@@@@@@@@@6(D9 RF@=TC7 P"AA\DI@P=AD&lt;DZ0QVAI@D]PRPAI@D6PSYAOHE@ TRAP0EL0T=AS4EOP@M@A\@E0@+@E @[ BI@H,@"PB1@IT@8 CZ@O4@;PD#@RLAO@E[@T,A^0E1@X(A" GV@\(A2@G2@ PB@PH"@#8BKPII@%0B^PI9@(&lt;B) J2@+@B/@KK@.,B5 LN@0&lt;CL L[@4PCQ@MZ@6 C^PNW@9 C( N/@&lt;8C8PO8@&gt;4DHPP*AC8DT QFAEHD&amp;PRLAK\D( SUAL$D:@S(AO0EH0TOATLEM0@NAU$@G0@N@A&lt;@RPAN@HH@W0B9@I @80B;@NL@80DX@QLAJPD=@S8AVPFB@X\A)PFG@\$A,0H[@!,BF0H[@!XBQPH0@#&lt;BB M[@6(@@@@@@@@@@@@@@6(CZ M*@F&lt;C7 P"AA\DI@P=AD&lt;DZ0QVAI@D]PRPAI@D6PSYAOHE@ TRAP0EL0T=AS4EOP@M@A\@E0@+@E @[ BI@H,@"PB1@IT@8 CZ@O4@;PD#@RLAO@E[@T,A^0E1@X(A" GV@\(A2@G2@ PB@PH"@#8BKPII@%0B^PI9@(&lt;B) J2@+@B/@KK@.,B5 LN@0&lt;CL L[@4PCQ@MZ@6 C^PNW@9 C( N/@&lt;8C8PO8@&gt;4DHPP*AC8DT QFAEHD&amp;PRLAK\D( SUAL$D:@S(AO0EH0TOATLEM0@NAU$@G0@N@A&lt;@RPAN@HH@W0B9@I @80B;@NL@80DX@QLAJPD=@S8AVPFB@X\A)PFG@\$A,0H[@!,BF0H[@!XBQPI&ltbody><body package="Spy-VWSpecific">objectProfileMediumIcon	"UIMaskEditor new openOnClass: self andSelector: #objectProfileMediumIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 75@71 depth: 10 bitsPerPixel: 16 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6231 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6231 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3115 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3083 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6552 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6520 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6777 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6841 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6874 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 4240 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6327 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6360 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3115 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3212 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3115 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5300 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5010 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6841 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 4207 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6360 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6392 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 4561 4561)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3147 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3180 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6841 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7195 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4240 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6231 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6392 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3180 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 3180 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6520 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 5332 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6841 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 4272 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6231 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6199 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3180 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 3212 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6488 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5621 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 5043 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6199 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6424 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 4593 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3693 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4304 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4336 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6231 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6456 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6520 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5428 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 5396 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6424 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6231 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5910 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3244 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3244 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 3276 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 5524 5524)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5428 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6520 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 4625 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3340 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4175 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 5460 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6809 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4400 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6263 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 3276 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 6456 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6745 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6841 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6006 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6231 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4625 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3372 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 5524 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 5557 5557)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6841 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6745 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3693 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4432 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 6584 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6584 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4207 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6777 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4464 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3758 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6231 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3404 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3308 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 6488 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6809 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4497 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6038 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6167 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7066 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3404 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3437 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3437 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6424 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5589 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6777 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6167 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6199 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 4689 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3469 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 4240 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4561 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4529 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6167 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6135 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6681 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4240)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4561 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4593 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6167 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6199 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6135 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6713 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6745 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3501 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3533 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3501 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6713 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6520 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6424 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6488 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6456 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 5171 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2762)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4593 2633)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 4625 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3565 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3533 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6488 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 5685 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6424 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 4272 4272)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 3822 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6135 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1220)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6809 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3469 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3565 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 3372 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6456 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6520 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6649 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6745 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6135 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6777 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6231 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3597 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6456 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5717 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6135 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 7002 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 4753 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5749 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4689 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6841 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6841 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6103 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6392 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3661 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5781 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4689 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3661 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3629 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6103)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6392 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5685 5685 5685)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5235 5235 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 4464 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4721 2601)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 6906 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6456 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5846 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 4786 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3051)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 3886 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6906 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 3437 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6938 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6424 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3726 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6649 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6713 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4786 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7034 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1316)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6392 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6199 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 4818 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6681 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6970 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3758 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6167 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 3469 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5974 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3212)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6681 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4882 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5267 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6135 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3822 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6199 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 5749 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 5974 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6649 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4882 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 5300 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6906 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6070 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 4850 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 4400 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3244)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3950 3950 3950)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6456)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6070 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6103 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6970 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7002 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7066 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 3854 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 3501 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6006 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7034 1573)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7098 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7066 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5267 6038 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6649 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6649 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6584 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 5332 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6070 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6167 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 6135 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7098 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7130 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5300 6070 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2858 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6070 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6103 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7130 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6970 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6938 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3950 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3918 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6906 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6874 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3533 3533)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6617 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3437)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6617 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 6263 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6906 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7163 1477)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 3950 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6360 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5749 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5814 5814)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6649 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3469)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4561 5043 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6231 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6038 6617)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 4914 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7195 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6295 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 2955 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 2923 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6617 3501)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4015 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7195 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 3565 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 4015 2890)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6327 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6360 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6584 3565)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 4047 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6295 6295 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6938 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7227 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 4047 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6295 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6167 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 2987 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 3019 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6584 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 5396 5396)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7259 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6874 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4079 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3533 3469 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6295 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5396 6199 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 2987 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3019 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3051 2987 3372)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6584 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6552 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6874 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7291 1413)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 4079 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6295 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6327 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3147 3147)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3051 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3051 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3019 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3019 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6552 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3629)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6584 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6520 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 7323 1381)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 4111 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6327 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5878 5878)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6263 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3083 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3051 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 3693)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6520 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6520 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6584 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 5203 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3886 4175 2794)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6295 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6263 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6295 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6263 5300)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6263 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 4529 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3083 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 3083 3276)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6552 3758)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6520 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 6552 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 5235 2312)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 5332 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 4079 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6874 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 3629 3629)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA%PE=@YTA_PE*@W0AUPEF@UXA_ FV@Z4@ PEM@JT@SPJ1@)8B, J2@+LB4 AN@KXA2 C@@V(A_ FU@U4AUPE*@W4AZ F#@W4A(0FU@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A(0E=@W4AZ E&lt;@V(AI0B?@CX@?0E&gt;@YXA0@AF@[(A8 HI@!0BJPH\@"$BJPH)@ $AT KA@KDA_ E*@V,@Q0AE@O&lt;AUPE*@V(AZ FU@ZLA_PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%PE=@V(A_ EU@S\@  IX@SD@50AF@V,A%PFU@V(B0@H*@%8BT@I^@%DBTPIQ@#0BJ0G5@S&lt;AQPE&gt;@V(AZ0@=@K(@Y I5@O&lt;AZ0E&lt;@W8A_PF#@YTA_PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%PE=@V(A_@D8@ILBR0C4@K\@50CD@''XAQPE&gt;@V(A%0D]@_XBT@IQ@%DBW H=@%8BOPHJ@#8B 0E*@YTA_@D(@W\@CP@ @I(@SPJT@R$A''0E&gt;@V(A_PFU@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%PE=@V(A!@C-@*\ASPCE@M\@=PC5@M\A!0DW@W8A_PF.@&amp; A=PH&lt;@%8BW I^@%8BOPH+@ ,B''0BS@XPAZ F-@FL@W@A&gt;@G8@P@@N@RP@) @7@V,A''0E*@W4A%PF#@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%PE=@W8AZ0BB@\,@9PCF@P,@=PDJ@P,@50D2@ILAZ0E*@ZH@ 0I_@#&lt;BW H+@%8BW H=@",A80B''@N8A''0E=@]PA- @O@H0@#PB[@F0@PPA\@Z\A]@DW@[HA_ E=@W4A%PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0E=@V(AW @T@Q8@9 DJ@P,@=PD_@SLAH@C%@NTB2PE*@V(AZ E^@+PBO0H+@%8BTPH=@%8BJ0HJ@\(AQPE&gt;@V0BCPH,@DH@_0B\@H8@''@A&gt;@ED@P0B]@D4@(@E&gt;@V(AZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%0KI@OT@9 D_@SL@=PDK@SLAG0D @OT@10HY@S$A_ FV@ZHAC@G7@",BTPI^@%@BW H]@&amp;8B)0E+@V(A,0E_@G0@[PA.@J,@''@B\@H0@_ A&gt;@E,@L@H&gt;@C AZ FU@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0E=@ZLA%PE=@ZLA_PFW@DXAG C&amp;@R@@=PD_@SL@=PD3@P4AB0CW@Z@@70E&lt;@V(A_@@S@X&lt;BJ0IQ@%8BW IP@ (B40A0@Y&lt;A_PG;@"P@V0B[@G8@*0BL@J,@#@A&gt;@H&lt;@_ @ @^H@M E+@YTA(0FU@ZLA_PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLAZ E=@YTA%PE*@V(AZ0AT@OX@9@DK@OT@=PD3@SLAH@DK@O\AP@A#@V(A_PE*@Q A=PHJ@#4BOPH+@",BGPB6@N4A''0E^@$DB'' A-@I0@*0A&gt;@I0@#@A&gt;@G8@_ A]@^HB2 EU@V(A_PFU@YXAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA%PE=@V(AZ0E&gt;@V(AW E*@V,@U@D^@M @=PC5@SLAL0D_@SL@9 C6@+$AQ E&gt;@W4AQ0CG@Z BJ@H=@",BJ0H]@[\AW E&gt;@YTAZ F(@E8@''@BL@H0@*0B\@G8@W@@!@[,B%PFD@W8AWPF2@TTA+ E,@YTA_PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA_PF#@YTA_ C @L&lt;AQ E&gt;@U4AZ E*@EPAO0CF@SLAB D @R@AL0C5@LPBM0D,@V,A%PE]@(HAMPH(@%DBTPH]@"4B)0F?@W4A90I7@O$@_ BL@J,@''@A,@G8@_P@P@Z\B) FD@W8AWPF.@S(@B@AH@]PA[@FU@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA_PFU@W4A_ DY@@@B) C@@UXA_ E]@W0AW AF@Q8@6@DN@OTAG0D3@R@@1 F!@N@AUPE*@UX@  GQ@Z A4PGP@W B''0BB@[HAZ G&lt;@RH@.0A&gt;@H0@''@BN@I8@#@@!@[0@@@FD@V(AWPF2@W4B^0G&gt;@SPAZ E&gt;@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@W4AZ E^@FLB  I8@*X@3 EV@W4AZ E&lt;@U8@M0D^@LXAB0D3@SLAH@CW@P&lt;@UPEV@V(AZ DX@# A-0G3@_LA-0JD@S$A%PF3@TT@BPBP@F0@*0BN@H0@#@@1@Y@@@@F_@V(AWPF2@Y\B0 ID@^(BDPA''@ 4A% FU@W4A(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA_PFU@W4A(0E&gt;@KHB*@I7@)XB!PJ)@L8AZ E]@V(A_@E^@BTAG C$@NX@=PD3@NP@1@AI@UXA_ EU@TXA[@EE@U8AW EE@TXAZ FV@[LAE0H&gt;@E4@#@A=@I,@#@AB@Y@@@@FD@V(AWPF_@U8@BPID@Y A+0GW@,\BV@G:@V0A(0FU@W4A(0F#@ZLA(0F#@ZLA(0@@@ZLA(0FU@ZLA_PE*@R$@D0JE@+(B%PJV@(TB! C,@W8AZ E*@W0AZ @T@Q@@=PC5@KXASPAF@S AZ FU@W4A%PFU@YTA%PFU@W0A%PE=@W4AZ E+@N&lt;@SPA[@G&lt;@W A\@Y@B2 FW@W0AZ E&gt;@S$@K H @\HA6@G+@]$A0 D%@Q\A%0E=@ZLA%PE=@ZLA(0F#@ZLA(0F#@@@A(0E=@ZLAZ E*@V,@$0I7@)XB%0J:@*(B)0JC@* @? E*@W8AWPE*@UT@@PDP@SHB^PD''@XPA%PE=@W4A(0E=@YXA% FV@YXA% E=@ZLA%PE=@W4A%PIB@,(A*PB;@TPBVPF&gt;@V(AWPE&gt;@T$@) H @\LBD@HP@_4BG0GX@_&lt;@Y G(@V(AZ E=@ZLA(0F#@ZLA(0F#@ZL@@@E=@YTA_PE*@W0@;PJ&amp;@(HB. J''@*,B)0J+@)TB 0JX@M8AZ E&gt;@V0A_ E*@BT@X0FW@ZHAZ E=@W4A% FU@[LA,0GH@\ A,0F3@[LA%PE*@W4A_PF#@V0A2PE+@SDA&lt;0GU@V(A[0F_@Q\@1@H@@Y$BD H_@_4BG0G+@] A1@B&lt;@APA5@E*@W4A(0F#@ZLA(0F#@ZLA(0@@@ZLA_PE*@V(AW AT@''\B%0J''@+(B. J:@*\B*0J''@(TB20CP@V(A_ E,@V(A+ FW@V(A_PE=@V(A_ F2@Y\AQPDW@P@@&lt;@D@@Q\ANPFD@[HA_ E*@V(A(0E=@Y&lt;BC FW@V(A[0F2@Q\@^PHS@U A50G+@^,BG0H_@^,BG0G,@"@@"PEV@W8A(0E*@ZLA(0F#@ZLA(0F#@@@A(0E=@V(AUPC @,,B]0JV@*(B. J:@+(B. J''@*(B% JE@,(@8@EV@V(A_PE=@W4A_PE=@V(A+ E&gt;@KDB%PCH@*@A. E8@^PB[0B&amp;@%(@$0E*@Z4AZ E=@YTA_PE*@W8A_PE&gt;@PD@^PH3@Y$A:0G+@^,A:0H_@^,BG0HR@^,A&amp; B,@G@A%0E*@ZLA(0F#@ZLA(0F#@ZL@@@E*@ZLA_ D8@GDB  I7@)XB* J''@*,B. J:@+(B*0J''@)XB!PKJ@O&lt;A_ F#@ZLA%PE=@W8A+ BT@S&lt;A4 @2@$TA,@D*@PLAJ E-@#L@D E8@M$@X0FW@V(A_PF#@W4A% FU@V(AO0IU@W&lt;A:0H_@^,A:0H_@^,BG0HR@!@A:0GB@"@@1@FW@YTA_PF#@ZLA(0F#@ZLA(0@@@ZLA%PE*@O&lt;B.0IX@(TB  JV@*,B. JU@+(B. J''@+(B!@JE@+$@; E&gt;@ZLA%PE=@W8A2PI[@Z B_ GE@U\A00GX@^,B@PG+@^,A,@EX@Y(BQ D6@ XA!@E*@V(AZ F#@\0A_ C6@^4A6@G+@ HA:0G+@!&lt;BG0HT@_4A?PGX@X@@4PA,@NDA''0F#@ZLA(0F#@ZLA(0F#@@@A(0FU@UTAM0B1@DTB20I''@''(B!PJE@*,B%PJW@+(B)0JB@(X@  E+@V(A_PE=@W8A2PIM@H&lt;A+0FZ@]\A:0HT@^,B@PH_@ DB@PG+@^,A1@F0@XDB( E @^$A5 F#@ZLA(0I"@ITAD E?@ HB@ G+@]\A+0G,@Y,AV@EY@XH@H H*@SH@70E&gt;@YTA(0F#@ZLA(0F#@ZL@@@F#@YTAZ E=@V(AW D(@L&lt;@[0@$@*XB]0I)@(LB%0JW@(T@@@D:@ZHAZ E=@V(A+ I+@F,A,@GD@^,A?PHA@^,A:0HC@ LB@0GX@^,A:0G+@_4A6@GA@CLA"@I\@J8A#PI&lt;@JH@\ FI@#LA&amp;@GD@^0A&amp;0EH@Z&lt;B- C(@@ A2 KL@PDA!@E*@W4A(0F#@ZLA(0F#@ZLA(0@@@YTA_PF#@W4AZ FU@W8AZ E^@S$@?0B2@G@@@@I7@''\B! B!@W8A%PF#@V(A%0@&amp;@L(AV FX@_4B@PG+@] BEPII@\PAJ0F1@$$BL HV@"DB#0H!@AXB5 E:@J&lt;@00@&lt;@$&lt;A10JL@S0A^PD*@\HBH C\@@(AXP@A@LDAJPFW@[HA,0E&gt;@W4A(0E=@ZLA(0F#@ZLA(0F#@@@A(0F#@W4A%PF#@ZLA_PE*@V(AZ E&gt;@UTAZ D''@PH@(PA"@R\A_ E=@W4A_ D9@(,A:0GX@^,B@PGF@"LA''@G4@F@A\@E1@W@@DPD!@OD@Y@KU@(DAA BW@B,@F @+@C0B+@I3@QDBL@H&amp;@]DAD@AV@L&lt;AM0E&gt;@XPA''0FU@W8A_PF#@ZLA%PE=@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA_PFU@ZLA_PE=@YTA%PE*@W8A_ E*@V(AZ E*@W4A% GZ@$,B6@E-@^,B@PGF@#H@NPC)@),B''@J]@*4B&amp;0JI@,&lt;AA0BF@A @R0@;@GT@O@@&lt;@E$@A I3@J8A(0E&gt;@W8AZ0E&gt;@XPA!@E&gt;@V(A_ E=@YXA(0FU@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA_PF#@YTA_PF#@W4A_PF#@YTA%PE*@W4A% F3@V,B'' EX@Z&lt;A:0F^@(&lt;B!0G.@*8B4@D/@K@AZPC;@$ @A@J\@C0@O@A6@GT@!0@&lt;@H\@J JS@UDA(0E*@V(A(0FU@YTA%PE*@V(A_PE=@YTA_PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA%PE=@^$@E@A-@U A:0HA@#H@&lt; IG@B0B/ B=@B\AN0E[@U0@!@@&gt;@NL@APA7@C0@VP@&lt;@H\@S@D.@EHBLPE*@V(A(0E*@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4BC0F$@\HA1PG+@^,B$@G%@G @A0A!@!XBHPHT@ LBE@HV@ P@"0CT@A$@VP@&lt;@C0@O@D\@@L@B0I#@U8A(0E*@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%PFT@JXAR G+@ DBU B#@*P@J DG@MHBHPG[@ DB@PHA@ DB@0E\@N(@N0A5@C0@F0E"@,4BP0FQ@V,A,0FV@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA% F3@TTB5@F@@_4A:0I?@"\AX JJ@W,BM@G+@!PB@PHA@ DB@PG=@#T@*PCU@D0B4PE0@GLBL G\@RT@8PG@@YXA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0FV@[LANPKC@Y$A?PG+@(&lt;AS0D/@+&lt;@G H2@],BE@H_@!&lt;BE@HA@^,BHPH[@S8B/0G]@KLBE0G+@]\@&gt; B!@\@A% F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@YXA,0E^@A0A @G+@^,B#0EB@R&lt;B/0KU@$$A60H_@ DBG0H_@^,A:0IC@^DAB@@*@X,A;0G+@!PA:0DT@MLA0@FV@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA_PFU@Z,@.@E#@^,A:0JO@#(A)PJ-@O0BL G+@ DBE@HT@!PA?PG+@!T@Z@AY@Q0BN GX@^,BE@G+@W$AZ F3@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@V(A&lt;@F @\XA6@G+@$LAN0KH@B(AB@@W@(&lt;B@ GW@^,A60GF@$LAA@BQ@($B$ A3@ HB@PGW@],BT H/@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@YTA_PG^@C\@#@F@@ DA:0JO@H,@S@KO@DP@U0J7@*LBU JO@+\AW@I!@H B''@KD@XTA6@H_@ZXBR FG@$HA_PFU@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA_PFV@YTAZ0J3@WLA1@G\@"DA'' C&lt;@&amp;0@KPJ8@G,@J@DE@KPAY@DU@MTBN0@#@HPA;@G\@]\A,PA,@V,A,0FV@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLAZ GI@&amp; B6@F@@ DA:0HD@P$@MPI,@B(@5 HX@''PBU0D&gt;@D0B[PJA@+4A;@GX@ DA1 GX@VDBAPE^@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA%PE=@[LAQPJK@]\A6@G+@^,B@0D-@_ @0 J?@($B+0J0@)0@)@ES@HPB@0G+@^,A:0F4@RTAZ0FU@W4A%PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F_@EP@+PEK@Z&ltgt;@V(A(0E=@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A%PE=@V(A0@C?@!$A/PHA@] A0 F5@\HA0 FX@Z&lt;A,PDT@T8@, F"@W8A_PFU@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0E=@YTA_PE*@Y&lt;A+ D(@FL@6 G"@L(@+@B;@YH@*@@A@Q\A%0FD@V(A_PF#@W4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@W4A_PE*@YTA0@FD@W8AZ E+@V,AZ F_@Y\A,0FU@ZLA_PF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@V(AZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@V(A_PE*@YTA%PF3@]&lt;A%PF3@]&lt;A(0GM@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F#@+0B#@G9@[$A.PF9@(0B/@J&lt;@(0A&gt;PF9@[$A.PG9@QDAOPE*@W4A(0E*@( B#@JH@M,A&gt;PF9@^XA&gt;PB.@QDA(0I]@"8A.PG9@[$A&gt;PDQ@+0B#@B.@_$A&gt;PF9@"8B/@D=@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F#@L4@V@B&gt;@RXAI D&amp;@RXAI HG@J(@/ I3@RXAI D&amp;@IHAI H%@V(AZ F#@V(@+ J!@J8AT@I3@RXAI D&amp;@''LBA0J&lt;@-\@/ D&amp;@RXAI C+@X4A.PD#@N,B\0I3@N,AI C[@S4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0E*@ZLADPG @X4@+ B.@J8@+ KW@RXA&gt;PCC@X4@* H.@(0AS@E''@(0AZ E*@ZLAZ AS@IH@+ D&amp;@-\@^ I @&amp;@A.PJ&lt;@(0BS0AX@J8@+ B.@H@BA0DQ@&amp;@@+ J!@K8@G0B.@+0AOPF#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@V(B_PJL@LL@+ F#@ZLA(0F#@E AI G9@$8B50@_@ \BA0EP@''LADPE*@V(A(0E*@J8AI B.@''@BP@AS@ \BA0HG@"T@+ @&lt;@QDA(0F#@ZLA(0E*@ZLA(0F#@E B50CM@ZLAZ E*@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLAZ I=@(0@00F9@S4AZ F#@S4@V@D&amp;@_$BS D&amp;@X4A#PFM@''@B\0C[@S4AZ E*@V(@+ D&amp;@J8B(PI3@X4AT@D#@-\B#@B.@LLADPF#@V(AZ E*@ZLA(0F#@V(@JPKW@+0A(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0E*@''4B#@CC@J8@O0@?@C&lt;@O0FN@RXA&gt;PHZ@\&lt;@C@E*@ZLADPG @J8@O0@?@C&lt;@O0B.@IH@+ D&amp;@E B_PD=@S4AOPJ5@[$@O@DQ@VX@O0@?@@0B/@E*@ZLAOP@)@-\B/@F#@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@V(A(0DQ@IHA8@I3@''LB\0I3@LLB(PH.@!(@00BR@''L@$ I3@I BK KW@''LB\0I3@LLB\0JL@*D@00BR@''LB\0G @ \ADPJ,@''L@$ I3@''LB\0I3@J8A(0E*@,8B50J&lt;@ZLAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0E*@''4@+ D&amp;@IHB\0I3@''LB(PA:@QDAI I3@''LB\0I3@''LB3 J&lt;@-\B\0I3@''LAI B.@( A#PI3@''LB\0I3@LLA# E*@ \@$ I3@''LB\0I3@)(B/@F#@V(A# FM@+0A(0E*@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@V(A(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@V(A(0F#@ZLA(0F#@ZLA(0F#@V(A(0F#@ZLA(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@S4A(0F#@ZLA(0F#@ZLA(0E*@V(AZ F#@ZLAZ E*@V(AZ F#@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0E*@V(A(0F#@ZLA(0F#@ZLA(0E*@V(A(0F#@ZLA(0F#@ZLA(0E*@V(A(0F#@ZLA(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@V(A(0F#@V(A(0E*@V(AZ E*@V(AZ F#@ZLA(0F#@ZLA(0F#@S4A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0E*@V(AOPDQ@_$A&gt;PG9@_$A&gt;PA:@L4ADPG9@_$A&gt;PG9@[$B#@J&lt;@ZLB"@I @_$A&gt;PG9@_$@^ CM@+0B#@F9@[$A&gt;PF9@_$B/@JL@G(AOPI @"TA(0E*@V(A(0C=@(0@+ G9@_$A&gt;PB.@QDA(0E*@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0E*@ZLA(0C=@E B\0BR@K8@:0B&gt;@K8@+ HG@LL@$ C+@N,@/ I3@E ADPEP@''L@:0B&gt;@K8@$ BR@ \@60D&amp;@''L@:0B&gt;@''LAI DQ@RXB50C=@!(BA0@L@V(A(0F#@+0B50G @K8@/ B&gt;@''L@V@F#@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@L4A#PKW@"8B#@JL@(0AI FM@X8BF B.@(0B#@JL@RLBP@HG@C0BA0JL@(0B#@G9@-\AI I @IH@V@DQ@(0B#@A:@''4B\0D&amp;@O4@O@EL@C&lt;AZ F#@ZLB/@D&amp;@N\B#@A:@(0B#@DQ@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZL@3PFM@X4B"@J&lt;@+0B/@KW@RLBA0B&gt;@QDAZ D=@S4@V@I0@ \@O@DQ@ZLA(0F#@V(@V@D&amp;@(0AI AX@J(B#@JL@(0B_PI3@''@@?P@&lt;@X8@O0E*@ZLA(0J&lt;@RXB50F9@_$A.PB.@QDA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0F#@ZLA(0CM@X4B\0KW@-\B50KW@''LBA0GO@LLAT@FM@X4A#PD&amp;@X4@+ @&lt;@J(A(0F#@ZLAOP@)@RXB#@C+@!(@:0B&gt;@''LAI I]@''LB\@C=@C0A30@?@ZLA(0F#@+0AI CC@RXAI D&amp;@IH@+ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@L4A#PD&amp;@B$@V@AX@E @+ J&lt;@E @00KN@E @:0J,@)(B/@I @C0B#@F#@ZLA(0D=@X4AI JL@RXA# JH@QDADPDQ@@0B\0I0@O4@O@HG@C&lt;A(0F#@ZLB/@D&amp;@B$B/@J&lt;@+0B/@C=@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZL@3PFM@X4@?PF#@ZLA(0F#@V(@V@B&gt;@+0@C@DQ@''@B50I]@M,B\0D&amp;@-\AH0C''@-\B\0FM@(0AI B@@@0A(0F#@ZL@O0I3@$@@?P@&lt;@K8A#PC''@-\A#PB.@''@B\0D#@U@AT@KW@ \A(0E*@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0E*@ZLA(0C=@ \BA0C=@ZLA(0F#@ZLAOPB.@,8B/@F#@ZL@60D#@ \B/@B.@-\AI D&amp;@RXAI EP@QDADP@)@&amp;@A(0E*@V(AZ @L@)(@V@D=@-\B\@D&amp;@RXAI KW@J8@V@D&amp;@RXAI D&amp;@RX@V@F#@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLAZ E*@V(B/@J&lt;@S4AZ E*@ZLAZ E*@L4B/@D=@V(AZ F#@+0B/@E*@V(B/@J&lt;@+0B/@J&lt;@+0A(0C=@+0@3PE*@ZLA(0E*@V(B/@J&lt;@V(B/@J&lt;@+0B/@J&lt;@+0@?PJ&lt;@+0B/@J&lt;@+0B/@J&lt;@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0E*@V(AZ F#@ZLAZ E*@V(A(0E*@V(A(0F#@ZLAZ E*@ZLA(0F#@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@V(A(0F#@V(AZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLAZ F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@F#@ZLA(0F#@ZLA(0E*@ZLA(0F#@V(AZ F#@ZLA(0E*@ZLA(0E*@V(AZ F#@ZLAZ E*@V(A(0E*@V(AZ E*@V(AZ E*@V(A(0E*@V(A(0E*@V(A(0F#@V(AZ E*@V(AZ E*@V(AZ E*@V(AZ E*@V(AZ E*@V(AZ F#@V(A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0@@@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@@@A(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZLA(0F#@ZL@@@@a'))</body><body package="Spy-VWSpecific">rightArrow	"UIMaskEditor new openOnClass: self andSelector: #rightArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 40@26 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2890 5910 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 5910 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 6777 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2666 5846 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(899 4882 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 6103 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1477 5171 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 6392 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1445 5171 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 5717 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 6006 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 6584 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 5621 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7355 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 5267 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6488 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 4625 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 4914 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 6103 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 5460 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8094 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 6006 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 6006 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 5364 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6584 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(513 4721 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 6199 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 7355 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 6488 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 4625 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2794 5846 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(706 4818 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 6327 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6584 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 5010 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 6231 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 6488 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 5557 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 6745 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(321 4657 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 5846 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(931 4914 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 6456 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 6135 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(128 4561 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7837 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(738 4818 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 6038 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7195 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 6327 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1316 5107 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 5653 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6617 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5203 6841 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 5942 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 7098 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3501 6231 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 6520 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7644 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(353 4657 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 5878 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 4914 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6135 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 6713 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(160 4561 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3244 6038 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 6327 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 6295 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 5396 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3758 6327 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 6617 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1124 5043 6906)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 6231 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 7387 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 6488 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2312 5589 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7934 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 5846 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6135 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 6392 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 6713 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2601 5781 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6713 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(770 4850 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3276 6038 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 6327 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6295 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6617 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 8030 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 6231 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 5589 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2344 5589 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 6777 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(963 4946 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 6167 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6167 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 6424 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6713 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 6681 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 5781 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 6327 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 6360 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 5428 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4272 6649 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6649 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 4497 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 7130 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3629 6263 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 6552 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 6777 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 4689 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 4946 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 5878 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 6167 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 6167 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 5235 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 6424 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 6456 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 6745 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(224 4593 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3822 6360 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4047 6327 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6584 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6649 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7773 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 5428 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 5974 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 6263 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(417 4689 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 6199 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3983 6456 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 6745 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 6070 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 4882 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2569 5717 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 8062 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 6263 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 6552 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6841 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(449 4689 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 5910 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 4978 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3437 6199 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 6456 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 6424 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 6745 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7869 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 6970 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7259 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 6360 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(64 4529 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 6006 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 8062 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 6295 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 6295 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2505 5621 7098)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*XF8*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"()NZ2NPR9VJ"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*JZ8VMHW&lt;&lt;"SFJ"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J[1EQ@)REZPNPAGX."(*J"(*J"(*J"(*J"(*JN71+Z6-+Z6-+Z6-+Z6-CX''!ST4A@X#%?OE,8!(*J"(*J"(*J"(*JM!%E 6)=VE!=_V)=VA"LZ$]X_T]*_U!X_V9RRBAD_(*J"(*J"(*JF6-3FCTKH ,5B0,KH ,"H ,5B1 5B2HKMP,KB2JQZF,''"(*J"(*J" 8@N &lt;\N!0:C2T:GC(\IP&lt;:IS(OGC(\N &lt;%N!0:GBU_PV2J"(*J"()0''W]!]9I7!G^R]8Q!]9I7XW]7XW^R]8Q7$''^DXW^R]1U1''H*J"(*JZ9$GA9%:&amp;P]:&amp;P^Y&amp;P]:A9&amp;YA0^Y^)$G^)$G&amp;Y$G^ ]&amp;JD6J"(*J"&amp;-VQ#IVY4YVL%YFL%YFU%X2U$X2U&amp;]FU#IVQ#IVQ%YV''$EY"(*J"()ARV6A[XFK[XFA[X.A[X-Z[X-- V6A"66A V6K V6KV#4*EH*J"(*JA&amp;QIF$$ZF"QIF$$$F"P$RT$ZRQ)IF!($RQ)IIA($IH=+CX*J"(*J")^B&amp;4=4S7QOO4= ]D= O7QOS4=O]D=4S3=OXGQOG''VNWX*J"(*J"(*JU6-\UPTRD!H,D!HRD(]BAQHRD!HED!HRKAXSW"=;_(*J"(*J"(*J"((1CG%+Z6-+Z6-+Z6.ZZ0%BE#@0LDIB"P ]I#"F"(*J"(*J"(*J"(*J"(*\"(*J"(*J"(*J"&amp;M+M0*@B''HW"H!PK(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"((.Z2$ASCLP''3FJ"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J")L-UC8+%X*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*JR#Y%"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"(*J"((b'))</body></methods><methods><class-id>KaiProfilerUI class</class-id> <category>interface specs</category><body package="Spy-KaiProfiler">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 'Kai - Code Execution Profiler' 			#min: #(#{Core.Point} 482 494 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 349 188 829 690 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 9 26 ) 					#name: #Label2 					#label: 'Number of iterations' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 135 21.5 457 47.5 ) 					#name: #InputIterations 					#model: #iterations 					#helpText: 'Amount of execution' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 9 91 ) 					#name: #Label3 					#label: 'Expression to profile' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 135 0 74 0 -25 1 -193 1 ) 					#name: #TextEditor1 					#model: #profiledExpression 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 119 59 ) 					#name: #LabelError 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 119 223 ) 					#name: #LabelExpError 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 41 225 95 248 ) 					#name: #ActionButton2 					#model: #helpButton 					#label: 'Help' 					#defaultable: true ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Core.Point} 0 0 ) 							#name: #KaiLogo 							#label: #kaiIcon 							#hasCharacterOrientedLabel: false ) 						#(#{UI.LabelSpec} 							#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 							#layout: #(#{Core.Point} 90 1 ) 							#name: #ObjectProfileLogo 							#label: #objectProfileIcon 							#hasCharacterOrientedLabel: false ) 						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 22 76 ) 							#name: #Label1 							#label: 'www.objectprofile.com' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutSizedOrigin} 9 0 -8 0.75 169 97 ) 						#name: #Composite1 ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} -108 1 -181 1 81 23 ) 					#name: #ActionButton1 					#model: #kaiProfile 					#label: 'Profile!' ) ) ) )</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="Spy-VWSpecific">hapaoSmall20x20	"UIMaskEditor new openOnClass: self andSelector: #hapaoSmallIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 30@29 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 6681 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7259 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7291 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7677 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 7163 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 6231 4207)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6745 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 6424 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7709 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7677 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6970 4914)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7259 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7516 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6617 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6874 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7484 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8126 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7612 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7387 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6777 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6199 4175)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7387 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8062 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7548 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 6681 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7677 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7516 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7837 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 7291 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4786 6103 4079)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7966 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7644 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7677 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7516 6199)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 7195 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 6552 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7387 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7773 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7098 5010)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 7098 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7387 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 7387 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 6424 4400)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7580 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 7291 5235)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7644 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6006 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 7227 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7580 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 7387 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7420 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7420 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7516 5749)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 7516 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 6649 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7677 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6038 4015)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6360 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7195 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7998 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7516 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6552 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7644 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6809 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 6809 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7098 5332)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 7420 6006)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7420 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6006 6713 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4336 5878 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 7002 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 7998 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 6360 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7644 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7677 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7548 6295)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6617 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 7227 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 6038 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 7130 5043)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 7420 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7323 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7291 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 6135 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 8062 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 7548 6488)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 6681 4625)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7644 6424)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7612 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7612 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7580 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5781 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 6649 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5171 6295 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4689 6038 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6649 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7452 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7452 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5557 6456 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7741 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4368 5878 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 7323 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8030 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6938 4850)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 7227 5171)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6552 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7644 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7452 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 5878 3886)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 5878 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7934 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 7323 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 7355 6038)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 6649 4689)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 5814 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4753 6038 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7998 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7516 5589)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 6552 4529)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6874 4818)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7355 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 6777 4753)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6488 7034 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 6681 4786)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 5814 3822)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 8030 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 6617 4593)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7484 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 7420 5460)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6103 7484 6263)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 7484 6231)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 6488 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 8126 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 6167 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 7387 5910)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'FA XFA XFA XFA XFA XFA XFA XFA XFA XFA X@@@XFA XFA"GC$UEQTUEQTUEQTUEQTUEQWRJFA XFA @@A XFA"JI5%YVU%YI1&gt;HPB!YVU%YVU%YVU$MD! XF@@@FA XFE%YVU%YVYT&lt;OC0&lt;OC0YSD1LSG-YVU%YFA X@@@XFA!XVE!XMP HL3L3L3L3L3LHB@ HB@"VPTPOFA @@A XH6!(V@ HB@!6]''Y6IC\7@S4HB@ HB@ HBC"JF@@@FA!CV$RVB@ HBFI" (VPGF^P[@ HB@ HB@ HBBDX@@@XK%)ZB@ HB@ HM3\9$F87M9*P%  HB@ HB@ HBA @@A ^P3,HB@ HB@!9^W%9^W%9DULHB@ HB@ HB@ HF@@@FG])E0 HB@ HBE5]WU5]WU5]WU@HB@ HB@ HB@ X@@@X]6(HB@ HB@ HA XFA XFA XFA  HB@ HB@ HBA @@A!%Z0 HB@ HB@!_W5=_W5=_W5=_&amp;0 HB@ HB@ HF@@@FEY[B@ HB@ HBG&gt;N#(:N#(:N#(82B@ HB@ HB@ X@@@XU!LHB@ HB@ HM%QTUEQTUD!#LBTHB@ HB@ HBA @@A ?JP HB@ HB@!O^G!8^G!8#T6P$@ HB@ HB@ HF@@@FC&lt;TB@ HB@ HBEDEE!XVE!XVE''M5%0 HB@ HB@ X@@@XO9PHB@ HB@ HB@!MST5MST4[T(,&gt;B@ HB@ HBA @@A ?\P HB@ HB@ H%0,KB0,KB0,KB14HB@ HB@ HF@@@FC=1B@ HB@ HB@"VT%IRT%IRT%IRJ0 HB@ HB@ X@@@XI"4HB@ HB@ HB@  @@@@@@@@@@ABB@ HB@ HBA @@A!UF  HB@ HB@ HBE1:SU1\WE1\WA@HB@ HB@ HF@@@FG2LB@ HB@ HB@"D"X%W$4:I"X&amp;I[YXHB@ HB@ X@@@XFFDHB@ HB@ HET-KR4,,[G9^[4Y B@ HB@ H\! @@A XH  HB@ HBC*X&amp;I"X&amp;I"XU9BP @ HB@ HB@ /F@@@FA XB@ HB@ HB@"O\7M3\7M3!)BP_P HB@ HBA X@@@XFA"AB@ HB@ HB@"CCCP4MCP4Q0]0B@ HB@"YFA @@A XFA"AB@ HB@ HB@ HLPIJBP HB@ HB@ HB! XF@@@FA XFA XY  HB@ HB@ HB@ HB@ HB@ HAA XFA X@@@XFA XFA X@9EIRT%IRT%IRT%IRT%IYA XFA XFA @@@@a'))</body><body package="Spy-VWSpecific">hapaoSmall20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #hapaoSmall20x20bw"	&lt;resource: #image&gt;	^(Image extent: 30@29 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette  usingBits: #[255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252 255 255 255 252])</body><body package="Spy-VWSpecific">hapaoSmall20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #hapaoSmall20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 30@29 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 3 255 255 0 7 255 255 192 15 255 255 224 31 255 255 240 63 255 255 240 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 63 255 255 248 31 255 255 240 15 255 255 224 7 255 255 192 3 255 255 128 0 0 0 0])</body><body package="Spy-VWSpecific">kaiSmall20x20	"UIMaskEditor new openOnClass: self andSelector: #kaiSmallIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 31@32 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 6841 6841)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1766 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 4304 4304)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(224 224 224)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7837 7837 7837)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7066 7066 7066)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 1991 1991)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2987 2987 2987)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7291 7291 7291)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2216 2216 2216)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(674 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4978 4978 4978)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7516 7516 7516)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6745 6745 6745)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1670 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5974 5974 5974)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 4432 4432)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3661 3661 3661)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 7966 7966)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 4657 4657)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7195 7195)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2120 2120 2120)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3115 3115 3115)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(578 578 578)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 4882 4882)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7420 7420 7420)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6649 6649 6649)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 5107 5107)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1798 1798 1798)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6874 6874 6874)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7869 7869 7869)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7098 7098 7098)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2023 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6327 6327 6327)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8094 8094 8094)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7323 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 6552 6552)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5781 5781 5781)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2473 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 6777 6777)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 7773 7773)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 2698 2698)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 4464 4464)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7002 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2923 2923 2923)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7227 7227 7227)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2152 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 3918 3918)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 4143 4143)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 6681 6681)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1606 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5910 5910 5910)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(835 835 835)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 5139 5139)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 1830 1830)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3597 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6135 6135 6135)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 7901 7901)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2826 2826 2826)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5364 5364 5364)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(289 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7130 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2055 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 7355 7355)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6584 6584)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 7580 7580)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6809 6809 6809)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1734 1734 1734)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(192 192 192)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2730 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 7805 7805)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 7034 7034)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1959 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4497 4497 4497)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3726 3726 3726)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5492 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2955 2955 2955)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7259 7259 7259)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2184 2184 2184)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(642 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 4946 4946)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 7484 7484)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1638 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3404 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(867 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(96 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7709 7709 7709)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1863 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 6167 6167)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2858 2858 2858)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 7934 7934)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7163 7163)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 6392 6392)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8158 8158 8158)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5621 5621 5621)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(546 546 546)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7387 7387)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1541 1541 1541)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5846 5846)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5075 5075 5075)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G @^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^@A8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8@G!8^G!8^G!8^G!8^\GD(J@X(A"!F\18^G!8^G!8^G @^G!8^G!8^G!8^HB (JB (JB (JB (\WL^G!8^G!8^@A8^G!8^G!8^\B (JB (A" (J@X(JB (JBL^G!8^G!8@G!8^G!8^G$X(JB (I$@PY5XPY20!JB (JGD^G!8^G @^G!8^G!9FJB (I#TA]WA3CGM0K ,A@B (JGD^G!8^@A8^G!8^J2 (JBY''^4Y0\GA$TWA0\B1BS@X(JBL^G!8@G!8^G!8(JB &amp;Y7A0Z''A0\GA0\GA I7@ARR (A''L^G @^G!8^Q" (A&amp;]F\G@&amp;\GA0RT)0\BY0\G@3I" (\Q8^@A8^G!8(JB I@$(''I2\!R"]9I2]$I2\''R 48JB (TQ8@G!8^G X(JCMTABEFQ"@ Q''UF]2QFQ'')W\R%PJB #G @^G!97JB!%WDYFQ$YFQ%MFSDY*Q$YFQ$YFA% (J@X^@A8^G$8(JE, Q$YFQ$YFH2D$ZGEFQ$YFQ$YFP" (JA8@G!8^S" (L4X#H0XF\R@#HQ=''H2L#H2L#H2LAI" (\0@^G!8(JB PGQ5RHBATHD8&amp;ZR@ HB@ HEP]]%,&amp;JB!3@A8^G" (JCMTHB@ HB@ HB@ HB@ HB@ HB@ @RX(A''L@G!8^S" (@W\ HB@ HB@ HB@ HB@ HB@ HBABJB FG @^G!91JB ,^W]7]7]7]7]7]7]7]7]7]7]7\PD(J@X^@A8^G",(JD8)KVD!KR4-KR4-KR4-KR51LWE]SB (HA8@G!8^G X(J@D:\''E1\WE1\WE1\WE1\WD&amp;^F\(JB!0G @^G!8^T" (UQA1\WE1\WE1\WE1\WE1\WD)K2 (JA8^@A8^G!93JB (FPD(J@QNJB (JB (QB (E#8FJB!0G!8@G!8^G!9FJB (@ ]9^PXFA!4(A X&amp;RF=KJB (\Q8^G @^G!8^G!91JB (@7 "JBX&amp;]"X&amp;I IB^2 (JB ^G!8^@A8^G!8^G!9NJB (JD18^B$&gt;X7!BOT8(JB (G!8^G!8@G!8^G!8^G''\(JB (J@Y1HR(.\R (JB (\Q8^G!8^G @^G!8^G!8^JB (JB (JB (JB (JB (JDX^G!8^G!8^@A8^G!8^G" (JB (A" (JB (JB (A$(^G!8^G!8^G!8@G!8^G UNJGE1^%D^G!8^\GA0\18^G!8^G!8^G!8^G @^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^G!8^@@@a'))</body><body package="Spy-VWSpecific">kaiSmall20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #kaiSmall20x20bw"	&lt;resource: #image&gt;	^(Image extent: 31@32 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 31 252 0 0 127 255 0 0 255 255 128 1 255 255 192 3 255 255 224 3 255 255 240 7 255 255 248 15 255 255 248 15 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 15 255 255 252 15 255 255 248 15 255 255 248 7 255 255 240 7 255 255 240 3 255 255 224 1 255 255 192 1 255 255 128 1 255 254 0 3 255 252 0 7 192 0 0 0 0 0 0])</body><body package="Spy-VWSpecific">kaiSmall20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #kaiSmall20x20mask"	&lt;resource: #image&gt;	^(Image extent: 31@32 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 7 240 0 0 63 254 0 0 127 255 0 0 255 255 128 1 255 255 192 3 255 255 224 7 255 255 240 7 255 255 240 15 255 255 248 15 255 255 248 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 31 255 255 252 15 255 255 252 15 255 255 248 15 255 255 248 7 255 255 240 7 255 255 240 3 255 255 224 1 255 255 192 1 255 255 128 1 255 254 0 3 255 248 0 7 128 0 0 0 0 0 0])</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>menus</category><body package="Spy-Core">profileTestUsingHapaoProfiler	&lt;menuItem: 'Profile Using Hapao Test Coverage'		nameKey: #profileTestUsingKaiProfiler		enablement: #isTestCaseClass		indication: nil		menu: #(#selectorMenu )		position: 300.1&gt;	(HapaoTestCoverage runTest: (self selector) in: (self selectedClass) forPackages: (self packages)) visualize</body><body package="Spy-Core">profileTestUsingKaiProfiler	&lt;menuItem: 'Profile Using Kai Profiler'		nameKey: #profileTestUsingKaiProfiler		enablement: #isTestCaseClass		indication: nil		menu: #(#selectorMenu )		position: 300.1&gt;	(KaiProfiler runTest: (self selector) in: (self selectedClass) forPackages: (self packages)) visualize</body><body package="Spy-Core">profileUsingHapaoProfiler	&lt;menuItem: 'Profile Using Hapao Profiler'		icon: nil		nameKey: #profileUsingHapaoProfiler		menu: #(#pundleMenu )		position:300.1&gt;	(HapaoTestCoverage runTestsForPackages: self packages) visualize</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Spy-Core">hapaoTestCoverageMenu	&lt;menuItem: 'Hapao Test Coverage'		icon: #hapaoIcon		nameKey: nil		menu: #(#launcherToolBar )		position: 80.7&gt;	&lt;menuItem: 'Hapao Test Coverage'		icon: #hapaoIcon		nameKey: nil		menu: #(#menuBar #tools #spyMenu )		position: 60.1&gt;	HapaoTestCoverageUI open.	^self</body><body package="Spy-Core">kaiCodeProfilerMenu"	&lt;itemInMenu: #(#menuBar #tools #spyMenu ) position: 60.1&gt;	^(MenuItem labeled: #_Kai &lt;&lt; #menus &gt;&gt; '&amp;Kai')		labelImage: SpyIcons kaiSmallIcon;		value: [ KaiProfilerUI open ];		helpText: #OpenANewWorkspace &lt;&lt; #labels &gt;&gt; 'Open the Kai launcher';		yourself"	&lt;menuItem: 'Kai Code Execution Profile'		icon: #kaiIcon		nameKey: nil		menu: #(#launcherToolBar )		position: 80.6&gt;	&lt;menuItem: 'Kai Code Execution Profile'		icon: #kaiIcon		nameKey: nil		menu: #(#menuBar #tools #spyMenu )		position: 60.1&gt;	KaiProfilerUI open.</body><body package="Spy-Core">spyMenu	&lt;submenu: #(# spyMenu #pdp 'Spy &amp;Profilers')		nameKey: #spyMenu		menu: #(#menuBar #tools)		position: 60.1&gt;</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BasicPrerequisitePolicy</name><environment>Store</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>searchOrder versionSelection blessingLevel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Store-User Management</category><attributes><package>Store-User Management</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>RBProgramNodeVisitor</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parse Tree Matching</category><attributes><package>Browser-Parser</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>Collection</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>Set</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>tally </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>IdentitySet</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>SequenceableCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>MethodWrapper</name><environment>Refactory.Wrappers</environment><super>Kernel.CompiledMethod</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>clientMethod selector </inst-vars><class-inst-vars>methods </class-inst-vars><imports></imports><category>Refactory-Method Wrappers</category><attributes><package>Method Wrapper Base</package></attributes></class><class><name>MessageTally</name><environment>Tools</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessPoint bytes class method msgCount name tally samples parent receivers selector </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Opentalk-Profiling</category><attributes><package>AT Profiling Core</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>IdentityDictionary</name><environment>Core</environment><super>Core.Dictionary</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>valueArray </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class></st-source>