<?xml version="1.0"?><st-source><!-- Name: SmallSuiteGenerator-ExtensionsBundleName: SmallSuiteGenerator-ExtensionsBundleStructure: a Store.BundleForParcelParcel: #('SmallSuiteGenerator-Extensions' )ParcelName: SmallSuiteGenerator-ExtensionsPrerequisiteParcels: #(#('SmallSuiteGenerator' '' ) )Date: 4:22:00 pm July 1, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on July 1, 2020 at 4:22:00 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SStateCoverage</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SSimpleFitnessFunction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>class </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-GA</category><attributes><package>SmallSuiteGenerator-Extensions2</package></attributes></class><class><name>IconsSmallSuiteGenerator</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SmallSuiteGenerator-Extension-UI</package></attributes></class><class><name>SVisitorNodes</name><environment>SmallSuiteGenerator</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isAbstractt </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Extensions2</category><attributes><package>SmallSuiteGenerator-Extensions2</package></attributes></class><class><name>AbstractSmallSuiteGeneratorUI</name><environment>SmallSuiteGenerator</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageModule packageModule1 classModule dialog generations population statements numberGenerations populationSize numberStatements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SmallSuiteGenerator-Extension-UI</package></attributes></class><class><name>SmallSuiteGeneratorGenericUI</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.AbstractSmallSuiteGeneratorUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>profiler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SmallSuiteGenerator-Extension-UI</package></attributes></class><class><name>SmallSuiteGeneratorEditorUI</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.AbstractSmallSuiteGeneratorUI</super><private>false</private><indexed-type>none</indexed-type><inst-vars>documentModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SmallSuiteGenerator-Extension-UI</package></attributes></class><class><name>OrderedDictionary</name><environment>Smalltalk</environment><super>Core.Collection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>dictionary orderedKeys </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SmallSuiteGenerator-Extensions</package></attributes></class><comment><class-id>OrderedDictionary</class-id><body>Missing comment</body></comment><class><name>SConfigGenerationTestCase</name><environment>SmallSuiteGenerator</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>factory populationSize numberOfStatements targetPackageRegex targetClassName numberOfGenerations lastMessage stopIterations blackList setUpMethod tearDownMethod typeInfo fitness outputPackageName fitnessDictionary typeInfos aClass </class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Extension-UI</package></attributes></class><shared-variable><name>PundleAccess</name><environment>SmallSuiteGenerator.STestCaseFactory</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>SmallSuiteGenerator-Extensions2</package></attributes></shared-variable><methods><class-id>SmallSuiteGenerator.SStateCoverage class</class-id> <category>As yet unclassified</category><body package="SmallSuiteGenerator-Extensions2" selector="for:">for: t1	^self new class: t1</body></methods><methods><class-id>SmallSuiteGenerator.SmallSuiteGeneratorGenericUI</class-id> <category>initialize-release</category><body package="SmallSuiteGenerator-Extension-UI" selector="profilerForPackagesMatching:">profilerForPackagesMatching: aString	profiler := Spy1.SSTypeCollector new.	Transcript show: 'profiling...'; cr.	profiler beforeProfiling.	profiler gatherForPackages: (self packagesMatchingWith: aString).	profiler install.	profiler beforeProfiling.	^self</body></methods><methods><class-id>SmallSuiteGenerator.SmallSuiteGeneratorGenericUI</class-id> <category>accessing</category><body package="SmallSuiteGenerator-Extension-UI" selector="generateTests">generateTests	[Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Generating tests...' while: [profiler ifNotNil: [self createTestCasesFor: (SmallSuiteGenerator.STypeInfo asTypeInfo: profiler)]]]		on: SError do: [:t1 | Dialog warn: t1 messageText withCRs].	^self</body><body package="SmallSuiteGenerator-Extension-UI" selector="start">start	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Instrumenting...'		while: 			[profiler ifNotNil: [self uninstall].			self profilerForPackagesMatching: packageModule value].	^self</body><body package="SmallSuiteGenerator-Extension-UI" selector="stop">stop	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Deconstructing...' while: [profiler ifNotNil: [self uninstall]].	^self</body><body package="SmallSuiteGenerator-Extension-UI" selector="uninstall">uninstall	profiler afterProfiling; uninstall.	Transcript show: 'ended...'; cr.	^self</body></methods><methods><class-id>SmallSuiteGenerator.SConfigGenerationTestCase class</class-id> <category>As yet unclassified</category><body package="SmallSuiteGenerator-Extension-UI" selector="aClass">aClass	^aClass</body><body package="SmallSuiteGenerator-Extension-UI" selector="aClass:">aClass: anObject	aClass := anObject</body><body package="SmallSuiteGenerator-Extension-UI" selector="addTypeInfo:withKey:">addTypeInfo: aTypeInfo withKey: aString	^ self typeInfos at: aString put: aTypeInfo</body><body package="SmallSuiteGenerator-Extension-UI" selector="blackList">blackList	blackList ifNil: [blackList := Set new].	^blackList</body><body package="SmallSuiteGenerator-Extension-UI" selector="blackList:">blackList: aList	blackList := aList</body><body package="SmallSuiteGenerator-Extension-UI" selector="defaultTypeInfo">defaultTypeInfo	^ SmallSuiteGenerator.STypeInfo asTypeInfo: (Spy1.SSTypeCollector profile: [nil]						inPackagesMatching: self targetPackageRegex)					methodsBlacklist: self blackList</body><body package="SmallSuiteGenerator-Extension-UI" selector="factory">factory	^factory := STestCaseFactoryVisualWorks from: self</body><body package="SmallSuiteGenerator-Extension-UI" selector="fitness">fitness	fitness ifNil: [fitness := #statement].	^fitness</body><body package="SmallSuiteGenerator-Extension-UI" selector="fitness:">fitness: aFitness	fitness := aFitness</body><body package="SmallSuiteGenerator-Extension-UI" selector="fitnessDictionary">fitnessDictionary	fitnessDictionary ifNil: [		fitnessDictionary := Dictionary new		at: #statement put: [SStatementCoverage new];		at: #state put: [SStateCoverage for: self targetClassName];		yourself].	^ fitnessDictionary</body><body package="SmallSuiteGenerator-Extension-UI" selector="fitnessValue">fitnessValue	^ (self fitnessDictionary at: self fitness) value</body><body package="SmallSuiteGenerator-Extension-UI" selector="generateTests">generateTests	^ self factory createTestCases; yourself</body><body package="SmallSuiteGenerator-Extension-UI" selector="lastMessage">lastMessage	lastMessage ifNil: [lastMessage := ''].	^lastMessage</body><body package="SmallSuiteGenerator-Extension-UI" selector="lastMessage:">lastMessage: aString 	lastMessage := aString</body><body package="SmallSuiteGenerator-Extension-UI" selector="numberOfGenerations">numberOfGenerations	numberOfGenerations ifNil: [numberOfGenerations := 5].	^numberOfGenerations</body><body package="SmallSuiteGenerator-Extension-UI" selector="numberOfGenerations:">numberOfGenerations: anInteger	numberOfGenerations := anInteger</body><body package="SmallSuiteGenerator-Extension-UI" selector="numberOfStatements">numberOfStatements	numberOfStatements ifNil: [numberOfStatements := 30].	^numberOfStatements</body><body package="SmallSuiteGenerator-Extension-UI" selector="numberOfStatements:">numberOfStatements: anInteger	numberOfStatements := anInteger</body><body package="SmallSuiteGenerator-Extension-UI" selector="outputPackageName">outputPackageName	outputPackageName ifNil: [outputPackageName := 'GeneratedTests'].	^outputPackageName</body><body package="SmallSuiteGenerator-Extension-UI" selector="outputPackageName:">outputPackageName: aString	outputPackageName := aString</body><body package="SmallSuiteGenerator-Extension-UI" selector="populationSize">populationSize	populationSize ifNil: [populationSize := 30].	^populationSize</body><body package="SmallSuiteGenerator-Extension-UI" selector="populationSize:">populationSize: anInteger	populationSize := anInteger</body><body package="SmallSuiteGenerator-Extension-UI" selector="setUpMethod">setUpMethod	setUpMethod ifNil: [setUpMethod := ''].	^ setUpMethod</body><body package="SmallSuiteGenerator-Extension-UI" selector="setUpMethod:">setUpMethod: aString	setUpMethod := aString</body><body package="SmallSuiteGenerator-Extension-UI" selector="stopIterations">stopIterations	stopIterations ifNil: [stopIterations := 10].	^stopIterations</body><body package="SmallSuiteGenerator-Extension-UI" selector="stopIterations:">stopIterations: anInteger 	stopIterations := anInteger</body><body package="SmallSuiteGenerator-Extension-UI" selector="targetClassName">targetClassName	^targetClassName</body><body package="SmallSuiteGenerator-Extension-UI" selector="targetClassName:">targetClassName: aString 	targetClassName := aString</body><body package="SmallSuiteGenerator-Extension-UI" selector="targetPackageRegex">targetPackageRegex	^targetPackageRegex</body><body package="SmallSuiteGenerator-Extension-UI" selector="targetPackageRegex:">targetPackageRegex: aString 	targetPackageRegex := aString</body><body package="SmallSuiteGenerator-Extension-UI" selector="tearDownMethod">tearDownMethod	^tearDownMethod</body><body package="SmallSuiteGenerator-Extension-UI" selector="tearDownMethod:">tearDownMethod: aString 	tearDownMethod := aString</body><body package="SmallSuiteGenerator-Extension-UI" selector="typeInfo">typeInfo	typeInfo ifNil: [typeInfo := 'Default'].	^typeInfo</body><body package="SmallSuiteGenerator-Extension-UI" selector="typeInfo:">typeInfo: t1 	typeInfo := t1</body><body package="SmallSuiteGenerator-Extension-UI" selector="typeInfos">typeInfos	typeInfos ifNil: [typeInfos := Dictionary new		at: 'Default' put: nil;		yourself].	^ typeInfos</body><body package="SmallSuiteGenerator-Extension-UI" selector="typeInfoValue">typeInfoValue	|value|	self halt.	value := self typeInfos at: self typeInfo.	 (value isNil and: [self typeInfo = 'Default']) ifTrue: [		self addTypeInfo: self defaultTypeInfo withKey: 'Default'.		value := self typeInfos at: self typeInfo].	^ value</body></methods><methods><class-id>Core.Behavior</class-id> <category>accessing method dictionary</category><body package="SmallSuiteGenerator-Extensions" selector="allMethodsBelow:">allMethodsBelow: aClass	| aSet |	aSet := IdentitySet new.	self withAllSuperclasses		do: 			[:superClass | 			superClass = aClass ifTrue: [^aSet].			superClass methodDictionary do: [:compMethod | aSet add: compMethod]].	^aSet</body></methods><methods><class-id>Core.Collection</class-id> <category>copying</category><body package="SmallSuiteGenerator-Extensions2" selector="reject:thenDo:">reject: rejectBlock thenDo: doBlock 	"Utility method to improve readability.	Do not create the intermediate collection."		self do: [ :each |		(rejectBlock value: each)			ifFalse: [ doBlock value: each ] ].</body></methods><methods><class-id>SmallSuiteGenerator.SStack</class-id> <category>accessing</category><body package="SmallSuiteGenerator-Extensions2" selector="=">= t1	self == t1 ifTrue: [^true].	self species == t1 species ifFalse: [^false].	^self hasEqualElements: t1</body><body package="SmallSuiteGenerator-Extensions2" selector="addFirst:">addFirst: t1 	| t2 |	t2 := t1 asLink.	self isEmpty ifTrue: [lastLink := t2].	t2 nextLink: firstLink.	firstLink := t2.	^t2</body><body package="SmallSuiteGenerator-Extensions2" selector="addLast:">addLast: t1	| t2 |	t2 := t1 asLink.	self isEmpty		ifTrue: [firstLink := t2]		ifFalse: [lastLink nextLink: t2].	lastLink := t2.	^t2</body><body package="SmallSuiteGenerator-Extensions2" selector="hasEqualElements:">hasEqualElements: t1	| t2 t3 |	(t1 isKindOf: SequenceableCollection)		ifFalse: [^false].	(t2 := self size) = t1 size ifFalse: [^false].	t3 := 1.	[t3 &lt;= t2]		whileTrue: 			[(self at: t3) value = (t1 at: t3) value ifFalse: [^false].			t3 := t3 + 1].	^true</body><body package="SmallSuiteGenerator-Extensions2" selector="removeFirst">removeFirst	| t1 |	self emptyCheck.	t1 := firstLink.	firstLink == lastLink		ifTrue: 			[firstLink := nil.			lastLink := nil]		ifFalse: [firstLink := t1 nextLink].	t1 nextLink: nil.	^t1 value</body><body package="SmallSuiteGenerator-Extensions2" selector="removeLast">removeLast	| t1 t2 |	self emptyCheck.	t1 := lastLink.	firstLink == lastLink		ifTrue: 			[firstLink := nil.			lastLink := nil]		ifFalse: 			[t2 := firstLink.			[t2 nextLink == t1]				whileFalse: [t2 := t2 nextLink].			t2 nextLink: nil.			lastLink := t2].	t1 nextLink: nil.	^t1 value</body></methods><methods><class-id>SmallSuiteGenerator.STestCaseFactory class</class-id> <category>settings-colors</category><body package="SmallSuiteGenerator-Extensions2" selector="from:">from: configClass	^(self new) 		fitness: configClass fitnessValue; 		targetClassName: configClass targetClassName asSymbol; 		targetPackageRegex: configClass targetPackageRegex; 		outputPackageName: configClass outputPackageName; 		numberOfGenerations: configClass numberOfGenerations; 		numberOfStatements: configClass numberOfStatements; 		setUpMethod: configClass setUpMethod; 		tearDownMethod: configClass tearDownMethod; 		lastMessage: configClass lastMessage; 		typeInfo: configClass typeInfoValue; 		yourself</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>removing</category><body package="SmallSuiteGenerator-Extensions2" selector="removeAt:">removeAt: index	^ self removeAtIndex: index	</body></methods><methods><class-id>SmallSuiteGenerator.SInspectorAssertion class</class-id> <category>instance creation</category><body package="SmallSuiteGenerator-Extensions2" selector="inspectorAssertionOf:">inspectorAssertionOf: assoc	^ (assoc value class methodDictionary values select: #isReturnField)		collect:			[ :compiledMethod | 			self inspectorAssertionOf: assoc and: compiledMethod ]		thenSelect: [ :assertion | 			assertion isNotNil			 ]</body></methods><methods><class-id>SmallSuiteGenerator.SSTestShifter</class-id> <category>accessing</category><body package="SmallSuiteGenerator-Extensions2" selector="canAddStatement">canAddStatement	SPlatform asDict 		ifFalse: [			^ ((self length + 3) &lt; 40"CompiledMethod fullFrameSize")		] ifTrue: [ ^ true ]</body></methods><methods><class-id>Core.Dictionary</class-id> <category>testing</category><body package="SmallSuiteGenerator-Extensions3" selector="=">= t1	self == t1 ifTrue: [^true].	self species == t1 species ifFalse: [^false].	self size = t1 size ifFalse: [^false].	self keysAndValuesDo: [:t2 :t3 | (t1 at: t2 ifAbsent: [^false])			= t3			ifTrue: [nil]			ifFalse: [^false]].	^true</body></methods><methods><class-id>Core.Dictionary</class-id> <category>accessing</category><body package="SmallSuiteGenerator-Extensions3" selector="at:ifPresent:ifAbsent:">at: t1 ifPresent: t2 ifAbsent: t3	| t4 t5 |	t4 := true.	t5 := self at: t1 ifAbsent: [t4 := false].	t4 ifTrue: [^t2 cull: t5].	^t3 value</body><body package="SmallSuiteGenerator-Extensions3" selector="at:ifPresent:ifAbsentPut:">at: t1 ifPresent: t2 ifAbsentPut: t3 	^self		at: t1		ifPresent: t2		ifAbsent: [self at: t1 put: t3 value]</body></methods><methods><class-id>Core.Dictionary</class-id> <category>binary storage</category><body package="SmallSuiteGenerator-Extensions3" selector="representBinaryOn:">representBinaryOn: t1	| t2 |	t2 := MessageSend				receiver: self class				selector: #withAll:				argument: self associations asArray.	t1 expectCycles ifTrue: [^BinaryObjectStorage indexImportSendSelf -&gt; (Array with: #createSpecialObject: with: (BOSSSpecialObjectLoader message: t2))].	^t2</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>adding</category><body package="SmallSuiteGenerator-Extensions3" selector="add:afterIndex:">add: t1 afterIndex: t2 	(t2 between: 0 and: self size)		ifFalse: [^self errorOutOfBounds].	self insert: t1 before: firstIndex + t2.	^t1</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>enumerating</category><body package="SmallSuiteGenerator-Extensions3" selector="average">average	^self sum / self size</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>binary storage</category><body package="SmallSuiteGenerator-Extensions3" selector="representBinaryOn:">representBinaryOn: t1	^MessageSend		receiver: self class		selector: #withAll:		argument: (self isEmpty				ifTrue: [#( )]				ifFalse: [self asArray])</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>enumerating</category><body package="SmallSuiteGenerator-Extensions3" selector="sum">sum	^self inject: 0 into: [:t1 :t2 | t1 + t2]</body></methods><methods><class-id>Core.ByteString</class-id> <category>binary storage</category><body package="SmallSuiteGenerator-Extensions3" selector="representBinaryOn:">representBinaryOn: t1 	^BinaryObjectStorage indexImportByteString -&gt; self</body></methods><methods><class-id>Core.SmallInteger</class-id> <category>security</category><body package="SmallSuiteGenerator-Extensions3" selector="asBigEndianByteArray">asBigEndianByteArray	| t1 t2 |	self negative ifTrue: [self errorConvertingNegativeIntegerToBytes].	self &gt; 65535		ifTrue: 			[t1 := self bitShift: -16.			t2 := self bitAnd: 65535.			t1 &gt; 255 ifTrue: [^ByteArray					with: (t1 bitShift: -8)					with: (t1 bitAnd: 255)					with: (t2 bitShift: -8)					with: (t2 bitAnd: 255)].			^ByteArray				with: (t1 bitAnd: 255)				with: (t2 bitShift: -8)				with: (t2 bitAnd: 255)].	self &gt; 255 ifTrue: [^ByteArray with: (self bitShift: -8)			with: (self bitAnd: 255)].	^ByteArray with: (self bitAnd: 255)</body><body package="SmallSuiteGenerator-Extensions3" selector="specialLeftShift:">specialLeftShift: t1	t1 = 0 ifFalse: [^(self bitAnd: (self class leftShiftArray at: t1))			bitShift: t1].	^self</body></methods><methods><class-id>Core.Float</class-id> <category>comparing</category><body package="SmallSuiteGenerator-Extensions3" selector="mantissaBitsAreZero">mantissaBitsAreZero	self isLittleEndian		ifTrue: 			[(self basicAt: 1)				= 0				ifTrue: 					[(self basicAt: 2)						= 0 ifTrue: [^((self basicAt: 3)							bitAnd: 127)							= 0].					^false].			^false].	(self basicAt: 4)		= 0		ifTrue: 			[(self basicAt: 3)				= 0 ifTrue: [^((self basicAt: 2)					bitAnd: 127)					= 0].			^false].	^false</body></methods><methods><class-id>Core.Float</class-id> <category>converting</category><body package="SmallSuiteGenerator-Extensions3" selector="specialValueExponent">specialValueExponent	^128</body></methods><methods><class-id>SmallSuiteGenerator.SmallSuiteGeneratorGenericUI class</class-id> <category>interface specs</category><body package="SmallSuiteGenerator-Extension-UI" selector="windowSpec">windowSpec	"self open"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} #window: #(#{UI.WindowSpec} #label: 'SmallSuiteGenerator' #min: #(#{Core.Point} 430 155 ) #max: #(#{Core.Point} 430 155 ) #bounds: #(#{Graphics.Rectangle} 576 434 1006 589 ) #flags: 4 ) #component: #(#{UI.SpecCollection} #collection: #(#(#{UI.GroupBoxSpec} #layout: #(#{Graphics.LayoutFrame} 11 0 9 0 416 0 110 0 ) #name: #GroupBox1 ) #(#{UI.LabelSpec} #layout: #(#{Graphics.LayoutOrigin} 24 0 54 0 ) #name: #Label1 #label: 'Packages:' ) #(#{UI.LabelSpec} #layout: #(#{Graphics.LayoutOrigin} 23 0 79 0 ) #name: #Label2 #label: 'Output package:' ) #(#{UI.ActionButtonSpec} #layout: #(#{Graphics.LayoutFrame} 308 0 125 0 413 0 146 0 ) #name: #ActionButton1 #model: #generateTests #label: 'Create tests' #defaultable: true ) #(#{UI.SubCanvasSpec} #layout: #(#{Graphics.LayoutFrame} 121 0 45 0 403 0 73 0 ) #name: #packageModule #flags: 0 #clientKey: #packageModule #majorKey: #{EntryWithPasteButtonModule} #minorKey: #windowSpec ) #(#{UI.SubCanvasSpec} #layout: #(#{Graphics.LayoutFrame} 122 0 75 0 403 0 100 0 ) #name: #packageModule1 #flags: 0 #clientKey: #packageModule1 #majorKey: #{EntryWithPasteButtonModule} #minorKey: #windowSpec ) #(#{UI.LabelSpec} #layout: #(#{Graphics.LayoutOrigin} 24 0 24 0 ) #name: #Label3 #label: 'For class:' ) #(#{UI.SubCanvasSpec} #layout: #(#{Graphics.LayoutFrame} 120 0 21 0 402 0 42 0 ) #name: #classModule #flags: 0 #clientKey: #classModule #majorKey: #{EntryWithPasteButtonModule} #minorKey: #windowSpec ) #(#{UI.ActionButtonSpec} #layout: #(#{Graphics.LayoutFrame} 11 0 124 0 124 0 145 0 ) #name: #ActionButton2 #model: #showAdvancedSettings #label: 'Advanced Settings' #defaultable: true ) #(#{UI.ActionButtonSpec} #layout: #(#{Graphics.LayoutFrame} 129 0 124 0 186 0 145 0 ) #name: #startButton #model: #start #label: 'Rec' #defaultable: true ) #(#{UI.ActionButtonSpec} #layout: #(#{Graphics.LayoutFrame} 190 0 124 0 247 0 145 0 ) #name: #startButton #model: #stop #label: 'Stop' #defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>RBProgramNodeVisitor</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parse Tree Matching</category><attributes><package>Browser-Parser</package></attributes></class><class><name>Context</name><environment>Kernel</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sender receiver stackp stack </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Random</name><environment>Core</environment><super>Core.Stream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>seed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>SequenceNode</name><environment>Kernel</environment><super>Kernel.ValueNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>temporaries statements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Program Objects</category><attributes><package>System-Compiler-Program Objects</package></attributes></class><class><name>GenericException</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>messageText originator initialContext firstUnwindContext handlerContext parameter proceedBlock isResumable signal searchContext </inst-vars><class-inst-vars>notifierString </class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>SError</name><environment>SmallSuiteGenerator</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Core</package></attributes></class><class><name>AuxCodeInfoExtractor</name><environment>CraftedSmalltalk</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>depth jumpStack maxDepth visited </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CraftedSt-VM</category><attributes><package>Debugger-Probes</package></attributes></class><class><name>Boolean</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>Time</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hours minutes seconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>STypeInfoTest</name><environment>SmallSuiteGenerator</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-Info</category><attributes><package>SmallSuiteGenerator-Tests-Info</package></attributes></class><class><name>SSTestCaseTest</name><environment>SmallSuiteGenerator</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>utility </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-Core</category><attributes><package>SmallSuiteGenerator-Tests-Core</package></attributes></class><class><name>SSTestShifterTest</name><environment>SmallSuiteGenerator</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>utility </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-Core</category><attributes><package>SmallSuiteGenerator-Tests-Core</package></attributes></class><class><name>SInsertTest</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SSTestCaseTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-Core</category><attributes><package>SmallSuiteGenerator-Tests-Core</package></attributes></class><class><name>SChangeTest</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SSTestCaseTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-Core</category><attributes><package>SmallSuiteGenerator-Tests-Core</package></attributes></class><class><name>RBVariableNode</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBValueNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>token </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parser</category><attributes><package>Browser-Parser</package></attributes></class><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Collection</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>Set</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>tally </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>LimitedPrecisionReal</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SmallDouble</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SequenceableCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>SStack</name><environment>SmallSuiteGenerator</environment><super>Core.LinkedList</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstLinkStack lastLinkStack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Scenario</category><attributes><package>SmallSuiteGenerator-Scenario</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>ByteSymbol</name><environment>Core</environment><super>Core.Symbol</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-String Support</category><attributes><package>Collections-String Support</package></attributes></class><class><name>SGAEngineTest</name><environment>SmallSuiteGenerator</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>engine profiler utility </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-GA</category><attributes><package>SmallSuiteGenerator-Tests-GA</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>SAssertionTest</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SExpressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-AST</category><attributes><package>SmallSuiteGenerator-Tests-AST</package></attributes></class><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>ProbedCompiledMethod</name><environment>CraftedSmalltalk</environment><super>Kernel.CompiledMethod</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>original methodHolder probeStart </inst-vars><class-inst-vars>removedProbedMethodsHolder </class-inst-vars><imports>			OpcodePool.*			</imports><category>CraftedSt-VM</category><attributes><package>Debugger-Probes</package></attributes></class><class><name>Double</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Link</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nextLink </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Support</category><attributes><package>Collections-Support</package></attributes></class><class><name>LinkValue</name><environment>Core</environment><super>Core.Link</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Support</category><attributes><package>Collections-Support</package></attributes></class><class><name>Float</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SObject</name><environment>SmallSuiteGenerator</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Core</package></attributes></class><class><name>STestCaseFactory</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>reportClass engine typeInfo targetClassName targetPackageRegex outputPackageName fitness numberOfIterations profiler setUpMethod tearDownMethod lastMessage asDict fitnessSeed initialSeed initialAsDict typeInfoSeed typeInfoOrigin firstExecution </inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Core</package></attributes></class><class><name>SmallTypeCollector</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classDict </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-SmallType</category><attributes><package>SmallSuiteGenerator-SmallType</package></attributes></class><class><name>SUtilityTypeInfo</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Tests-Utility</category><attributes><package>SmallSuiteGenerator-Tests-Utility</package></attributes></class><class><name>SGAEngine</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SGAObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>populationSize mutationOperator crossoverOperator numberOfStatements population logs typeInfo fitness selectionStrategy targetClassName numberOfGenerations lastMessage packageRegex initialPopulation typeInfoProfiler targetPackageRegex elitismRate crossoverRate stopIterations totalExecutionGA selectionStrategyTestCase </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-GA</category><attributes><package>SmallSuiteGenerator-GA</package></attributes></class><class><name>STestCaseFactoryVisualWorks</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.STestCaseFactory</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Core</package></attributes></class><class><name>SGAEngineExample</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-GA</category><attributes><package>SmallSuiteGenerator-GA</package></attributes></class><class><name>STypeInfo</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>types classes noneAbstractClasses scalars blackList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Info</category><attributes><package>SmallSuiteGenerator-Info</package></attributes></class><class><name>SSTestShifter</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statements assertions typeInfo nextId fitness targetClassesNames maxNumberOfStatements validatedTargetClassName fitnessByClass parents children lastMessage selectionStrategy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Core</package></attributes></class><class><name>SSTestCase</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SSTestShifter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>idPopulation previousOpenWindows summaryExecutionMethods generationNumber hasErrors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-Core</category><attributes><package>SmallSuiteGenerator-Core</package></attributes></class><class><name>Array</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>ByteString</name><environment>Core</environment><super>Core.ByteEncodedString</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-String Support</category><attributes><package>Collections-String Support</package></attributes></class><class><name>SmallInteger</name><environment>Core</environment><super>Core.Integer</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars>minVal maxVal maxBits maxBytes </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SSimpleFitnessFunction</name><environment>SmallSuiteGenerator</environment><super>SmallSuiteGenerator.SFitnessFunction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>profiler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallSuiteGenerator-GA</category><attributes><package>SmallSuiteGenerator-GA</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class></st-source>