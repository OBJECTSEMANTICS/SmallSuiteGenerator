<?xml version="1.0"?><st-source><!-- Name: SpyLiteBundleName: SpyLiteBundleStructure: a Store.BundleForParcelParcel: #('SpyLite' )ParcelName: SpyLitePrerequisiteParcels: #(#('Method Wrapper Base' '' ) )Date: 3:22:34 pm December 22, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on December 22, 2020 at 3:22:34 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Spy1</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Spy1</category><attributes><package>SpyLite</package></attributes></name-space><class><name>SpyLite</name><environment>Spy1</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>currentTestCase currentTestMethod </class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SpyLite</class-id><body>Missing comment</body></comment><class><name>SLCollectorLiteral</name><environment>Spy1</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>literals </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SLCollectorLiteral</class-id><body>Missing comment</body></comment><class><name>SLCodeProbe</name><environment>Spy1</environment><super>CraftedSmalltalk.CodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SpyLite</package></attributes></class><class><name>SLProfiler</name><environment>Spy1</environment><super>Spy1.SpyLite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packages allClassesAsDictionaryCache allMethodsCache afterBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SLProfiler</class-id><body>Missing comment</body></comment><class><name>SSTypeCollector</name><environment>Spy1</environment><super>Spy1.SLProfiler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scalars nonScalars </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-TypeCollector</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SSTypeCollector</class-id><body>Missing comment</body></comment><class><name>SLBlock</name><environment>Spy1</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id executed numberOfStatements start stop code </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><class><name>SLClass</name><environment>Spy1</environment><super>Spy1.SpyLite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>methods className allSubclassesCache packageSpy metaclassSpy originalClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SLClass</class-id><body>Missing comment</body></comment><class><name>SLClassCoverage</name><environment>Spy1</environment><super>Spy1.SLClass</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><class><name>SLProfilerCoverage</name><environment>Spy1</environment><super>Spy1.SLProfiler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeInfo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><class><name>SLSummaryStatement</name><environment>Smalltalk</environment><super>Spy1.SpyLite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>code executed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Utility</category><attributes><package>SpyLite</package></attributes></class><class><name>SLSummaryExecutionMethod</name><environment>Smalltalk</environment><super>Spy1.SpyLite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>executorClass selector executed code summaryStatements isClassSide hasProfiler returnType argsTypes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Utility</category><attributes><package>SpyLite</package></attributes></class><class><name>SLPackage</name><environment>Spy1</environment><super>Spy1.SpyLite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageName classes profiler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SLPackage</class-id><body>Missing comment</body></comment><class><name>SSTypeCollectorPackage</name><environment>Spy1</environment><super>Spy1.SLPackage</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-TypeCollector</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SSTypeCollectorPackage</class-id><body>Missing comment</body></comment><class><name>SLInstrumentor</name><environment>Spy1</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blocks currentId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><class><name>SpyWrapper</name><environment>Spy1</environment><super>Refactory.Wrappers.MethodWrapper</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>count methodSpy previousMethod v originalMethod receiver listOfArguments </inst-vars><class-inst-vars>currentTestCase currentTestMethod </class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SpyWrapper</class-id><body>Missing comment</body></comment><class><name>SLPackageCoverage</name><environment>Spy1</environment><super>Spy1.SLPackage</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><class><name>SSTypeCollectorClass</name><environment>Spy1</environment><super>Spy1.SLClass</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-TypeCollector</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SSTypeCollectorClass</class-id><body>Missing comment</body></comment><class><name>SLMethod</name><environment>Spy1</environment><super>Spy1.SpyLite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instrumentedMethod originalMethod selector classSpy spywrapper </inst-vars><class-inst-vars>inMeta </class-inst-vars><imports></imports><category>Spy-Core</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SLMethod</class-id><body>Missing comment</body></comment><class><name>SLMethodCoverage</name><environment>Spy1</environment><super>Spy1.SLMethod</super><private>false</private><indexed-type>none</indexed-type><inst-vars>blocks probedMethod </inst-vars><class-inst-vars>installedProbes </class-inst-vars><imports></imports><category>SpyLite-Coverage</category><attributes><package>SpyLite</package></attributes></class><class><name>SSTypeCollectorMethod</name><environment>Spy1</environment><super>Spy1.SLMethod</super><private>false</private><indexed-type>none</indexed-type><inst-vars>returnType argTypes receiverType executed literals numberOfExecutions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-TypeCollector</category><attributes><package>SpyLite</package></attributes></class><comment><class-id>Spy1.SSTypeCollectorMethod</class-id><body>Missing comment</body></comment><shared-variable><name>STypeInfo</name><environment>Spy1.SSTypeCollector</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>SpyLite</package></attributes></shared-variable><shared-variable><name>CurrentMethod</name><environment>Spy1.SpyWrapper</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>SpyLite</package></attributes></shared-variable><shared-variable><name>Registry</name><environment>Spy1.SLProfiler</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>SpyLite</package></attributes></shared-variable><methods><class-id>Spy1.SLProfiler class</class-id> <category>private - profiling</category><body package="SpyLite" selector="profile:forClassNamed:">profile: t1 forClassNamed: t2     | t3 t4 t5 t6 |    t6 := Smalltalk at: t2.    t5 := self new.    Transcript show: 'profiling...'; cr.    [    t4 := t5 spyForClass: t6.    (t3 := self spyClassForPackage new initialize) classAt: t2 put: t4.    t5 addPackage: t3.    t5 install.    t5 beforeProfiling.    t1 value.    t5 afterProfiling]        ensure: [t5 uninstall].    t5 setIfNecessaryTimeProfiler: t1.    t5 setIfNecessaryTimeAndCallGraphFrom: t1.    Transcript show: 'ended...'; cr.    ^t5</body></methods><methods><class-id>Spy1.SSTypeCollector</class-id> <category>initialization</category><body package="SpyLite" selector="addNonScalar:">addNonScalar: t1 	"	***This is decompiled code.*** 	No source was available"	nonScalars add: t1.	^self</body><body package="SpyLite" selector="addScalar:">addScalar: anObject 	"	***This is decompiled code.*** 	No source was available"	| value |	value := scalars at: (self nameOf: anObject class) ifAbsentPut: [ Set new ].	anObject isCollection ifTrue: [ value add: anObject class new ].	value add: anObject.	^self</body><body package="SpyLite" selector="initialize">initialize	"	***This is decompiled code.*** 	No source was available"	super initialize.	afterBlock := [nil].	scalars := Dictionary new.	nonScalars := Set new.	^self</body><body package="SpyLite" selector="nonScalars">nonScalars	"	***This is decompiled code.*** 	No source was available"	^nonScalars</body></methods><methods><class-id>Spy1.SLClass</class-id> <category>accessing</category><body package="SpyLite" selector="afterEachExecution:On:with:">afterEachExecution: t1 On: t2 with: t3 	"	***This is decompiled code.*** 	No source was available"	^self</body><body package="SpyLite" selector="beforeEachExecution:On:with:">beforeEachExecution: t1 On: t2 with: t3 	"	***This is decompiled code.*** 	No source was available"	^self</body></methods><methods><class-id>SLSummaryExecutionMethod class</class-id> <category>As yet unclassified</category><body package="SpyLite" selector="on:">on: t1 	"	***This is decompiled code.*** 	No source was available"	^self new		executorClass: t1 classSpy className;		selector: t1 selector;		code: ([t1 blocks first code] on: SubscriptOutOfBoundsError do: ['']);		executed:([ t1 blocks first wasExecuted ] on: SubscriptOutOfBoundsError do: [ false ]);		isClassSide: t1 isClassSide;		summaryStatements: (t1 blocks allButFirst collect: [ :block | SLSummaryStatement with: block code and: block wasExecuted ])</body></methods><methods><class-id>Spy1.SLInstrumentor</class-id> <category>visiting</category><body package="SpyLite" selector="addBlock:">addBlock: t1    | newBlock |    newBlock := self buildSBBlock: t1.    blocks add: newBlock.    ^ newBlock</body><body package="SpyLite" selector="buildGhostNode:">buildGhostNode: aKeyNumber    ^ Refactory.Browser.RBParser parseExpression: 'Spy1.SLMethodCoverage actionOn:' , aKeyNumber asString , '.'</body><body package="SpyLite" selector="instrumentBlock:">instrumentBlock: aRBBlock     | newBlock newId |    newBlock := self addBlock: aRBBlock.    newId := SLMethodCoverage nextId.    SLMethodCoverage at: newId put: newBlock.    aRBBlock body addNodeFirst: (self buildGhostNode: newId).    ^self</body></methods><methods><class-id>Spy1.SLMethod</class-id> <category>testing</category><body package="SpyLite" selector="isClassSide">isClassSide	^ (self classSpy className endsWith: 'class')</body></methods><methods><class-id>Spy1.SLMethod</class-id> <category>hooks</category><body package="SpyLite" selector="afterRun:with:in:">afterRun: t1 with: t2 in: t3 	"	***This is decompiled code.*** 	No source was available"	^self</body></methods><methods><class-id>Spy1.SLMethod</class-id> <category>delegation</category><body package="SpyLite" selector="flushCache">flushCache	^ self</body></methods><methods><class-id>Spy1.SLMethodCoverage</class-id> <category>as yet unclassified</category><body package="SpyLite" selector="installGhosts">installGhosts    | ast |    self originalMethod getSource size &gt; 20000        ifTrue: [self uninstall]        ifFalse: [            ast := Refactory.Browser.RBParser parseMethod: self originalMethod getSource.            blocks := (SLInstrumentor new) visitNode: ast; blocks.            self theClass compile: ast formattedCode.].    ^self</body></methods><methods><class-id>Spy1.SLMethodCoverage class</class-id> <category>accessing</category><body package="SpyLite" selector="actionOn:">actionOn: aNumberKey    (self probes at: aNumberKey) executed.    ^ nil.</body><body package="SpyLite" selector="at:put:">at: aNumberKey put: aBlock    self probes at: aNumberKey put: aBlock.</body><body package="SpyLite" selector="nextId">nextId    ^ installedProbes size.</body><body package="SpyLite" selector="probes">probes    installedProbes ifNil:[installedProbes := Dictionary new.].    ^ installedProbes.</body><body package="SpyLite" selector="reset">reset    installedProbes := nil.</body></methods><methods><class-id>Spy1.SSTypeCollectorMethod</class-id> <category>hooks</category><body package="SpyLite" selector="checkIfArgIsScalar:">checkIfArgIsScalar: arg 		| argType scalarShouldBeAdded |	argType := arg class fullName asSymbol.	scalarShouldBeAdded := self profiler scalars at: argType ifPresent: [ true ] ifAbsent: [ nil ].	scalarShouldBeAdded		ifNil: [			scalarShouldBeAdded := self profiler nonScalars find: argType ifAbsent: [ nil ].			scalarShouldBeAdded ifNotNil: [ scalarShouldBeAdded := false ] ].	scalarShouldBeAdded		ifNil: [ 			scalarShouldBeAdded := (self profiler isScalar: arg) and: [ arg isASimpleObject ] ].	(scalarShouldBeAdded and: [ arg containUncleanedBlocks not ])		ifTrue: [self profiler addScalar: arg]		ifFalse: [ self profiler addNonScalar: arg ].	^self</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>MethodWrapper</name><environment>Refactory.Wrappers</environment><super>Kernel.CompiledMethod</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>clientMethod selector </inst-vars><class-inst-vars>methods </class-inst-vars><imports></imports><category>Refactory-Method Wrappers</category><attributes><package>Method Wrapper Base</package></attributes></class><class><name>CodeProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.AbstractCodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testMethod testSource variables labelString permanent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CraftedSt-Probes</category><attributes><package>Debugger-Probes</package></attributes></class><class><name>RBProgramNodeVisitor</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parse Tree Matching</category><attributes><package>Browser-Parser</package></attributes></class></st-source>