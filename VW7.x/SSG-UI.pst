<?xml version="1.0"?><st-source><!-- Name: SSG-UIDbIdentifier: nilDbTrace: nilPackageName: SSG-UIParcel: #('ssg-ui' )ParcelName: SSG-UIPrintStringCache: nilDate: 5:43:30 am July 14, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on July 14, 2020 at 5:43:30 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SSGCreateTestClassView</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>generations statements population stopIterations pkgOutput pkgRegex aClass aPackage generatedClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SSG-UI</category><attributes><package>SSG-UI</package></attributes></class><class><name>SSGConfigurationTool</name><environment>SmallSuiteGenerator</environment><super>Refactory.Browser.CodeComponentPropertiesTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allMethodsList blackList generations pkgRegex pkgOutput statements population stopIterations setUpMethod tearDownMethod lastMessage typeInfo typeCoverage key asDict isChanged profiler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SSG-UI</category><attributes><package>SSG-UI</package></attributes></class><class><name>SSGPropertiesSelectionPolicy</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>SSG-UI</package></attributes></class><shared-variable><name>TestClassProperties</name><environment>SmallSuiteGenerator.SSGConfigurationTool</environment><private>false</private><constant>false</constant><category>SmallSuiteGenerator-Extension-UI</category><initializer>OrderedCollection new	add: #GeneralSettings &lt;&lt; #browser &gt;&gt; 'General Settings' -&gt; #buildGeneralSettings;	add: #MethodsSettings &lt;&lt; #browser &gt;&gt; 'Methods Settings' -&gt; #buildMethodSettings;	add: #BlackList &lt;&lt; #browser &gt;&gt; 'Black List' -&gt; #buildBlackListSettings;	add: #AdvancedSettings &lt;&lt; #browser &gt;&gt; 'Advanced Settings' -&gt; #buildAdvancedSettings; yourself</initializer><attributes><package>SSG-UI</package></attributes></shared-variable><methods><class-id>Tools.SSGCreateTestClassView</class-id> <category>As yet unclassified</category><body package="SSG-UI" selector="aClass">aClass	^ aClass </body><body package="SSG-UI" selector="aClass:">aClass: anObject	aClass := anObject </body><body package="SSG-UI" selector="addTestClassGenerated">addTestClassGenerated	| aclass |	aclass := aClass fullName.	generatedClass := self addTestClassOf: aclass inPackage: pkgOutput value. </body><body package="SSG-UI" selector="addTestClassOf:inPackage:">addTestClassOf: aclass inPackage: package	| generatedclass nameNewClass |	nameNewClass := ('GA' , (aclass substrings: '.') last , 'Test') asSymbol.	(generatedclass := SmallSuiteGenerator.SPlatform lookUpClass: nameNewClass) ifNil: [generatedclass := SmallSuiteGenerator.SPlatform createTestCaseClass: nameNewClass inPackage: package].		^generatedclass </body><body package="SSG-UI" selector="aPackage">aPackage	^ aPackage </body><body package="SSG-UI" selector="aPackage:">aPackage: anObject	aPackage := anObject.	self updatePackages </body><body package="SSG-UI" selector="generations">generations	generations isNil 		ifTrue: [			generations := SmallSuiteGenerator.SConfigGenerationTestCase numberOfGenerations asValue		].	^generations </body><body package="SSG-UI" selector="pkgOutput">pkgOutput	^ pkgOutput </body><body package="SSG-UI" selector="pkgRegex">pkgRegex	^ pkgRegex </body><body package="SSG-UI" selector="population">population	population isNil 		ifTrue: [			population := SmallSuiteGenerator.SConfigGenerationTestCase populationSize asValue		].	^population </body><body package="SSG-UI" selector="saveSettings">saveSettings	self compileMethod: 'aClass' withValue: aClass fullName.	self compileMethod: 'targetPackageRegex' withValue: pkgRegex value printString.	self compileMethod: 'stopIterations' withValue: stopIterations value asString.	self compileMethod: 'numberOfStatements' withValue: statements value asString.	self compileMethod: 'numberOfGenerations' withValue: generations value asString.	self compileMethod: 'populationSize' withValue: population value asString.	self compileMethod: 'outputPackageName' withValue: pkgOutput value printString. </body><body package="SSG-UI" selector="statements">statements	statements isNil 		ifTrue: [			statements := SmallSuiteGenerator.SConfigGenerationTestCase numberOfStatements asValue		].	^statements </body><body package="SSG-UI" selector="stopIterations">stopIterations	stopIterations isNil 		ifTrue: [			stopIterations := SmallSuiteGenerator.SConfigGenerationTestCase stopIterations asValue		].	^stopIterations </body><body package="SSG-UI" selector="updatePackages">updatePackages	pkgOutput value: SmallSuiteGenerator.SConfigGenerationTestCase  outputPackageName.	pkgRegex value: aPackage. </body></methods><methods><class-id>Tools.SSGCreateTestClassView</class-id> <category>initialize-release</category><body package="SSG-UI" selector="initialize">initialize	super initialize.	pkgOutput := EntryWithPasteButtonModule forPackages.	pkgRegex := EntryWithPasteButtonModule forPackages. </body></methods><methods><class-id>Tools.SSGCreateTestClassView</class-id> <category>actions</category><body package="SSG-UI" selector="cancel">cancel	self closeAndUnschedule </body><body package="SSG-UI" selector="createClass">createClass	[self validateSettings.	self addTestClassGenerated.	self saveSettings.	"Abrir la clase en el navegador"	self closeAndUnschedule]	on: SmallSuiteGenerator.SError 	do: [:t1 | Dialog warn: t1 messageText]. </body><body package="SSG-UI" selector="createClassButton">createClassButton	self createClass.	Refactory.Browser.RefactoringBrowser newOnClass: generatedClass </body><body package="SSG-UI" selector="createTests">createTests	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Generating tests...'		while: 			[self createClass.	[generatedClass generateTests]	on: SmallSuiteGenerator.SError 	do: [:t1 | Dialog warn: t1 messageText]].	Refactory.Browser.RefactoringBrowser newOnClass: generatedClass </body><body package="SSG-UI" selector="createTestsButton">createTestsButton	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Generating tests...'		while: 			[self createClass.	[generatedClass generateTests]	on: SmallSuiteGenerator.SError 	do: [:t1 | Dialog warn: t1 messageText]] </body></methods><methods><class-id>Tools.SSGCreateTestClassView</class-id> <category>validation</category><body package="SSG-UI" selector="validateSettings">validateSettings	pkgRegex value ifEmpty: [SmallSuiteGenerator.SError signal: 'Please enter a valid package regex'].	generations value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of generations'].	statements value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of statementes'].	pkgOutput value ifEmpty: [SmallSuiteGenerator.SError signal: 'Please enter a valid output package'].	population value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of population size'].	stopIterations value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of stop iterations']. </body></methods><methods><class-id>Tools.SSGCreateTestClassView</class-id> <category>compile</category><body package="SSG-UI" selector="compileMethod:withValue:">compileMethod: aString withValue: aValue	generatedClass class compile:		aString, String lf, 		' ^ ', aValue.</body></methods><methods><class-id>Tools.SSGCreateTestClassView class</class-id> <category>interface specs</category><body package="SSG-UI" selector="for:in:">for: aclass in: aPkg	^(self new) aClass: aclass; aPackage: aPkg; yourself </body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>action-apply</category><body package="SSG-UI" selector="advancedApply">advancedApply	[self validateAdvanced.	self compileMethod: 'fitness' withValue: typeCoverage value string printString.	self compileMethod: 'typeInfo' withValue: typeInfo value string printString.	self compileMethod: 'asDict' withValue: asDict value printString.	self compileMethod: 'lastMessage' withValue: lastMessage value string printString]	on: SmallSuiteGenerator.SError 	do: [:exc | Dialog warn: exc messageText]</body><body package="SSG-UI" selector="applyBlackList">applyBlackList	[self compileMethod: 'blackList' withValue: (self code: self blackList value list asOrderedCollection) storeString]	on: SmallSuiteGenerator.SError 	do: [:exc | Dialog warn: exc messageText]</body><body package="SSG-UI" selector="configApply">configApply	[self validateConfigFields.	self compileMethod: 'targetPackageRegex' withValue: pkgRegex  value string printString.	self compileMethod: 'numberOfGenerations' withValue: generations value asString.	self compileMethod: 'numberOfStatements' withValue: statements value asString.	self compileMethod: 'outputPackageName' withValue: pkgOutput value string printString.	self compileMethod: 'populationSize' withValue: population value asString.	self compileMethod: 'stopIterations' withValue: stopIterations value asString]	on: SmallSuiteGenerator.SError 	do: [:exc | Dialog warn: exc messageText]</body><body package="SSG-UI" selector="methodsApply">methodsApply	[ self validateMethods.	self compileMethod: 'setUpMethod' withValue: setUpMethod value string printString.	self compileMethod: 'tearDownMethod' withValue: tearDownMethod value string printString]	on: SmallSuiteGenerator.SError 	do: [:exc | Dialog warn: exc messageText]</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>validator</category><body package="SSG-UI" selector="validateAdvanced">validateAdvanced</body><body package="SSG-UI" selector="validateConfigFields">validateConfigFields	pkgRegex value ifEmpty: [SmallSuiteGenerator.SError signal: 'Please enter a valid package regex'].	generations value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of generations'].	statements value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of statementes'].	pkgOutput value ifEmpty: [SmallSuiteGenerator.SError signal: 'Please enter a valid output package'].	population value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of population size'].	stopIterations value &gt; 0 ifFalse: [SmallSuiteGenerator.SError signal: 'Please enter a valid number of stop iterations'].</body><body package="SSG-UI" selector="validateMethods">validateMethods</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>initialize-release</category><body package="SSG-UI" selector="initialize">initialize	super initialize.	self propertiesList list: TestClassProperties asList.	self propertiesList selection: TestClassProperties first.	isViewingInspector := false.	isChanged := false.	pkgOutput := EntryWithPasteButtonModule forPackages.	pkgRegex := EntryWithPasteButtonModule forPackages.	</body><body package="SSG-UI" selector="updateDisplay">updateDisplay	super updateDisplay.	"self changedMethodSelection; changedBlackListSelection"</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>config-tab</category><body package="SSG-UI" selector="generations">generations	generations ifNil: [generations := self selectedClass numberOfGenerations asValue].	^ generations</body><body package="SSG-UI" selector="pkgOutput">pkgOutput	pkgOutput value ifEmpty: [ pkgOutput value: self selectedClass outputPackageName].	^ pkgOutput</body><body package="SSG-UI" selector="pkgRegex">pkgRegex	pkgRegex value ifEmpty: [pkgRegex value: self selectedClass targetPackageRegex ].	^ pkgRegex</body><body package="SSG-UI" selector="population">population	population ifNil: [population := self selectedClass populationSize asValue ].	^ population</body><body package="SSG-UI" selector="statements">statements	statements ifNil: [ statements := self selectedClass numberOfStatements asValue].	^ statements</body><body package="SSG-UI" selector="stopIterations">stopIterations	stopIterations ifNil: [  stopIterations := self selectedClass stopIterations asValue].	^ stopIterations</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>accessing</category><body package="SSG-UI" selector="selectedClass">selectedClass	super selectedClass isMeta ifTrue: [ ^ super selectedClass instanceBehavior ]	ifFalse: [^ super selectedClass]</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>methods-tab</category><body package="SSG-UI" selector="setUpMethod">setUpMethod	setUpMethod ifNil: [setUpMethod := self selectedClass setUpMethod asValue].	^ setUpMethod</body><body package="SSG-UI" selector="tearDownMethod">tearDownMethod	tearDownMethod ifNil: [tearDownMethod := self selectedClass tearDownMethod asValue].	^ tearDownMethod</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>advanced-tab</category><body package="SSG-UI" selector="asDict">asDict	asDict isNil ifTrue: [asDict :=self selectedClass asDict asValue].	^asDict</body><body package="SSG-UI" selector="key">key	key isNil ifTrue: [key := String new asValue].	^key</body><body package="SSG-UI" selector="lastMessage">lastMessage	lastMessage ifNil: [lastMessage := self selectedClass lastMessage asValue].	^ lastMessage</body><body package="SSG-UI" selector="typeCoverage">typeCoverage	typeCoverage isNil ifTrue: [typeCoverage := self selectedClass fitness asValue].	^typeCoverage</body><body package="SSG-UI" selector="typeInfo">typeInfo	typeInfo isNil ifTrue: [typeInfo := self selectedClass typeInfo asValue].	^typeInfo</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>compile</category><body package="SSG-UI" selector="compileMethod:withValue:">compileMethod: aString withValue: aValue	self selectedClass class compile:		aString, String lf,		' ^ ', aValue.</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>building</category><body package="SSG-UI" selector="buildAdvancedSettings">buildAdvancedSettings	| t1 |	(t1 := self codeComponent) notNil ifTrue: [self informationHolder value: t1 textForItem].	self build: #advancedSpec</body><body package="SSG-UI" selector="buildBlackListSettings">buildBlackListSettings	| t1 |	(t1 := self codeComponent) notNil ifTrue: [self informationHolder value: t1 textForItem].	self build: #blackListSpec</body><body package="SSG-UI" selector="buildGeneralSettings">buildGeneralSettings	| t1 |	(t1 := self codeComponent) notNil ifTrue: [self informationHolder value: t1 textForItem].	self build: #configSpec</body><body package="SSG-UI" selector="buildMethodSettings">buildMethodSettings	| t1 |	(t1 := self codeComponent) notNil ifTrue: [self informationHolder value: t1 textForItem].	self build: #methodsSpec</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>As yet unclassified</category><body package="SSG-UI" selector="wantToDrag:">wantToDrag: t1	^true</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>changing</category><body package="SSG-UI" selector="changedBlackListSelection">changedBlackListSelection	self blackList selections isEmpty		ifTrue: [self disable: #removeMethodsButton]		ifFalse: [self enable: #removeMethodsButton].</body><body package="SSG-UI" selector="changedMethodSelection">changedMethodSelection	self allMethodsList selections isEmpty		ifTrue: [self disable: #addMethodsButton]		ifFalse: [self enable: #addMethodsButton].</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>blackList-tab</category><body package="SSG-UI" selector="addMethods">addMethods	| set newList |	set := self blackList list asSet addAll: self allMethodsList selections.	newList := List withAll: set.	self blackList list: newList. </body><body package="SSG-UI" selector="allMethodsList">allMethodsList	allMethodsList isNil ifTrue: [allMethodsList := MultiSelectionInList  with: (List withAll: ((self selectedClass aClass allMethodsBelow: Core.Object) sort: [:a :b | a mclass name &lt; b mclass name ])).	allMethodsList selections: self selectedClass blackList.	"allMethodsList selectionIndexHolder onChangeSend: #changedMethodSelection to: self"].	^allMethodsList </body><body package="SSG-UI" selector="blackList">blackList	blackList isNil ifTrue: [		blackList := MultiSelectionInList with: 			(List withAll: self selectedClass decodeBlackList).	"blackList selectionIndexHolder onChangeSend: #changedBlackListSelection to: self"	].	^blackList</body><body package="SSG-UI" selector="code:">code: aBlackList	|result|	result := OrderedCollection new.	aBlackList do: [:e | |class isMeta|		class := e mclass.		isMeta := false.		class isMeta ifTrue: [class := class instanceBehavior.		isMeta := true ].		result add: (Array with: class fullName with: e selector with: isMeta)].	^ result asArray</body><body package="SSG-UI" selector="findClass:">findClass: aString		^ Root allClasses select: [:aclass | aString = aclass fullName or: ['*.' , aString match: aclass fullName]]</body><body package="SSG-UI" selector="removeMethods">removeMethods	| set newList |	set := (self blackList list asSet removeAll: blackList selections; yourself).	newList := List withAll: set.	self blackList list: newList.	self allMethodsList selections: self blackList list</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool</class-id> <category>actions</category><body package="SSG-UI" selector="packagesMatchingWith:">packagesMatchingWith: aString 	^Store.Registry allPackages select: [:pkg | aString match: pkg name asString] </body><body package="SSG-UI" selector="play">play	self key value isEmpty		ifTrue: [Dialog warn: 'Please enter typeInfo key before capturing data.']		ifFalse: [Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Instrumenting...'				while: 					[profiler ifNotNil: [self uninstall].					self profilerForPackagesMatching: pkgRegex value]].</body><body package="SSG-UI" selector="profilerForPackagesMatching:">profilerForPackagesMatching: aString	profiler := Spy1.SSTypeCollector new.	Transcript show: 'profiling...'; cr.	profiler beforeProfiling.	profiler gatherForPackages: (self packagesMatchingWith: aString).	profiler install.	profiler beforeProfiling.</body><body package="SSG-UI" selector="rec">rec	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Deconstructing...' while: [profiler			ifNotNil: 				[self uninstall.				self saveTypeInfo]			ifNil: [Dialog warn: 'Please press the start button before this button.']].	self updateDisplay</body><body package="SSG-UI" selector="saveTypeInfo">saveTypeInfo				| typeCollector |	self key value isEmpty		ifTrue: [Dialog warn: 'Please enter typeInfo key before capturing data.']		ifFalse: 			[typeCollector := SmallSuiteGenerator.STypeInfo asTypeInfo: profiler methodsBlacklist: #( ).			SmallSuiteGenerator.SConfigGenerationTestCase addTypeInfo: typeCollector withKey: self key value].</body><body package="SSG-UI" selector="uninstall">uninstall	profiler afterProfiling; uninstall.	Transcript show: 'ended...'; cr</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool class</class-id> <category>interface specs</category><body package="SSG-UI" selector="fitnessMenu">fitnessMenu	| menu |	(menu := MenuBuilder new) addLabel: 'Statement Coverage' value: #statement.	menu addLabel: 'State Coverage' value: #state.	^menu menuHolder</body><body package="SSG-UI" selector="typeInfoMenu">typeInfoMenu	| menu |	menu := MenuBuilder new.	SmallSuiteGenerator.SConfigGenerationTestCase typeInfos keys do: [:aTypeInfo | menu addLabel: aTypeInfo value: aTypeInfo].	^menu menuHolder </body></methods><methods><class-id>Refactory.Browser.SSGPropertiesSelectionPolicy</class-id> <category>As yet unclassified</category><body package="SSG-UI" selector="codeToolClassForClass:">codeToolClassForClass: anObject 	(self isGeneratedTestClass: anObject) ifFalse: [^super codeToolClassForClass: anObject].	^ Smalltalk.SmallSuiteGenerator.SSGConfigurationTool </body><body package="SSG-UI" selector="filterClass:">filterClass: aClass	| newClass |	aClass isMeta		ifTrue: [newClass := aClass instanceBehavior]		ifFalse: [newClass := aClass].	^newClass </body><body package="SSG-UI" selector="isGeneratedTestClass:">isGeneratedTestClass: aClass	^(self filterClass: aClass) includesBehavior: SmallSuiteGenerator.SConfigGenerationTestCase </body><body package="SSG-UI" selector="name">name	^(#Settings &lt;&lt; #browser &gt;&gt; 'Fuzzy') asString</body></methods><methods><class-id>Refactory.Browser.SSGPropertiesSelectionPolicy class</class-id> <category>As yet unclassified</category><body package="SSG-UI" selector="initialize">initialize	Refactory.Browser.CodeModel defaultSelectionPolicies add: 		SSGPropertiesSelectionPolicy new. </body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="SSG-UI" selector="filterClass">filterClass	| aClass |	self selectedClass isMeta		ifTrue: [aClass := self selectedClass instanceBehavior]		ifFalse: [aClass := self selectedClass].	^aClass </body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>testing</category><body package="SSG-UI" selector="isGeneratedTestClassSelected">isGeneratedTestClassSelected	^self filterClass includesBehavior: SmallSuiteGenerator.SConfigGenerationTestCase </body><body package="SSG-UI" selector="isNotTestClassSelected">isNotTestClassSelected	super isClassSelected ifTrue: [^(self filterClass includesBehavior: SUnit.TestCase) not].	^false </body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>printing</category><body package="SSG-UI" selector="printOn:">printOn: aStream	"aStream print: self class; space.	self printNameOn: aStream inClass: nil"	| selector class who |			mclass isNil				ifTrue:					[aStream nextPutAll: (#ParenUnboundMethodParen &lt;&lt; #pdp &gt;&gt; '(Unbound method)') asString.					^self].			who := self who.			who isNil				ifTrue:					[class := mclass.					selector := class defaultSelectorForMethod: self]				ifFalse:					[class := who first.					selector := who at: 2].	aStream nextPutAll: mclass name.	aStream nextPutAll: '&gt;&gt;'.	aStream nextPutAll: selector </body></methods><methods><class-id>Tools.SSGCreateTestClassView class</class-id> <category>interface specs</category><body package="SSG-UI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec" 	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Create Test Class' 			#min: #(#{Core.Point} 450 266 ) 			#max: #(#{Core.Point} 450 266 ) 			#bounds: #(#{Graphics.Rectangle} 576 432 1026 698 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 18 26 ) 					#name: #pkgRegex 					#label: 'Package Regex:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 18 64 ) 					#name: #pkgOutput 					#label: 'Output Package:' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 108 0 22 0 426 0 50 0 ) 					#name: #InputFieldTargetPackage 					#flags: 12 					#clientKey: #pkgRegex 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 108 0 58 0 426 0 86 0 ) 					#name: #InputFieldOutputPackageName 					#flags: 12 					#clientKey: #pkgOutput 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 14 12 440 100 ) 					#name: #GroupBox1 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 18 132 ) 					#name: #stmLable 					#label: 'Statements number:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 18 172 ) 					#name: #popLabel 					#label: 'Population size:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 244 136 ) 					#name: #generationsLabel 					#label: 'Generations:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 244 174 ) 					#name: #stopItLabel 					#label: 'Stop iterations:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 126 128 228 160 ) 					#name: #StatementsNumber 					#model: #statements 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 126 168 228 198 ) 					#name: #Population 					#model: #population 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 328 130 430 160 ) 					#name: #Generations 					#model: #generations 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 328 170 430 200 ) 					#name: #StopIterations 					#model: #stopIterations 					#type: #number ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.Rectangle} 14 120 440 210 ) 					#name: #GroupBox2 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 174 224 268 256 ) 					#name: #CreateClassButton 					#model: #createClassButton					#label: 'Create class test' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 274 224 367 256 ) 					#name: #CreateTestsButton 					#model: #createTestsButton					#label: 'Generate tests' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 372 224 439 256 ) 					#name: #ActionButtonCancel 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>SmallSuiteGenerator.SSGConfigurationTool class</class-id> <category>interface specs</category><body package="SSG-UI" selector="advancedSpec">advancedSpec	"Tools.UIPainter new openOnClass: self andSelector: #advancedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 576 330 950 608 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 160 0 -80 1 -12 1 ) 					#name: #TextEditorLastMessage 					#model: #lastMessage 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 8 ) 					#name: #LabelCoverage 					#label: 'Type Coverage:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 140 ) 					#name: #LabelLastMessage 					#label: 'Last Message:' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -77 1 40 0 -8 1 70 0 ) 					#name: #ActionButton1 					#model: #advancedApply 					#label: 'Apply' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 96 0 6 0 -83 1 34 0 ) 					#name: #Coverage 					#model: #typeCoverage 					#menu: #fitnessMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 8 44 ) 					#name: #LabelTypeInfo 					#label: 'Type Info:' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 96 0 42 0 -83 1 70 0 ) 					#name: #TypeInfo 					#model: #typeInfo 					#menu: #typeInfoMenu ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -78 1 10 0 ) 					#name: #CheckBoxAsDict 					#model: #asDict 					#label: 'As Dict' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 12 102 ) 					#name: #LabelKey 					#label: 'Key:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 42 0 100 0 -220 1 126 0 ) 					#name: #InputFieldKey 					#model: #key ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -215 1 96 0 -155 1 128 0 ) 					#name: #ActionButtonPlay 					#model: #play 					#label: 'Play' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -150 1 96 0 -92 1 126 0 ) 					#name: #ActionButtonRec 					#model: #rec 					#label: 'Rec' 					#defaultable: true ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 76 0 -83 1 140 0 ) 					#name: #GroupBox1 					#label: 'Create TypeInfo' ) ) ) )</body><body package="SSG-UI" selector="blackListSpec">blackListSpec	"Tools.UIPainter new openOnClass: self andSelector: #blackListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 576 432 776 632 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #LabelMethods 					#label: 					#(#{Kernel.UserMessage} 						#key: #AvailableParcelsPackagesC 						#defaultString: 'Available Methods:' 						#catalogID: #browser ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 25 0 -34 0.5 -54 1 ) 					#name: #ListBlackMethod 					#model: #allMethodsList 					#tabable: false 					#multipleSelections: true 					#selectionType: #highlight 					#autoSelect: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -60 0.5 17 0.5 -33 0.5 ) 					#name: #addMethodsButton 					#model: #addMethods 					#label: '&gt;&gt;' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -13 0.5 17 0.5 14 0.5 ) 					#name: #removeMethodsButton 					#model: #removeMethods 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 34 0.5 2 0 ) 					#name: #LabelBlackList 					#label: 					#(#{Kernel.UserMessage} 						#key: #PrerequisitesC 						#defaultString: 'Black List:' 						#catalogID: #browser ) ) 				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragOkSelector 						#wantToDrag: #dragEnterSelector 						#dragEnter: #dropSelector 						#drop: #dragStartSelector 						#doReorderDrag: #dragOverSelector 						#dragOver: #dragExitSelector 						#dragLeave: ) 					#layout: #(#{Graphics.LayoutFrame} 34 0.5 25 0 -2 1 -54 1 ) 					#name: #blackList 					#model: #blackList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #BtnApplyMeth 					#model: #applyBlackList 					#label: 					#(#{Kernel.UserMessage} 						#key: #CopyDeployment 						#defaultString: 'Apply' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -38 1 -5 1 -34 1 ) 					#name: #Divider2 ) ) ) )</body><body package="SSG-UI" selector="configSpec">configSpec	"Tools.UIPainter new openOnClass: self andSelector: #configSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 576 432 972 630 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 28 ) 					#name: #LabelPkgReg 					#label: 'Pkg Regex:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 14 62 ) 					#name: #LabelPkgOut 					#label: 'Pkg Output:' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 26 0 -84 1 54 0 ) 					#name: #InputFieldTargetPackage 					#flags: 4 					#clientKey: #pkgRegex 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 62 0 -84 1 88 0 ) 					#name: #InputFieldOutputPackage 					#flags: 4 					#clientKey: #pkgOutput 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 12 120 ) 					#name: #LabelStms 					#label: 'Stm Size:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 12 156 ) 					#name: #LabelGen 					#label: 'Generations:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -27 0.5 120 0 ) 					#name: #LabelPop 					#label: 'Population:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -27 0.5 154 0 ) 					#name: #LabelStopIt 					#label: 'Stop It.:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 85 0 118 0 -35 0.5 144 0 ) 					#name: #InputFieldStm 					#model: #statements 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 85 0 152 0 -35 0.5 178 0 ) 					#name: #InputFieldGen 					#model: #generations 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 30 0.5 118 0 -85 1 144 0 ) 					#name: #InputFieldPop 					#model: #population 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 30 0.5 152 0 -85 1 178 0 ) 					#name: #InputFieldStopIt 					#model: #stopIterations 					#type: #number ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 18 0 -77 1 100 0 ) 					#name: #GroupBox1 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 110 0 -77 1 188 0 ) 					#name: #GroupBox2 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -73 1 20 0 -8 1 52 0 ) 					#name: #ConfigApply 					#model: #configApply 					#label: 'Apply' 					#defaultable: true ) ) ) )</body><body package="SSG-UI" selector="methodsSpec">methodsSpec	"Tools.UIPainter new openOnClass: self andSelector: #methodsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 576 432 950 710 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 28 0 -84 1 0 0.5 ) 					#name: #TextEditorSetUp 					#model: #setUpMethod 					#tabRequiresControl: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 8 0 20 0.5 -84 1 -8 1 ) 					#name: #TextEditorTearDown 					#model: #tearDownMethod 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 6 ) 					#name: #LabelSetUp 					#label: 'setUp Method:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 2 0.5 ) 					#name: #LabelTearDown 					#label: 'tearDown Method:' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -78 1 30 0 -8 1 60 0 ) 					#name: #MethodsApply 					#model: #methodsApply 					#label: 'Apply' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="SSG-UI" selector="addTestClassGenerated">addTestClassGenerated	&lt;menuItem: 'Add Test Class Generated' nameKey: nil enablement: #isNotTestClassSelected indication: nil menu: #(#classMenu ) position: 85.1&gt;	(SSGCreateTestClassView for: self filterClass in: state packages first name) open. 		"| t1 t2 t3 |	t1 := self filterClass fullName.	t2 := state packages first name.	(t3 := self addTestClassOf: t1 inPackage: t2 , '-Test') targetClassName: t1.	t3 targetPackageRegex: t2.	t3 aClass: self selectedClass.	self changeConfigurationOf: t3." </body><body package="SSG-UI" selector="generateTests">generateTests	&lt;menuItem: 'Generate Tests' nameKey: nil enablement: #isGeneratedTestClassSelected indication: nil menu: #(#classMenu ) position: 85.2&gt;	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Generating tests...'		while: 			[self filterClass generateTests] </body></methods><initialize><class-id>Refactory.Browser.SSGPropertiesSelectionPolicy</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>CodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigatorType cachedSelectors windowLabel </inst-vars><class-inst-vars>navigatorSpecBlocks </class-inst-vars><imports>			Store.*			</imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>CodeComponentPropertiesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertiesList informationHolder subcanvas inspectorSubcanvas originalInspectedProperties isViewingInspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>