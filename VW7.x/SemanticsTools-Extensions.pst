<?xml version="1.0"?><st-source><!-- Name: SemanticsTools-ExtensionsDbIdentifier: nilDbTrace: nilPackageName: SemanticsTools-ExtensionsParcel: #('SemanticsTools-Extensions' )ParcelName: SemanticsTools-ExtensionsPrintStringCache: nilDate: 6:47:39 am July 7, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on July 7, 2020 at 6:47:39 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SConfigClassView</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aClass inputFieldTargetPackage blackList inputFieldNumberOfGenerations inputFieldNumberOfStatements inputFieldOutputPackageName inputFieldPopulationSize inputFieldStopIterations textEditorLastMessage textEditorMethodCoverage textEditorSetUpMethod textEditorTearDownMethod listBlackMethod fitnessValue fitness typeInfo keyTypeInfo profiler </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SemanticsTools-Extensions</category><attributes><package>SemanticsTools-Extensions</package></attributes></class><methods><class-id>Tools.SConfigClassView</class-id> <category>initialize-release</category><body package="SemanticsTools-Extensions" selector="initialize">initialize	super initialize.	inputFieldOutputPackageName := EntryWithPasteButtonModule forPackages.	inputFieldTargetPackage := EntryWithPasteButtonModule forPackages.</body></methods><methods><class-id>Tools.SConfigClassView</class-id> <category>accessing</category><body package="SemanticsTools-Extensions" selector="aClass">aClass	^ aClass ifNil: [ self aClass: SmallSuiteGenerator.SConfigGenerationTestCase ] 		ifNotNil: [ aClass ]</body><body package="SemanticsTools-Extensions" selector="aClass:">aClass: anObject	aClass := anObject.	self updatePackages</body><body package="SemanticsTools-Extensions" selector="blackList">blackList	blackList ifNil: [blackList := self aClass blackList].	^ blackList</body><body package="SemanticsTools-Extensions" selector="blackList:">blackList: aList	blackList := aList</body><body package="SemanticsTools-Extensions" selector="fitness">fitness	^fitness isNil		ifTrue:			[fitness := self aClass fitness asValue]		ifFalse:			[fitness]</body><body package="SemanticsTools-Extensions" selector="fitnessValue">fitnessValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^fitnessValue isNil		ifTrue:			[fitnessValue := nil asValue]		ifFalse:			[fitnessValue]</body><body package="SemanticsTools-Extensions" selector="inputFieldBlackList">inputFieldBlackList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	inputFieldBlackList isNil		ifTrue:			[inputFieldBlackList := String new asValue].	^inputFieldBlackList</body><body package="SemanticsTools-Extensions" selector="inputFieldNumberOfGenerations">inputFieldNumberOfGenerations	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	inputFieldNumberOfGenerations isNil		ifTrue:			[inputFieldNumberOfGenerations := self aClass numberOfGenerations asValue].	^inputFieldNumberOfGenerations</body><body package="SemanticsTools-Extensions" selector="inputFieldNumberOfStatements">inputFieldNumberOfStatements	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	inputFieldNumberOfStatements isNil		ifTrue:			[inputFieldNumberOfStatements :=  self aClass numberOfStatements asValue].	^ inputFieldNumberOfStatements</body><body package="SemanticsTools-Extensions" selector="inputFieldOutputPackageName">inputFieldOutputPackageName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^inputFieldOutputPackageName</body><body package="SemanticsTools-Extensions" selector="inputFieldPopulationSize">inputFieldPopulationSize	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	inputFieldPopulationSize isNil		ifTrue:			[inputFieldPopulationSize :=  self aClass populationSize asValue].	^ inputFieldPopulationSize</body><body package="SemanticsTools-Extensions" selector="inputFieldStopIterations">inputFieldStopIterations	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	inputFieldStopIterations isNil		ifTrue:			[inputFieldStopIterations :=  self aClass stopIterations asValue].	^inputFieldStopIterations</body><body package="SemanticsTools-Extensions" selector="inputFieldTargetPackage">inputFieldTargetPackage	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	inputFieldTargetPackage isNil		ifTrue:			[inputFieldTargetPackage := self aClass targetPackageRegex asValue].	^inputFieldTargetPackage</body><body package="SemanticsTools-Extensions" selector="keyTypeInfo">keyTypeInfo	keyTypeInfo isNil		ifTrue:			[keyTypeInfo := String new asValue].	^ keyTypeInfo</body><body package="SemanticsTools-Extensions" selector="listBlackMethod">listBlackMethod	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listBlackMethod isNil		ifTrue:			[listBlackMethod := MultiSelectionInList with: (List withAll: (self aClass aClass allMethodsBelow: Core.Object)).			listBlackMethod selections: self blackList ]		ifFalse:			[listBlackMethod]</body><body package="SemanticsTools-Extensions" selector="packagesMatchingWith:">packagesMatchingWith: aString	^Store.Registry allPackages select: [:pkg | aString match: pkg name asString]</body><body package="SemanticsTools-Extensions" selector="textEditorLastMessage">textEditorLastMessage	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	textEditorLastMessage isNil		ifTrue:			[textEditorLastMessage :=  self aClass lastMessage asValue].	^ textEditorLastMessage</body><body package="SemanticsTools-Extensions" selector="textEditorSetUpMethod">textEditorSetUpMethod	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	textEditorSetUpMethod isNil		ifTrue:			[textEditorSetUpMethod := self aClass setUpMethod asValue].	^ textEditorSetUpMethod</body><body package="SemanticsTools-Extensions" selector="textEditorTearDownMethod">textEditorTearDownMethod	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	textEditorTearDownMethod isNil		ifTrue:			[textEditorTearDownMethod := self aClass tearDownMethod asValue].	^ textEditorTearDownMethod</body><body package="SemanticsTools-Extensions" selector="typeInfo">typeInfo	typeInfo isNil		ifTrue:			[typeInfo :=  self aClass typeInfo asValue].	^typeInfo</body></methods><methods><class-id>Tools.SConfigClassView</class-id> <category>validation</category><body package="SemanticsTools-Extensions" selector="lengthOfNumber:">lengthOfNumber: aController	| entry lengthLimit |	lengthLimit := 7.	entry := aController editValue asString size.	^	entry asNumber &lt;= lengthLimit			ifTrue: [ true ]			ifFalse: [			Dialog warn: ('Please introduce a number with a max of ', lengthLimit asString, ' digits'). 			false ]</body><body package="SemanticsTools-Extensions" selector="validateFields">validateFields	inputFieldTargetPackage value ifEmpty: [ SmallSuiteGenerator.SError signal: 'Please enter a valid package regex'].	inputFieldNumberOfGenerations value ifNil: [ SmallSuiteGenerator.SError signal: 'Please enter a valid number of generations']. 	inputFieldNumberOfStatements  value ifNil: [ SmallSuiteGenerator.SError signal: 'Please enter a valid number of statementes'].  	inputFieldOutputPackageName  value ifEmpty: [ SmallSuiteGenerator.SError signal: 'Please enter a valid output package']. 	inputFieldPopulationSize  value ifNil: [ SmallSuiteGenerator.SError signal: 'Please enter a valid number of population size'].	inputFieldStopIterations value ifNil: [ SmallSuiteGenerator.SError signal: 'Please enter a valid number of stop iterations']. 	textEditorLastMessage. "Validar que sea codigo de Smalltalk (que pueda compilar)"	textEditorSetUpMethod. "Validar que sea codigo de Smalltalk (que pueda compilar)"	textEditorTearDownMethod. "Validar que sea codigo de Smalltalk (que pueda compilar)"	listBlackMethod.	"self addMethodToBlackList."	fitness. "Validar que este en la lista de fitness"	typeInfo "Validar que este en el diccionario de typeInfos"</body></methods><methods><class-id>Tools.SConfigClassView</class-id> <category>actions</category><body package="SemanticsTools-Extensions" selector="addMethodToBlackList">addMethodToBlackList	self blackList: self listBlackMethod selections</body><body package="SemanticsTools-Extensions" selector="discardChanges">discardChanges	self closeAndUnschedule.</body><body package="SemanticsTools-Extensions" selector="generateTests">generateTests	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Generating tests...' while: [		self aClass generateTests	]</body><body package="SemanticsTools-Extensions" selector="play">play	(self keyTypeInfo value isEmpty) ifFalse: [	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Instrumenting...'		while: 			[profiler ifNotNil: [				self uninstall.].			self profilerForPackagesMatching: inputFieldTargetPackage value]]	ifTrue: [ Dialog warn: 'Please enter typeInfo key before capturing data.' ]</body><body package="SemanticsTools-Extensions" selector="profilerForPackagesMatching:">profilerForPackagesMatching: aString	profiler := Spy1.SSTypeCollector new.	Transcript show: 'profiling...'; cr.	profiler beforeProfiling.	profiler gatherForPackages: (self packagesMatchingWith: aString).	profiler install.	profiler beforeProfiling.</body><body package="SemanticsTools-Extensions" selector="rec">rec	Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Deconstructing...' while: [		profiler ifNotNil: [				self uninstall.				self saveTypeInfo				]			ifNil: [ Dialog warn: 'Please press the start button before this button.' ]	]</body><body package="SemanticsTools-Extensions" selector="saveConfiguration">saveConfiguration	aClass ifNotNil: [		Notice show: #LoadingParcelOrParcels &lt;&lt; #dialogs &gt;&gt; 'Saving...'		while: [			[self validateFields.			aClass targetPackageRegex: inputFieldTargetPackage value.			aClass numberOfGenerations: inputFieldNumberOfGenerations value.			aClass numberOfStatements: inputFieldNumberOfStatements  value.			aClass outputPackageName: inputFieldOutputPackageName  value.			aClass populationSize: inputFieldPopulationSize  value.			aClass stopIterations: inputFieldStopIterations value.			aClass lastMessage: textEditorLastMessage value.			aClass setUpMethod: textEditorSetUpMethod value.			aClass tearDownMethod: textEditorTearDownMethod value.			aClass blackList: self blackList.			aClass fitness: fitness value.			aClass typeInfo: typeInfo value.			self closeAndUnschedule.			] on: SmallSuiteGenerator.SError			do: [ :e | Dialog warn: e messageText ]		]	].</body><body package="SemanticsTools-Extensions" selector="saveTypeInfo">saveTypeInfo	(self keyTypeInfo value isEmpty) ifFalse: [ |aTypeInfo|		aTypeInfo := SmallSuiteGenerator.STypeInfo asTypeInfo: profiler methodsBlacklist: "self listBlackMethod" #().		SmallSuiteGenerator.SConfigGenerationTestCase addTypeInfo: aTypeInfo withKey: self keyTypeInfo value	] ifTrue: [ Dialog warn: 'Please enter typeInfo key before capturing data.' ]</body><body package="SemanticsTools-Extensions" selector="uninstall">uninstall	profiler afterProfiling; uninstall.	Transcript show: 'ended...'; cr.</body><body package="SemanticsTools-Extensions" selector="updatePackages">updatePackages	inputFieldOutputPackageName value: self aClass outputPackageName.	inputFieldTargetPackage value: self aClass targetPackageRegex</body></methods><methods><class-id>Tools.SConfigClassView class</class-id> <category>initialize-release</category><body package="SemanticsTools-Extensions" selector="on:">on: anObject	^ self new aClass: anObject; yourself</body></methods><methods><class-id>Tools.SConfigClassView class</class-id> <category>interface specs</category><body package="SemanticsTools-Extensions" selector="fitnessMenu">fitnessMenu	| mb |	mb := MenuBuilder new.	mb addLabel: 'Statement Coverage' value: #statement.	mb addLabel: 'State Coverage' value: #state.	^mb menuHolder</body><body package="SemanticsTools-Extensions" selector="typeInfoMenu">typeInfoMenu	| mb |	mb := MenuBuilder new.	SmallSuiteGenerator.SConfigGenerationTestCase typeInfos keys do: [:key |		mb addLabel: key value: key.	].	^mb menuHolder</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="SemanticsTools-Extensions" selector="addTestClassOf:inPackage:">addTestClassOf: aClass inPackage: aPackage	| generatedClass className |	className :=  ('GA' , (aClass substrings: '.') last , 'Test') asSymbol.	(generatedClass := SmallSuiteGenerator.SPlatform lookUpClass: className) ifNil: [generatedClass := SmallSuiteGenerator.SPlatform createTestCaseClass: className inPackage: aPackage].	^generatedClass</body><body package="SemanticsTools-Extensions" selector="changeConfigurationOf:">changeConfigurationOf: aClass	(SConfigClassView on: aClass) open.</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>private-store</category><body package="SemanticsTools-Extensions" selector="isClassSelected">isClassSelected	^ super isClassSelected and: [ (self selectedClass includesBehavior: SUnit.TestCase) not ]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>semantics</category><body package="SemanticsTools-Extensions" selector="canAccessTestRunner">canAccessTestRunner	^ (Store.Registry allPackages select: [ :package | package name ahsContainsString: 'TestRunner' ]) isNotEmpty</body></methods><methods><class-id>Tools.SConfigClassView class</class-id> <category>interface specs</category><body package="SemanticsTools-Extensions" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Generated class configuration' 			#min: #(#{Core.Point} 1088 782 ) 			#max: #(#{Core.Point} 1088 782 ) 			#bounds: #(#{Graphics.Rectangle} 781 113 1869 895 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #white ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 277 100 ) 					#name: #NumberStatementsLabel 					#label: 'Number of Statements:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 30 137 ) 					#name: #LabelNumberOfGenerations 					#label: 'Number of Generations:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 38 0.0833333 -19 0.0833333 429 0.0833333 15 0.0833333 ) 					#name: #InputFieldTargetPackage 					#flags: 12 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) ) 					#clientKey: #inputFieldTargetPackage 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 30 0 58 0 90 20 ) 					#name: #TargetPackageLabel 					#label: 'Target Package:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 170 0 90 0 90 30 ) 					#name: #InputFieldPopulationSize 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestFocusOutSelector: 						#lengthOfNumber: 						#requestValueChangeSelector: 						#lengthOfNumber: ) 					#model: #inputFieldPopulationSize 					#tabable: false 					#style: #'AnimationOverview-12-TightSqueeze' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 412 0 90 0 90 30 ) 					#name: #InputFieldNumberOfStatements 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#model: #inputFieldNumberOfStatements 					#tabable: false 					#style: #'AnimationOverview-12-TightSqueeze' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 30 0 100 0 89 17 ) 					#name: #PopulationSizeLabel 					#label: 'Population Size:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 170 0 130 0 90 30 ) 					#name: #InputFieldNumberOfGenerations 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestFocusOutSelector: 						#lengthOfNumber: 						#requestValueChangeSelector: 						#lengthOfNumber: ) 					#model: #inputFieldNumberOfGenerations 					#tabable: false 					#style: #'AnimationOverview-12-TightSqueeze' 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 412 0 129 0 90 30 ) 					#name: #InputFieldStopIterations 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestFocusOutSelector: 						#lengthOfNumber: 						#requestValueChangeSelector: 						#lengthOfNumber: ) 					#model: #inputFieldStopIterations 					#tabable: false 					#style: #'AnimationOverview-12-TightSqueeze' 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 30 0 170 0 82 17 ) 					#name: #LabelLastMessage 					#label: 'Last Message' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 32 0 195 0 485 135 ) 					#name: #TextEditorLastMessage 					#flags: 12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#model: #textEditorLastMessage 					#tabable: false 					#tabRequiresControl: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 276 0 137 0 86 17 ) 					#name: #LabelStopIteration 					#label: 'Stop iterations:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 406 0 526 0 97 30 ) 					#name: #AddMethodToBlackListButton 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #addMethodToBlackList 					#tabable: false 					#label: 'Add methods' 					#style: #'AnimationOverview-12-TightSqueeze' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 47 0 364 0 455 150 ) 					#name: #ListBlackMethod 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#model: #listBlackMethod 					#tabable: false 					#multipleSelections: true 					#selectionType: #highlight 					#autoSelect: false ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 34 0 342 0 485 230 ) 					#name: #GroupBoxBlackList 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) ) 					#label: 'Black List' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 575 0 75 0 485 200 ) 					#name: #TextEditorSetUpMethod 					#flags: 12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#model: #textEditorSetUpMethod 					#tabable: false 					#tabRequiresControl: false ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 19 0 35 0 1050 4 ) 					#name: #Divider1 ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 552 0 44 0 4 640 ) 					#name: #Divider2 					#orientation: #vertical ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 16 0 695 0 1050 4 ) 					#name: #Divider3 ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 32 0 589 0 128 17 ) 					#name: #LabelOutputPackageName 					#label: 'Output Package Name:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 78 0.0833333 515 0.0833333 427 0.0833333 549 0.0833333 ) 					#name: #InputFieldOutputPackageName 					#flags: 12 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) ) 					#clientKey: #inputFieldOutputPackageName 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 575 0 307 0 485 200 ) 					#name: #TextEditorTearDownMethod 					#flags: 12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1556 1416 1416 ) ) 					#model: #textEditorTearDownMethod 					#tabable: false 					#tabRequiresControl: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 570 0 53 0 80 17 ) 					#name: #LabelSetUpMethod 					#label: 'setUp Method' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 570 0 285 0 100 17 ) 					#name: #LabelTearDownMethod 					#label: 'tearDown Method' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 576 0 521 0 478 150 ) 					#name: #GroupBoxTypeInfo 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) ) 					#label: 'Type Info' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 886 0 719 0 180 50 ) 					#name: #GenerateTestButton 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #generateTests 					#tabable: false 					#label: 'Generate Tests' 					#style: #'AnimationOverview-14-TightSqueeze' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 814 0 609 0 93 33 ) 					#name: #ActionButtonPlayType 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #play 					#tabable: false 					#label: 'Play' 					#style: #'AnimationOverview-12-TightSqueeze' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 924 0 609 0 93 33 ) 					#name: #ActionButtonRecType 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #rec 					#tabable: false 					#label: 'Rec' 					#style: #'AnimationOverview-12-TightSqueeze' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 96 627 520 663 ) 					#name: #MenuButtonFitness 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1646 1542 1542 ) ) 					#model: #fitness 					#menu: #fitnessMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 34 645 ) 					#name: #LabelFitness 					#label: 'Fitness:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.GroupBoxSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.Rectangle} 784 543 1046 657 ) 					#name: #GroupBoxCreateTypeInfo 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) ) 					#label: 'Create TypeInfo' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 602 567 ) 					#name: #LabelSelectTypeInfo 					#label: 'Select typeInfo:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 604 601 760 635 ) 					#name: #MenuButtonTypeInfo 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1646 1542 1542 ) ) 					#model: #typeInfo 					#menu: #typeInfoMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 812 575 ) 					#name: #LabelCreateTypeInfo 					#label: 'Key:' 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 858 565 1016 601 ) 					#name: #InputFieldKeyTypeInfo 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1646 1542 1542 ) ) 					#model: #keyTypeInfo ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 698 0 719 0 180 50 ) 					#name: #ActionButtonDiscard 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #discardChanges 					#tabable: false 					#label: 'Discard Changes' 					#style: #'AnimationOverview-14-TightSqueeze' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 510 0 719 0 180 50 ) 					#name: #ActionButtonSaveConfig 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #saveConfiguration 					#tabable: false 					#label: 'Save Configuration' 					#style: #'AnimationOverview-14-TightSqueeze' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="SemanticsTools-Extensions" selector="addTestClassGenerated">addTestClassGenerated	&lt;menuItem: 'Add Test Class Generated'						nameKey: nil			enablement: #isClassSelected			indication: nil			menu: #(#classMenu )			position: 85.1&gt;	| aClass package generatedClass |	aClass := self selectedClass fullName.	package := state packages first name.	generatedClass := self addTestClassOf: aClass inPackage: package, '-Test'.	generatedClass targetClassName: aClass.	generatedClass targetPackageRegex: package.	generatedClass aClass: self selectedClass.	self changeConfigurationOf: generatedClass.	^self</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="SemanticsTools-Extensions" selector="SemanticsMenuIcon">SemanticsMenuIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #SemanticsMenuIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 18@18 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 4111 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 8191 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111 ) ) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[254 170 90 171 240 0 0 0 234 169 86 170 176 0 0 0 234 165 5 170 176 0 0 0 234 148 81 106 176 0 0 0 234 81 84 90 176 0 0 0 234 69 5 26 176 0 0 0 233 68 1 22 176 0 0 0 229 64 16 21 176 0 0 0 214 69 20 25 112 0 0 0 214 65 69 25 112 0 0 0 229 64 64 21 176 0 0 0 233 68 1 22 176 0 0 0 234 69 5 26 176 0 0 0 234 81 84 90 176 0 0 0 234 148 81 106 176 0 0 0 234 165 5 170 176 0 0 0 234 169 86 170 176 0 0 0 254 170 90 171 240 0 0 0])</body><body package="SemanticsTools-Extensions" selector="VWTestRunnerIcon">VWTestRunnerIcon	"Tools.UIMaskEditor new openOnClass: self andSelector: #VWTestRunnerIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 19@19 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5460 5460 5460 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8191 0 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 0 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0 ) ) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 4111 4111 ) ) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@ADQDADQDADQD@@@@ADQDADQDADQD@@@@ADQDADQDADQD@@@@ADQDADQD@QDQ@@@@ADQDADQD@QDQ@@@@ADQDADQD@QDQ@@@@ADQDADQD@QDQ@@@@ADQDADQD@QDQ@@@@ADQD@"H"@QDQ@@@@ADQD@"H"@QDQ@@@@ADQD@"H"@QDQ@@@@@3L3@"H"@QDQ@@@@@3L3@"H"@QDQ@@@@@3L3@"H"@QDQ@@@@@3L3@"H"@QDQ@@@@@3L3@"H"@QDQ@@@@@3L3@"H"@QDQ@@@@@@@@@@@@@@@@@@@@'))</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>semantics</category><body package="SemanticsTools-Extensions" selector="openTestRunner">openTestRunner	&lt;menuItem: 'Test Runner'		icon: #VWTestRunnerIcon		nameKey: nil		enablement: #canAccessTestRunner		indication: nil		menu: #(#menuBar #tools #semanticsTools) 		position: 1.01&gt;	&lt;menuItem: #(#TestRunnerWindow #TestRunner 'Test Runner')		icon: #VWTestRunnerIcon		nameKey: nil		menu: #(#launcherToolBar)		position: 40.01		helpText: #(#OpenTestRunner #TestRunner 'Open Test Runner')&gt;	VWTestRunner.TestRunner open</body><body package="SemanticsTools-Extensions" selector="semanticsTools">semanticsTools	&lt;submenu: 'Semantics Developer Tools'		nameKey: #semanticsTools		menu: #(#menuBar #tools)		position: 200.02&gt;</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.Navigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigatorType cachedSelectors windowLabel </inst-vars><class-inst-vars>navigatorSpecBlocks </class-inst-vars><imports>			Store.*			</imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>