<?xml version="1.0"?><st-source><!-- Name: FuzzyInstallerDbIdentifier: nilDbTrace: nilPackageName: FuzzyInstallerParcel: #('FuzzyInstaller' )ParcelName: FuzzyInstallerPrintStringCache: nilDate: 7:09:12 am July 24, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on July 24, 2020 at 7:09:12 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VWFuzzyTester</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FussyTesting</category><attributes><package>FuzzyInstaller</package></attributes></class><class><name>DinamicDelay</name><environment>Smalltalk</environment><super>Core.Delay</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FussyTesting</category><attributes><package>FuzzyInstaller</package></attributes></class><methods><class-id>VWFuzzyTester</class-id> <category>As yet unclassified</category><body package="FuzzyInstaller" selector="allParcelsAreLoaded">allParcelsAreLoaded	self filesList do: [:fileName | self typeFiles do: 			[:fileType | 			| file |			file := (self defaultDirectory , '\' , fileName , '.' , fileType) asFilename.			file definitelyExists 				ifTrue: [nil]				ifFalse: [^false]]]. 	^true</body><body package="FuzzyInstaller" selector="default">default	^(Store.ConnectionProfile new) name: self repositoryName; driverClassName: 'PostgreSQLEXDIConnection'; environment: 'store.cincomsmalltalk.com:5432_store_public'; userName: 'guest'; password: 'guest'; tableOwner: 'BERN'</body><body package="FuzzyInstaller" selector="defaultDirectory">defaultDirectory	^'C:\Fuzzy'</body><body package="FuzzyInstaller" selector="defaultInstallerName">defaultInstallerName	^'FuzzyInstaller.bat'</body><body package="FuzzyInstaller" selector="downloadFiles">downloadFiles	| textFile cr stream installerFile |	installerFile := self initializeDirectory.	self removeFiles.	cr := String with: Character cr.	textFile := '#!/bin/sh' , cr , 'cd ' , self defaultDirectory , cr.	self filesList do: [:fileName | self typeFiles			do: 				[:typeFile | 				| file |				file := fileName , '.' , typeFile.				textFile := textFile , 'bitsadmin /transfer mydownloadjob /download /priority normal "https://raw.githubusercontent.com/OBJECTSEMANTICS/SmallSuiteGenerator/master/VW7.x/' , file , '" "' , self defaultDirectory , '\' , file , '"' , cr]].	stream := installerFile appendStream.	[stream nextPutAll: textFile; flush]		valueNowOrOnUnwindDo: [stream == Transcript				ifTrue: [nil]				ifFalse: [stream close]].	Win32Environment spawnProgram: self defaultDirectory , '\' , self defaultInstallerName argumentLine: ''.	^self</body><body package="FuzzyInstaller" selector="filesList">filesList	^ #('Method Wrapper Base' 'SpyLite' 'SpyLite-Scenario' 'SpyLite-Tests' 'SpyLite-Extensions' 'SmallSuiteGenerator' 'SSG-Extensions' 'SSG-UI')</body><body package="FuzzyInstaller" selector="initializeDirectory">initializeDirectory	| file |	file := (self defaultDirectory asFilename). 	file definitelyExists ifFalse: [file makeDirectory].	file := (self defaultDirectory , '\' , self defaultInstallerName) asFilename.	file definitelyExists ifTrue: [file delete].	^file</body><body package="FuzzyInstaller" selector="install">install		[self downloadFiles.	DinamicDelay		waitUntilComeTrue: [self allParcelsAreLoaded]		withTickTime: 100		withTimeout: 150000		atTimeoutDo: [Error raiseSignal].	self loadParcels]		on: Error do: [:error |  Dialog warn: 'We couldn''t load the FussyTesting project'].	^self</body><body package="FuzzyInstaller" selector="loadParcels">loadParcels	self filesList do: [:fileName | [Parcel loadParcelFrom: self defaultDirectory , '\' , fileName , '.pcl']			on: GenericException do: [:exc | exc resume]].	^self</body><body package="FuzzyInstaller" selector="removeFiles">removeFiles	self filesList do: [:fileName | self typeFiles			do: [:typeFile | |file|				file := (self defaultDirectory , '\' , fileName , '.' , typeFile) asFilename.				file definitelyExists ifTrue: [ file delete]]]</body><body package="FuzzyInstaller" selector="repositoryName">repositoryName	^'public_store'</body><body package="FuzzyInstaller" selector="repositoryProfile">repositoryProfile	(Store.RepositoryManager.Repositories select: [:rep | rep name = self repositoryName]) ifEmpty: [Store.RepositoryManager.Repositories add: self default].	^(Store.RepositoryManager.Repositories select: [:rep | rep name = self repositoryName]) last </body><body package="FuzzyInstaller" selector="typeFiles">typeFiles	^#('pcl' 'pst' )</body></methods><methods><class-id>VWFuzzyTester class</class-id> <category>As yet unclassified</category><body package="FuzzyInstaller" selector="install">install	self new install.	^self</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Delay</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delayDuration resumptionTime delaySemaphore delayInProgress absoluteTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class></st-source>