<?xml version="1.0"?><st-source><!-- Name: FuzzyInstallerDbIdentifier: nilDbTrace: nilPackageName: FuzzyInstallerParcel: #('FuzzyInstaller' )ParcelName: FuzzyInstallerPrintStringCache: nilDate: 6:49:33 am June 10, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on June 10, 2020 at 6:49:33 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DinamicDelay</name><environment>Smalltalk</environment><super>Core.Delay</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FussyTesting</category><attributes><package>FuzzyInstaller</package></attributes></class><class><name>VWFuzzyTester</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FussyTesting</category><attributes><package>FuzzyInstaller</package></attributes></class><methods><class-id>DinamicDelay</class-id> <category>As yet unclassified</category><body package="FuzzyInstaller" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>DinamicDelay class</class-id> <category>As yet unclassified</category><body package="FuzzyInstaller" selector="checkAndWaitUntilComeTrue:withTickTime:withTimeout:atTimeoutDo:">checkAndWaitUntilComeTrue: aBlock withTickTime: milliseconds withTimeout: timeout atTimeoutDo: timeoutBlock 	| tolerance aDelay |	tolerance := timeout // milliseconds.	aDelay := Delay forMilliseconds: milliseconds.	1 to: tolerance		do: 			[:count | 			aBlock value ifTrue: [^self].			aDelay wait].	timeoutBlock value</body><body package="FuzzyInstaller" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="FuzzyInstaller" selector="waitUntilComeTrue:withTickTime:withTimeout:atTimeoutDo:">waitUntilComeTrue: aBlock withTickTime: milliseconds withTimeout: timeout atTimeoutDo: timeoutBlock 	| tolerance aDelay |	tolerance := timeout // milliseconds.	aDelay := Delay forMilliseconds: milliseconds.	1 to: tolerance		do: 			[:count | 			aDelay wait.			aBlock value ifTrue: [^self]].	timeoutBlock value</body><body package="FuzzyInstaller" selector="waitUntilCondition:become:withTickTime:withTimeout:atTimeoutDo:">waitUntilCondition: aBlock become: aBool withTickTime: milliseconds withTimeout: timeout atTimeoutDo: timeoutBlock 	| tolerance aDelay |	tolerance := timeout // milliseconds.	aDelay := Delay forMilliseconds: milliseconds.	1 to: tolerance		do: 			[:count | 			aDelay wait.			(aBlock value == aBool) ifTrue: [^self]].	timeoutBlock value</body></methods><methods><class-id>VWFuzzyTester</class-id> <category>As yet unclassified</category><body package="FuzzyInstaller" selector="allParcelsAreLoaded">allParcelsAreLoaded	self filesList do: [:file |		self typeFiles do: [:type |			| batchFile batchFileHandle |			batchFile :=  self defaultDirectory,'\',file,'.',type.			batchFileHandle := batchFile asFilename.			batchFileHandle definitelyExists ifFalse: [ ^ false ]		]	].	^ true</body><body package="FuzzyInstaller" selector="default">default	^ (Store.ConnectionProfile new 		name: self repositoryName;		driverClassName: 'PostgreSQLEXDIConnection';		environment: 'store.cincomsmalltalk.com:5432_store_public';		userName: 'guest';		password: 'guest';		tableOwner: 'BERN')</body><body package="FuzzyInstaller" selector="defaultDirectory">defaultDirectory	^  'C:\Fuzzy'</body><body package="FuzzyInstaller" selector="defaultInstallerName">defaultInstallerName	^ 'FuzzyInstaller.bat'</body><body package="FuzzyInstaller" selector="downloadFiles">downloadFiles	|batchContents cr stream batchFileHandle|	batchFileHandle := self initializeDirectory.	cr := String with: Character cr.	batchContents := '#!/bin/sh', cr, 'cd ', self defaultDirectory , cr.	self filesList do: [:file | self typeFiles do: [:type | |filename|		filename :=  file,'.',type.		batchContents := batchContents,  'bitsadmin /transfer mydownloadjob /download /priority normal "https://raw.githubusercontent.com/OBJECTSEMANTICS/SmallSuiteGenerator/master/VW7.x/',filename, '" "', self defaultDirectory,'\',filename,'"', cr ]].	stream := batchFileHandle appendStream.	[ stream			nextPutAll: batchContents;			flush.		]		valueNowOrOnUnwindDo: 			[(stream == Transcript)				 ifFalse: [					stream close.				].			].	Win32Environment spawnProgram: self defaultDirectory, '\',self defaultInstallerName argumentLine: ''.</body><body package="FuzzyInstaller" selector="filesList">filesList	^ #('Method Wrapper Base' 'SpyLite' 'SpyLite-Extensions' 'SmallSuiteGenerator' 'SmallSuiteGenerator-Extensions' )</body><body package="FuzzyInstaller" selector="initializeDirectory">initializeDirectory	| batchFile batchFileHandle |	batchFile :=  self defaultDirectory.	batchFileHandle := batchFile asFilename.	batchFileHandle definitelyExists ifFalse: [ batchFileHandle makeDirectory. ].	batchFile := self defaultDirectory, '\',self defaultInstallerName.	batchFileHandle := batchFile asFilename.	batchFileHandle definitelyExists ifTrue: [batchFileHandle delete].	^ batchFileHandle</body><body package="FuzzyInstaller" selector="install">install		[self downloadFiles.	DinamicDelay 		waitUntilComeTrue: [ self allParcelsAreLoaded ]		withTickTime: 100		withTimeout: 15000		atTimeoutDo: [ Error raiseSignal ].	self loadParcels]	on: Error	do: [:e | Dialog warn: 'We couldn''t load the FussyTesting project']</body><body package="FuzzyInstaller" selector="loadParcels">loadParcels	self filesList do: [:file|		[Parcel loadParcelFrom: self defaultDirectory,'\',file, '.pcl']		on: GenericException		do: [:exc | exc resume]	]</body><body package="FuzzyInstaller" selector="repositoryName">repositoryName	^ 'public_store'</body><body package="FuzzyInstaller" selector="repositoryProfile">repositoryProfile	|rep profile|		rep := Store.RepositoryManager.Repositories select: [:each | each name = self repositoryName ].	rep ifEmpty: [Store.RepositoryManager.Repositories add: self default.].		profile := (Store.RepositoryManager.Repositories select: [:each | each name = self repositoryName ]) last.	^ profile</body><body package="FuzzyInstaller" selector="typeFiles">typeFiles	^ #('pcl' 'pst')</body></methods><methods><class-id>VWFuzzyTester class</class-id> <category>As yet unclassified</category><body package="FuzzyInstaller" selector="install">install	self new install</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Delay</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>delayDuration resumptionTime delaySemaphore delayInProgress absoluteTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class></st-source>