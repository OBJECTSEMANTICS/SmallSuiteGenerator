<?xml version="1.0"?><st-source><!-- Name: TestRunnerDbIdentifier: nilDbTrace: nilPackageName: TestRunnerParcel: #('testrunner' )ParcelName: TestRunnerPrintStringCache: nilDate: 7:23:20 am July 2, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on July 2, 2020 at 7:23:20 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>TestRunner</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classList packageList actionLabel testCount defects packageSearchInput testCaseSearchInput defectListSelectionOption packageSelectionBuilder packageCoverageInput listPackageCoverage listOfSelectedPackages coverageResult listMethodCoverage textEditorMethodCoverage coverageResultString packageCoverageBuilder coverageResultMethods inputFieldTargetPackage inputFieldPopulationSize inputFieldNumberOfStatements inputFieldNumberOfGenerations textEditorLastMessage inputFieldStopIterations inputFieldBlackList listBlackMethod textEditorSetUpMethod inputFieldOutputPackageName textEditorTearDownMethod defautlType fitnessValue selectedGeneratedClass configurationGeneratedClassBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>TestRunner</package></attributes></class><comment><class-id>TestRunner</class-id><body>TestRunner is a class Application to run multiple testsInstance Variables:	actionLabel	&lt;AnnouncementSet | ExceptionSet | SequenceableCollection&gt; label to show test running information	classList	&lt;MultiSelectionInList&gt; list of all classes to testing	defects	&lt;(Collection of: TestCaseAnnouncement) | History&gt; defects when you run tests	packageList	&lt;MultiSelectionInList&gt;	list of all packages with tests	packageSearchInput	&lt;ValueModel&gt;	search input for packages	testCaseSearchInput	&lt;ValueModel&gt;	search input for test classes	testCount	&lt;ArithmeticValue&gt;	total of tests running in TestRunner</body></comment><methods><class-id>TestRunner</class-id> <category>interface opening</category><body package="TestRunner" selector="changeConfigurationOfClass">changeConfigurationOfClass	| class |	class := (self classNamed: (classList selections) first) at: 1.	(SConfigClassView on: class) open.</body><body package="TestRunner" selector="openCoverageResultWindow">openCoverageResultWindow	| bldr result |		result := coverageResult methodCoverage.	(packageCoverageBuilder notNil and: [packageCoverageBuilder window isOpen])		ifTrue: [packageCoverageBuilder window raise ]		ifFalse: [			packageCoverageBuilder := (bldr := UIBuilder new).			bldr source: self.			bldr add: (self class				interfaceSpecFor: #windowCoverageSpec).			bldr window				application: self;				label: result asString, '%', ' Code Coverage';				beSlave.			bldr open. ].</body><body package="TestRunner" selector="openPackageSelectionWindow">openPackageSelectionWindow	| bldr |	listPackageCoverage list: self defaultAllPackageList.	packageCoverageInput := String new asValue.	(packageSelectionBuilder notNil and: [packageSelectionBuilder window isOpen])		ifTrue: [packageSelectionBuilder window raise ]		ifFalse: [			packageSelectionBuilder := (bldr := UIBuilder new).			bldr source: self.			bldr add: (self class				interfaceSpecFor: #windowPackagesSpec).			bldr window				application: self;				beSlave.			bldr open. ].</body><body package="TestRunner" selector="postBuildWith:">postBuildWith: aBuilder	self packageSearchInput onChangeSend: #searchPackages to: self.	self testCaseSearchInput onChangeSend: #searchTestCase to: self.	self classList selectionIndexHolder onChangeSend: #selectClasses to: self.    	self packageList selectionIndexHolder onChangeSend: #selectPackages to: self.    	self listMethodCoverage selectionIndexHolder onChangeSend: #changedMethod to: self.</body></methods><methods><class-id>TestRunner</class-id> <category>updating</category><body package="TestRunner" selector="updateDefectButtons">updateDefectButtons	| enable |	enable := self defectsExist.	#(RunDefectsButton DebugButton) do:		[:each | 	(self wrapperAt: each) isEnabled: enable]</body><body package="TestRunner" selector="updateForDebugging">updateForDebugging	self setTestingAttributes.	self setTestLabel: 'Debugging...'.</body><body package="TestRunner" selector="updateForDebuggingDefect">updateForDebuggingDefect	self setRunningDefectsAttributes.	self setTestLabel: 'Debugging : '.</body><body package="TestRunner" selector="updateForRunning">updateForRunning	self setRunningAttributes.	self setTestLabel: 'Running...'.</body><body package="TestRunner" selector="updateForRunningDefects">updateForRunningDefects	self setRunningDefectsAttributes.	self setTestLabel: 'Running...'.</body><body package="TestRunner" selector="updateRunButtons">updateRunButtons	self runButtonsTools do:		[:each | 			(self wrapperAt: each) enable].</body></methods><methods><class-id>TestRunner</class-id> <category>actions</category><body package="TestRunner" selector="filterPackageCoverage">filterPackageCoverage	| filteredPackages  filterInput |	filterInput := packageCoverageInput value.	filteredPackages := self defaultAllPackageList.	self listPackageCoverage list: filteredPackages.	filterInput isEmpty		ifFalse: [ 			filteredPackages := (self listPackageCoverage list select: [ :package | (package  asLowercase) ahsContainsString: filterInput asLowercase]) ].	self listPackageCoverage list: filteredPackages.</body><body package="TestRunner" selector="runCoverageOfPackages">runCoverageOfPackages	| packageToCheckCoverage suite |	(self enableCoverage)		ifTrue: [ 			packageToCheckCoverage := self listPackageCoverage selection value.			suite := SUnit.TestSuite new.			self testCasesSelectors do: [ :test | suite addTest: test ].			coverageResult := (Spy1.SLProfilerCoverage profile: [ suite run ]				inPackagesMatching:  packageToCheckCoverage).			listMethodCoverage list: coverageResult allMethods.			self openCoverageResultWindow ]		ifFalse: [ Dialog wuiError: 'Error: Package not selected, select a package.' for: nil  ]</body><body package="TestRunner" selector="runTests">runTests	| suite result |	[		self subscribeToAnnouncements.		self updateForRunning.		suite := SUnit.TestSuite new.		self testCasesSelectors do: [ :test | suite addTest: test ].		testCount := self testCasesSelectors size.		result := [suite run] ifCurtailed:  [self setTestLabel: (#Failed &lt;&lt; #browser &gt;&gt; 'Failed')].	] ensure: [SUnit.TestCase unsubscribe: self].	self 		setTestLabel: (#x1QPassedORFailed2pRun3pFailed4pErrors &lt;&lt; #browser &gt;&gt; '&lt;1?Passed:Failed&gt;: &lt;2p&gt; run, &lt;3p&gt; failed, &lt;4p&gt; errors'				expandMacrosWith: result allPassed				with: result ranCount				with: result failureCount				with: result errorsCount).	result allPassed 		ifTrue: [ 			self updateForPassed.			defectListSelectionOption list: OrderedCollection new. ]		ifFalse: 			[ defects := result defects.			self assignDefectsToListOption.			self updateForFailed. ].</body><body package="TestRunner" selector="subscribeToAnnouncements">subscribeToAnnouncements	SUnit.TestCase		unsubscribe: self from: SUnit.Result;		unsubscribe: self from: SUnit.Started;		when: SUnit.Result send: #testcaseResult: to: self</body></methods><methods><class-id>TestRunner</class-id> <category>actions-labeling</category><body package="TestRunner" selector="setRunningAttributes">setRunningAttributes	self setRunningDefectsAttributes.	defects := nil.</body></methods><methods><class-id>TestRunner</class-id> <category>interface</category><body package="TestRunner" selector="disableButtons">disableButtons	builder isNil ifTrue: [^self].	#(RunTestButton DebugButton RunProfiledButton RunCoverageButton RunDefectsButton) do: [:each | (self wrapperAt: each) isEnabled: false].</body><body package="TestRunner" selector="disableTestingButtons">disableTestingButtons	(self widgetWithID: #RunTestButton) disable.	(self widgetWithID: #RunProfiledButton) disable.	(self widgetWithID: #DebugButton) disable.	(self widgetWithID: #RunCoverageButton) disable.	(self widgetWithID: #RunDefectsButton) disable.</body><body package="TestRunner" selector="enableTestingButtons">enableTestingButtons	(self widgetWithID: #RunTestButton) enable.	(self widgetWithID: #RunProfiledButton) enable.	(self widgetWithID: #RunCoverageButton) enable.</body></methods><methods><class-id>TestRunner</class-id> <category>accessing</category><body package="TestRunner" selector="classesOfPackages:">classesOfPackages: t1 	"	***This is decompiled code.*** 	No source was available"	| t2 t3 |	t2 := OrderedCollection new.	(t3 := t1 collect: [:t4 | (self allClassesOfPackage: t4)					select: [:t5 | self testCaseNames includes: t5 name]]) do: [:t6 | t2 addAll: t6].	^t2 collect: [:t7 | 		t7 environment isNil			ifTrue: [ t7 name ]			ifFalse: [ t7 instanceBehavior printString ]		 ]</body><body package="TestRunner" selector="classNamed:">classNamed: t1 	"	***This is decompiled code.*** 	No source was available"	^ Smalltalk allClasses select: [:t2 | t2 instanceBehavior printString = t1 asString]</body><body package="TestRunner" selector="coverageResult">coverageResult	^ coverageResult</body><body package="TestRunner" selector="coverageResultString">coverageResultString	^ coverageResultString</body><body package="TestRunner" selector="listMethodCoverage">listMethodCoverage	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listMethodCoverage isNil		ifTrue:			[listMethodCoverage := SelectionInList new]		ifFalse:			[listMethodCoverage]</body><body package="TestRunner" selector="listPackageCoverage">listPackageCoverage	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^listPackageCoverage isNil		ifTrue:			[listPackageCoverage := SelectionInList new]		ifFalse:			[listPackageCoverage]</body><body package="TestRunner" selector="packageCoverageInput">packageCoverageInput	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^packageCoverageInput isNil		ifTrue:			[packageCoverageInput := String new asValue]		ifFalse:			[packageCoverageInput]</body><body package="TestRunner" selector="runButtonsTools">runButtonsTools	^ #(RunTestButton RunProfiledButton RunCoverageButton)</body><body package="TestRunner" selector="testCaseNames">testCaseNames	"	***This is decompiled code.*** 	No source was available"	^ (Smalltalk allClasses select: [:t1 | t1 name endsWith: 'Test' ]) collect: [:class | class instanceBehavior printString  ]</body><body package="TestRunner" selector="testCasesSelectors">testCasesSelectors	"	***This is decompiled code.*** 	No source was available"	| classes t2 t3 |	t3 := OrderedCollection new.	self selectedClasses do: [:t4 | (classes := self classNamed: t4) isEmpty			ifTrue: [nil]			ifFalse: 				[					t2 := classes first selectors.					t3 addAll: ((t2 select: [:t5 | self testClassSelectors includes: t5])						collect: [:t6 | (self classNamed: t4) first selector: t6])]].	^t3</body><body package="TestRunner" selector="textEditorMethodCoverage">textEditorMethodCoverage	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textEditorMethodCoverage isNil		ifTrue:			[textEditorMethodCoverage := String new asValue]		ifFalse:			[textEditorMethodCoverage]</body></methods><methods><class-id>TestRunner</class-id> <category>interface-actions</category><body package="TestRunner" selector="deselectAllClassesOfList">deselectAllClassesOfList	classList clearAll</body><body package="TestRunner" selector="deselectAllPackagesOfList">deselectAllPackagesOfList	packageList clearAll</body><body package="TestRunner" selector="selectAllClassesOfList">selectAllClassesOfList	classList selectAll</body><body package="TestRunner" selector="selectAllPackagesOfList">selectAllPackagesOfList	packageList selectAll</body></methods><methods><class-id>TestRunner</class-id> <category>initialize-release</category><body package="TestRunner" selector="defaultAllPackageList">defaultAllPackageList	^ (Store.Registry allPackages)        	collect: [ :package | package name ]</body><body package="TestRunner" selector="initialize">initialize	super initialize.    	packageList := MultiSelectionInList with: self defaultPackageList.    	listPackageCoverage := SelectionInList with: self defaultAllPackageList.    	classList := MultiSelectionInList with: self defaultClassList.    	listMethodCoverage := SelectionInList with: OrderedCollection new.    	listOfSelectedPackages := OrderedCollection new.    	self actionLabel: ''.    	coverageResultString := ''.</body></methods><methods><class-id>TestRunner</class-id> <category>actions-covering</category><body package="TestRunner" selector="addEmphasisToText:withMethod:">addEmphasisToText: aText withMethod: aSpyMethod	| blocksMethod |	blocksMethod := aSpyMethod blocks copy.	blocksMethod first wasExecuted		ifTrue: [			aText addEmphasis: (Array with: #color -&gt; ColorValue.Green) 						removeEmphasis: #() 						allowDuplicates: true 						from: 0 to: (blocksMethod first stop). ]		ifFalse: [			aText addEmphasis: (Array with: #color -&gt; ColorValue.Red) 						removeEmphasis: #() 						allowDuplicates: true 						from: 0 to: (blocksMethod first stop).			^ aText ].		blocksMethod doWithIndex: [ :block :index |			(index = 1)				ifFalse: [					(block wasExecuted)						ifFalse: [							aText addEmphasis: (Array with: #color -&gt; ColorValue.Yellow) 							removeEmphasis: #() 							allowDuplicates: true 							from: (block start) to: (block stop). ] ] ].	^ aText</body><body package="TestRunner" selector="changedMethod">changedMethod	| selectedMethod txt |	selectedMethod := self listMethodCoverage selection.	selectedMethod isNil		ifTrue: [ self textEditorMethodCoverage value: '' ]		ifFalse: [			txt := (selectedMethod blocks at: 1) code asText.			txt := self addEmphasisToText: txt withMethod: (selectedMethod copy).			self textEditorMethodCoverage value: txt. ].</body></methods><methods><class-id>TestRunner</class-id> <category>validation</category><body package="TestRunner" selector="canAccessGenerationTests">canAccessGenerationTests	^ (Store.Registry allPackages select: [ :package | package name ahsContainsString: 'SmallSuiteGenerator' ]) isNotEmpty</body><body package="TestRunner" selector="enableCoverage">enableCoverage	^ self listPackageCoverage selection value isNotNil</body><body package="TestRunner" selector="isOnlyOneClassGenerated">isOnlyOneClassGenerated	| selectedClass result |	(classList selectionIndexHolder value size = 1)		ifTrue: [			selectedClass := (self classNamed: (classList selections) first) at: 1.			result := selectedClass superclass name ahsContainsString: 'SConfigGenerationTestCase'.			^ result ]		ifFalse: [ ^ false ].</body><body package="TestRunner" selector="isSelectedMethodsInBlackList">isSelectedMethodsInBlackList	^ listBlackMethod selectionIndexHolder value size &gt; 0</body><body package="TestRunner" selector="keyPressOnlyNumbers:">keyPressOnlyNumbers: ev	"Validate the characters."	| ch ascii |	ch := ev keyValue.	ascii := ch asInteger.	(ascii == 8)		ifTrue: [^ev].	ch isDigit		ifFalse: [			Dialog warn: 'Please enter only digits'.			^nil].	^ev</body><body package="TestRunner" selector="lengthOfNumber:">lengthOfNumber: aController	| entry lengthLimit |	lengthLimit := 7.	entry := aController editValue asString size.	^	entry asNumber &lt;= lengthLimit			ifTrue: [ true ]			ifFalse: [			Dialog warn: ('Please introduce a number with a max of ', lengthLimit asString, ' digits'). 			false ]</body></methods><methods><class-id>TestRunner class</class-id> <category>interface specs</category><body package="TestRunner" selector="windowCoverageSpec">windowCoverageSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowCoverageSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: '' 			#min: #(#{Core.Point} 790 470 ) 			#max: #(#{Core.Point} 790 470 ) 			#bounds: #(#{Graphics.Rectangle} 960 440 1750 910 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #white ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 20 0 50 0 220 400 ) 					#name: #ListMethodCoverage 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 2253 1931 1931 ) ) 					#model: #listMethodCoverage 					#tabable: false 					#selectionType: #highlight 					#autoSelect: false ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 250 0 50 0 520 400 ) 					#name: #TextEditorMethodCoverage 					#flags: 12 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 2293 2040 2040 ) ) 					#model: #textEditorMethodCoverage 					#tabable: false 					#isReadOnly: true 					#tabRequiresControl: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 25 0 13 0 77 32 ) 					#name: #LabelMethodCoverage 					#label: 'Methods' 					#style: #'Arbor-18' ) ) ) )</body><body package="TestRunner" selector="windowPackagesSpec">windowPackagesSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowPackagesSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Packages' 			#min: #(#{Core.Point} 390 360 ) 			#max: #(#{Core.Point} 390 360 ) 			#bounds: #(#{Graphics.Rectangle} 960 475 1350 835 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #white ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 285 0 40 0 85 25 ) 					#name: #FilterPackagesCoverageButton 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #filterPackageCoverage 					#tabable: false 					#label: 'Filter' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 85 0 40 0 180 25 ) 					#name: #PackagesCoverageInput 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 2040 1846 1846 ) ) 					#model: #packageCoverageInput 					#tabable: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 20 0 40 0 60 25 ) 					#name: #LabelPackageFilter 					#label: 'Packages:' 					#style: #'Arbor-12' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 15 0 80 0 360 230 ) 					#name: #ListPackageCoverage 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 2040 1846 1846 ) ) 					#model: #listPackageCoverage 					#tabable: false 					#multipleSelections: false 					#selectionType: #highlight 					#autoSelect: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 20 0 10 0 241 25 ) 					#name: #LabelMessageFilterPackages 					#label: 'Select the packages to run coverage' 					#style: #'Arbor-14-Squeeze' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 151 0 320 0 96 27 ) 					#name: #RunCoverageOfPackages 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #runCoverageOfPackages 					#tabable: false 					#label: 'Run Coverage' 					#defaultable: true ) ) ) )</body><body package="TestRunner" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Test Runner' 			#min: #(#{Core.Point} 854 424 ) 			#max: #(#{Core.Point} 854 424 ) 			#bounds: #(#{Graphics.Rectangle} 960 475 1814 899 ) 			#colors: 			#(#{UI.LookPreferences} 				#setForegroundColor: #(#{Graphics.ColorValue} #white ) 				#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 200 0 370 0 100 30 ) 					#name: #RunProfiledButton 					#flags: 40 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #profileTests 					#tabable: false 					#label: 'Run Profiled' 					#style: #'Arbor-12' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 25 0 370 0 100 30 ) 					#name: #RunTestButton 					#flags: 40 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #runTests 					#tabable: false 					#label: 'Run Selected' 					#style: #'Arbor-12' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 570 0 370 0 100 30 ) 					#name: #DebugButton 					#flags: 40 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #debugTests 					#tabable: false 					#label: 'Debug Defects' 					#style: #'Arbor-12' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 730 0 370 0 100 30 ) 					#name: #RunDefectsButton 					#flags: 40 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#model: #runDefects 					#tabable: false 					#label: 'Run Defects' 					#style: #'Arbor-12' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 20 0 70 0 200 280 ) 					#name: #PackageSelectionList 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1949 1742 1742 ) ) 					#model: #packageList 					#tabable: false 					#menu: #selectionPackageMenu 					#multipleSelections: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 245 0 69 0 270 280 ) 					#name: #ClassSelectionList 					#flags: 15 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1949 1742 1742 ) ) 					#model: #classList 					#tabable: false 					#menu: #selectionClassMenu 					#multipleSelections: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 550 0 42 0 285 32 ) 					#name: #TestResult 					#label: 'No Tests' 					#style: #'Arbor-16' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 20 0 35 0 200 25 ) 					#name: #PackageSearchInput 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1949 1742 1742 ) ) 					#helpText: 'Package #1 | Package #2' 					#model: #packageSearchInput 					#tabable: false 					#style: #'Arbor-14' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 245 0 36 0 270 25 ) 					#name: #TestCaseSearchInput 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 1949 1742 1742 ) ) 					#helpText: 'TestCase #1 | TestCase #2' 					#model: #testCaseSearchInput 					#tabable: false 					#style: #'Arbor-14' ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 233 0 15 0 4 340 ) 					#name: #Divider1 					#orientation: #vertical ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 529 0 15 0 4 340 ) 					#name: #Divider2 					#orientation: #vertical ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 22 0.0 10 0 75 25 ) 					#name: #PackageLabel 					#label: 'Packages' 					#style: #'Arbor-14-Squeeze' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 248 0.0 10 0 60 25 ) 					#name: #ClassesLabel 					#label: 'Classes' 					#style: #'Arbor-14-Squeeze' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 15 0 362 0 825 50 ) 					#name: #GroupBox1 					#style: #'AnimationOverview-12-TightSqueeze' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 390 0 370 0 100 30 ) 					#name: #RunCoverageButton 					#flags: 40 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) ) 					#helpText: '' 					#model: #openPackageSelectionWindow 					#tabable: false 					#label: 'Run Coverage' 					#style: #'Arbor-12' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 548 96 840 339 ) 					#name: #DefectList 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #white ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 2081 1970 1970 ) ) 					#model: #defectListSelectionOption 					#tabable: false 					#selectionType: #highlight 					#autoSelect: false ) ) ) )</body></methods><methods><class-id>TestRunner class</class-id> <category>resources</category><body package="TestRunner" selector="blackListMenu">blackListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #blackListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Remove selected methods' 				#enabled: false 				#value: #removeSelectedMethodsOfBlackList 				#enablementSelector: #isSelectedMethodsInBlackList ) ) #(1 ) nil ) decodeAsLiteralArray</body><body package="TestRunner" selector="selectionClassMenu">selectionClassMenu	"Tools.MenuEditor new openOnClass: self andSelector: #selectionClassMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Select all classes' 				#value: #selectAllClassesOfList ) 			#(#{UI.MenuItem} 				#rawLabel: 'Deselect all classes' 				#value: #deselectAllClassesOfList ) 			#(#{UI.MenuItem} 				#rawLabel: 'Change Configuration' 				#enabled: false 				#value: #changeConfigurationOfClass 				#enablementSelector: #isOnlyOneClassGenerated ) ) #(2 1 ) nil ) decodeAsLiteralArray</body><body package="TestRunner" selector="selectionPackageMenu">selectionPackageMenu	"Tools.MenuEditor new openOnClass: self andSelector: #selectionPackageMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Select all packages' 				#value: #selectAllPackagesOfList ) 			#(#{UI.MenuItem} 				#rawLabel: 'Deselect all packages' 				#value: #deselectAllPackagesOfList ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>