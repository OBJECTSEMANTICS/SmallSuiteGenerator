<?xml version="1.0"?><st-source><!-- Name: SpyLite-TestsBundleName: SpyLite-TestsBundleStructure: a Store.BundleForParcelParcel: #('SpyLite-Tests' )ParcelName: SpyLite-TestsPrerequisiteParcels: #(#('SpyLite' '' ) #('SpyLite-Scenario' '' ) )Date: 12:38:41 am September 18, 2020 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on September 18, 2020 at 12:38:41 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SLBlockTest</name><environment>Spy1</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Tests</category><attributes><package>SpyLite-Tests</package></attributes></class><class><name>SSTypeCollectorMethodTest</name><environment>Spy1</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeCollectorMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Tests</category><attributes><package>SpyLite-Tests</package></attributes></class><comment><class-id>Spy1.SSTypeCollectorMethodTest</class-id><body>Missing comment</body></comment><class><name>SLProfilerCoverageTest</name><environment>Spy1</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Tests</category><attributes><package>SpyLite-Tests</package></attributes></class><comment><class-id>Spy1.SLProfilerCoverageTest</class-id><body>Missing comment</body></comment><class><name>SLSummaryStatementTest</name><environment>Spy1</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SpyLite-Tests</category><attributes><package>SpyLite-Tests</package></attributes></class><methods><class-id>Spy1.SLBlockTest</class-id> <category>running</category><body package="SpyLite-Tests" selector="setUp">setUp	block := SLBlock new</body></methods><methods><class-id>Spy1.SLBlockTest</class-id> <category>testing</category><body package="SpyLite-Tests" selector="testExecutionOfBlock">testExecutionOfBlock	self assert: block wasExecuted equals: false.	block executed.	self assert: block wasExecuted equals: true.	block noExecuted.	self assert: block wasExecuted equals: false.</body></methods><methods><class-id>Spy1.SSTypeCollectorMethodTest</class-id> <category>tests</category><body package="SpyLite-Tests" selector="testSelectLiteralsOf">testSelectLiteralsOf	"	***This is decompiled code.*** 	No source was available"	| t1 t2 |	t1 := 'test1     ^ 1    '.	typeCollectorMethod selectLiteralsOf: t1.	t2 := typeCollectorMethod dictLiterals.	self assertCollection: t2 keys hasSameElements: (Array with: (self nameOf: SmallInteger)).	self assertCollection: (t2 values flatCollect: [:t3 | t3])		hasSameElements: #(1 ).	t1 := 'test2        |number string|        number := 2.        string := ''hello''.        number = 5 ifTrue: [string := ''world''].'.	typeCollectorMethod selectLiteralsOf: t1.	t2 := typeCollectorMethod dictLiterals.	self assertCollection: t2 keys hasSameElements: (Array with: (self nameOf: SmallInteger)			with: (self nameOf: ByteString)).	self assertCollection: (t2 values flatCollect: [:t4 | t4])		hasSameElements: #(2 5 'hello' '' 'world' ).	^self</body></methods><methods><class-id>Spy1.SLProfilerCoverageTest</class-id> <category>tests</category><body package="SpyLite-Tests" selector="testMethodCoverage">testMethodCoverage	"	***This is decompiled code.*** 	No source was available"	| t1 t2 |	t1 := SLProfilerCoverage profile: [SLCounter new]				inPackagesMatching: 'SpyLite-Scen*'.	t2 := self nameOf: SLCounter.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 0.	self		assertMethodCoverageOf: t1		on: t2		equals: 0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new one]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 1.	self		assertMethodCoverageOf: t1		on: t2		equals: ((100 * 1 / 25) asFloat round: 3).	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new anAssignment]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 1.	self		assertMethodCoverageOf: t1		on: t2		equals: 4.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new main]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 2.	self		assertMethodCoverageOf: t1		on: t2		equals: 8.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithCondition]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 2.	self		assertMethodCoverageOf: t1		on: t2		equals: 8.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methMix]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 3.	self		assertMethodCoverageOf: t1		on: t2		equals: 12.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithComposeBlocks]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 7.	self		assertMethodCoverageOf: t1		on: t2		equals: 28.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithArguments: #(2 6 8 13 5 9 11 13 )]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedMethodsOf: t1		on: t2		equals: 6.	self		assertMethodCoverageOf: t1		on: t2		equals: 24.0.	self clean: t1.	^self</body><body package="SpyLite-Tests" selector="testStatementCoverage">testStatementCoverage	"	***This is decompiled code.*** 	No source was available"	| t1 t2 |	t1 := SLProfilerCoverage profile: [SLCounter new]				inPackagesMatching: 'SpyLite-Scen*'.	t2 := self nameOf: SLCounter.	self assert: t1 numberOfAllStatements equals: 25.	self assert: t1 statementCoverage1 isEmpty.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new one]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 1.	self		assertStatementCoverageOf: t1		on: t2		equals: ((1 / 25) asFloat * 100 round: 3).	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new anAssignment]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 1.	self		assertStatementCoverageOf: t1		on: t2		equals: ((1 / 25) asFloat * 100 round: 3).	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new main]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 2.	self		assertStatementCoverageOf: t1		on: t2		equals: ((1 / 12.5) asFloat * 100 round: 3).	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithCondition]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 2.	self		assertStatementCoverageOf: t1		on: t2		equals: ((1 / 12.5) asFloat * 100 round: 3).	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methMix]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 3.	self		assertStatementCoverageOf: t1		on: t2		equals: 12.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithComposeBlocks]				inPackagesMatching: 'SpyLite-Scen*'.	self assert: t1 numberOfExecutedStatements equals: 7.	self		assertStatementCoverageOf: t1		on: t2		equals: 28.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithArguments: #(2 6 8 13 5 9 11 13 )]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 6.	self		assertStatementCoverageOf: t1		on: t2		equals: 24.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithArguments: #(1 4 6 7 )]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 6.	self		assertStatementCoverageOf: t1		on: t2		equals: 24.0.	self clean: t1.	t1 := SLProfilerCoverage profile: [SLCounter new methWithArguments: #(4 6 12 )]				inPackagesMatching: 'SpyLite-Scen*'.	self		assertNumExecutedStatementsOf: t1		on: t2		equals: 5.	self		assertStatementCoverageOf: t1		on: t2		equals: 20.0.	self clean: t1.	^self</body></methods><methods><class-id>Spy1.SLProfilerCoverageTest</class-id> <category>asserting</category><body package="SpyLite-Tests" selector="assertNumExecutedMethodsOf:on:equals:">assertNumExecutedMethodsOf: t1 on: t2 equals: t3 	"	***This is decompiled code.*** 	No source was available"	| t4 value |	t4 := t1 calculateExecutedMethodsByClass.	t4 size = 0		ifTrue: [ value := 0 ]		ifFalse: [ value := (t4 at: t2) second ].	self assert: value		equals: t3.	^self</body><body package="SpyLite-Tests" selector="assertNumExecutedStatementsOf:on:equals:">assertNumExecutedStatementsOf: t1 on: t2 equals: t3 	"	***This is decompiled code.*** 	No source was available"	| t4 value |	t4 := t1 calculateExecutedStatementsByClass.	t4 size = 0		ifTrue: [ value := 0 ]		ifFalse: [ value := (t4 at: t2) second ].	self assert: value		equals: t3.	^self</body><body package="SpyLite-Tests" selector="assertStatementCoverageOf:on:equals:">assertStatementCoverageOf: t1 on: t2 equals: t3 	"	***This is decompiled code.*** 	No source was available"	| t4 value |	t4 := t1 statementCoverage1.	t4 size = 0		ifTrue: [ value := 0 ]		ifFalse: [ value := (t4 at: t2) ].	self assert: value		equals: t3.	^self</body></methods><methods><class-id>Spy1.SLSummaryStatementTest</class-id> <category>testing</category><body package="SpyLite-Tests" selector="testCreationOfSummaryStatement">testCreationOfSummaryStatement	| summaryStatement  t1 |	t1 := 'foo		^ 1 + 1'.	summaryStatement := SLSummaryStatement with: t1 and: false.	self assert: summaryStatement code equals: t1.	self assert: summaryStatement executed equals: false.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>